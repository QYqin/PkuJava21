
Recno:: 0
URL:: http://bbs.csdn.net/topics/391064918

ParseText::
【大牛必看】课讲给想听的人，快来攒课活动申请讲师吧！-CSDN论坛-CSDN.NET-中国最大的IT技术社区 首页 精选版块 移动开发 iOS Android Qt WP 云计算 IaaS Pass/SaaS 分布式计算/Hadoop Java技术 Java SE Java Web 开发 Java EE Java其他相关 .NET技术 .NET Framework C# .NET分析与设计 ASP .NET VB .NET Web开发 PHP JavaScript ASP HTML(CSS) HTML5 Apache 开发语言/框架 Delphi VC/MFC VB C/C++ C++ Builder 其他开发语言 数据库开发 MS-SQL Server Oracle PowerBuilder Informatica 其他数据库开发 硬件/嵌入式开发 嵌入开发(WinCE) 驱动开发/核心开发 硬件设计 单片机/工控 汇编语言 VxWorks开发 Linux/Unix社区 系统维护与使用区 应用程序开发区 内核源代码研究区 驱动程序开发区 CPU和硬件区 论坛帮助 论坛牛人 论坛地图 专家问答 << >> CSDN > CSDN论坛 > Web 开发 > Apache 1 2 下一页 第 1 2 页 返回列表 管理菜单 取消置顶 置顶 推荐 锁定 移动 编辑 删除 帖子加分 取消高亮 结帖 发帖 回复 关注 rmyymr 【大牛必看】课讲给想听的人，快来攒课活动申请讲师吧！ [问题点数：40分] 快速回复 只显示楼主 关注帖子 【大牛必看】课讲给想听的人，快来攒课活动申请讲师吧！ [问题点数：40分] 不显示删除回复 显示所有回复 显示星级回复 显示得分回复 只显示楼主 收藏 取消关注 关注 rmyymr rmyymr 本版等级： 本版专家分：0 结帖率：0% 楼主 发表于： 2015-07-01 19:10:17 攒课 CSDN 专家 讲师   攒课活动是CSDN社区发起的个性化知识服务活动。首先，通过面向社区用户收集技术课题；CSDN会将收集的课题进行展示，供大家投票；而得票较高的课程，CSDN将负责招募、推荐讲师、提供会议服务，共同“攒”一场大家真正有兴趣的技术课程！ 攒课优秀讲师展示 ************************************************************************************************************************** 只要您的技术水平够高，愿意传授、分享技术经验，CSDN攒课活动将会成为您不错的展示平台。大牛，还等什么呢？申请讲师吧，共同“攒”一场大家真正有兴趣的技术课程！ 优秀讲师除了可以在投票报名页面、社区微信“程序人生”等重点展示外，还有白花花的银子作为奖励，银子取之有道，下面两种方式均可获得银子奖励： 1、成为攒课讲师，获得 600元 在    我要讲课    页面进行讲师申请，经过官方审核通过，并签订讲课协议，成为攒课活动讲师，完成讲课。 2、根据课程效果获得不同奖励 课程获得 好评 ，获得 400元 课程获得 中评 ，获得 200元 课程获得 差评，不作奖励 注：以上为税前金额          更多 分享到： 对我有用[9] 丢个板砖[5] 引用 | 举报 | 编辑 删除 管理 回复次数：57 取消关注 关注 eAzBqus85V8 eAzBqus85V8 本版等级： 本版专家分：0 结帖率：0% #1 得分：0 回复于： 2015-07-01 19:16:28 该回复于2015-07-02 08:31:26被管理员删除 编辑 删除 管理 取消关注 关注 hjq2013 hjq2013 本版等级： 本版专家分：10 结帖率：95.65% 红花 2015年6月 移动开发大版内专家分月排行榜第一 黄花 2015年7月 移动开发大版内专家分月排行榜第二 2015年5月 移动开发大版内专家分月排行榜第二 蓝花 2015年7月 扩充话题大版内专家分月排行榜第三 2015年5月 扩充话题大版内专家分月排行榜第三 #2 得分：0 回复于： 2015-07-01 20:02:36  来自移动客户端 对我有用[0] 丢个板砖[0] 引用 | 举报 | 编辑 删除 管理 取消关注 关注 fCjXdir57K6 fCjXdir57K6 本版等级： 本版专家分：0 结帖率：0% #3 得分：0 回复于： 2015-07-01 20:07:42 该回复于2015-07-02 08:47:03被管理员删除 编辑 删除 管理 取消关注 关注 sinat_29470851 sinat_29470851 本版等级： 本版专家分：0 结帖率：0% #4 得分：0 回复于： 2015-07-01 21:30:08  来自移动客户端 好好好哈哈哈 对我有用[0] 丢个板砖[0] 引用 | 举报 | 编辑 删除 管理 取消关注 关注 lambertwe lambertwe 本版等级： 本版专家分：0 结帖率：0% #5 得分：0 回复于： 2015-07-01 21:32:38  来自移动客户端 说的真理啊，好 对我有用[0] 丢个板砖[0] 引用 | 举报 | 编辑 删除 管理 取消关注 关注 qq_29473149 qq_29473149 本版等级： 本版专家分：0 结帖率：0% #6 得分：0 回复于： 2015-07-01 22:25:47  来自移动客户端 嗯好的 对我有用[0] 丢个板砖[0] 引用 | 举报 | 编辑 删除 管理 取消关注 关注 qq_29473149 qq_29473149 本版等级： 本版专家分：0 结帖率：0% #7 得分：0 回复于： 2015-07-01 22:26:19  来自移动客户端 该回复于2015-07-02 09:01:50被管理员删除 编辑 删除 管理 取消关注 关注 qq_29473149 qq_29473149 本版等级： 本版专家分：0 结帖率：0% #8 得分：0 回复于： 2015-07-01 22:26:42  来自移动客户端 该回复于2015-07-02 09:02:00被管理员删除 编辑 删除 管理 取消关注 关注 qq_29387787 qq_29387787 本版等级： 本版专家分：0 结帖率：0%

Recno:: 1
URL:: http://bbs.csdn.net/topics/391830882

ParseText::
CSDN“攒课”活动课程资料集锦！-CSDN论坛-CSDN.NET-中国最大的IT技术社区 首页 精选版块 移动开发 iOS Android Qt WP 云计算 IaaS Pass/SaaS 分布式计算/Hadoop Java技术 Java SE Java Web 开发 Java EE Java其他相关 .NET技术 .NET Framework C# .NET分析与设计 ASP .NET VB .NET Web开发 PHP JavaScript ASP HTML(CSS) HTML5 Apache 开发语言/框架 Delphi VC/MFC VB C/C++ C++ Builder 其他开发语言 数据库开发 MS-SQL Server Oracle PowerBuilder Informatica 其他数据库开发 硬件/嵌入式开发 嵌入开发(WinCE) 驱动开发/核心开发 硬件设计 单片机/工控 汇编语言 VxWorks开发 Linux/Unix社区 系统维护与使用区 应用程序开发区 内核源代码研究区 驱动程序开发区 CPU和硬件区 论坛帮助 论坛牛人 论坛地图 专家问答 << >> CSDN > CSDN论坛 > 站务专区 > 活动专区 返回列表 管理菜单 取消置顶 置顶 取消推荐 锁定 移动 编辑 删除 帖子加分 取消高亮 结帖 发帖 回复 关注 rmyymr [置顶] [推荐] CSDN“攒课”活动课程资料集锦！ [问题点数：40分] 快速回复 只显示楼主 关注帖子 [置顶] [推荐] CSDN“攒课”活动课程资料集锦！ [问题点数：40分] 不显示删除回复 显示所有回复 显示星级回复 显示得分回复 只显示楼主 收藏 取消关注 关注 rmyymr rmyymr 本版等级： 本版专家分：0 结帖率：0% 楼主 发表于： 2015-09-17 10:47:57 攒课 CSDN 学习资料 攒课资料 小伙伴们，以后小编会在这个帖子里为大家整理每期攒课的所有课程资料，方便大家学习回顾哦！ 如果你想当讲师？ 来吧！ 我要当讲师 *************************************************************************************************************************** CSDN“攒课”活动2015第一期        “攒课”第一期盛况回顾： 活动第一期 课题1：高并发网站中的数据库设计      讲师： 王晶昱 （阿里巴巴资深技术专家）     课程资料下载 课题2：Hadoop入门和大数据应用       讲师： 翟周伟 （百度资深Hadoop技术专家）    课程资料下载 课题3：安卓编译与开发、Linux内核及驱动       讲师： 仝利 （CSDN博客专家）     课程资料下载 CSDN“攒课”活动2015第二期        “攒课”第二期盛况回顾： 活动第二期 课题1：Spark基础与编程模型      讲师： 陈超 （七牛云技术总监）     课程资料下载 课题2：高并发Web网站构建和安全防护       讲师： 徐汉彬 （腾讯高级工程师）    课程资料下载 课题3：Javascript基础到入门      讲师： 张中强 （技术总监）     课程资料下载 更多 分享到： 对我有用[0] 丢个板砖[0] 引用 | 举报 | 编辑 删除 管理 回复次数：16 取消关注 关注 enpterexpress enpterexpress 本版等级： 本版专家分：368 结帖率：83.44% 红花 2015年8月 扩充话题大版内专家分月排行榜第一 黄花 2015年10月 扩充话题大版内专家分月排行榜第二 2015年9月 扩充话题大版内专家分月排行榜第二 #1 得分：0 回复于： 2015-09-17 10:58:15 support pretty 对我有用[0] 丢个板砖[0] 引用 | 举报 | 编辑 删除 管理 取消关注 关注 max_min_ max_min_ 本版等级： 本版专家分：196 结帖率：97.14% 红花 2013年11月 Linux/Unix社区大版内专家分月排行榜第一 2013年11月 专题开发/技术/项目大版内专家分月排行榜第一 2013年9月 C/C++大版内专家分月排行榜第一 2013年9月 专题开发/技术/项目大版内专家分月排行榜第一 2013年8月 C/C++大版内专家分月排行榜第一 黄花 2013年12月 C/C++大版内专家分月排行榜第二 2013年12月 Linux/Unix社区大版内专家分月排行榜第二 2013年11月 C/C++大版内专家分月排行榜第二 2013年10月 C/C++大版内专家分月排行榜第二 #2 得分：0 回复于： 2015-09-17 11:43:42 对我有用[0] 丢个板砖[0] 引用 | 举报 | 编辑 删除 管理 取消关注 关注 venvivo venvivo 本版等级： 本版专家分：0 结帖率：0% #3 得分：0 回复于： 2015-09-20 14:46:16 顶一下   对我有用[0] 丢个板砖[0] 引用 | 举报 | 编辑 删除 管理 取消关注 关注 SAN_MU_000 SAN_MU_000 本版等级： 本版专家分：0 结帖率：0% #4 得分：0 回复于： 2015-09-22 10:45:46 感谢CSDN很好的课程 对我有用[0] 丢个板砖[0] 引用 | 举报 | 编辑 删除 管理 取消关注 关注 rmyymr rmyymr 本版等级： 本版专家分：0 结帖率：0% #5 得分：0 回复于： 2015-09-22 14:30:03 引用 4 楼 SAN_MU_000 的回复: 感谢CSDN很好的课程     第二期已经开始了，快快来投票哦  http://bss.csdn.net/m/topic/cuanke_vote 对我有用[0] 丢个板砖[0] 引用 | 举报 | 编辑 删除 管理 取消关注 关注 SAN_MU_000 SAN_MU_000 本版等级： 本版专家分：0 结帖率：0% #6 得分：0 回复于： 2015-09-26 20:12:10 引用 5 楼 rmyymr 的回复: Quote: 引用 4 楼 SAN_MU_000 的回复: 感谢CSDN很好的课程     第二期已经开始了，快快来投票哦  http://bss.csdn.net/m/topic/cuanke_vote 已投了，spark和高性能网站。 对我有用[0] 丢个板砖[0] 引用 | 举报 | 编辑 删除 管理 取消关注 关注 line_us line_us 本版等级： 本版专家分：282 结帖率：100% #7 得分：0 回复于： 2015-10-01 20:52:39 每期攒课的所有课程资料， 对我有用[0] 丢个板砖[0] 引用 | 举报 | 编辑

Recno:: 2
URL:: http://bbs.csdn.net/topics/391857175

ParseText::
攒（cuan）自己想听的课，让别人投票去吧！——CSDN个性化知识服务2015第三期-CSDN论坛-CSDN.NET-中国最大的IT技术社区 首页 精选版块 移动开发 iOS Android Qt WP 云计算 IaaS Pass/SaaS 分布式计算/Hadoop Java技术 Java SE Java Web 开发 Java EE Java其他相关 .NET技术 .NET Framework C# .NET分析与设计 ASP .NET VB .NET Web开发 PHP JavaScript ASP HTML(CSS) HTML5 Apache 开发语言/框架 Delphi VC/MFC VB C/C++ C++ Builder 其他开发语言 数据库开发 MS-SQL Server Oracle PowerBuilder Informatica 其他数据库开发 硬件/嵌入式开发 嵌入开发(WinCE) 驱动开发/核心开发 硬件设计 单片机/工控 汇编语言 VxWorks开发 Linux/Unix社区 系统维护与使用区 应用程序开发区 内核源代码研究区 驱动程序开发区 CPU和硬件区 论坛帮助 论坛牛人 论坛地图 专家问答 << >> CSDN > CSDN论坛 > 站务专区 > 活动专区 1 2 下一页 第 1 2 页 返回列表 管理菜单 置顶 取消推荐 锁定 移动 编辑 删除 帖子加分 取消高亮 结帖 发帖 回复 关注 rmyymr [推荐] 攒（cuan）自己想听的课，让别人投票去吧！——CSDN个性化知识服务2015第三期 [问题点数：40分] 快速回复 只显示楼主 关注帖子 [推荐] 攒（cuan）自己想听的课，让别人投票去吧！——CSDN个性化知识服务2015第三期 [问题点数：40分] 不显示删除回复 显示所有回复 显示星级回复 显示得分回复 只显示楼主 收藏 取消关注 关注 rmyymr rmyymr 本版等级： 本版专家分：0 结帖率：0% 楼主 发表于： 2015-11-11 13:23:47 攒课 csdn 投票 各位童鞋，攒课第二期即将结束，看到大家都能学到自己想学的技术知识，小编真心高兴！     攒课第二期精彩回顾    　       CSDN“攒课”活动课程资料集锦   今天小编告诉大家一个好消息：攒课第三期课题征集开始了，童鞋们，敲起键盘来发自己想听的技术话题吧！   还有新伙伴不知道 什么是攒课？！ 速来恶补一下： 攒课是由CSDN社区发起的个性化知识服务活动。首先通过面向社区用户征集技术课题；CSDN会将收集的课题进行展示，供大家投票；而得票较高的课程，CSDN将负责招募、推荐讲师、提供会议服务，共同“攒”一场大家真正有兴趣的技术课程！ ×××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××× 攒课第三期课题征集时间？ 11月11日——11月25日     　课题征集 大家可以认真想想自己想听什么技术课题，当然你也可以问问你的同事、同学、朋友，他们想听什么课。课题征集有两个星期的时间哦！　 在哪发课题呢？ 小伙伴们，可以在本帖下面回帖发布自己想听的技术课题！ 回帖格式是什么样的？ 我要听的课题： （课程题目） 需求介绍： （要学习了解的知识点描述）  给大家一个例子： 我想听的课题：Hadoop 2.0 运维管理与集群安装监控和管理 需求介绍：想通过学习，可以深入理解Hadoop技术架构，对Hadoop运作机制有清晰全面的认识，可以独立规划及部署生产环境的Hadoop集群，掌握Hadoop基本运维思路和方法，对Hadoop集群进行管理和优化。 ×××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××× 小编会把大家发的课题收集整理，选其中5个有代表性的课题公布出来，大家就可以投票了（你也可以自己拉票哦）；同时，大牛在被展示的课题中看到自己擅长的技术，可以申请讲师为大家讲课、答疑解惑哦！这个时间是： 12月10日——12月23日 ，最终票数较高的3个课题将会开课（开课课题数以最终公布为准）。 等课题讲师到位，课程内容准备好，小编会通知已投票的同学和其他小伙伴报名听课。同样，课程都是在线公开课，不收费的哦！（大家只需备好电脑、网络、还有小吃、饮料，就可以爽爽的听课啦，哇咔咔！） ×××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××× 一大波福利来袭？ 　参与发话题的同学还有机会获得C币奖励哦！ 只要你发的话题在投票中被展示，就会获得10C币奖励！ 免费学技术，还有C币拿，爽歪歪！     参与投票的童鞋还有机会获得5C币奖励！！！攒课成功准备开课的三个课题，从每个课题中选出10个小伙伴，三个课题就有30个小伙伴将得此奖励。（此奖励不重复获得） 　参与问卷调查的童鞋有机会获得5C币奖励，此处只有5名幸运儿！ 　申请讲课的大牛，CSDN攒课活动将是您不错的展示平台，你可以尽情感受分享的乐趣， 更有一群求知若渴的“知音”小伙伴听您授课，不亦乐乎？！另外，CSDN会为讲师准备一些银子作为奖励！（通过讲师审核并成功讲课，讲师获得600元；根据讲课效果还会有400元（好评）、200元（中评）的额外奖励！）具体请查看： 讲师福利 更多 分享到： 对我有用[0] 丢个板砖[0] 引用 | 举报 | 编辑 删除 管理 回复次数：72 取消关注 关注 rmyymr rmyymr 本版等级： 本版专家分：0 结帖率：0% #1 得分：0 回复于： 2015-11-11 13:27:05  攒课第三期投票开始了，小伙伴快来投票吧！   CSDN“攒课”活动第三期投票课题： 课题1：微信公众平台应用开发（开发模式） 课题2：Nginx服务器入门 课题3：手机游戏服务器开发 课题4：通过.NET构建大规模并发网站 课题5：Python脚本应用及学习方法  小伙伴，看到想听的课题，赶紧投票吧！ 投票攒课啦  你想讲课当老师？那就来申请讲师吧！当然，除了能在CSDN攒课活动中尽情展示自己外，还有一部分银子奖励哦！ 当讲师有惊喜  最后，小编给小主送C币啦！本期被展示投票的课题发起人 ID：yjc_1111、wl812peter、sincala、jaylongli、jingzhengyi ，恭喜这五位童鞋啦！你们会获得 10C币 奖励！！！ 对我有用[0] 丢个板砖[0] 引用 | 举报 | 编辑 删除 管理 取消关注 关注 zhu19774279 zhu19774279 本版等级： 本版专家分：1 结帖率：96.3% #2 得分：0 回复于： 2015-11-11 13:56:39 Zookeeper的原理、应用、实战。以及基于Zookeeper的第三方软件或工具。 对我有用[0] 丢个板砖[0] 引用 | 举报 | 编辑 删除 管理 取消关注 关注 wl812peter wl812peter 本版等级： 本版专家分：0 结帖率：0% #3 得分：0 回复于： 2015-11-11 13:56:39 想听课程：Nginx服务器入门 需求介绍：1、Nginx服务器工作原理，特点，以及优势的讲解                     2、Nginx服务器环境安装及配置                     3、Nginx服务器的实例应用                     4、Nginx的未来定位，和目前走势 对我有用[1] 丢个板砖[0] 引用 | 举报 | 编辑 删除 管理 取消关注 关注 rmyymr rmyymr 本版等级： 本版专家分：0 结帖率：0% #4 得分：0 回复于： 2015-11-11 13:57:37 引用 2 楼 zhu19774279 的回复: Zookeeper的原理、应用、实战。以及基于Zookeeper的第三方软件或工具。      亲     按活动要求发话题哦~~~ 对我有用[0] 丢个板砖[0] 引用 | 举报 | 编辑 删除 管理 取消关注 关注 gchmgchm gchmgchm 本版等级： 本版专家分：1 结帖率：0% #5 得分：0 回复于： 2015-11-11 14:11:53 想听课程：Nginx服务器入门  需求介绍：1、Nginx服务器工作原理，特点，以及优势的讲解                      2、Nginx服务器环境安装及配置                      3、Nginx服务器的实例应用                      4、Nginx的未来定位，和目前走势  对我有用[1] 丢个板砖[0] 引用 | 举报 | 编辑 删除 管理 取消关注 关注 zhu19774279 zhu19774279 本版等级： 本版专家分：1 结帖率：96.3% #6 得分：0 回复于： 2015-11-11 14:34:57 引用 4 楼 rmyymr 的回复:  亲     按活动要求发话题哦~~~ 想听课程：Zookeeper 需求介绍：1、Zookeeper工作原理，特点，以及优势的讲解                      2、Zookeeper的实际应用或实战，尤其是国内外一线厂商怎么样使用                      3、可以捎带介绍基于Zookeeper的第三方软件或工具 对我有用[1] 丢个板砖[0] 引用 | 举报 | 编辑 删除 管理 取消关注 关注 Brian_ning Brian_ning 本版等级： 本版专家分：0 结帖率：0% #7 得分：0 回复于： 2015-11-11 15:34:29 想听课程：并行计算 需求介绍：1.并行计算的原理                      2.算法的并行化                      3.在众核时代算法并行化的方法                     4.OpenMp和MPI在并行计算的方法                     5.并行应用程序的开发

Recno:: 3
URL:: http://blog.csdn.net/NoMasp/rss/list

ParseText::


Recno:: 4
URL:: http://blog.csdn.net/column/details/beiyangzalu.html

ParseText::
专栏：北洋杂录：阿猿的浮想录 - 博客频道 - CSDN.NET 首页 博客专栏 博乐推荐 博客专家 热门文章 排行榜 我的博客 帮助 订阅 博客专栏 > 综合专栏 > 北洋杂录：阿猿的浮想录 分享到： 新浪微博 腾讯微博 北洋杂录：阿猿的浮想录 每一个阿猿都有一个成为IT界半壁江山的梦想，我也有这个梦想，那么在这条通过未来的道路上，我都浮想了什么，我都感慨了什么，就如北洋大时代，那些大师们，他们怀有怎样济世报国的梦想，而我也愿意为此奋斗一生。 订阅 最新更新文章 [综合] 26岁程序员的出路 所谓路，途也，道也，古人有云：路漫漫其修远兮，吾将上下而求索；歌曲有唱：敢问路在何方，路在脚下；我心有念：流年似水，三十将至，然迷，不复得路。... 程序员 出路 qing_gee 2015-12-11 15:48 阅读(2196) 评论(23) [综合] 沉默王二的黄金时代 我写这篇文章的缘由是什么，其实也和上面这些废话有关系，这就好比，你xxoo的时候要有前戏（这™有点太直接），或者说你屙屎之前可能要先放点五谷杂粮之气到外面（这话听起来怎么像在骂我自己）。... 沉默王二 黄金时代 程序员 qing_gee 2015-11-19 18:37 阅读(947) 评论(8) [综合] 从小学到高中，一个程序猿的独白 前言：从小学到高中，那段幼稚、青涩的年代，我是无论如何也想不到自己以后要做一名程序猿，现在回想起来，依然会惊讶。小学阶段请允许我的自恋，在我们村子，从5岁上学前班到小学五年级毕业，我年年能领导那高贵的奖状、附带着写字笔、作业本，那几乎是父母所有的荣耀，当然还有骄傲。上小学3年级之前，我们年级一直只有6个人，除了第一名的我，也就是其他同学们（没办法，人少就是这么嘚瑟，反正迈克尔乔丹当然在NBA就是这么... 小学 高中 程序员 qing_gee 2015-10-22 14:07 阅读(746) 评论(16) [综合] 你不得不读的书籍清单 你不得不读的书籍清单，岁月如梭，转眼间2015年将要过去，本篇博文也就将告一段落！毕竟年复一年的累加下去，本篇文章可能会导致加载失败（笑，自嘲），约吗？让我们来年再战！... 程序员 不得不读 书籍 qing_gee 2015-12-16 17:15 阅读(10877) 评论(64) [综合] 职业生涯之初恋，没有攻略 前言：为了响应CSDN的号召博客，轻松拿大奖！博客征文第二期：那些年我们一起写过的代码，我再三研究课题，打算贴近标题，写一些难以释怀的代码历程，但细细思索一下活动简介，再结合自身经历，我觉得写下我刚入职时的心路历程，更加符合我在程序猿世界里的标签。那段日企岁月历久弥新，也五味杂全，当然无关乎我的成功抑或是失败，因为对于她，我没有攻略。本来抱着必睡的决心，忍着把眼睛强行闭上，然后强迫自己在床上找一个舒... 职业生涯 初恋 代码 征文 qing_gee 2015-09-19 01:23 阅读(1043) 评论(8) [综合] 沉默的阿福 与其说是阿福的沉默，到不如说是我的沉默，其实我和阿福是一对好基友，作为一个26岁的程序猿，我知道阿福和我有一样的梦想，就是“改变世界！”，好像话说大了，不过管他呢，今天说的是阿福，并不是我。... 沉默的阿福 qing_gee 2015-08-25 22:01 阅读(1710) 评论(28) [综合] 领证 前言：坐在“女朋友”公司的办公室内，我通过她同事的电脑准备写下这篇博文。也许今天是个特别值得庆贺和纪念的日子，其实她已经不再是我的女朋友了，而是我的“老婆”大人。就jiu在zai今jin天tian，一个IT程序猿和一个建筑女师领了那个结婚证。其实我不是因为这件事情而想写这篇博客，而是因为了读了《乖，摸摸头》的“听歌的人不许掉眼泪”，于是感觉自己要写点什么了。... 7月6日 领证 qing_gee 2015-07-06 20:52 阅读(415) 评论(4) [综合] 致我们终将逝去的高考 我经历了两次高考，那已经是七八年前的事了，然而每每想起那段岁月，总让人久久不能释怀。清楚的记得第二次高考是发生在凯尔特人拿总冠军的那年（加内特、皮尔斯、雷阿伦组成豪华三巨头的第一年，皮队昨天0.0秒投进的3分差点就改变了奇才的命运）... 高考 qing_gee 2015-05-17 10:16 阅读(487) 评论(1) [研发管理] 小型团队的测试该何去何从 很不幸，我不知道自己应该不应该谈论这件事，“小型团队的测试该何去何从”，我没有十足的经验，更没有十足的理论，然而回想起昨日大家一起的讨论结果，我到现在依然沉浸在失望和苦闷的滋味中，究竟是增强开发人员的自测能力以及自我驱动力还是增加测试人员来做问题的过滤？... 小型团队 自测 自我驱动力 qing_gee 2015-02-08 08:33 阅读(572) 评论(4) [综合] 时光老人之2014 如果从公元0年记岁的话，在作者写下这篇博客的时候，我已经两千零一十五岁了，我也不知道我是否年轻还是年入古稀，但不管怎样，我见证了作者平凡而不平庸的2014年，为作者已经迎来的2015年充满期待。我是时候该在一个叫做“CSDN”的论坛上记下这一年来我对作者的感受，当某一年作者回首往事的时候，能够从记忆中拾起这一段美好的时光。... 2014 qing_gee 2015-01-11 08:57 阅读(1190) 评论(19) 申请专栏 我的专栏 专栏创建者： qing_gee 创建时间：2015-10-20 文章数：18篇 浏览量： 20183 次 热门文章 最新评论 26岁程序员的出路 wtjandjay ： 你还找辉哥给你当导师了，他竟然还拒绝了哈哈太有意思了 26岁程序员的出路 wtjandjay ： 二哥你是来拉仇恨的吗 同 26 同it码农 哎不能比啊 你不得不读的书籍清单 wtjandjay ： 哈哈楼主终于换头像了 我有个二十多年的发小也叫王二后来我给他起了个外号叫王俩 你不得不读的书籍清单 liran9094 ： @qing_gee:买的跑步说些什么 到了 打算平时在地铁时候慢慢的看它我平时也没怎么读书吧，... 你不得不读的书籍清单 xx326664162 ： @qing_gee:我是来学习的，这些书我只有一本Java编程思想，刚买的，正在看，希望看完对我的技... 你不得不读的书籍清单 qing_gee ： @xx326664162:诚如朋友所说，即使书读完一遍也不一定能领会得了。上面列出这18本书，有一些... 你不得不读的书籍清单 xx326664162 ： 博主现在技术怎么样？感觉你没有把一本书完完全全的看完，领会的了 你不得不读的书籍清单 daidaineteasy ： 收藏了，有时间看！！ 你不得不读的书籍清单 u013178472 ： mark，谢谢分享 26岁程序员的出路 vipzhxsh ： 不错，赞一个

Recno:: 5
URL:: http://blog.csdn.net/column/details/javanew.html

ParseText::
专栏：Java，漂亮的不像实力派 - 博客频道 - CSDN.NET 首页 博客专栏 博乐推荐 博客专家 热门文章 排行榜 我的博客 帮助 订阅 博客专栏 > 编程语言专栏 > Java，漂亮的不像实力派 分享到： 新浪微博 腾讯微博 Java，漂亮的不像实力派 Java，漂亮的不像实力派！从事Java开发已经8年时间了，总觉得该写点什么东西了，本专栏将依据项目实战开发经验，以及业界的新颖知识，从内心深处对Java进行知识积累，希望为Java的传播也做出贡献！ 订阅 最新更新文章 [编程语言] 利用springsecurity做用户权限限制 不同的user（用户）需要不同的role（角色），不同的role（角色）又会需要不同的resource（资源权限），利用springsecurity来实现。... spring security 用户 权限限制 qing_gee 2015-12-05 11:31 阅读(766) 评论(1) [编程语言] mybatis简单sql使用java注解而不是xml配置 那么请你牢记这点原则吧：mybatis简单sql使用java注解而不是xml配置！... mybatis mapper java注解 qing_gee 2015-11-27 10:41 阅读(868) 评论(0) [编程语言] ImageIO Can't create output stream! java在生成验证码时，经常要用到ImageIO类，今天在一台windows 2008 server上部署好项目之后，项目怎么都刷不出来验证码，后台可以捕捉到的异常，里面包含有Can’t create output stream!... ImageIO qing_gee 2015-11-25 11:53 阅读(537) 评论(0) [编程语言] java把dbf文件写入远程2003服务器 重要的事情说三遍，有木有，java把dbf文件写入远程2003服务器，第一遍，第二遍，第三遍…够了，王二，还有完没有，赶紧点... java 文件写入 远程服务器 qing_gee 2015-11-17 14:21 阅读(701) 评论(0) [编程语言] 代码天敌之体积 前言：好吧，我觉得Steve yegge的牢骚能力太棒了，以至于我不得不重新来审视自己，到底我该怎么对待Java，怎么对待我热爱了8年的Java，当然了，到目前为止，我可没有被Steve忽悠着去学习新的语言，如ruby，我还会待在Java的阵营，但是有必要，我要对自己以往的代码进行审视，看看Java代码的天敌到底是什么？ 经常不经意间就发现文章被扣到各式各样的网站上面，甚是可恶！ 那么人生... 代码 体积 臃肿 qing_gee 2015-10-22 17:06 阅读(975) 评论(0) [编程语言] 从SVN trunk库中选择一个版本作为branch开发版本 前言：本篇《从SVN trunk库中选择一个版本作为branch开发版本》，将详细介绍如何从SVN的历史版本中选择一个指定版本作为branch bugfix版本，可能你也会遇到这样的情形，该纠结如何来做，那么接下来请注意好了。ps：多图慎入！1.先将trunk版本导出为一个项目。 省略了部分步骤，我想你肯定知道怎么做。2.将最新版切换为指定的历史版本。3.将替换后的版本进行tag标记。4.分支版本... svn trunk branch qing_gee 2015-10-19 09:59 阅读(204) 评论(0) [编程语言] 万物皆对象 万物皆对象... java 对象 qing_gee 2015-09-09 21:24 阅读(517) 评论(2) [编程语言] There is no getter for property named '*' in 'class java.lang.String'之源码分析 There is no getter for property named '*' in 'class java.lang.String'，此错误之所以出现，是因为mybatis在对parameterType="String"的sql语句做了限制，假如你使用这样的条件判断时，就会出现该错误，不过今天我们来刨根问底一下。... getter property class string sql qing_gee 3小时前 阅读(695) 评论(3) [编程语言] Comparable和Comparator Java中在进行数据排序时，Comparable和Comparator必不可少会遇得到，普通的String、Integer等类型，已经实现了Comparable接口，而有些时候，我们需要对一些其他不存在内在排序关系的类进行排序，那么就需要实现以上两个接口，但是会有所不同。... java comparable comparator qing_gee 2015-07-16 11:48 阅读(378) 评论(0) [编程语言] java：无意识自动装箱的可怕之处 前言：《effective Java》一书确实经典，真是为没有早一点买到这本书而感到遗憾。再来学习一个小知识，在之前，我只是知道integer是int的装箱类，而int是基本类型而已，从来没有意识到自动装箱有这么大的区别，“要优先使用基本类型而不是装箱基本类型，要当心无意识的自动装箱。”... java 装箱 基本类型 qing_gee 2015-07-11 15:43 阅读(444) 评论(3) [编程语言] SimpleDateFormat探究 前言：Java中，说起日期转换，SimpleDateFormat不得不提，但是在实战操作中，使用时千万要小心。否则将会出现“ java.lang.NumberFormatException: multiple points”错误，那么究竟是为什么呢？... dateformat qing_gee 2015-07-11 15:10 阅读(387) 评论(0) [编程语言] java：单例的理解 前言：Java的单例经常用到，今天发现自己有一点新的认识。... Java 单例 qing_gee 2015-06-23 17:53 阅读(294) 评论(0) [编程语言] fastjson，请注意大小写 fastjson先生（后称之为F先生）由阿里巴巴集团荣誉出品，我的记忆中，伟大的阿里巴巴对于编程界，能够称之为贡献的也仅此而已，可见我是多么的孤陋寡闻。我的项目中也用到了F先生，我很器重他，并且他表现一直非常优秀，然而在对接华夏接口的过程中，我对F先生爱之深，责之切。当然原因不能单纯的归咎于F先生，可恶可怜的华夏接口可能才是祸害之源。... fastjson 大小写 qing_gee 2015-04-26 09:10 阅读(1064) 评论(0) [编程语言] Java：获取src目录 Thread.currentThread().getContextClassLoader().getResource("").getPath() Javaweb项目获取src目录 Service.class.getClass().getResource("/").getPath() Java项目获取src目录... java javaweb src目录 qing_gee 2015-04-12 14:46 阅读(262) 评论(0) [编程语言] Java面试题从零开始：写一个函数把字符串反转 前言：为了能够找一个代表我从零开始的诗词，我挖空心思去找，然而怎么也找不到一个贴合我心意的，被迫上了度娘也不曾找到。真想把小学一年级的语文课本拿出来好好的通读一遍，肯定能找到答案。         好了，既然找不到也不必耿耿于怀了。今天读了《高效能程序员的修炼》第四章，发现自己好烂，如果按照作者的看法，我是无论如何都入不了他的法眼，于是乎，我告诉自己，从零开始，把作者提出的面试题按照Java来写... java 面试题 字符串 反转 qing_gee 2015-04-07 23:27 阅读(377) 评论(0) [编程语言] Java实现SSH加密 前言：相信很多人使用SSH远程连接Linux，那么对于我们的用户名和密码，SSH是如何进行加密解密呢？经过和同事的讨论，逐渐了解了其加密原理，下面就来一一阐述：加密原理SSH是先通过非对称加密告诉服务端一个对称加密口令，然后进行验证用户名和密码的时候，使用双方已经知道的加密口令进行加密和解密，见下图： 解释：SSH中为什么要使用非对称加密，又使用对称加密，到底有什么用处？到底安全不安全？既然后来又... Java SSH 加密 qing_gee 2015-03-18 14:51 阅读(974) 评论(0) [编程语言] Illegal overloaded getter method with ambiguous type for property Exception in thread "main" org.mybatis.spring.MyBatisSystemException: nested exception is org.apache.ibatis.reflection.ReflectionException: Illegal overloaded getter method with ambiguous type for property tradeType in class class com.honzh.biz.database.en... Illegal overloaded getter method with qing_gee 2015-03-16 16:13 阅读(2020) 评论(0) [编程语言] Java：数据精度 一旦你在Java项目中要使用数据，那么就一定要注意数据类型在Java中是不能很随意的使用，必须按照一定的规范来。... java 数据 精度 qing_gee 2015-03-04 16:05 阅读(403) 评论(0) [Web前端] springMVC之Transactional 今天在测试web管理端项目时，非常尴尬的是方法是用了事务注解，然而执行出错的情况下却没有进行事务回滚，也就是所说的@Transactional在springMVC的场景下失效了，而我明明在spring的项目中应用@Transactional是有效果的，相当郁闷，尝试了各种办法终究无效，最后看到http://icanfly.iteye.com/blog/778401，找到了解决方法，非常感谢，... springmvc Transactional qing_gee 2015-02-05 16:55 阅读(555) 评论(0) [编程语言] Java：异常处理机制很有意思 在网络上看到一篇《深入理解Java异常处理机制》，看完感觉自己也有一点小想法，的确在很多Java学者的眼里，异常处理机制不就是try catch finally吗，有啥好理解，很多时候，我也经常忽略这方面的内容，感觉没什么有意思的，那么我们来扎个小马步吧。... Java 异常处理 qing_gee 2015-01-22 09:53 阅读(646) 评论(4) 24条数据 共2页 1 2 下一页 尾页 申请专栏 我的专栏 专栏创建者： qing_gee 创建时间：2015-10-20 文章数：24篇 浏览量： 18126 次 热门文章 最新评论 利用springsecurity做用户权限限制 u011225629 ： 文章讲解spring security讲解的非常详细，有讲解，有代码，有运行结果，非常的好，在实际的... java：无意识自动装箱的可怕之处 qing_gee ： @qq_16811963:我只是一名普通的程序员，很平凡，相信朋友肯定比我有成就，未来也比我有成就。 java：无意识自动装箱的可怕之处 qq_16811963 ： 看了你这么多博文，我怎么有一种看到自己未来的感觉。 java：无意识自动装箱的可怕之处 qq_16811963 ： 看了你这么多博文，我怎么有种看到自己未来的感觉。

Recno:: 6
URL:: http://blog.csdn.net/column/details/newcpluspluseleven.html

ParseText::
专栏：浅析C++11新特性 - 博客频道 - CSDN.NET 首页 博客专栏 博乐推荐 博客专家 热门文章 排行榜 我的博客 帮助 订阅 博客专栏 > 编程语言专栏 > 浅析C++11新特性 分享到： 新浪微博 腾讯微博 浅析C++11新特性 C++11包含了核心语言的新机能，并且拓展C++标准程序库，并且加入了大部分的C++ Technical Report 1程序库(数学上的特殊函数除外)。 订阅 最新更新文章 [编程语言] C++11新特性之 std::future and std::async 先来个小插曲，百度翻译，你够了： std::future 设想这样的情况，你希望一个线程做一些事情，然后返回你一个结果。同时，你在做一些其他的工作，该工作也许会也许不会花费你一点时间。你希望在某个特定的时间获取那个线程的结果。 在win32中，你可以这样 用CreateThread启动线程 在线程里，启动任务，当准备完毕后发送一个事件（event），并把结果放在全局变量里。 在主函数里... c++11 wangshubo1989 2015-11-16 21:37 阅读(1105) 评论(4) [编程语言] 开始使用C++11的几个理由 C++11新特性介绍了一段时间，至今为止也差不多了。是要总结的时候了： 你可能会问我，为什么需要C++11呢，我这就给出理由：理由1：《C++11新特性之 Move semantics(移动语义)》 move语义(move semantics)。简单的说，它是优化复制的一种方式。有时候复制很显然是浪费的。如果你从一个临时的string对象复制内容，简单的复制指针到字符缓冲区将比创建一个新的缓冲区... c++11 wangshubo1989 2015-11-13 20:55 阅读(567) 评论(4) [编程语言] C++11新特性之 Static assertions 和constructor delegation C++11新特性继续。 Static assertion static_assert 是在编译时期的断言，作用不言而喻的。 语法是这样：static_assert ( bool_constexpr , string ) 其中： bool_constexpr: 常量表达式 string: 如果bool_constexpr表达式为false, 这个string就是编译时候报的错误。看... c++11 wangshubo1989 2015-11-11 21:35 阅读(753) 评论(2) [编程语言] C++11新特性之 default and delete specifiers C++11的东西介绍的差不多了，今天介绍两个关键字default和delete！default 首先我们清楚，如果自己提供了任何形式的构造函数，那么编译器将不会产生一个默认构造函数，这是一个放之四海而皆准的原则。但凡是都是双面性，看看一下的代码：class A { public: A(int a){}; };然后我们这样使用：A a;悲剧发生了，编译器不会为我们提供默认的构造函数！所以呢，... c++11 default delete wangshubo1989 2015-11-10 23:42 阅读(1067) 评论(4) [编程语言] C++11新特性之 Move semantics(移动语义) 按值传递的意义是什么？ 当一个函数的参数按值传递时，这就会进行拷贝。当然，编译器懂得如何去拷贝。 而对于我们自定义的类型，我们也许需要提供拷贝构造函数。但是不得不说，拷贝的代价是昂贵的。所以我们需要寻找一个避免不必要拷贝的方法，即C++11提供的移动语义。 上一篇博客中有一个句话用到了：#include void f(int& i) { std::cout << "lval... c++11 移动语义 wangshubo1989 2015-11-09 23:57 阅读(787) 评论(1) [编程语言] C++11新特性之 rvalue Reference(右值引用) 右值引用可以使我们区分表达式的左值和右值。C++11引入了右值引用的概念，使得我们把引用与右值进行绑定。使用两个“取地址符号”：int&& rvalue_ref = 99;需要注意的是，只有左值可以付给引用，如：int& ref = 9; 我们会得到这样的错误： “invalid initialization of non-const reference of type int& from an... c++ 右值引用 wangshubo1989 2015-11-09 22:14 阅读(896) 评论(3) [编程语言] C++11新特性之 nullptr 我们知道在编程的世界里，0有双重的角色，可以表示整数零，也可以表示一个空指针。在C语言中，通过预编译宏NULL，可以区分0表示的是零还是(void*)0.但是，在C++的世界中，这样是不可以的。C++中允许函数重载。例如：void foo(char *); void foo(int);如果把NULL定义为0，那么foo(NULL)将调用哪个函数呢？这样的话，编译器不会知道调用哪个函数。所以C++11... c++11 wangshubo1989 2015-11-08 23:57 阅读(231) 评论(1) [编程语言] C++11新特性之 std::array container 数组每个人都很熟悉，vector更是我们常常用到的。但是某些场合，使用vector是多余的，尤其能明确元素个数的情况下，这样我们就付出了效率稍低的代价！但是你使用数组的代价是那么的不安全，那么的不方便。于是，C++11推出了模板类array，位于std名称控件中。 与vector不同的是，array对象的长度是固定的，使用了静态存储区，即存储在栈上，效率跟数组相同，但是更加的安全。首先需要包含头文... wangshubo1989 2015-11-08 21:37 阅读(1512) 评论(3) [编程语言] C++11新特性之 CALLBACKS 《C++11新特性之std::function》提到了std::function作为回调函数。今天主要讨论不同情况下std::function作为回调使用。使用回调#include #include namespace { using cb1_t = std::function; using cb2_t = std::function<... c++11 callback wangshubo1989 2015-11-04 21:58 阅读(1169) 评论(5) [编程语言] c++11特性之std::thread--进阶二 继续C++11的std::thread之旅！下面讨论如何给线程传递参数 这个例子是传递一个string#include #include #include void thread_function(std::string s) { std::cout << "thread function "; std::cout << "m... wangshubo1989 2015-11-04 00:00 阅读(905) 评论(2) [编程语言] c++11特性之std::thread--进阶 博客 [c++11特性之std::thread--初识](http://blog.csdn.net/wangshubo1989/article/details/49592517 "std::thread") 讲了std::thread::join和std::thread::detach的用法。今天就再来点深入的。先看看这个：int main() { std::thread t(&threa... c++11 thread wangshubo1989 2015-11-03 23:49 阅读(913) 评论(1) [编程语言] c++11特性之initializer_list 之前写了一个博客《 浅析C++中的初始化列表（区别赋值和初始化）》，讲述了类的构造函数使用初始化列表来初始化成员变量。现在，撇开过往不谈，就谈一谈普通的变量赋值。即是我们要提到的initializer_list。这同样是一个C++11的特性。过往，我们这样给vector赋值：std::vector v; v.push_back(1); v.push_back(2); v.push_back(3);... c++ 初始化列表 wangshubo1989 2015-11-03 21:55 阅读(787) 评论(3) [编程语言] c++11特性之std::thread--初识二 上篇博客《c++11特性之std::thread–初识》初步介绍了std::thread，并且介绍了几个成员函数。最后的一段代码留了点悬念，就是vs2015会报错，错误如下： error C2893: 未能使函数模板“unknown-type std::invoke(_Callable &&,_Types &&...)”专用化 1> d:\program files (x86)\microsoft... c++11 thread wangshubo1989 2015-11-02 22:45 阅读(303) 评论(1) [编程语言] c++11特性之std::thread--初识 C++11中已经拥有了一个更好用的用于线程操作的类std::thread。默认构造函数： thread() noexcept; 构造一个任何线程不执行的线程对象。初始化函数： template #include // std::cout #include // std::thread, std::this_thread::sl... c++11 thread wangshubo1989 2015-11-02 21:51 阅读(228) 评论(0) [编程语言] c++11特性之override和final关键字 C++11之前，一直没有继承控制关键字。禁用一个类的进一步衍生是可能的但也很棘手。为避免用户在派生类中重载一个虚函数，你不得不向后考虑。C++ 11添加了两个继承控制关键字：override和final。override确保在派生类中声明的重载函数跟基类的虚函数有相同的签名。final阻止类的进一步派生和虚函数的进一步重载。虚函数重载一个派生类可以重载在基类中声明的成员函数，这是面向对象设计的基础。... c++11 wangshubo1989 2015-11-01 00:19 阅读(287) 评论(0) [编程语言] c++11特性之Lambda表达式 “Lambda 表达式”(lambda expression)是一个匿名函数，Lambda表达式基于数学中的λ演算得名，直接对应于其中的lambda抽象(lambda abstraction)，是一个匿名函数，即没有函数名的函数。我第一次接触Lambda表达式是在C#中，后来才知道C++11引入了Lambada表达式。SO C++ 11 标准的一大亮点是引入Lambda表达式。基本语法如下： [c... lambda C++11 wangshubo1989 2015-10-19 23:18 阅读(248) 评论(0) [编程语言] c++11特性之正则表达式 C++11中也将正则表达式纳入了新标准的一部分，不仅如此，它还支持了6种不同的正则表达式的语法，分别是：ECMASCRIPT、basic、extended、awk、grep和egrep。其中ECMASCRIPT是默认的语法，具体使用哪种语法我们可以在构造正则表达式的时候指定。正则表达式库提供表示正则表达式，这是一种用于字符串内执行模式匹配小型的语言的类。主要的类： basic_regex reg... regex c++11 wangshubo1989 2015-10-17 12:36 阅读(239) 评论(0) [编程语言] C++11新特性之std::function 博客《吐血整理C++11新特性》描述了一些C++11带来的新的特性，但是不够全面。在实际工作中，用到了std::function来实现回调函数。所以写该博客做一个简要补充。类模版std::function是一种通用、多态的函数封装。std::function的实例可以对任何可以调用的目标实体进行存储、复制、和调用操作，这些目标实体包括普通函数、Lambda表达式、函数指针、以及其它函数对象等。std... c++ function wangshubo1989 2015-10-14 23:53 阅读(270) 评论(0) [编程语言] 吐血整理C++11新特性 本文整理一些C++11的新特性，欢迎补充。auto关键字 在C++11之前，auto关键字用来指定存储期。在新标准中，它的功能变为类型推断。auto现在成了一个类型的占位符，通知编译器去根据初始化代码推断所声明变量的真实类型。各种作用域内声明变量都可以用到它。例如，名空间中，程序块中，或是for循环的初始化语句中。auto i = 42; // i is an int auto l... c++11 wangshubo1989 2015-09-16 10:12 阅读(378) 评论(2) 申请专栏 我的专栏 专栏创建者： wangshubo1989 创建时间：2015-10-28 文章数：19篇 浏览量： 12645 次 热门文章 最新评论

Recno:: 7
URL:: http://blog.csdn.net/column/details/nomasp-uwp.html

ParseText::
专栏：UWP通用应用开发 - 博客频道 - CSDN.NET 首页 博客专栏 博乐推荐 博客专家 热门文章 排行榜 我的博客 帮助 订阅 博客专栏 > 移动开发专栏 > UWP通用应用开发 分享到： 新浪微博 腾讯微博 UWP通用应用开发 Windows10 引入了通用 Windows 平台 (UWP)，面向 UWP 的应用不仅可以调用对所有设备均通用的 WinRT API，还可以调用特定于要运行应用的设备系列的 API（包括 Win32 和 .NET API）。 订阅 最新更新文章 [移动开发] Windows App开发之更多技巧 使用华丽丽的字体所有的TextBlock等都用的默认字体，大家是否会感觉很千篇一律很枯燥呢？对于FontFamily，我们见过一些可以用的字体，但这个属性不像Foreground等有下拉框，所以我们在应用中见过的许多有意思的字体却没法用，因为不知道名字。代码的话也贴张图示意一下吧。好了，我就不再多说废话啦，名字都是从这里来的——>>>>>注意： 1）除了微软雅黑外，大部分字体只能在Windows... app开发 应用 字体 datepicker windows NoMasp 2015-07-27 07:34 阅读(1265) 评论(2) [移动开发] Windows App开发之使用通知与动态磁贴 使用Toast通知示例前面我们使用了MessageDialog来作为弹窗，这里来介绍一个更加高大上的Toast通知。Toast通知本质上动力是由XML来提供的，一开始我还不相信不知道XML原来有这么大的威力。现在就来看看和Toast相关的知识。1）实例化ToastNotification类。ToastNotification toast1 = new ToastNotification(xdoc);... app开发 动态 windows 应用 通知 NoMasp 2015-07-27 07:30 阅读(1350) 评论(6) [移动开发] Windows App开发之集成设置、帮助、搜索和共享 应用设置和应用帮助”设置“合约上一节中我们学习了如何将应用设置保存到本地，这种方式是通过在App内添加设置选项，这里还有一种方式。微软将其称为“设置”合约，并且所有的Windows应用商店应用都将自动配合这种合约。但是应用自带的这种设置如果不做任何修改可谓毫无作用。而我们添加这些设置则可以让应用更加个性化哦。SettingsFlyout首先新建一个SettingsFlyout页面，也许很多童鞋会像我... windows app 开发 应用 集成 NoMasp 2015-07-23 08:07 阅读(1279) 评论(2) [移动开发] Windows App开发之文件与数据 读取文件和文件夹名这一节开始我们将陆续看到Windows App是怎样操作文件的。在Windows上读取文件名、文件夹名首先我们在XAML中定义一个Button和TextBlock，将读取文件/文件夹名的过程写在前者的click事件中，后者则用来显示文件信息。... windows 应用开发 数据 文件 app NoMasp 2015-07-23 07:59 阅读(1603) 评论(4) [移动开发] Windows App开发之集合控件与数据绑定 为ListView和GridView添加数据ListView采用垂直堆叠得方式显示数据，而GridView则采用水平堆叠得方式。长相的话嘛，它们都差不多。 <ListView x:Name="listView1... Windows 开发 应用 控件 数据绑定 NoMasp 2015-07-21 07:59 阅读(885) 评论(0) [移动开发] Windows App开发之编辑文本与绘制图形 编辑文本及键盘输入相信大家都会使用TextBox，但如果要让文本在TextBox中换行该怎么做呢？将TextWrapping属性设置为Wrap，将AcceptsReturn属性设置为True就好咯。PasswordBox很明显就是一个密码框了，和其他的控件相比其有2个特殊之处，一个是其可以用MaxLength来控制最大的长度，一个是用PasswordChanged来捕捉密码的改名。显然比如QQ密码的... app开发 绘制图形 动画 windows 应用 NoMasp 2015-07-18 08:44 阅读(3093) 评论(5) 申请专栏 我的专栏 专栏创建者： NoMasp 创建时间：2015-12-08 文章数：6篇 浏览量： 9475 次 热门文章 最新评论

Recno:: 8
URL:: http://blog.csdn.net/column/details/wangshubo123.html

ParseText::
专栏：那些年躲过的坑儿 - 博客频道 - CSDN.NET 首页 博客专栏 博乐推荐 博客专家 热门文章 排行榜 我的博客 帮助 订阅 博客专栏 > 编程语言专栏 > 那些年躲过的坑儿 分享到： 新浪微博 腾讯微博 那些年躲过的坑儿 注意记录开发过程中遇到的问题；警示自我，提醒他人。 订阅 最新更新文章 [编程语言] 没有躲过的坑--你开发的软件安装在C盘Program Files (x86)下产生的异常 今天偶然发现的问题，就是自己写的win32程序安装在C盘Program Files (x86)文件夹下就会产生异常，而安装在其他文件夹，即使是D盘的Program Files (x86)下，程序也可以完美运行。引起这个，肯定是权限的问题。这个软件运行时，需要读写数据库，以及各种缓存数据。这就是我给自己挖的一个坑儿，相信很多人也会遇到这个问题。就是在开发程序、VS调试的时候，总喜欢使用当前路径，或者是... x86 数据库 c++ wangshubo1989 2015-12-03 20:46 阅读(671) 评论(0) [编程语言] 没有躲过的坑--std::string初始化、最快速判断字符串为空 之前说过，记得给变量初始化。今天突然想到了一个问题，如果声明了一std::string类型，怎么初始化呢？std::string test_string; std::string test_string_empty = ""; std::string test_string_null = NULL;//运行错误，而非编译错误简单测试：#include int main() {... string C++ wangshubo1989 2015-12-03 00:47 阅读(1466) 评论(1) [编程语言] 没有躲过的坑--0xC0000005: 读取位置 xxx时发生访问冲突 Bjarne Stroustrup老爷子说过： “C makes it easy to shoot yourself in the foot; C++ makes it harder, but when you do it blows your whole leg off.” 最近的工程时不时的出现0xC0000005: 读取位置 xxx时发生访问冲突，导致崩溃。先看看下面的程序：#includ... c++ 访问冲突 wangshubo1989 2015-12-01 22:57 阅读(981) 评论(0) [编程语言] 没有躲过的坑--C++函数的默认参数（重新定义默认参数） 默认参数指的是当函数调用中省略了实参时，自动使用一个值。这里首先需要注意的是： 对于带参数列表的函数，必须从右向左添加默认值。 也就是说，要为某个参数设置默认值，则必须为它右边的所有参数提供默认值。今天遇到的坑儿，就是函数使用默认参数，并且函数的声明和定义是分开的。char* left(const char* str, int n=1); int main() {}char* left(cons... c++ 默认参数 wangshubo1989 2015-12-01 21:06 阅读(676) 评论(0) [编程语言] 没有躲过的坑--vector使用erase后迭代器变成野指针 vector上镜率非常高，但是最近又被他fuck了一下。使用的就是vector的erase方法。erase–return value 首先需要明确一下vector的两种erase：C++98中是这样的：iterator erase (iterator position); iterator erase (iterator first, iterator last)C++11是这样的：iterat... c++ erase remove wangshubo1989 2015-11-30 23:38 阅读(818) 评论(0) [编程语言] 没有躲过的坑--没有及时break出for循环 break这个词都不陌生，最常用到的就是在switch语句中。如果在switch的case后面忘写了break，就会顺序执行到下一个case的对应的语句。我说的这种情况只是对于C++，对于C Sharp如果忘记了break，编译器是会报错的。仔细想想，好像自己还真没有用过break在其他地方。导致自己又掉入了一个大坑中。比如使用一个for循环查找数组中所要的元素中your_find对应的索引：int... c++ break wangshubo1989 2015-11-30 21:19 阅读(827) 评论(1) [编程语言] 没有躲过的坑--使用太多的全局变量 最近在工程中为了达到目的，使用了很多全局变量，导致程序运行效率降低。在程序运行时，根据需要到内存中相应的存储单元中调用，如果一个变量在程序中频繁使用，例如循环变量，那么，系统就必须多次访问内存中的该单元，影响程序的执行效率。因此，C\C++语言还定义了一种变量，不是保存在内存上，而是直接存储在CPU中的寄存器中，这种变量称为寄存器变量。总觉得有些太low，就Google了一番。首先我们清楚，有个叫寄... 全局变量 c++ wangshubo1989 2015-11-30 20:54 阅读(659) 评论(1) [编程语言] 没有躲过的坑--new一个指针数组、以及创建动态二维数组 实际工作中，有一个类A，现在需要使用多个A对象的指针，这是时候，首先想到的就是指针数组。———————————————————————————————————————————— 指针数组与数组指针 首先，指针数组和数组指针有何区别是老生常谈的东西： 看中文不方便，看看英文描述：指针数组：array of pointers，即用于存储指针的数组，也就是数组元素都是指针 数组指针：a point... 二维数组 c++ wangshubo1989 2015-11-26 22:19 阅读(700) 评论(0) [编程语言] 没有躲过的坑--使用using namespace std的坏习惯 使用命名空间的目的是对标识符的名称进行本地化，以避免命名冲突。在C++中，变量、函数和类都是大量存在的。如果没有命名空间，这些变量、函数、类的名称将都存在于全局命名空间中，会导致很多冲突。比如，如果我们在自己的程序中定义了一个函数toupper()，这将重写标准库中的toupper()函 数，这是因为这两个函数都是位于全局命名空间中的。命名冲突还会发生在一个程序中使用两个或者更多的第三方库的情况中。... C++ 命名空间 wangshubo1989 2015-11-26 21:20 阅读(600) 评论(0) [编程语言] 没有躲过的坑--map查找结果处理 通过键-值的方法进行搜索，可以使用map，极大的提高了速度。下面代码就是使用map的find查找，通过键，找出对应的值。map string_int_map; //对string_int_map进行初始化 map::iterator iter_string_int; string substring_to... c++ map find wangshubo1989 2015-11-25 22:53 阅读(625) 评论(1) [编程语言] 没有躲过的坑--有if就要有else(一定成对) 我们都很擅长流程控制，能写出很好很复杂的if语句。但是有时过于兴奋，更多的是过于自信而只写了if，而没有写else。这是一个争论不休的话题，很多人，很多大师都认为有的情况下可以不写else，只写if。支持 if 和 else 成对出现的人认为：不怕一万 就怕万一认为 if 和 else 没必要成对出现的人认为：不便于理解，太多没用的东西。我之前觉得也必须非要这样成对，但是今天在工程中遇到了问题。就是... c++ if-else wangshubo1989 2015-11-25 21:18 阅读(565) 评论(0) [编程语言] 没有躲过的坑--类中的静态成员变量（static or const static） 工作中是这样的，A类中有一个成员变量x，最开始声明为私有：class A{ private: int x; };现在需要在另一个cpp中使用这个x，所以要把它变为共有并且静态：class A{ public: static int x; };由此可见： 静态数据成员和普通数据成员一样遵从public,protected,private访问规则。 此时，编译，我们会得到一个错误，原... c++ static wangshubo1989 2015-11-24 21:28 阅读(724) 评论(0) [编程语言] 没有躲过的坑--捕获窗口之外的鼠标消息(钩子还是？？) 做一个发送表情的对话框，类似微信和QQ一样的，点击表情按钮，弹出表情框，鼠标点击表情框外时，这个表情框被kill。说白了 就是在这个窗口上获得窗口外面的鼠标消息。Google百度了一番，很多人说道使用钩子，才能获得窗口外面的click事件，这也未免太小题大做了吧。还好发现了一个简简单单的函数： SetCapture(*this); 函数功能：该函数在属于当前线程的指定窗口里设置鼠标捕获。一旦窗口... c++ 钩子 wangshubo1989 2015-11-23 22:50 阅读(1038) 评论(2) [编程语言] 没有躲过的坑--正则表达式截取字符串 工程中，需要从字符串中匹配出以:开头，并以:结束的字符串。Google还是百度，很多C++的正则表达式都是通过st::tr1或boost库中使用的，但是我们仅仅用一个小小的功能，就用一个库不是很好的办法。对的，之前我的博客已经介绍了C++11的新特性-正则表达式。所以可以不使用其他的库，来完成任务：std::vector all_sub_string = {}; std::strin... c++ 正则 regex wangshubo1989 2015-11-23 22:06 阅读(14349) 评论(2) [编程语言] 没有躲过的坑--map的初始化（插入数据） 最近工作中需要使用map，进行查询。首先简单介绍一点map，也许是教科书里讲授最少的STL知识吧。但是在实际工作中map挺重要的，用于查找很方便快捷，尤其是以键和值的形式存在的！1、头文件#include2、map的功能自动建立Key － value的对应。key 和 value可以是任意你需要的类型。 根据key值快速查找记录，查找的复杂度基本是Log(N)，如果有1000个记录，最... map wangshubo1989 2015-11-23 21:21 阅读(1140) 评论(1) [编程语言] 没有躲过的坑--意想不到的除数为零 工程中有这样一个需求，需要获得一张图片的width和height，然后等比例的显示这张图片。首先是获得得到一张图片的路径，然后计算出他的width和height，然后计算：int resize_width = 160; int resize_height = 160; if (image_width > image_height) { resize_width = 160; resi... c++ wangshubo1989 2015-11-22 22:23 阅读(792) 评论(0) [编程语言] 没有躲过的坑--成对使用new和delete时要采取相同的形式 new创建类对象与不new区别：new创建类对象需要指针接收，一处初始化，多处使用 new创建类对象使用完需delete销毁 new创建对象直接使用堆空间，而局部不用new定义类对象则使用栈空间 new对象指针用途广泛，比如作为函数返回值、函数参数等而且每个学习C++编程的人都知道成对的使用new和delete，也也就是new申请的内存用delete释放，new []申请的内存由delete... c++ wangshubo1989 2015-11-22 22:02 阅读(725) 评论(1) [编程语言] 没有躲过的坑--程序中的变量未初始化 变量未初始化是C++编程中最为常见和易犯的错误之一。但是对于全局变量，我们可以不进行初始化，这个变量会默认的用零进行初始化，但是这通常不是一个好的习惯。我们今天先不探讨全局变量还是静态全局变量。那么对于一个全部变量来说，初始化为零和不初始化（编译器替我们初始化为零）又有什么区别吗？全局变量和局部变量初始化与不初始化的区别 即int x 和 int x=0的区别。int x =0; 跟 int x;... c++ 初始化 wangshubo1989 2015-11-21 14:44 阅读(234) 评论(2) [编程语言] 没有躲过的坑--重载赋值运算符的自我赋值 C++中有个很重要的事情，就是对于类重载赋值运算符，而达到我们想要的结果。 先看看这几行代码：//Window 是一个类 Window w; w = w; // 再傻的人也不会这么干 w[i] = w[j]; // 这个情况偶尔会发生作为一个优秀的工程师，就要考虑到任何可能的情况。看一段更加完整的代码：class ScrollBar {};class Window {... c++ operator wangshubo1989 2015-11-21 12:26 阅读(567) 评论(1) [编程语言] 没有躲过的坑--抽象类不能实例化对象（但是你明明定义的不是抽象类） 今天在开发过程中遇到了一个错误：不能实例化抽象类这个错误完全是自己疏忽大意造成的。首先我们知道，一个类如果是抽象类，我们就不能用这个类实例化一个对象。什么样的类是抽象类呢？ C++没有C Sharp中的关键字abstract，但是当一个类中有一个或多个纯虚函数的时候，这个类就自动成为了抽象类，即不可以实例化。纯虚函数是一种特殊的虚函数，在许多情况下，在基类中不能对虚函数给出有意义的实现，而把它声明... c++ 抽象类 纯虚函数 wangshubo1989 2015-11-20 23:01 阅读(843) 评论(0) 32条数据 共2页 1 2 下一页 尾页 申请专栏 我的专栏 专栏创建者： wangshubo1989 创建时间：2015-11-12 文章数：33篇 浏览量： 37229 次 热门文章 最新评论 没有躲过的坑--map查找结果处理 wangyaninglm ： 作者总是能够注意到平时编程中，我们经常忽略点，受益匪浅 没有躲过的坑--std::string初始化、最快速判断字符串为空 zhchg634360230 ： 我觉得empty方法快，毕竟是里面自带的函数 没有躲过的坑--使用太多的全局变量 u010927640 ： 尽管是别人的经验，只有痛在自己身上的时候才有感觉。 没有躲过的坑--没有及时break出for循环 u012466304 ： 犯错并不可怕，重要的是我们的心态 没有躲过的坑--智能指针陷阱 visionfans ： 博主主要看哪些c++11的资料? 没有躲过的坑--正则表达式截取字符串 u010539352 ： 博主的工程中用的是C++？？ 没有躲过的坑--正则表达式截取字符串 u010850027 ： 感谢楼主的分享，学习了`(*∩_∩*)′

Recno:: 9
URL:: http://blog.csdn.net/column/details/wangshubo1233.html

ParseText::
专栏：一起学libcef - 博客频道 - CSDN.NET 首页 博客专栏 博乐推荐 博客专家 热门文章 排行榜 我的博客 帮助 订阅 博客专栏 > 移动开发专栏 > 一起学libcef 分享到： 新浪微博 腾讯微博 一起学libcef Chromium Embedded Framework 3 is amazing. However, there are very few examples readily available on the web. 那就一起学吧！ 订阅 最新更新文章 [编程语言] 一起学libcef--一个应用libcef的简单例子（windows程序） 之前博客《一起学libcef–搭建自己的libcef运行环境（Win32程序，错误C2220解决方案）》讲述了如何在win32程序中搭建libcef的环境，今天就通过一个简单的例子，在windows程序中使用libcef。现在再重新写一下如何搞？直接在源代码上搞起！ 1 打开源码cefclient解决方案 2 确保cefclient例子可以完美运行 3 在cefclient中，除了util.h... windows libcef wangshubo1989 2015-12-06 23:01 阅读(822) 评论(0) [编程语言] 一起学libcef--libcef的基本类和方法介绍（如何产生一个你自己的浏览器） 现在还是在win32项目的基础上，对libcef进行简单的剖析。注意是针对WinMain函数中libcef的类以及方法的介绍。首先上一段代码：#include #include "cefsimple/simple_app.h"// Entry point function for all processes. int APIENTRY WinMain(HINSTANCE hI... libcef c++ wangshubo1989 2015-12-05 21:45 阅读(1051) 评论(0) [编程语言] 一起学libcef--搭建自己的libcef运行环境（Win32程序，错误C2220解决方案） 现在就来讲讲如何在自己的win32程序中搭建libcef运行环境。首先就是建一个空的win32项目，例如名字为TestLibCef。1. cefsimple目录（注意是拷贝文件夹）拷贝到新工程下并包含在项目中（注意，是TestLibCef\TestLibCef文件夹下）2. 并在TestLibCef\TestLibCef文件夹下，新建一个dll文件夹 源码把Debug目录下的文件全部拷贝到该文件夹... c++ libcef wangshubo1989 2015-12-04 22:10 阅读(1015) 评论(4) [编程语言] 一起学libcef--源码文件介绍(VS2015运行DEMO) 昨天的博客《一起学libcef–开篇(下载、CMake的使用)》讲诉如何下载CEF，并如何得到对应vs版本的解决方案。今天就展示一下，得到的工程文件夹中文件的作用。include – 这个文件夹里面放CEF客户应用程序所需的头文件 libcef – 此文件夹存放CEF的静态库 libcef_dll – 此文件夹CEF的动态拉链库 tests – 此文件夹存放测试的例子 cef... c++ libcef demo 源码 wangshubo1989 2015-12-04 20:57 阅读(804) 评论(0) [编程语言] 一起学libcef--开篇(下载、CMake的使用) 微信、qq等很多windows客户端都用到了libcef.dll，从现在开始准备学习学习。1.什么是libcef Chromium嵌入式框架对于嵌入chromium浏览器的其他应用程序来说是一个简单的框架。。其遵循建立于2008年Marshall Greenblatt 的BSD许可协议。基于Google Chromium工程。不像Chromium工程本身，主要集中开发Google Chrome应用... libcef google chrome wangshubo1989 2015-12-03 22:08 阅读(945) 评论(0) 申请专栏 我的专栏 专栏创建者： wangshubo1989 创建时间：2015-12-06 文章数：5篇 浏览量： 4637 次 热门文章 最新评论 一起学libcef--搭建自己的libcef运行环境（Win32程序，错误C2220解决方案） sinat_27399773 ： @wangshubo1989:好像找到原因了，我用的是64位的cef源码，博主的是32位吧，我换回3... 一起学libcef--搭建自己的libcef运行环境（Win32程序，错误C2220解决方案） wangshubo1989 ： @sinat_27399773:留邮箱 把我的win32的libcef项目发给你 vs2015的 我... 一起学libcef--搭建自己的libcef运行环境（Win32程序，错误C2220解决方案） sinat_27399773 ： 我按你的步骤发现源文件的includ头都报错，然后修改路径后下面的代码还是有错，找不到错误的地方，有... 一起学libcef--搭建自己的libcef运行环境（Win32程序，错误C2220解决方案） SP_daiyq ： 期待博主继续发布libcef的系列博客

Recno:: 10
URL:: http://blog.csdn.net/column/details/wangshubo1989.html

ParseText::
专栏：C++你所不知道的事儿 - 博客频道 - CSDN.NET 首页 博客专栏 博乐推荐 博客专家 热门文章 排行榜 我的博客 帮助 订阅 博客专栏 > 编程语言专栏 > C++你所不知道的事儿 分享到： 新浪微博 腾讯微博 C++你所不知道的事儿 讲述一些人生所忽视的细节。 订阅 最新更新文章 [编程语言] 你所不知道的事儿--C++中delete指针后最好赋值为NULL 我们都知道，在C++中，用new声明的指针变量，都要delete。除非你完完全全使用智能指针，而不用担心内存泄露的问题。如果你是来自C Sharp阵营，那么也许你习惯于托管代码带来的好处，垃圾内存回收机制。但是C++中，需要手动进行释放，谁分配谁释放。首先，我要强调的一点就是delete是释放指针指向的内存，而并不是指针本身所占有的内存。 慢慢品味这句话。我们试图写下如下的代码：#include<i... c++ delete null wangshubo1989 2015-10-23 23:00 阅读(1530) 评论(1) [编程语言] 浅析C++中的初始化列表（区别赋值和初始化） 派生类不能直接访问基类的私有成员，而必须通过基类方法进行访问。具体来说，派生类构造函数必须使用基类构造函数。创建派生类对象时，程序首先创建基类对象。C++使用初始化列表完成这项工作。RatedPlayer::RatedPlayer(int r, const string &fn):TableTennisPlayer(fn) { rating = r; }其中TableTennisPlayer... c++ wangshubo1989 2015-10-06 22:36 阅读(1750) 评论(1) [编程语言] 你所不知道的事儿--#ifndef #endif不能防止编译器将文件包含两次 我们知道，在一个文件中只能将同一个头文件包含一次。记住这个规则很容易，但是很可能在不知情的情况下将头文件包含多次。 因此， 在定义头文件的时候，我们常常这样写：#ifndef A_H_ #define A_H_ ... #endif编译器首次遇到该文件时，名称A_H_没有定义，这种情况下编译器将查看#ifndef和#endif之间的内容。如果在同一个文件中遇到其他包含a.h的代码时，编译器将知道... #define wangshubo1989 2015-09-09 08:54 阅读(342) 评论(2) [编程语言] 你所不知道的事儿--C++类模板的声明和实现不能分离 也许你具有良好的编程习惯，在定义一个类的时候总会把声明和实现分离开，位于不同的文件中。比如你定义一个类A，首先创建一个.h文件，代码如下：class A { public: A(int b); void show(); ~A(); private: int a; }接下来你创建一个.cpp文件实现类的声明，代码如下：#include"classA.h" #includ... class template wangshubo1989 2015-09-06 15:05 阅读(584) 评论(2) 申请专栏 我的专栏 专栏创建者： wangshubo1989 创建时间：2015-09-18 文章数：4篇 浏览量： 4206 次 热门文章 最新评论 你所不知道的事儿--C++类模板的声明和实现不能分离 xxping517 ： 如果模板文件太大不利于管理时，通常将实现代码写到一个单独的文件（一般以.inl作为后缀名），然后再头... 你所不知道的事儿--C++类模板的声明和实现不能分离 xxping517 ： 如果模板文件太大不利于管理时，通常将实现代码写到一个单独的文件（一般以.inl作为后缀名），然后再头...

Recno:: 11
URL:: http://blog.csdn.net/column/details/wangshubostring.html

ParseText::
专栏：实战c++中的string系列 - 博客频道 - CSDN.NET 首页 博客专栏 博乐推荐 博客专家 热门文章 排行榜 我的博客 帮助 订阅 博客专栏 > 编程语言专栏 > 实战c++中的string系列 分享到： 新浪微博 腾讯微博 实战c++中的string系列 本专栏主要记录和讲诉实际工作中，关于string的一些操作，一些tips和一些tricks. 订阅 最新更新文章 [编程语言] 实战c++中的string系列--不要使用memset初始化string(一定别这么干) 参考链接： http://www.cppblog.com/qinqing1984/archive/2009/08/07/92479.html百度百科第一次这么给力： void *memset(void *s, int ch, size_t n); 函数解释：将s中前n个字节 （typedef unsigned int size_t ）用 ch 替换并返回 s 。 memset：作用是在一段内... string c++ wangshubo1989 2015-12-14 21:32 阅读(1105) 评论(0) [编程语言] 实战c++中的string系列--将string用于switch语句(c++做C#的事儿, switch中break还是return厉害) 作为一个C++程序员，或是出于习惯，或是出于无奈，你多少次这么写：if (!strcmp(pszValue, "Value X")) DoThis(); else if (!strcmp(pszValue, "Value Y")) DoThat(); else if (!strcmp(pszValue, "Value Z")) DoSomethingElse(); else... string c++ wangshubo1989 2015-12-14 20:57 阅读(1069) 评论(0) [编程语言] 实战c++中的string系列--函数返回局部变量string(引用局部string，局部string的.c_str()函数) 当函数返回字符串的时候，我们可以定义返回string和string&。1写一个返回string引用的函数std::string & TestStringReference() { std::string loal_str = "holy shit"; return loal_str; }这个函数当然是错误的，编译器会提示我们： 返回局部变量或临时变量的地址: loal_str 即... string c++ wangshubo1989 2015-12-13 21:48 阅读(819) 评论(0) [编程语言] 实战c++中的string系列--string的连接(+= or append or push_back) string的连接也是经常用到的，string重载了一些运算符： 首先看一看重载+运算符，用于串联两个字符串对象： 源码：template basic_string operator+( const basic_string<C... string c++ wangshubo1989 2015-12-13 20:15 阅读(845) 评论(1) [编程语言] 实战c++中的string系列--string与char*、const char *的转换(data() or c_str()) 在工程中，我们也有很多时候用到string与char*之间的转换，这里有个一我们之前提到的函数 c_str()，看看这个原型：const char *c_str();c_str()函数返回一个指向正规C字符串的指针, 内容与本string串相同. 这就看到了吧，返回值是const char*，这里需要注意一下。1 string转const char* 当然是用到上面所述的方法c_str()：st... string c++ wangshubo1989 2015-12-13 11:43 阅读(554) 评论(0) [编程语言] 实战c++中的string系列--CDuiString和string的转换(duilib中的cduistring) 使用所duilib的人定会知道cduistring类型，先看看这个类是怎么定义的：class UILIB_API CDuiString { public: enum { MAX_LOCAL_STRING_LEN = 127/*63*/ }; CDuiString(); CDuiString(const TCHAR ch);... string c++ wangshubo1989 2015-12-12 15:46 阅读(1143) 评论(0) [编程语言] 实战c++中的string系列--std:vector<char> 和std:string相互转换(vector to stringstream) 有时候也会遇到std:vector与转std:string 相互转换的情况。首先看一下vector如何转string：std::vector *data = response->getResponseData(); std::string res; //方法一 for (int i = 0;isize();++i) { res+=(*data)[i]; }... string c++ wangshubo1989 2015-12-12 13:30 阅读(1017) 评论(0) [编程语言] 实战c++中的string系列--string到LPCWSTR的转换 今天再来介绍一下如何从string到LPCWSTR的转换。LPCWSTR是什么类型呢？ 看看如何定义的：typedef const wchar_t* LPCWSTR;顾名思义就是： LPCWSTR是一个指向unicode编码字符串的32位指针，所指向字符串是wchar型，而不是char型。比如说MessageBoxW的第二、第三个参数就是LPCWSTR类型。`MessageBoxW(__in... string c++ wangshubo1989 2015-12-12 12:40 阅读(970) 评论(0) [编程语言] 实战c++中的string系列--std::string与MFC中CString的转换 搞过MFC的人都知道cstring，给我们提供了很多便利的方法。CString 是一种很有用的数据类型。它们很大程度上简化了MFC中的许多操作，使得MFC在做字符串操作的时候方便了很多。不管怎样，使用CString有很多特殊的技巧，特别是对于纯C背景下走出来的程序员来说有点难以学习。但是很多情况下，我们还是需要cstring和string的转换。 分两步： 1把cstring转为char数组... string c++ wangshubo1989 2015-12-12 12:36 阅读(1026) 评论(0) [编程语言] 实战c++中的string系列--string的遍历(使用下标还是iterator) 迭代器提供了访问容器中对象的方法。例如，可以使用一对迭代器指定list或vector中的一定范围的对象。迭代器就如同一个指针。事实上，C++的指针也是一种迭代器。但是，迭代器也可以是那些定义了operator*()以及其他类似于指针的操作符地方法的类对象.我们都知道可以用下标运算来访问string对象和vector对象。而另外还有一种更通用的方法也可以实现这样的方法。名曰：迭代器（iterator）... string c++ iterator wangshubo1989 2015-12-12 00:19 阅读(1188) 评论(0) [编程语言] 实战c++中的string系列--string的初始化、删除、转大小写(construct erase upper-lower) string是有迭代器设计模式的，我还没有体会到迭代器带给我的好处，很多时候使用类似数组索引的方法就可以完成任务。场景1：删除string所有的大写字母 这里用到erase方法：#include #include #include using namespace std; int main() { string str... string c++ wangshubo1989 2015-12-11 21:28 阅读(1079) 评论(0) [编程语言] 实战c++中的string系列--string的分割、替换(类似string.split或是explode()) 对一个字符串根据某个字符进行分割也是在实战中经常遇到的问题，也是面试中经常会被人提及的。如果你是个C Sharp程序员，你会知晓string.split函数，有下面这些重载： 1) public string[] Split(params char[] separator) 2) public string[] Split(char[] separator, int count) 3) pub... string c++ wangshubo1989 2015-12-10 23:58 阅读(769) 评论(0) [编程语言] 实战c++中的string系列--string的替换、查找(一些与路径相关的操作) 今天继续写一些string操作。 string给我们提供了很多的方法，但是每在使用的时候，就要费些周折。场景1： 得到一个std::string full_path = “D:\program files\csdn”，但是我想得到”D:\program files\vagaa”这个路径。 这就需要字符串的替换std::string full_path = "D:\\program files\... string c++ wangshubo1989 2015-12-10 21:48 阅读(664) 评论(0) [编程语言] 实战c++中的string系列--指定浮点数有效数字并转为string 上一篇博客讲了好几种方法进行number到string的转换，这里再单独说一下float或是double到string的转换。还是处于控件显示的原因，比如说要显示文件的大小，我们从服务器可以获得这个文件的总bytes。这样就需要我们根据实际情况是显示bytes、kb、mb等单位。常用的做法就是把num_bytes/1024，这个时候往往会得到浮点型，浮点型转string也没问题，但是如果你需要保留这... string c++ wangshubo1989 2015-12-09 21:51 阅读(1054) 评论(0) [编程语言] 实战c++中的string系列--string与整型或浮点型互转 教科书中很少会提到string与int或是float的相互转换，但是在实际工程中会经常遇到，尤其在做UI控件显示的时候。比如说你要在edit控件中显示一个数值，那你就需要把这个数值首先转为string，然后再将这个string付给edit控件。网上你会找到很多的转换方法，个人觉得效率差不多的情况下，简洁最好。这里主要用到的是stringstreams：stringstream 是 C++ 提供的另一... string c++ wangshubo1989 2015-12-09 21:32 阅读(819) 评论(0) 申请专栏 我的专栏 专栏创建者： wangshubo1989 创建时间：2015-12-12 文章数：15篇 浏览量： 14121 次 热门文章 最新评论 实战c++中的string系列--string的连接(+= or append or push_back) wangyaninglm ： 写的很详细，受益匪浅，尤其是最后添加字符到末尾那块，一般很难注意到，发现学c++还要多看源码的

Recno:: 12
URL:: http://blog.csdn.net/column/details/wangshubovector.html

ParseText::
专栏：实战c++中的vector系列 - 博客频道 - CSDN.NET 首页 博客专栏 博乐推荐 博客专家 热门文章 排行榜 我的博客 帮助 订阅 博客专栏 > 编程语言专栏 > 实战c++中的vector系列 分享到： 新浪微博 腾讯微博 实战c++中的vector系列 本专栏主要记录和讲诉实际工作中，关于vector的一些操作，一些tips和一些tricks. 订阅 最新更新文章 [编程语言] 实战c++中的vector系列--再谈vector的insert()方法(都是make_move_iterator惹的祸) 之前说过了关于vector的insert()方法，把vector B的元素插入到vector A中，vector A中的结果我们可想而知，但是vector B中的元素还会如何？看看之前写过的程序：#include #include int main () { std::vector myvector (3,100); std::vector... vector c++ wangshubo1989 昨天 21:33 阅读(577) 评论(0) [编程语言] 实战c++中的vector系列--对vector<自定义类>使用std::find 和 std::find_if 算法 之前博客讲了一些关于std::find和std::find_ if的一些用法，但是没有讲述对于vector中存储的是自定义的类，那么怎么样使用std::find和std::find_if进行查找呢？先定义一个类：class Item { private: std::string m_ItemId; int m_Price; int m_Count; public:... vector c++ wangshubo1989 昨天 21:19 阅读(718) 评论(0) [编程语言] 实战c++中的vector系列--使用sort算法对vector<unique_ptr<string>>进行排序(sort函数“应输入 2 个参数，却提供了 3 个) 之前博客写了对vector使用sort算法进行的排序，之前也写到过vector<unique_ptr>的一些处理方法。今天就写一下对vector<unique_ptr>使用sort算法进行排序。#include #include #include #include #include<memory... vector c++ wangshubo1989 昨天 20:16 阅读(608) 评论(0) [编程语言] 实战c++中的vector系列--vector应用之STL的find、find_if、find_end、find_first_of、find_if_not(C++11) 使用vector容器，即避免不了进行查找，所以今天就罗列一些stl的find算法应用于vector中。find() Returns an iterator to the first element in the range [first,last) that compares equal to val. If no such element is found, the function retur... vector c++ wangshubo1989 前天 23:33 阅读(723) 评论(1) [编程语言] 实战c++中的vector系列--使用sort算法对vector进行排序(对vector<string>排序、使用稳定的排序std::stable_sort()) 写了挺多关于vector的操作了，正好工作中遇到对vector进行排序的问题，这里就讨论一下。直接使用sort算法，那就先了解一下：template void sort (RandomAccessIterator first, RandomAccessIterator last); template <class RandomAccess... vector c++ wangshubo1989 前天 21:13 阅读(556) 评论(1) [编程语言] 实战c++中的vector系列--vector的遍历(stl算法、vector迭代器(不要在循环中判断不等于end())、operator[]) 遍历一个vector容器有很多种方法，使用起来也是仁者见仁。通过索引遍历：for (i = 0; i<v.size(); i++) { cout << v[i] << " "; }迭代器遍历：for (vInt::const_iterator iter = v.begin(); iter != v.end();iter++) { cout << *iter << " "; }算法遍历... vector c++ wangshubo1989 3天前 22:01 阅读(553) 评论(0) [编程语言] 实战c++中的vector系列--vector的一些异常 今天就写一写vector的一些异常，可以捕捉的异常。out_of_range 相当于数组的越界了。vector会自动增大容量，但是如果索引超出了当前的size，就会引发异常。#include #include using namespace std; int main() { vectorv(4); std::cout << v[0]... vector c++ wangshubo1989 3天前 20:43 阅读(522) 评论(0) [编程语言] 实战c++中的vector系列--正确释放vector的内存(clear(), swap(), shrink_to_fit()) 关于vector已经写的差不多了，似乎要接近尾声了，从初始化到如何添加元素再到copy元素都有所涉及，是时候谈一谈内存的释放了。是的，对于数据量很小的vector，完全没必要自己进行主动的释放，因为那样对程序的效率几乎没有影响。但是当vector中存入大量的数据后，并且都数据进行了一些操作，比如删除后，如果我们能积极主动的去释放内存，那么是非常明智的。写到这里，应该明确了size和capacity的... vector c++ wangshubo1989 5天前 21:18 阅读(789) 评论(0) [编程语言] 实战c++中的vector系列--C++11对vector成员函数的扩展(cbegin()、cend()、crbegin()、crend()、emplace()、data()) 前面提到的emplace_back就是C++11所增加的内容。所以这篇博客就是想罗列一下C++11对vector容器的扩充。std::vector::cbegin和std::vector::cend 这两个方法是与std::vector::begin和std::vector::end相对应的，从字面就能看出来，多了一个’c’，顾名思义就是const的意思。 所以： std::vector::c... vector c++ wangshubo1989 5天前 18:07 阅读(797) 评论(0) [编程语言] 实战c++中的vector系列--emplace_back造成的引用失效 上篇将了对于struct或是class为何emplace_back要优越于push_back，但是还有一些细节没有提及。今天就谈一谈emplace_back造成的引用失效。直接撸代码了：#include #include #include using namespace std;int main() { vector ive... vector c++ wangshubo1989 6天前 13:32 阅读(516) 评论(0) [编程语言] 实战c++中的vector系列--知道emplace_back为何优于push_back吗？ 上一篇博客说道vector中放入struct，我们先构造一个struct对象，再push_back。那段代码中，之所以不能使用emplace_back，就是因为我们定义的struct没有显示的构造函数。emplace和解？ 放列的意思。这次我们不把struct当做vector的元素了，我们把一个class当做vector的元素，写下代码：#include #include <... vector c++ wangshubo1989 6天前 10:51 阅读(570) 评论(0) [编程语言] 实战c++中的vector系列--creating vector of local structure、vector of structs initialization 之前一直没有使用过vector，现在就写一个简短的代码： #include #include int main() { struct st { int a; }; std::vector v; v.resize(4); for (std::vector::size_type i = 0; i <... vector c++ wangshubo1989 6天前 00:52 阅读(638) 评论(0) [编程语言] 实战c++中的vector系列--vector<unique_ptr<>>赋值给vector<unique_ptr<>> 之前博客讲到 vector可以使用insert方法，将一个vector copy到另一个vector的后面。之前的博客也讲到过，如果vector容器内部放的是unique_ptr是需要进行所有权转移的。现在就来八一八如何vector<unique_ptr<>> insert to vector<unique_ptr<>>如果常规的vector，我们就可以这么使用insert：// insertin... vector c++ wangshubo1989 2015-12-17 23:05 阅读(829) 评论(1) [编程语言] 实战c++中的vector系列--vector<unique_ptr<>>作为函数的参数 现在就讨论一下，把vector作为函数的参数进行传递。 也是直接上一段代码：#include #include #include using namespace std; void display_vector(vector<unique_ptr> vec); int main() { vector<unique_ptr<in... vector c++ wangshubo1989 2015-12-17 21:20 阅读(817) 评论(0) [编程语言] 实战c++中的vector系列--vector<unique_ptr<>>初始化（所有权转移） C++11为我们提供了智能指针，给我们带来了很多便利的地方。那么如果把unique_ptr作为vector容器的元素呢？形式如出一辙：vector<unique_ptr > vec;但是怎么给vec添加元素呢？看下面：#include #include #include using namespace std; int main() {... vector c++ wangshubo1989 2015-12-17 21:05 阅读(775) 评论(0) [编程语言] 实战c++中的vector系列--可怕的迭代器失效之二（删除vector中元素） 有了上一篇博客《实战c++中的vector系列–可怕的迭代器失效（vector重新申请内存）》的基础，这里的内容就显得简单了。直接撸代码：#include #include using namespace std; int main() { vector v; v.push_back(1); v.push_back(2);... vector c++ wangshubo1989 2015-12-16 23:23 阅读(637) 评论(2) [编程语言] 实战c++中的vector系列--可怕的迭代器失效（vector重新申请内存） vector给我们提供了很多的方便，但是偶尔也会有陷阱。当不注意的时候，就掉入其中。说到底，还是对vector的机制不够彻底掌握。很轻松的写下这段代码：#include #include using namespace std; int main() { vector v; v.push_back(1); std::vector<i... vector c++ wangshubo1989 2015-12-16 23:05 阅读(634) 评论(1) [编程语言] 实战c++中的vector系列--使用vector构造二维数组 二维数组有时候被用到，但是很少有人会使用vector来构造一个二维数组。首先，需要明确的是，在计算机的世界中，根本不存在二维数组，只是使用者的一个概念罢了。其实我们所谓的二维数组也必须是一段连续的内存。很多情况下，我们可以把常规的二维数组用一个vector表示，只要索引对应即可。那么，我若一意孤行呢，我就想vector里面放一个vector呢？#include #incl... vector c++ wangshubo1989 2015-12-16 20:42 阅读(536) 评论(0) [编程语言] 实战c++中的vector系列--copy set to vector(别混淆了reserve和resize) stl算法中有个copy函数，我们可以轻松的写出这样的代码：#include #include #include using namespace std; int _tmain(int argc, _TCHAR* argv[]) { double darray[10]={1.0,1.1,1.2,1.3,1.4,1.5,1.6,1.7,... vector c++ wangshubo1989 2015-12-15 23:56 阅读(633) 评论(0) [编程语言] 实战c++中的vector系列--assign() push_back() or insert() 之前博客《实战c++中的vector系列–构造、operator=和assign区别》写了关于assign()方法，其中有一条就是: replacing its current contents modifying its size accordingly 就是替换了vector中已经存在的元素。这里就不再说明assign了。push_back故名意思就是在vector末尾追加：void p... vector c++ wangshubo1989 2015-12-15 21:51 阅读(591) 评论(0) 22条数据 共2页 1 2 下一页 尾页 申请专栏 我的专栏 专栏创建者： wangshubo1989 创建时间：2015-12-16 文章数：22篇 浏览量： 14137 次 热门文章 实战c++中的vector系列--vector应用之STL的find、find_if、find_end、find_first_of、find_if_not(C++11) 实战c++中的vector系列--对vector<自定义类>使用std::find 和 std::find_if 算法 实战c++中的vector系列--使用sort算法对vector<unique_ptr<string>>进行排序(sort函数“应输入 2 个参数，却提供了 3 个) 实战c++中的vector系列--再谈vector的insert()方法(都是make_move_iterator惹的祸) 实战c++中的vector系列--使用sort算法对vector进行排序(对vector<string>排序、使用稳定的排序std::stable_sort()) 实战c++中的vector系列--vector的遍历(stl算法、vector迭代器(不要在循环中判断不等于end())、operator[]) 实战c++中的vector系列--vector的一些异常 最新评论 实战c++中的vector系列--使用sort算法对vector进行排序(对vector<string>排序、使用稳定的排序std::stable_sort()) u010850027 ： 没什么值得畏惧，你唯一需要担心的是，你配不上自己的梦想，也辜负了曾经的苦难。 实战c++中的vector系列--vector应用之STL的find、find_if、find_end、find_first_of、find_if_not(C++11) u010850027 ： 感谢楼主的分享，学习了`(*∩_∩*)′ 实战c++中的vector系列--vector<unique_ptr<>>赋值给vector<unique_ptr<>> chenyd9027 ： 学习了 实战c++中的vector系列--可怕的迭代器失效之二（删除vector中元素） wangshubo1989 ： @zouzhipeng1717:每一次erase()，删除元素后面的元素依次向前移动一个位置，所以这... 实战c++中的vector系列--可怕的迭代器失效（vector重新申请内存） wangyaninglm ： 受益匪浅，学习了，这个之前用vector 的迭代器时候确实很少注意到 实战c++中的vector系列--可怕的迭代器失效之二（删除vector中元素） zouzhipeng1717 ： 在擦除容器的时候，并不会改变vector的容量，那么自然就不会造成容器的重新加载，那么，为何迭代器会...

Recno:: 13
URL:: http://blog.csdn.net/csfreebird/article/details/49622857

ParseText::
Leiningen 与 maven - Dean Chen的专栏 - 博客频道 - CSDN.NET Dean Chen的专栏 乐视大数据部招聘C++/Java工程师(chenshu@letv.com) 目录视图 摘要视图 订阅 学院APP首次下载，可得50C币！     欢迎来帮助开源“进步”     当讲师？爱学习？投票攒课吧     认识Atlassian Datacenter产品     深圳小伙伴的福利来啦 Leiningen 与 maven 标签： clojure 2015-11-03 22:12 754人阅读 评论 (0) 收藏 举报 分类： Clojure （33） 作者同类文章 X 版权声明：本文为博主原创文章，未经博主允许不得转载。 Leiningen是管理clojure工程的, 其实就是使用clojure管理clojure工程，project.clj是其主要配置文件，其基本原理是根据project.clj文件生成pom.xml，然后利用maven的强大功能进行项目管理。 如何测试project.clj是否合理 使用命令lein pom, 会根据当前目录下的project.clj文件生成pom.xml，然后通过检查pom.xml文件，可以知道project.clj文件是否设置争取。 特别是依赖包的groupid, artificatid, exclusions, scope等 如何设置依赖 ﻿﻿:dependencies [groupid/artifactid version ] 注意groupid和artificatid中间用 / 分开， 版本空一格 如何将依赖的依赖去除 :dependencies [[org.clojure/clojure "1.5.1"] [org.apache.kafka/kafka_2.10 "0.8.2.1" :exclusions [[org.apache.zookeeper/zookeeper] [log4j/log4j] [slf4j-api/org.slf4j]] ] 在:dependencies内使用:exclusions即可，可以一次去掉多个间接依赖。 设置某个依赖的scope 下面的:provided就是 storm-core的scope。在maven中，provided代表运行是依赖由运行环境提供(provided)，这里仅作编译，测试使用。打包的时候就不会包含jar包。 :profiles {:provided {:dependencies [[org.apache.storm/storm-core "0.9.5" :exclusions [[org.slf4j/log4j-over-slf4j] [org.slf4j/slf4j-api] [logback-classic/ch.qos.logback]] ]]}} 当然，:exclusions还可以使用，继续用它去掉间接依赖包。 设置主类 :main 用来设置住类，比如： :main kafka2hdfs.core 预编译 如果想要将某个clj文件编译成java class，需要两件事情 1. 在这个clj文件中增加(:gen-class), 比如在core.clj中 (ns kafka2hdfs.core (:import [backtype.storm StormSubmitter LocalCluster spout.SchemeAsMultiScheme] [storm.kafka ZkHosts SpoutConfig StringScheme KafkaSpout] [org.apache.storm.hdfs.bolt HdfsBolt] [org.apache.storm.hdfs.bolt.format DefaultFileNameFormat DelimitedRecordFormat] [org.apache.storm.hdfs.bolt.sync CountSyncPolicy] [org.apache.storm.hdfs.bolt.rotation TimedRotationPolicy] ) (:use [backtype.storm clojure config]) ;; for (topology ...) (:gen-class)) 2. 在project.clj中用:aot标记这个类 :aot [kafka2hdfs.core] aot 表示 ahead of time, 指提前，就是预编译的意思。 看看效果 下面的project.clj文件，当运行lein pom后 (defproject kafka2hdfs "0.1.0-SNAPSHOT" :description "demo to show read from kafka and write to hdfs" :url "http://blog.csdn.net/csfreebird" :license {:name "Eclipse Public License" :url "http://www.eclipse.org/legal/epl-v10.html"} :dependencies [[org.clojure/clojure "1.5.1"] [org.apache.kafka/kafka_2.10 "0.8.2.1" :exclusions [[org.apache.zookeeper/zookeeper] [log4j/log4j] [slf4j-api/org.slf4j]] ] [org.apache.storm/storm-kafka "0.9.5"] [org.apache.storm/storm-hdfs "0.9.5"]] :main kafka2hdfs.core :aot [kafka2hdfs.core] :profiles {:provided {:dependencies [[org.apache.storm/storm-core "0.9.5" :exclusions [[org.slf4j/log4j-over-slf4j] [org.slf4j/slf4j-api] [logback-classic/ch.qos.logback]] ]]}} :plugins [[cider/cider-nrepl "0.10.0-SNAPSHOT"]] :target-path "target/%s") 会生成pom.xml如下 <?xml version="1.0" encoding="UTF-8"?><project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"> <modelVersion>4.0.0</modelVersion> <groupId>kafka2hdfs</groupId> <artifactId>kafka2hdfs</artifactId> <packaging>jar</packaging> <version>0.1.0-SNAPSHOT</version> <name>kafka2hdfs</name> <description>demo to show read from kafka and write to hdfs</description> <url>http://blog.csdn.net/csfreebird</url> <licenses> <license> <name>Eclipse Public License</name> <url>http://www.eclipse.org/legal/epl-v10.html</url> </license> </licenses> <build> <sourceDirectory>src</sourceDirectory> <testSourceDirectory>test</testSourceDirectory> <resources> <resource> <directory>resources</directory> </resource> </resources> <testResources> <testResource> <directory>resources</directory> </testResource> </testResources> <directory>target</directory> <outputDirectory>target/classes</outputDirectory> <plugins/> </build> <repositories> <repository> <id>central</id> <url>https://repo1.maven.org/maven2/</url> <snapshots> <enabled>false</enabled> </snapshots> <releases> <enabled>true</enabled> </releases> </repository> <repository> <id>clojars</id> <url>https://clojars.org/repo/</url> <snapshots> <enabled>true</enabled> </snapshots> <releases> <enabled>true</enabled> </releases> </repository> </repositories> <dependencies> <dependency> <groupId>cider</groupId> <artifactId>cider-nrepl</artifactId> <version>0.10.0-SNAPSHOT</version> </dependency> <dependency> <groupId>org.clojure</groupId> <artifactId>clojure</artifactId> <version>1.5.1</version> </dependency> <dependency> <groupId>org.apache.kafka</groupId> <artifactId>kafka_2.10</artifactId> <version>0.8.2.1</version> <exclusions> <exclusion> <groupId>org.apache.zookeeper</groupId> <artifactId>zookeeper</artifactId> </exclusion> <exclusion> <groupId>log4j</groupId> <artifactId>log4j</artifactId> </exclusion> <exclusion> <groupId>slf4j-api</groupId> <artifactId>org.slf4j</artifactId> </exclusion> </exclusions> </dependency> <dependency> <groupId>org.apache.storm</groupId> <artifactId>storm-kafka</artifactId> <version>0.9.5</version> </dependency> <dependency> <groupId>org.apache.storm</groupId> <artifactId>storm-hdfs</artifactId> <version>0.9.5</version> </dependency> <dependency> <groupId>org.apache.storm</groupId> <artifactId>storm-core</artifactId> <version>0.9.5</version> <exclusions> <exclusion> <groupId>org.slf4j</groupId> <artifactId>log4j-over-slf4j</artifactId> </exclusion> <exclusion> <groupId>org.slf4j</groupId> <artifactId>slf4j-api</artifactId> </exclusion> <exclusion> <groupId>logback-classic</groupId> <artifactId>ch.qos.logback</artifactId> </exclusion> </exclusions> <scope>provided</scope> </dependency> </dependencies> </project> <!-- This file was autogenerated by Leiningen. Please do not edit it directly; instead edit project.clj and regenerate it. It should not be considered canonical data. For more information see https://github.com/technomancy/leiningen --> 这个pom.xml是否可以用maven编译打包，理论上是可以的。不过可能还需做点其他配置，比如在project.clj中用:src指定java代码路径。这个以后再做研究，当前用它帮助我验证project.clj配置是否正确就满足了我的需求。 如何添加resource 在maven中，可以通过pom.xml文件指定resource, 这样，src/main/resources目录下的所有xml文件都会被打包到jar包里，并且在根目录下。 <resource> <directory>src/main/resources</directory> <includes> <include>*.xml</include> </includes> </resource> 在project.clj中更简单, 无需任何配置，直接在项目根目录的resources目录下放置xml文件即可。 上一篇 storm 远程提交任务 下一篇 HDFS用户权限管理 顶 0 踩 0 我的同类文章 Clojure （33） http://blog.csdn.net 猜你在找 查看评论 * 以上用户言论只代表其个人观点，不代表CSDN网站的观点或立场 个人资料 sheismylife 访问： 3247672次 积分： 43541 等级： 积分：43541 排名： 第46名 原创： 1080篇 转载： 21篇 译文： 1篇 评论： 1074条 文章搜索 文章分类 田金龙太极拳法 (17) 数据分析理论与实践 (1) spark (4) storm (9) Clojure (34) thrift (2) Hadoop (35) zookeeper (6) Android (9) KVM (15) Redmine (13) c++ network (1) c++ 11 (3) c++语言 (96) c++模板技术 (9) c++编译 (30) c++ boost asio (17) c++ cppcms (17) c++ boost bind (19) c++ qt (21) c++ boost库 (6) c++ boost log (12) c++ boost smart pointer (5) c++ boost graph (0) c++ ace (7) c++ com (17) c++ wtl (10) c++ windows sdk (1) MongoDB (40) MongoDB JavaScript (4) MongoDB Sharding (4) Linux (63) Linux Disk (7) Linux wine (3) Linux Network (24) Linux 用户 (2) Scrum (17) 过程管理 (12) Emacs (37) Git&GitLab (64) c++ 14 (0) Web前端 (35) Emacs C++ (5) Emacs Org (15) Emacs Clojure (1) Emacs JDEE (6) Emacs Browser (7) Emacs Email (9) Emacs Muse (3) Emacs ELisp (15) protocol buffer (4) Monitor (15) 字符与编码 (10) 数据结构和算法 (12) HTTP (2) bash (22) Maven (22) Design Pattern (5) 图形图像 (18) Nginx (24) windows commands (1) 正则表达式 (3) Java (73) StarTeam (1) 3D (6) lua (5) cmake (6) Database (3) Ruby (3) 乒乓球 (1) dotNet (8) MySQL (3) 游戏编程 (2) MacBook (2) JSF (16) 杂谈 (3) Ubuntu (10) newLISP与人工智能 (7) newLISP 系统管理 (23) newLISP语法 (26) newLISP注释 (1) newLISP web开发 (6) newLISP FOOP (4) newLISP 大数据 (9) newLISP安装 (4) newLISP 网络通信 (5) newLISP 数字类型 (2) newLISP 正则表达式 (4) newLISP实用技巧 (9) newLISP文件处理 (5) newLISP list处理 (9) newLISP 进程管理 (1) newLISP时间日期 (5) newLISP C++ builder (2) Jenkins (26) kafka (4) sqoop (5) HBase (1) tableau (2) D语言编程 (6) 阅读排行 IDispatch接口原理与应用 (30583) git checkout之二 切换到分支和文件覆盖 (30134) Ubuntu 11.10 server 安装Git 服务器 (23594) 三年后再反思我的" Java Web项目管理得失谈" (21267) MongoDB Java 连接池的注意事项 (20258) git checkout之一 HEAD基本和detached 状态 (19881) Nginx的日志 (19601) JSP总结之六：创建第一个简单的JSP页面 (18720) Singleton之C++部分一 (16815) Windows安装Git客户端工具 (16151) 评论排行 回想那些年我抛弃的技术 (149) Singleton之C++部分一 (54) 三年后再反思我的" Java Web项目管理得失谈" (37) IDispatch接口原理与应用 (26) 最佳程序设计探索之一:需求驱动编写自顶向下的代码 (25) GitLab迁移 (22) SAFEARRAY使用实例 (19) Java HashMap 分析之三:放入元素 (17) git checkout之二 切换到分支和文件覆盖 (16) GitLab升级到5.1注意事项 (16) 最新评论 田金龙老师讲解杨式太极拳的起势 u011521468 : 夯劲的力量之源是来之翻胯，练习中我发现胯回落带不动身体下沉和前后摆的发力，应该注意哪里？ 前后摆发力 u011521468 : 初学，前后摆蹬腿的时候总是把身体等的往上去了，总也发不出前后这个劲，应该注意什么？ 数据分析的道与术 u010924878 : 总结的很棒，学习了 C++网络通信库性能大比拼 wingfiring : 博主能秀一下测试代码吗？ Clojure语言十六 clojure与java u010786678 : 谢谢小伙伴的分享，学习了 storm 开发系列三 Clojue编写程序读取kafka数据并写入到hdfs u010786678 : 谢谢小伙伴的分享，学习了 newlisp url 编码 wangdan199112 : 。。。。。 newlisp url 编码 dl_dl_ : @sheismylife:好可惜，好不容易碰到一个用 newlisp 的人……谢谢回复！我自己再想办... newlisp url 编码 sheismylife : @dl_dl_:windows? 我没有windows，真的没有，实在帮不了你。 newlisp url 编码 dl_dl_ : 您好，请教下 unicode 问题。(import "user32.dll" "MessageBox... 算法专家朋友的博客 GIS/ATL Server/JavaScript 清如许的博客 CSS/Android/Java/Linux 推荐文章

Recno:: 14
URL:: http://blog.csdn.net/csfreebird/article/details/49681847

ParseText::
HDFS用户权限管理 - Dean Chen的专栏 - 博客频道 - CSDN.NET Dean Chen的专栏 乐视大数据部招聘C++/Java工程师(chenshu@letv.com) 目录视图 摘要视图 订阅 学院APP首次下载，可得50C币！     欢迎来帮助开源“进步”     当讲师？爱学习？投票攒课吧     认识Atlassian Datacenter产品     深圳小伙伴的福利来啦 HDFS用户权限管理 标签： hadoop hdfs 2015-11-08 10:34 643人阅读 评论 (0) 收藏 举报 分类： Hadoop （34） 作者同类文章 X 版权声明：本文为博主原创文章，未经博主允许不得转载。 Table of Contents 1. hdfs权限 1.1. 超级用户 1.2. 文件权限管理 1.2.1. 创建时的owner和group 1.2.2. 访问权限说明 1.2.3. 应用示例 1.2.4. 不支持setuid 和 setgid bits 1.3. POSIX ACLs（目前尚未使用) 1.3.1. hadoop支持两种用户认证模式 1.4. 参考文档 1  hdfs权限 1.1  超级用户 启动namenode服务的用户就是超级用户, 该用户的组是supergroup 具体配置参考之前我的博客 Ubuntu上使用Hadoop 2.x 一 hdfs超级用户创建和设置 CentOS6.6安装 HDFS 2.7.1 1.2  文件权限管理 1.2.1  创建时的owner和group 文件或者目录被创建之时，服从BSD规则，owner是客户端进程的用户，group是父目录的group 1.2.2  访问权限说明 object r w x stick bit(restricted deletion flag) file 读文件 写或者追加写文件   无效 directory 列出目录的内容 创建或者删除子文件或子目录 访问子文件或者子目录 阻止移动或者删除该目录内的文件或目录(超级用户，owner和group不会被stick bit阻止)           由于和POSIX类似较多，可以参考以下两篇Linux用户的博客 Linux用户管理命令 Linux文件权限 1.2.3  应用示例 创建/input目录，用于接收外部写入的数据 input目录的group也是input，owner是lisa(超级用户), 创建/input/dean目录，用于接收dean用户写入的数据, owner是dean用户，group用户允许写入数据 创建目录 $ hdfs dfs -mkdir -p /input/dean $ hdfs dfs -ls / Found 3 items drwxr-xr-x - lisa supergroup 0 2015-11-08 17:26 /input drwxr-xr-x - lisa supergroup 0 2015-09-28 15:21 /test drwxr-xr-x - lisa supergroup 0 2015-11-08 17:09 /tmp $ hdfs dfs -ls /input Found 1 items drwxr-xr-x - lisa supergroup 0 2015-11-08 17:26 /input/dean 修改input目录的owner为lisa，group从supergroup改为input $ hdfs dfs -chown lisa:input /input $ hdfs dfs -ls / Found 3 items drwxr-xr-x - lisa input 0 2015-11-08 17:26 /input drwxr-xr-x - lisa supergroup 0 2015-09-28 15:21 /test drwxr-xr-x - lisa supergroup 0 2015-11-08 17:09 /tmp 修改/input/dean目录的ower和group都为dean $ hdfs dfs -ls /input Found 1 item drwxrwxr-x - dean dean 0 2015-11-21 16:24 /input/dean 注意，客户机上创建Linux 用户dean，无需在namenode节点上创建该用户 允许input group用户写入/input/qoros目录 先要设置目录权限,让input组用户都能读，写，执行该目录 $ hdfs dfs -chmod -R g+w /input/qoros 然后在客户机上 创建guoqiang帐号和组input useradd guoqiang groupadd input 改guoqiang用户组为input usermod -g input guoqiang 在namenode所在的服务器上添加相同的用户和组，这点很奇怪，如果不这么干写操作会被拒绝,这会造成麻烦，因为两个namenode节点都要这么干 useradd guoqiang usermod -g input guoqiang 取消其他用户的所有权限 $ hdfs dfs -chmod -R o-r /input/dean $ hdfs dfs -ls /input Found 1 items drwxrwx--x - lisa supergroup 0 2015-11-08 17:26 /input/dean $ hdfs dfs -chmod -R o-x /input/dean $ hdfs dfs -ls /input Found 1 items drwxrwx--- - lisa supergroup 0 2015-11-08 17:26 /input/dean 1.2.4  不支持setuid 和 setgid bits 1.3  POSIX ACLs（目前尚未使用) 为特定的用户和组提供细致粒度的权限管理, 而不只是owner,group。该功能默认关闭, 需要如下设置打开 dfs.namenode.acls.enabled true 具体配置实在hdfs-site.xml中 <property> <name>dfs.permissions.enabled</name> <value>true</value> </property> <property> <name>dfs.namenode.acls.enabled</name> <value>true</value> </property> 在core-site.xml设置用户组默认权限. <property> <name>fs.permissions.umask-mode</name> <value>002</value> </property> 1.3.1  hadoop支持两种用户认证模式 simple or kerberos 1.4  参考文档 hortonworks blog   apache doc Author: dean Created: 2015-11-21 六 16:44 Validate 上一篇 Leiningen 与 maven 下一篇 Spark standalone集群安装 顶 0 踩 0 我的同类文章 Hadoop （34） http://blog.csdn.net 猜你在找 查看评论 * 以上用户言论只代表其个人观点，不代表CSDN网站的观点或立场 个人资料 sheismylife 访问： 3247673次 积分： 43541 等级： 积分：43541 排名： 第46名 原创： 1080篇 转载： 21篇 译文： 1篇 评论： 1074条 文章搜索 文章分类 田金龙太极拳法 (17) 数据分析理论与实践 (1) spark (4) storm (9) Clojure (34) thrift (2) Hadoop (35) zookeeper (6) Android (9) KVM (15) Redmine (13) c++ network (1) c++ 11 (3) c++语言 (96) c++模板技术 (9) c++编译 (30) c++ boost asio (17) c++ cppcms (17) c++ boost bind (19) c++ qt (21) c++ boost库 (6) c++ boost log (12) c++ boost smart pointer (5) c++ boost graph (0) c++ ace (7) c++ com (17) c++ wtl (10) c++ windows sdk (1) MongoDB (40) MongoDB JavaScript (4) MongoDB Sharding (4) Linux (63) Linux Disk (7) Linux wine (3) Linux Network (24) Linux 用户 (2) Scrum (17) 过程管理 (12) Emacs (37) Git&GitLab (64) c++ 14 (0) Web前端 (35) Emacs C++ (5) Emacs Org (15) Emacs Clojure (1) Emacs JDEE (6) Emacs Browser (7) Emacs Email (9) Emacs Muse (3) Emacs ELisp (15) protocol buffer (4) Monitor (15) 字符与编码 (10) 数据结构和算法 (12) HTTP (2) bash (22) Maven (22) Design Pattern (5) 图形图像 (18) Nginx (24) windows commands (1) 正则表达式 (3) Java (73) StarTeam (1) 3D (6) lua (5) cmake (6) Database (3) Ruby (3) 乒乓球 (1) dotNet (8) MySQL (3) 游戏编程 (2) MacBook (2) JSF (16) 杂谈 (3) Ubuntu (10) newLISP与人工智能 (7) newLISP 系统管理 (23) newLISP语法 (26) newLISP注释 (1) newLISP web开发 (6) newLISP FOOP (4) newLISP 大数据 (9) newLISP安装 (4) newLISP 网络通信 (5) newLISP 数字类型 (2) newLISP 正则表达式 (4) newLISP实用技巧 (9) newLISP文件处理 (5) newLISP list处理 (9) newLISP 进程管理 (1) newLISP时间日期 (5) newLISP C++ builder (2) Jenkins (26) kafka (4) sqoop (5) HBase (1) tableau (2) D语言编程 (6) 阅读排行 IDispatch接口原理与应用 (30583) git checkout之二 切换到分支和文件覆盖 (30134) Ubuntu 11.10 server 安装Git 服务器 (23594) 三年后再反思我的" Java Web项目管理得失谈" (21267) MongoDB Java 连接池的注意事项 (20258) git checkout之一 HEAD基本和detached 状态 (19881) Nginx的日志 (19601) JSP总结之六：创建第一个简单的JSP页面 (18720) Singleton之C++部分一 (16815) Windows安装Git客户端工具 (16151) 评论排行 回想那些年我抛弃的技术 (149) Singleton之C++部分一 (54) 三年后再反思我的" Java Web项目管理得失谈" (37) IDispatch接口原理与应用 (26) 最佳程序设计探索之一:需求驱动编写自顶向下的代码 (25) GitLab迁移 (22) SAFEARRAY使用实例 (19) Java HashMap 分析之三:放入元素 (17) git checkout之二 切换到分支和文件覆盖 (16) GitLab升级到5.1注意事项 (16) 最新评论 田金龙老师讲解杨式太极拳的起势 u011521468 : 夯劲的力量之源是来之翻胯，练习中我发现胯回落带不动身体下沉和前后摆的发力，应该注意哪里？ 前后摆发力 u011521468 : 初学，前后摆蹬腿的时候总是把身体等的往上去了，总也发不出前后这个劲，应该注意什么？

Recno:: 15
URL:: http://blog.csdn.net/csfreebird/article/details/49721235

ParseText::
Spark standalone集群安装 - Dean Chen的专栏 - 博客频道 - CSDN.NET Dean Chen的专栏 乐视大数据部招聘C++/Java工程师(chenshu@letv.com) 目录视图 摘要视图 订阅 学院APP首次下载，可得50C币！     欢迎来帮助开源“进步”     当讲师？爱学习？投票攒课吧     认识Atlassian Datacenter产品     深圳小伙伴的福利来啦 Spark standalone集群安装 标签： spark 2015-11-08 22:52 1209人阅读 评论 (0) 收藏 举报 分类： spark （3） 作者同类文章 X 版权声明：本文为博主原创文章，未经博主允许不得转载。 本文不会搞什么Yarn混搭Spark，只想建立一个纯粹的Spark环境，太多层东西搅和在一起，不靠谱。 创建spark服务运行帐号 # useradd smile smile帐号就是spark服务的运行帐号。 下载安装包并测试 在root帐号下，下载最新安装包，注意不是source，而是bin安装包，支持hadoop2.6以后的 wget http://mirrors.cnnic.cn/apache/spark/spark-1.5.1/spark-1.5.1-bin-hadoop2.6.tgz 解压到下面的目录，并将owner和group设置成smile帐号，再建立链接。 wget http://mirrors.cnnic.cn/apache/spark/spark-1.5.1/spark-1.5.1-bin-hadoop2.6.tgz tar zxvf spark-1.5.1-bin-hadoop2.6.tgz chown -R smile:smile spark-1.5.1-bin-hadoop2.6 ln -s spark-1.5.1-bin-hadoop2.6 spark chown -R smile:smile spark 进入目录 cd /data/slot0/spark/ ./sbin/start-master.sh starting org.apache.spark.deploy.master.Master, logging to /data/slot0/spark-1.5.1-bin-hadoop2.6/sbin/../logs/spark-smile-org.apache.spark.deploy.master.Master-1-10-149-11-157.out 启动成功。查看web界面 http://your-host:8080 测试成功。关闭命令也很简单 $ sbin/stop-master.sh stopping org.apache.spark.deploy.master.Master 基于zookeeper建立高可用集群 将三个节点作为master 现在打算用3台服务器建立master集群，使用zookeeper进行选举，确保总有一个master leader，其他两个总是master slave 在第一台服务器上，进入spark/conf目录，复制spark-env.sh.template为spark-env.sh文件 然后添加如下设置 SPARK_DAEMON_JAVA_OPTS="-Dspark.deploy.recoveryMode=ZOOKEEPER -Dspark.deploy.zookeeper.url=10.149.11.146:2181,10.149.11.147:2181,10.149.11.148:2181 -Dspark.deploy.zookeeper.dir=/vehicle_spark" export SPARK_DAEMON_JAVA_OPTS 启动服务为master ./sbin/start-master.sh 依次在后面两个节点上启动start-master.sh, 此时3个节点都可以通过http://ip:8080打开master状态站点 将后续节点作为slave启动 在另外几台spark 服务器上启动slave ./sbin/start-slave.sh spark://host1:7077,host2:7077,host3:7077 注意： 1. host1, host2, host3必须来自于几个master的8080站点，如果用IP代替连接会被拒绝 2. slave启动成功，可以在8081端口打开worker的UI站点，里面会显示当前的master leader 现在3台master的8080端口都显示了worker的状态。 用shell测试连接master $ ./bin/spark-shell --master spark://10-149-11-*:7077,10-149-11-*:7077,10-149-11-*:7077 log4j:WARN No appenders could be found for logger (org.apache.hadoop.metrics2.lib.MutableMetricsFactory). log4j:WARN Please initialize the log4j system properly. log4j:WARN See http://logging.apache.org/log4j/1.2/faq.html#noconfig for more info. Using Spark's repl log4j profile: org/apache/spark/log4j-defaults-repl.properties To adjust logging level use sc.setLogLevel("INFO") Welcome to ____ __ / __/__ ___ _____/ /__ _\ \/ _ \/ _ `/ __/ '_/ /___/ .__/\_,_/_/ /_/\_\ version 1.5.2 /_/ Using Scala version 2.10.4 (Java HotSpot(TM) 64-Bit Server VM, Java 1.8.0_45) Type in expressions to have them evaluated. Type :help for more information. 15/11/16 13:22:37 WARN MetricsSystem: Using default name DAGScheduler for source because spark.app.id is not set. Spark context available as sc. 15/11/16 13:22:39 WARN Connection: BoneCP specified but not present in CLASSPATH (or one of dependencies) 15/11/16 13:22:39 WARN Connection: BoneCP specified but not present in CLASSPATH (or one of dependencies) 15/11/16 13:23:15 WARN ObjectStore: Version information not found in metastore. hive.metastore.schema.verification is not enabled so recording the schema version 1.2.0 15/11/16 13:23:15 WARN ObjectStore: Failed to get database default, returning NoSuchObjectException 15/11/16 13:23:21 WARN NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable 15/11/16 13:23:21 WARN Connection: BoneCP specified but not present in CLASSPATH (or one of dependencies) 15/11/16 13:23:22 WARN Connection: BoneCP specified but not present in CLASSPATH (or one of dependencies) SQL context available as sqlContext. scala> 观察web ui和zookeeper，一切正常。 使用环境变量设置master  url 由于spark-shell可以通过读取环境变量获得spark master信息，为了方便，不用每次都输入很长的参数 在~/.bashrc中添加 export MASTER=spark://10-149-*-*:7077,10-149-*-*:7077,10-149-*-*:7077 上一篇 HDFS用户权限管理 下一篇 去除HDFS WARN util.NativeCodeLoader 顶 0 踩 0 我的同类文章 spark （3） http://blog.csdn.net 猜你在找 查看评论 * 以上用户言论只代表其个人观点，不代表CSDN网站的观点或立场 个人资料 sheismylife 访问： 3247675次 积分： 43541 等级： 积分：43541 排名： 第46名 原创： 1080篇 转载： 21篇 译文： 1篇 评论： 1074条 文章搜索 文章分类 田金龙太极拳法 (17) 数据分析理论与实践 (1) spark (4) storm (9) Clojure (34) thrift (2) Hadoop (35) zookeeper (6) Android (9) KVM (15) Redmine (13) c++ network (1) c++ 11 (3) c++语言 (96) c++模板技术 (9) c++编译 (30) c++ boost asio (17) c++ cppcms (17) c++ boost bind (19) c++ qt (21) c++ boost库 (6) c++ boost log (12) c++ boost smart pointer (5) c++ boost graph (0) c++ ace (7) c++ com (17) c++ wtl (10) c++ windows sdk (1) MongoDB (40) MongoDB JavaScript (4) MongoDB Sharding (4) Linux (63) Linux Disk (7) Linux wine (3) Linux Network (24) Linux 用户 (2) Scrum (17) 过程管理 (12) Emacs (37) Git&GitLab (64) c++ 14 (0) Web前端 (35) Emacs C++ (5) Emacs Org (15) Emacs Clojure (1) Emacs JDEE (6) Emacs Browser (7) Emacs Email (9) Emacs Muse (3) Emacs ELisp (15) protocol buffer (4) Monitor (15) 字符与编码 (10) 数据结构和算法 (12) HTTP (2) bash (22) Maven (22) Design Pattern (5) 图形图像 (18) Nginx (24) windows commands (1) 正则表达式 (3) Java (73) StarTeam (1) 3D (6) lua (5) cmake (6) Database (3) Ruby (3) 乒乓球 (1) dotNet (8) MySQL (3) 游戏编程 (2) MacBook (2) JSF (16) 杂谈 (3) Ubuntu (10) newLISP与人工智能 (7) newLISP 系统管理 (23) newLISP语法 (26) newLISP注释 (1) newLISP web开发 (6) newLISP FOOP (4) newLISP 大数据 (9) newLISP安装 (4) newLISP 网络通信 (5) newLISP 数字类型 (2) newLISP 正则表达式 (4) newLISP实用技巧 (9) newLISP文件处理 (5) newLISP list处理 (9) newLISP 进程管理 (1) newLISP时间日期 (5) newLISP C++ builder (2) Jenkins (26) kafka (4) sqoop (5) HBase (1) tableau (2) D语言编程 (6) 阅读排行 IDispatch接口原理与应用 (30583) git checkout之二 切换到分支和文件覆盖 (30134) Ubuntu 11.10 server 安装Git 服务器 (23594) 三年后再反思我的" Java Web项目管理得失谈" (21267) MongoDB Java 连接池的注意事项 (20258) git checkout之一 HEAD基本和detached 状态 (19881) Nginx的日志 (19601) JSP总结之六：创建第一个简单的JSP页面 (18720) Singleton之C++部分一 (16815) Windows安装Git客户端工具 (16151) 评论排行 回想那些年我抛弃的技术 (149) Singleton之C++部分一 (54) 三年后再反思我的" Java Web项目管理得失谈" (37) IDispatch接口原理与应用 (26) 最佳程序设计探索之一:需求驱动编写自顶向下的代码 (25) GitLab迁移 (22) SAFEARRAY使用实例 (19) Java HashMap 分析之三:放入元素 (17) git checkout之二 切换到分支和文件覆盖 (16) GitLab升级到5.1注意事项 (16) 最新评论 田金龙老师讲解杨式太极拳的起势 u011521468 : 夯劲的力量之源是来之翻胯，练习中我发现胯回落带不动身体下沉和前后摆的发力，应该注意哪里？ 前后摆发力 u011521468 : 初学，前后摆蹬腿的时候总是把身体等的往上去了，总也发不出前后这个劲，应该注意什么？ 数据分析的道与术 u010924878 : 总结的很棒，学习了 C++网络通信库性能大比拼 wingfiring : 博主能秀一下测试代码吗？ Clojure语言十六 clojure与java u010786678 : 谢谢小伙伴的分享，学习了 storm 开发系列三 Clojue编写程序读取kafka数据并写入到hdfs u010786678 : 谢谢小伙伴的分享，学习了 newlisp url 编码 wangdan199112 : 。。。。。 newlisp url 编码 dl_dl_ : @sheismylife:好可惜，好不容易碰到一个用 newlisp 的人……谢谢回复！我自己再想办... newlisp url 编码 sheismylife : @dl_dl_:windows? 我没有windows，真的没有，实在帮不了你。 newlisp url 编码 dl_dl_ : 您好，请教下 unicode 问题。(import "user32.dll" "MessageBox... 算法专家朋友的博客 GIS/ATL Server/JavaScript 清如许的博客 CSS/Android/Java/Linux 推荐文章 *App竞品技术分析 （6）热修复 *架构设计：系统间通信（17）——服务治理与Dubbo 中篇（分析） *一款炫酷Loading动画--加载失败 *图解堆算法、链表、栈与队列（多图预警） *Android中ContentProvider组件详解 *Android平台Camera实时滤镜实现方法探讨(九)--磨皮算法探讨(一)

Recno:: 16
URL:: http://blog.csdn.net/domypp/article/details/49926327

ParseText::
稳定高薪vs追求梦想，当你在犹豫时别人已经放弃新加坡绿卡！ - 超级表格官方博客ChaojiBiaoge.com - 博客频道 - CSDN.NET 超级表格官方博客ChaojiBiaoge.com 一个互联网公司的创业史记 目录视图 摘要视图 订阅 学院APP首次下载，可得50C币！     欢迎来帮助开源“进步”     当讲师？爱学习？投票攒课吧     认识Atlassian Datacenter产品     深圳小伙伴的福利来啦 稳定高薪vs追求梦想，当你在犹豫时别人已经放弃新加坡绿卡！ 标签： 陈浬 超级表格 创业 陈坤极 北京创业 2015-11-19 13:35 642人阅读 评论 (4) 收藏 举报 分类： 创业故事 （43） 作者同类文章 X 版权声明：本文为博主原创文章，未经博主允许不得转载。 超级表格微信公众号： chaojibiaoge 再见，新加坡 两个月前，陈浬最后一次踏上了从新加坡飞往北京的航班，机舱外云海重叠、波澜壮阔。 他的心情也是如此。这一次，他选择不再回去。 一、不再回新加坡。 二、不回老家福建长乐。 长乐出自《诗经》，“长安久乐”。长长久久，平安喜乐。 夏长少酷暑、冬短少霜雪、温和湿润，阳光微露。陈浬生于斯，长于斯，学习于斯，创业于斯…… 回想整个创业之行，命途多舛无奈。当他告别故土，远走新加坡时，他笑称“自己是被家人踢出国门”的，一路上他并不孤单，因为他还随身携带着上百万的债务排解一路寂寞。 细想片刻，朝花夕拾，已是过往云烟。 “创业是一团火，当时我把它变成了火苗放在一个精美的纸盒里，深埋心底。从中国带到了新加坡，我认真地工作，偿还债务，小心翼翼地保护它不被人发现，甚至不被自己发现。然而，纸盒永远是纸盒，火苗却不永远只是火苗。 当我得知了坤哥带着团队创业超级表格的时候，火苗开始一点点变大，当他招聘的消息出现在我朋友圈的时候，我知道，纸盒烧坏了，熊熊的大火燃烧着的全是这些年来压抑的热情与张扬！我的互联网创业梦！” 陈浬坐在Binggo咖啡的一个小角落里，他语速不快，却直击内心。 曾在创业中崛起 时光的指针向前拨动。那时陈浬刚大学刚毕业，他在福州的一家大型的计算机公司上班。所有的大型企业都有一个共通的缺陷：他永远无法给新人一个施展拳脚的机会。陈浬也同样碰到了这个问题，当时的优点和缺点都是太年轻。 “当你的能力达到了某一个水准的时候，你其实是停滞不前的，你几乎没有一个机会再向上突破。” 有很多人在BAT工作，自以为自己很牛，其实牛的人都是上层的高管，光环都是他们的，你算个屁啊！ 年轻气盛的陈浬递交辞呈之后，就开始自己创业。 拉到朋友作为合伙人，就在福州开始了软件和硬件业务。家里人为他出了第一笔投资。于是他一边做软件开发，一边代理别人的产品，硬件软件都没落下。自己的生活开始变得有了目标，公司也一天天壮大起来。奋斗了几年后，从最初的两个人一直扩展到16个人，公司已经开始走上正轨。 蒸蒸日上的事业除了能带来令人可观的收入外，还能撩动人“意乱情迷”的爱情。 那时候，他总是喜欢去一家咖啡厅。爱上咖啡也从那时开始，后来他才知道，并不是咖啡在朝他招手，而是爱情在朝他点头。 女孩和他一样喜欢咖啡。 为了她，陈浬意气风发，顺手给她开了一家咖啡厅，连眼皮，不，应该是连眼睫毛都没有眨一下，咖啡厅就落成了。陈浬在外打拼，女孩也为着咖啡厅忙碌起来。 正如你想的一样，“从此过上幸福和快乐的日子”只在童话故事中久经不衰而已。 也在创业中死去 2010年，他正开始着转型，已经开始筹备互联网项目，而公司的正常运营便是他这一计划的奠基石。他是这么描述他的公司的，“公司就像一个人，我的传统软硬件的业务是为了填饱公司的肚子，只有填饱了肚子，公司才能正常站起双腿走起来，而我的目标就是互联网！” 变化还是赶不上变化，2010年下半年起实体经济下滑，也影响着公司主营业务进销存业务的下降，电脑硬件业务也在缩水。 当生活从清泉变成一滩死水一段时间后，便形成了凶猛的巨浪！员工需要工资生活、公司需要资金运转、投资人需要看到回报，唯独不用看的是客户，因为根本看不到客户！整整三个月，所有的业务员没有开出一张订单，而薪水照付，工资照领。整个公司已经入不敷出，岌岌可危。 为了保住自己的“孩子”，陈浬开始向朋友借钱、向家人开口、跟银行贷款，也从别的盈利项目里面掏钱出来弥补这边的无底洞。最后甚至卖掉了可盈利的咖啡厅，来让整个企业坚持运转。 世事难料，他尽管使出了浑身解数，也未能抓住最后一根稻草，他未能保住传统业务，而他的互联网项目也随之夭折…也就是他之前说的，肚子没吃饱已经无力了，哪还能站起来向前走？ 后来陈浬回忆起这些场景时，也惋惜着说：“百来万打水漂，得到是几条惨痛的失败经验。 一，作为小公司的CEO没有冲在业务的最前线；二，在资金以及精力有限的情况下，还继续分散资金分散精力做太多的业务，还是得术有专攻；三，拿成功的项目去挽救一个濒危的项目，其实人在这时往往最不冷静。 ” 抑郁了一段不长的时间后，他又准备重新出发，这就是创业者的精神，在浩瀚的人群中，他们显得平凡而不简单。然而父母极力的反对晓之以理，家人苦心的劝说动之以情，都无不令他纠结万分。 在2012年，火苗终于被装进了纸盒里。他选择了放下，被家人“踢出了国门”。然而，放下不易，再次拾起也更加不易。 被亲人一脚踹出国门 新加坡是继纽约、伦敦、香港之后的第四大国际金融中心，这个被誉为“花园城市”的国家总面积是北京的二十三分之一。建筑与街道、人文与经济都让人无不心向往之。 陈浬在新加坡的一家建筑公司里做信息化系统，改革了企业内部的信息功能，五六个工程，五六百人上下班打卡，信息在线收集、查询，人事部门信息资源管理将这个传统公司有机地联系在一起，办公效率得到了极大的提升。他用三年的时间在新加坡为自己打下了一片天地，稳定的工作，高额的薪水，以及公司出资深造，并拥有了获得新加坡绿卡（PR）的机会。 当所有人都觉得就这样了吧，多好的生活啊！陈浬递上了一封辞呈，优越的物质生活始终没填满他精神的空虚。 在一家传统企业里做信息化，他用“不伦不类”形容这份工作，对一直向往着互联网的他来说如饮白水，虽然不苦，但也无味。但他和所有人一样都以为就这样吧，还拼什么呢？ 偶然间，坤哥创立“超级表格”为项目开始在北京中关村创业的信息从中国北京传到了“狮城”新加坡。他突然发觉，纸盒里的火苗开始按耐不住。 那么问题就来了。 坤哥是谁？ 回首十几年前，当陈浬还坐在高中教室里时，坤哥是陈浬的班主任，看着陈浬表现不错，就委任他当班长。而现在，他们在同一个办公室成为创业伙伴，论起来也是奇巧机缘。 当时高中是一所全封闭式学校，学生们每个月才能回家一次。有句歌词写得好: “外面的世界很精彩，外面的世界很无奈……” 对于青春年少的他们来说，“外面”的精彩与刺激远比在寝室里乖乖睡觉的吸引力大很多。 “我是A型血的水瓶座嘛，翻译过来就是：我是一个传统却又不按常理出牌的矛盾体。”陈浬回忆着说，“那些年里，我作为班长没少带头胡闹！” 某一些月黑风高的夜里，几个小家伙就出动了。尽管在二十一世纪初期，互联网远没有如今这样发达，网咖也还没有形成气候，但是电子游戏却已经风靡全国。因为学校是在山上，陈浬带领着一帮同学穿过山腰的坟墓、山脚的隧道、然后奔进城里繁荣的夜生活，花一个通宵玩星际争霸，又花一个通宵去看电影，“就像打游击战一样”，变着法地去追求刺激与愉悦。 同样受到刺激但却并不愉悦的就是坤哥。 凌晨两点钟的办公室里，灯火通明，几个男生站成一排被坤哥挨个批斗，特别是作为班长的陈浬，每次批斗会议结束后似乎都从精神的高度上得到了洗礼。但是过不了两天，他们就又下山了…… 虽然干过如此多的“革命”与被“镇压”，但是陈浬与坤哥的关系一直很好。虽是师生关系，却也更像朋友。然而，时光匆匆，我们度过了“那时候天总是很蓝，日子总过得太慢”的年华，“转眼就各奔东西”。 按陈浬的话来说就是：坤哥后来就消失了。 看尽繁华，洗尽铅华 当十几年后，一则新闻“李克强总理现身中关村创业大街，掀起全国创业热浪”，这新闻传到了新加坡，在这新闻里不小心发现了他，他已经从高中班主任摇身一变成了如今超级表格的CEO， 这些年来坤哥和陈浬一样，洗尽铅华，褪去稚嫩。走过弯路和坎坷，最终在十几年后再度重逢。彼此身上都加注了太多东西，足以收益一生。 他把他的人生形容成是在提炼咖啡的香气，海拔越高、日光越烈，受太阳的暴晒之后，才有颗颗饱满，香韵浓厚的咖啡豆。这是他在去新加坡之前的第一次炼狱，而这次加入超级表格，则是将咖啡豆放入了烘焙机里面，要想得到最后的咖啡香，必先历经高温而灼、升华而起、凝结而降，才能入口清苦、回味甘润。 回国之前，新加坡公司的董事长亲自找他聊了很久很久……希望他能留下来，毕竟在新加坡奋斗了三年，这样回去前功尽弃会误了前程，误了绿卡(PR)；即使离开，也一直帮他保留着公司的职位。但也挡不住他那回国再次互联网创业的热情。 当中国教育电视台采访他为什么要放弃国外的高薪与稳定，一定要回到中国加入超级表格时。他说：“中国的互联网非常热，企业级的软件相当匮乏。我看好坤哥，以及超级表格的市场，所以我一定要回来！” 一路以来，走得并不容易。许多事情被陈浬刻意的轻描淡写甚至绝口不提，他一直说自己是个乐观的人，他也会一直乐观的走下去。 请点击这里 ，收集与整理信息，一张超级表格搞定！ 多人协作的在线表格 优美的企业办公软甲 点击这里，立即体验 关注超级表格公众号： chaojibiaoge 上一篇 法国巴黎反恐机制被批令人震惊，盘点这些年发生的十大恐怖袭击！ 下一篇 SaaS应用“超级表格”获数百万天使融资 顶 3 踩 0 我的同类文章 创业故事 （43） http://blog.csdn.net 猜你在找 查看评论 * 以上用户言论只代表其个人观点，不代表CSDN网站的观点或立场 文章搜索 阅读排行 我与刘强东的故事：他的1000亿和我的5000万 (74659) 2013，我的创业记忆片段 (3811) 上海商报:超级表格创始人叫板Excel (3699) 超级表格全新界面全新体验 (3472) 一支巧乐兹引发的感想(这个标题实在没有创意) (3405) 只有在中华帝都才能免费享受到的北大商业课程：财富定律与愿景规划 (3173) 在中关村创业大街Binggo这半年 (3100) 直击中关村创业大街，新街头霸王来了 (3037) 《一见》采访超级表格创始人陈坤极 (2948) 从软件工程师的角度看MacBook Air的几个设计亮点 (2948) 个人资料 kongki 访问： 203880次 积分： 2690 等级： 积分：2690 排名： 第7676名 原创： 99篇 转载： 1篇 译文： 0篇 评论： 233条 最新评论 即将被裁掉，她是如何替他力挽狂澜？ zzznnn : 嗯,软文 即将被裁掉，她是如何替他力挽狂澜？ weixin_33492943 : 这广告打的啪啪的 我与刘强东的故事：他的1000亿和我的5000万 alex159s : 公司用，感觉的确不错吧。互联网多人协作的模式，完全摒弃了办公中各人生在全国各地的问题，每天自己按时上... 从普通程序员到估值上亿的公司老板，他只用了1年！ u010927640 : 希望这个超大能量场能遍及世界各地。 稳定高薪vs追求梦想，当你在犹豫时别人已经放弃新加坡绿卡！ kongki : @qq_25223941:恩啊。人生就是不断拼搏的过程！ 稳定高薪vs追求梦想，当你在犹豫时别人已经放弃新加坡绿卡！ kongki : @allan_chan:没错！ 稳定高薪vs追求梦想，当你在犹豫时别人已经放弃新加坡绿卡！ allan_chan : 只有向前~~~ 稳定高薪vs追求梦想，当你在犹豫时别人已经放弃新加坡绿卡！ qq_25223941 : 就是要拼 人生才有意义！ 超级表格全新界面全新体验 kongki : @zjy15203167987:你喜欢就好啊！哈哈 当你躲在被窝里点外卖时，看看比你忙碌100倍的领导者们是如何坚持跑步的？！ kongki : @u010786678:只要对您有价值，我们就值了。

Recno:: 17
URL:: http://blog.csdn.net/nomasp

ParseText::
nomasp - 博客频道 - CSDN.NET nomasp Some people die at 20 and aren't buried until 80. 目录视图 摘要视图 订阅 学院APP首次下载，可得50C币！     欢迎来帮助开源“进步”     当讲师？爱学习？投票攒课吧     认识Atlassian Datacenter产品     深圳小伙伴的福利来啦 [置顶] 图论算法 有图有代码 万字总结 向前辈致敬 图的定义背景知识看到这篇博客相信一开始映入读者眼帘的就是下面这幅图了，这就是传说中的七桥问题（哥尼斯堡桥问题）。在哥尼斯堡，普雷格尔河环绕着奈佛夫岛（图中的A岛）。这条河将陆地分成了下面4个区域，该处还有着7座连接这些陆地的桥梁。问题是如何从某地出发，依次沿着各个桥，必须经过每座桥且每座桥只能经过1次，最终回到原地。不知道这个问题且好奇的童鞋现在肯定在忙活着找出来这道题的结果了。是伟大的数学家欧拉（... 2015-05-18 20:55 阅读 (3524) 评论 (27) [置顶] nomasp 博客导读 ProfileIntroduction to Blog 您能看到这篇博客导读是我的荣幸，本博客会持续更新，感谢您的支持，欢迎您的关注与留言。博客有多个专栏，分别是关于Windows App的开发、SICP的习题和Scheme语言的学习、算法与LeetCode、Android应用开发，而最近会添加的文章将主要是算法和Android，不过其它内容也会继续完善。About the Author独立 Win... 2015-09-17 12:28 阅读 (6655) 评论 (29) LeetCode 237 Delete Node in a Linked List（在链表中删除节点） 翻译给定一个访问节点的路径，写一个函数去删除在一个单向链表中除尾部以外的节点。假设这个链表是1 -> 2 -> 3 -> 4，并且你被给予了第3个值为3的节点，那么在调用你的函数之后这个链表应该变为1 -> 2 -> 4。原文Write a function to delete a node (except the tail) in a singly linked list, given only... 2015-12-25 10:58 阅读 (243) 评论 (0) LeetCode 104 Maximum Depth of Binary Tree（二叉树的最大深度） 翻译给定一个二叉树，找出它的最大深度。最大深度是指的从根节点一直到最远的叶节点中所有的节点数目。原文Given a binary tree, find its maximum depth.The maximum depth is the number of nodes along the longest path from the root node down to the farthest lea... 2015-12-24 11:02 阅读 (634) 评论 (0) LeetCode 258 Add Digits（数字相加，数字根） 翻译给定一个非负整型数字，重复相加其所有的数字直到最后的结果只有一位数。例如：给定sum = 38，这个过程就像是：3 + 8 = 11，1 + 1 = 2，因为2只有一位数，所以返回它。紧接着：你可以不用循环或递归在O(1)时间内完成它吗？原文Given a non-negative integer num, repeatedly add all its digits until the resu... 2015-12-24 10:17 阅读 (652) 评论 (0) LeetCode 292 Nim Game（Nim游戏） 翻译你正在和你的朋友们玩下面这个Nim游戏：桌子上有一堆石头，每次你从中去掉1-3个。谁消除掉最后一个石头即为赢家。你在取出石头的第一轮。你们中的每一个人都有着聪明的头脑和绝佳的策略。写一个函数来确定对于给定的数字是否你可以赢得这场比赛。例如，如果堆中有4个石头，那么你永远也无法赢得比赛：无论你移除了1、2或3个石头，最后一个石头都会被你的朋友所移除。原文You are playing the fo... 2015-12-23 20:24 阅读 (634) 评论 (0) 一种巧妙的反转字符串的方法及思考过程 如题，需求是反转字符串，当然啦方法是有很多的，这种我觉得蛮有意思的^_^#include #include using namespace std;int main() { string s; cin>>s; for(int i = s.size(); i--; ) { cout<<s[i]; } cout... 2015-12-22 14:37 阅读 (477) 评论 (0) nomasp的2015博客之星投票总结 通过这次投票我学到了很多。很久之前我几乎没在CSDN写过个人的感触这种东西，因为感觉这是一个开放的平台，并不想去像流水账一样去记录自己的琐事，至于为何会写这一篇后文会有提到。因此这篇文章也不仅仅是投票的总结，也包含了很久之前的事情。忽然想到如果评委们看到了这篇文章，发现我才大三，会不会给我扣很多分叻；不过还是得写，因为难得在线上总结一次，当然得真诚。进了大学才知道编程这东西，军训结束就加入了社联科技... 2015-12-22 01:29 阅读 (611) 评论 (8) 【万字总结】快速排序详解与各种线性时间排序对比 什么是快速排序快速排序简介快速排序（英文名：Quicksort，有时候也叫做划分交换排序）是一个高效的排序算法，由Tony Hoare在1959年发明（1961年公布）。当情况良好时，它可以比主要竞争对手的归并排序和堆排序快上大约两三倍。这是一个分治算法，而且它就在原地排序。所谓原地排序，就是指在原来的数据区域内进行重排，就像插入排序一般。而归并排序就不一样，它需要额外的空间来进行归并排序操作。为了... 2015-12-19 21:27 阅读 (767) 评论 (4) 【万字总结】图解堆算法、链表、栈与队列（多图预警） 堆算法什么是堆堆（heap），是一类特殊的数据结构的统称。它通常被看作一棵树的数组对象。在队列中，调度程序反复提取队列中的第一个作业并运行，因为实际情况中某些时间较短的任务却可能需要等待很长时间才能开始执行，或者某些不短小、但很重要的作业，同样应当拥有优先权。而堆就是为了解决此类问题而设计的数据结构。二叉堆是一种特殊的堆，二叉堆是完全二叉树或者近似完全二叉树，二叉堆满足堆特性：父节点的键值总是保持固... 2015-12-18 08:40 阅读 (4715) 评论 (6) 【UWP通用应用开发】使用Toast通知与动态磁贴 使用Toast通知示例前面我们使用了MessageDialog来作为弹窗，这里来介绍一个更加高大上的Toast通知。Toast通知本质上动力是由XML来提供的，一开始我还不相信不知道XML原来有这么大的威力。现在就来看看和Toast相关的知识。1）实例化ToastNotification类。ToastNotification toast1 = new ToastNotification(xdoc);... 2015-12-18 08:32 阅读 (698) 评论 (0) 日常小记：C++中的log10函数 今天有同学问我C++中有没有什么简单的办法可以求出两个数相加的和的位数，然后就有了如题的那种方法。log10(100)的返回值就是2，log(999)的返回值是二点几，不过如果你把返回值定位int型它就会自动转换成2了。#include #includeusing namespace std;int main(){ int a,b; while(ci... 2015-12-15 19:32 阅读 (518) 评论 (0) 【UWP通用应用开发】集成搜索、粘贴板以及设置共享源和共享目标 在应用中集成搜索上一节是关于如何添加应用设置和帮助，这一篇讲的是和设置类似的搜索。So…… Let’s do it !先从简单的页面布局开始，想想我们需要什么，一个带搜索事件的Button，还需要一些TextBlock来提示用户，核心部分自然是一个GridView咯。 ... 2015-12-15 09:45 阅读 (569) 评论 (0) 【UWP通用应用开发】文件选取器、获取文件属性、写入和读取、保存读取和删除应用数据 读取文件和文件夹名这一节开始我们将陆续看到Windows App是怎样操作文件的在Windows上读取文件名、文件夹名首先我们在XAML中定义一个Button和TextBlock，将读取文件/文件夹名的过程写在前者的click事件中，后者则用来显示文件信息。... 2015-12-15 09:01 阅读 (576) 评论 (0) 【UWP通用应用开发】编辑文本、绘制图形、3D透视效果及绘制时钟实战 编辑文本及键盘输入相信大家都会使用TextBox，但如果要让文本在TextBox中换行该怎么做呢？将TextWrapping属性设置为Wrap，将AcceptsReturn属性设置为True就好咯。PasswordBox很明显就是一个密码框了，和其他的控件相比其有2个特殊之处，一个是其可以用MaxLength来控制最大的长度，一个是用PasswordChanged来捕捉密码的改名。显然比如QQ密码的... 2015-12-14 11:19 阅读 (641) 评论 (2) AOJ 0121 Seven Puzzle {广度优先搜索}（*） 原题题意题意是有一个输入，比如：1 0 2 3 4 5 6 7摆成如下形状：1 0 2 3 4 5 6 70表示空格，其他数字可以移动到0的位置。最后需要到如下形状：0 1 2 3 4 5 6 7上面的这种情况是需要移动一步，也就是0和1直接移动就好。代码#include #include #include #include #... 2015-12-13 20:50 阅读 (676) 评论 (0) 【UWP通用应用开发】集合控件与数据绑定 为ListView和GridView添加数据ListView采用垂直堆叠得方式显示数据，而GridView则采用水平堆叠得方式。长相的话嘛，它们都差不多。 <ListView x:Name="listView1... 2015-12-13 11:24 阅读 (620) 评论 (0) 【万字总结】探讨递归与迭代的区别与联系及如何求解10000的阶层 递归和迭代这两个概念也许很多童鞋依旧是老虎老鼠傻傻分不清楚，下面通过求解斐波那契数来看看它们俩的关系吧。斐波那契数的定义： f0=0 f_0 = 0 f1=1 f_1 = 1 fi=fi−1+fi−2(i>1) f_i = f_{i-1}+f_{i-2} (i > 1) 递归：(factorial 6) (* 6 (factorial 5)) (* 6 (* 5 (factorial 4... 2015-12-12 11:32 阅读 (1067) 评论 (1) AOJ 0033 Ball 题意题目我截图下来了，我大致解释下。有编号1到10共10个球，从上方丢下去，入口处可以选择进入左边或者右边，最后10个球全部落下去后如果左右两侧都是从小到大的顺序，则输出YES；否则输出NO。代码一开始我先测试了一下自己理解的题意是不是对的：#include #include using namespace std;int main() { vect... 2015-12-11 22:08 阅读 (943) 评论 (0) 【万字总结】以插排和分治为例来看如何分析与设计算法 插入排序及其解决思路算法的作用自然不用多说，无论是在校学生，还是已经工作多年，只要想在计算机这条道路走得更远，算法都是必不可少的。就像编程语言中的“Hello World！”程序一般，学习算法一开始学的便是排序算法。排序问题在日常生活中也是很常见的，说得专业点：输入是：n个数的一个序列 输出是：这n个数的一个全... 2015-12-11 18:13 阅读 (1064) 评论 (2) 【UWP通用应用开发】控件、应用栏 控件的属性、事件与样式资源如何添加控件添加控件的方式有多种，大家更喜欢下面哪一种呢？1）使用诸如Blend for Visual Studio或Microsoft Visual Studio XAML设计器的设计工具。 2）在Visual Studio XAML编辑器中将控件添加到XAML代码中。 3）在代码中添加控件。 注意：当应用运行时会看到你在代码中添加的控件，但在 Visual Stud... 2015-12-11 14:28 阅读 (797) 评论 (2) AOJ 0118 Property Distribution {深度优先搜索} 题意原题是这样的：原题呢就是上面这个，我还是来简单翻译一下吧。看到下面的图了么？大概有3种图案的标志，相同的可以拼接到一起，你需要找出最后一共有多少块。比如这里的就是有10块。它的输入是这样的：10 10 ####*****@ @#@@@@#*#* @##***@@@* #****#*@** ##@*#@@*## *@@@@*@@@# ***#@*@##* *@@@*@@##@ *@*#*@##**... 2015-12-10 21:43 阅读 (709) 评论 (0) 425条数据 共22页 1 2 3 4 5 ... 下一页 尾页 个人资料 NoMasp 访问： 577549次 积分： 12838 等级： 积分：12838 排名： 第505名 原创： 413篇 转载： 0篇 译文： 11篇 评论： 561条 Notice： ^ nomasp 博客导航 ^ 欢迎您访问我的更多博客文章 《 nomasp 博客导读 》 点击此处即可轻松导航喔 感谢您的支持，希望我的博客对您有所帮助 转载请联系本人 ^ 个人信息 ^ * 邮箱： kinhiox#gmail.com * 备用邮箱： nomasp#outlook.com * CSDN 博客专家、论坛版主 * 微软MSP Billboard * 欢迎入群交流 * 【UWP开发交流群】 523310660 * 【Android开发交流群】 303295519 * 【算法交流群】 376079805 微博 博客专栏 UWP通用应用开发 文章：6篇 阅读：9475 Android 开发 文章：6篇 阅读：5733 LeetCode 文章：27篇 阅读：18469 算法 文章：10篇 阅读：42943 万里征程——Windows App开发 文章：37篇 阅读：86176 欧拉工程 文章：0篇 阅读：0 OpenCV归纳 文章：5篇 阅读：14524 Scheme归纳 文章：13篇 阅读：45166 SICP练习 文章：151篇 阅读：179579 文章分类 nomasp 博客导读 (1) Algorithm (31) Books (2) C (1) C++ (9) C# (5) CampusLife (1) Data Structures (9) Fun (9) Git+Github (2) HTML5 (0) IT-Talk (7) Learning World (1) Mathematics (1) Music (1) OpenCV (6) OpenXML (1) Project Euler (9) Scheme & SICP (14) SICP Exercise (151) TCP/IP (3) TechLife (8) Useful gadgets (18) Windows 10 (30) WPF (4) Android Errors (5) Android Notes (11) Windows App (10) Linux Notes (5) LeetCode (42) Android (9) Java (3) UWP (10) Kinect (0) AOJ and POJ (5) 文章存档 2015年12月 (30) 2015年11月 (20) 2015年10月 (19) 2015年09月 (35) 2015年07月 (13) 2015年06月 (28) 2015年05月 (48) 2015年04月 (43) 2015年03月 (92) 2015年02月 (97) 阅读排行 【算法】1 由插入排序看如何分析和设计算法 (9405) 【算法】5 传说中的快排是怎样的 (7875) 怎样学习一门编程语言 (7072) 好玩的WPF第三弹：颤抖吧，地球！消失吧，地球！ (7048) nomasp 博客导读：UWP、Android、Algorithm、Lisp (6637) 【算法】4 五张图带你体会堆算法 (5690) 【SICP归纳】1 过程和代换模型 (5574) 【Scheme归纳】3 比较do, let, loop (5313) 【SICP归纳】2 高阶函数和数据抽象 (5112) 【万里征程——Windows App开发】页面布局和基本导航 (5006) 最新评论 【万字总结】图解堆算法、链表、栈与队列（多图预警） NoMasp : @superleexpert:可以加群以后一起刷LeetCode呐 【万字总结】图解堆算法、链表、栈与队列（多图预警） superleexpert : 详细且深入，又看了几篇LeeCode，学习学习！ 图论算法 有图有代码 万字总结 向前辈致敬 NoMasp : @turbo_mars_yang:哈哈 欢迎加入我博客侧边栏中的算法交流群来一块刷题呐 图论算法 有图有代码 万字总结 向前辈致敬 turbo_mars_yang : 收了收了！恰逢学数据结构的东西，很多东西都讲的通俗易懂，很受用！ nomasp的2015博客之星投票总结 NoMasp : @erlian1992:你的图标新换的么？ID我见过……共勉啦！ nomasp的2015博客之星投票总结 erlian1992 : 看了楼主这些，觉得自己差的好远，自己还的努力。 【算法】1 由插入排序看如何分析和设计算法 NoMasp : @wu2304211:有的 【算法】1 由插入排序看如何分析和设计算法 NoMasp : @CaidChen:可以加群交流喔 nomasp的2015博客之星投票总结 yamorn : @yamorn:good nomasp的2015博客之星投票总结 yamorn : @yamorn:good

Recno:: 18
URL:: http://blog.csdn.net/nomasp/rss/list

ParseText::


Recno:: 19
URL:: http://blog.csdn.net/purpleendurer/article/details/50402562

ParseText::
用ImDisk在Windows 10中创建内存虚拟盘 - Purpleendurer@CSDN - 博客频道 - CSDN.NET Purpleendurer@CSDN 编程……任是无情也动人~ 目录视图 摘要视图 订阅 学院APP首次下载，可得50C币！     欢迎来帮助开源“进步”     当讲师？爱学习？投票攒课吧     认识Atlassian Datacenter产品     深圳小伙伴的福利来啦 用ImDisk在Windows 10中创建内存虚拟盘 标签： Windows windows10 ImDisk 内存虚拟盘 虚拟盘 2015-12-25 13:17 148人阅读 评论 (1) 收藏 举报 分类： 原创作品 （196） 作者同类文章 X 软件应用 （12） 作者同类文章 X 系统维护 （452） 作者同类文章 X 版权声明：本文为博主原创文章，未经博主允许不得转载。 　　之前电脑使用的是Windows 7，内存虚拟盘是通过ramdisk1.1简体绿色版创建的，通过修改系统环境变量和用户环境变量值把系统临时文件夹设置到虚拟盘，把IE缓存也设到虚拟盘。使用起来很稳定。 　　昨天下午心盘来潮，空然想升级到Windows 10体验一下。 　　真折腾。 　　首先恢复环境变量，恢复系统缓存和IE缓存位置。再删除内存虚拟盘。 　　由于C盘可用空间少，先从其它盘压缩出一些可用空间，然后通过MiniTool分区向导免费版扩展到C盘。接着下载 Windows 10 易升1.2进行了升级。 　　升级完成后，再运行ramdisk1.1简体绿色版，却无法创建内存虚拟盘了。 　　Bing了一下，网友们一般用Primo Ramdisk　或　ImDisk。由于ImDisk是开源的，所以选择了它。下载安装。 　　然后到控制面板里双击ImDisk Virtual Disk Driver启动它。 　　在打开的ImDisk Virtual Disk Driver窗口中点击Mount new……按钮。 　　在弹出的Mount new vvirtual disk对话框中按下图输入、选择虚拟盘的有关参数： 　　点击OK按钮。稍后虚拟盘就创建出来了。不过虚拟盘还不能直接使用。需要格式化。 　　稍后系统会自动询问新创建的虚拟盘是否需要格式化。 　　如果选择了取消，也可以在mDisk Virtual Disk Driver窗口中右击虚拟盘，从弹出的菜单中选择格式化Format…… 　　快速格式化后就能正常使用了。 上一篇 五款超级易用的网络监控软件 顶 0 踩 0 我的同类文章 原创作品 （196） 软件应用 （12） 系统维护 （452） http://blog.csdn.net 猜你在找 查看评论 * 以上用户言论只代表其个人观点，不代表CSDN网站的观点或立场 个人资料 Purpleendurer 访问： 1971168次 积分： 31299 等级： 积分：31299 排名： 第87名 原创： 968篇 转载： 40篇 译文： 108篇 评论： 1546条 文章搜索 文章分类 autoXrun (2) FileInfo (9) 开源世界 (13) pe_xscan (32) 专家指路 (60) 原创作品 (197) 史海钩沉 (20) 名人传记 (2) 奇闻妙文 (7) 安全技术分析 (10) 安全资源 (22) 心情随笔 (43) 源码解析 (104) 系统安全 (352) 系统维护 (453) 编程资料 (13) 美文共赏 (0) 英语乐园 (24) 读书笔记 (1) 软件应用 (13) QQ (2) 礼品卡 (1) 钓鱼 (1) Linux世界 (1) IE8 (1) 安全设置 (1) bug (3) 安卓Android (1) 网页制作 (1) JavaScript (1) 单引号 (1) 双引号的效果的一点区别 (0) 双引号 (1) 区别 (1) 文章存档 2015年12月 (2) 2015年11月 (4) 2015年10月 (1) 2015年09月 (1) 2015年08月 (1) 2015年07月 (1) 2015年06月 (3) 2015年05月 (2) 2015年04月 (1) 2015年03月 (2) 2015年02月 (1) 2015年01月 (1) 2014年12月 (3) 2014年11月 (4) 2014年10月 (3) 2014年09月 (4) 2014年08月 (1) 2014年07月 (1) 2014年05月 (2) 2014年04月 (1) 2014年01月 (1) 2013年11月 (1) 2013年07月 (3) 2013年05月 (1) 2013年04月 (1) 2013年03月 (1) 2012年12月 (1) 2012年11月 (1) 2012年09月 (1) 2012年08月 (4) 2012年07月 (1) 2012年06月 (2) 2012年05月 (5) 2012年03月 (2) 2012年02月 (5) 2012年01月 (4) 2011年12月 (2) 2011年11月 (1) 2011年08月 (1) 2011年07月 (4) 2011年06月 (3) 2011年05月 (5) 2011年04月 (1) 2011年03月 (6) 2011年02月 (4) 2011年01月 (6) 2010年12月 (3) 2010年11月 (2) 2010年10月 (2) 2010年09月 (4) 2010年08月 (1) 2010年07月 (7) 2010年06月 (6) 2010年05月 (5) 2010年04月 (7) 2010年03月 (6) 2010年02月 (2) 2010年01月 (6) 2009年12月 (5) 2009年11月 (6) 2009年10月 (8) 2009年09月 (3) 2009年08月 (3) 2009年07月 (10) 2009年06月 (9) 2009年05月 (5) 2009年04月 (9) 2009年03月 (4) 2009年02月 (9) 2009年01月 (6) 2008年12月 (7) 2008年11月 (10) 2008年10月 (16) 2008年09月 (15) 2008年08月 (7) 2008年07月 (16) 2008年06月 (26) 2008年05月 (21) 2008年04月 (19) 2008年03月 (21) 2008年02月 (21) 2008年01月 (18) 2007年12月 (19) 2007年11月 (18) 2007年10月 (16) 2007年09月 (20) 2007年08月 (26) 2007年07月 (21) 2007年06月 (27) 2007年05月 (15) 2007年04月 (18) 2007年03月 (20) 2007年02月 (18) 2007年01月 (26) 2006年12月 (29) 2006年11月 (22) 2006年10月 (27) 2006年09月 (25) 2006年08月 (27) 2006年07月 (20) 2006年06月 (10) 2006年05月 (10) 2006年04月 (17) 2006年03月 (19) 2006年02月 (16) 2006年01月 (13) 2005年12月 (23) 2005年11月 (10) 2005年10月 (18) 2005年09月 (12) 2005年08月 (16) 2005年07月 (30) 2005年06月 (50) 2005年05月 (9) 2005年04月 (3) 2005年03月 (7) 2005年02月 (2) 2005年01月 (5) 2004年12月 (10) 2004年11月 (6) 2004年10月 (2) 2004年09月 (3) 2004年08月 (1) 阅读排行 关于编程学习的七点思索 (34252) 一名平庸程序员的自白 (19240) IT行业中的性别差距：程序员MM在哪呢？ (16638) 一位怀疑论者眼中的C++发展史 (14963) 昨天才提醒，今天就有网友点击QQ信息中的网址，中Worm.Viking.pk/Worm.Win32.Viking.jg了 (13041) 网易邮箱显示附件上传不成功，请重试！(错误码:FR_INVALID_REQUEST) 的解决方法 (11911) 传统杀毒软件 vs. 军用恶意软件 (10308) 我该怎样卸载IE7？ (10262) 在FlashFXP中设置数据传输模式为PORT（主动模式）的两种方法 (10084) 雇用黑客：好处、坏处和弊端 (9914) 评论排行 一名平庸程序员的自白 (214) IT行业中的性别差距：程序员MM在哪呢？ (175) 关于编程学习的七点思索 (137) 360浏览器被7322.com劫持，IE浏览器被6781.com劫持 (60) Unix vs. 微软Windows: 系统设计折射安全理念 (48) 雇用黑客：好处、坏处和弊端 (47) 一位怀疑论者眼中的C++发展史 (41) 若将瑞星比Borland　刘旭略胜Anders (36) 解决使用360卫士清理后出来的系统异常故障 (28) 反病毒软件的工作是否名符其实？ (27) 推荐文章 *App竞品技术分析 （6）热修复 *架构设计：系统间通信（17）——服务治理与Dubbo 中篇（分析） *一款炫酷Loading动画--加载失败 *图解堆算法、链表、栈与队列（多图预警） *Android中ContentProvider组件详解 *Android平台Camera实时滤镜实现方法探讨(九)--磨皮算法探讨(一) 最新评论 用ImDisk在Windows 10中创建内存虚拟盘 u011552404 : 虚拟盘有什么好处？ 针对小型企业三个基本的IT安全技巧 hold_msd : 不错 如何检查你的安卓设备是否易受攻击？ hold_msd : 可以 IE8总提示当前安全设置会使计算机有风险，关闭提示的方法步骤 Purpleendurer : @hellobaby123321:;-P IE8总提示当前安全设置会使计算机有风险，关闭提示的方法步骤 Purpleendurer : @TheoneLove:No thanks IE8总提示当前安全设置会使计算机有风险，关闭提示的方法步骤 TheoneLove : 解决了 thanks 为什么 JavaScript仍将是程序员的首选 habit_reflection : 哎，只是入门的，太菜了 为什么 JavaScript仍将是程序员的首选 zero_create : mark 一名平庸程序员的自白 liuxiangjia : mark,。。。。。。 为什么 JavaScript仍将是程序员的首选 liuxiangjia : mark.写的很好~ My Blog purpleendurer@$inaBlog ( RSS ) 友情blog endurer@$inablog Google开源代码搜索 Google音乐搜索 endurer@csdn

Recno:: 20
URL:: http://blog.csdn.net/qing_gee/article/list/2

ParseText::
qing_gee的专栏 - 博客频道 - CSDN.NET qing_gee的专栏 路漫漫其修远兮，吾将上下而求索 目录视图 摘要视图 订阅 学院APP首次下载，可得50C币！     欢迎来帮助开源“进步”     当讲师？爱学习？投票攒课吧     认识Atlassian Datacenter产品     深圳小伙伴的福利来啦 mysql之修改表引擎 刚入门mysql的时候，对innodb引擎和myisam引擎没有很好的理解，所以表引擎用的基本上就是myisam，反正也不懂哪一个好，不过有人给我灌输“如果查询多的话，myisam比innodb要快得多”。现在想想当时是有多蠢！... 2015-11-13 14:40 阅读 (139) 评论 (0) mysql之死锁 其实，看到“死锁”二字，不需要王二，就是我，来再废口舌，这两个字名如其意，已经可以透过现象看本质了。不过呢，我虽然长着一副程序猿的样子，但一直没有理解好mysql的死锁概念，为此还曾苦恼过，觉得自己有愧于程序猿的脸面。有幸第N次拜读《高性能mysql》，恍惚间觉得自己明白了一些，也就是有点对得起程序猿这三个字了。... 2015-11-12 15:44 阅读 (916) 评论 (0) dont make me think 终于要提笔写点东西了，我掩饰不住自己的窃喜，这篇文章的内容可能和标题有所不符，哦，真抱歉，我害怕这样的文章成为你眼中的垃圾，因为如果你假装没看到这样的文章，我到觉得还对得起“读者体验”，良心上过得去，然而如果你不幸看了，然后唾弃这篇文章，那么我觉得就良心不安了！... 2015-11-10 17:20 阅读 (585) 评论 (2) VS2013安装SVN插件 因为项目需要，需要在VS2013安装SVN插件，而我之前一直搞Java，没搞过VS，更没有弄过VS的版本控制。没办法，只能从零到一啦。不过问了半天度娘，度娘嘟嘟囔囔的不知道在说哈，没找到什么可行的解决办法。不过后来听说专门有VS的SVN插件，这可让人太喜过望。... 2015-11-09 10:30 阅读 (4846) 评论 (4) mysql配置 《mysql配置》，在centOS上安装完成mysql后，自然是要对mysql进行配置，对于mysql来说，my.cnf可是很重要的，相当于画龙点睛的作用呢。... 2015-11-03 09:07 阅读 (1122) 评论 (2) mysql自动备份 《mysql自动备份》，在安装完mysql，需要的就是对mysql进行自动化备份，以免项目运行过程中数据丢失造成不可挽回的后果，那么这篇文章就来手把手的教你如何进行自动化备份，注意啊，睁大眼睛了，哈哈，这可是不可多得的秘密！... 2015-11-03 09:06 阅读 (888) 评论 (4) centOS下安装mysql5.7 再一次，《centOS下安装mysql5.7》，我再三思索这个标题是否会吸引你过来读一读，还有，我害怕你看到这个标题会觉得“烦死了，又来，™烦不烦！”。我写这篇文章时，已经清楚的意识到这个问题，之前我发表过 升级mysql到5.7，linux下安装升级mysql版本。本来我觉得这样就足可以帮助我下一次顺利的完成mysql安装，不料这一次还是栽了跟头，于是我，我觉得有必要再整理一次，所谓“温故而... 2015-10-30 09:45 阅读 (1275) 评论 (3) 代码天敌之体积 前言：好吧，我觉得Steve yegge的牢骚能力太棒了，以至于我不得不重新来审视自己，到底我该怎么对待Java，怎么对待我热爱了8年的Java，当然了，到目前为止，我可没有被Steve忽悠着去学习新的语言，如ruby，我还会待在Java的阵营，但是有必要，我要对自己以往的代码进行审视，看看Java代码的天敌到底是什么？ 经常不经意间就发现文章被扣到各式各样的网站上面，甚是可恶！ 那么人生... 2015-10-22 17:06 阅读 (975) 评论 (0) 从小学到高中，一个程序猿的独白 前言：从小学到高中，那段幼稚、青涩的年代，我是无论如何也想不到自己以后要做一名程序猿，现在回想起来，依然会惊讶。小学阶段请允许我的自恋，在我们村子，从5岁上学前班到小学五年级毕业，我年年能领导那高贵的奖状、附带着写字笔、作业本，那几乎是父母所有的荣耀，当然还有骄傲。上小学3年级之前，我们年级一直只有6个人，除了第一名的我，也就是其他同学们（没办法，人少就是这么嘚瑟，反正迈克尔乔丹当然在NBA就是这么... 2015-10-22 14:07 阅读 (746) 评论 (16) 我所经历的编程语言 前言：之前由于要开发《探索jfinal与bootstrap》，我被迫休整了很长一段时间，因为我无暇再来写读书札记。好吧，我承认，我说的有点过了，想读书怎么可能没有时间呢？忘记了“时间就像海绵里的水，挤挤总是有的”哪个大家说的，反正我为我自己没有读书的行为感到挫败。不过今天，我终于是看了《程序员的呐喊》之“编程语言的宗教”，下面就来说说感受吧！CSDN取消了文章推荐到首页的功能，而我的文章又不具备上首... 2015-10-20 17:44 阅读 (866) 评论 (4) 从SVN trunk库中选择一个版本作为branch开发版本 前言：本篇《从SVN trunk库中选择一个版本作为branch开发版本》，将详细介绍如何从SVN的历史版本中选择一个指定版本作为branch bugfix版本，可能你也会遇到这样的情形，该纠结如何来做，那么接下来请注意好了。ps：多图慎入！1.先将trunk版本导出为一个项目。 省略了部分步骤，我想你肯定知道怎么做。2.将最新版切换为指定的历史版本。3.将替换后的版本进行tag标记。4.分支版本... 2015-10-19 09:59 阅读 (204) 评论 (0) too much recursion出现的一种可能 前言：今天在调试页面的时候，firebug突然就报了“too much recursion”，真是莫名其妙，然后把页面元素不断的删减，调试方得出了一种可能出错的原因。错误状况账户 <input class="form-control" type="text" autofocus name="username" placeholder="请输入会员编号" autocomp... 2015-10-16 16:48 阅读 (584) 评论 (0) 智能消息提示框 前言：总感觉《消息提示框》这种事情比较low，但是又隐隐约约觉得“勿以善小而不为”，也许他人正需要这样一个模板。“我觉得操作成功后，需要一个弹出提示框”，客户说。 “需要吗？我觉得没必要，错误的时候提示，成功时自动跳转就行了！”，我弱弱的答。 “你那样不人性化，听我的，加一个”，客户继续说。 “那好吧！”我继续弱弱的答。tips：以下的代码只是片段，因为在其他文章中已经提及，若需要，请参照探索... 2015-10-15 17:32 阅读 (606) 评论 (0) 修复bootstrap validate重复提交的bug 前言：【修复bootstrap validate重复提交的bug】，项目是基于bootstrap和jfinal开发的，这个过程的确很痛苦，但也伴随着很多收获，就如同本文一样，之前尝试用了bootstrap的validate来验证表单数据，确实很不错，然而这中间也夹带着不经意的bug，很隐蔽。bug调查调查结果： 1. 当不使用bootstrap validate时，就不会出现如图提示问题。 2.... 2015-10-15 14:32 阅读 (817) 评论 (8) 实现bootstrap到jfinal的翻页功能 前言：《实现bootstrap到jfinal的翻页功能》，本篇绝对纯干货，优点：支持局部刷新；只要是列表，都可以加载该组件；支持动态数据绑定；当然还有绝对的简单实用。效果图 1.我最喜欢的就是局部刷新，哈哈。 2.参数传递起来也很简单。实现第一步，构造翻页组件。<%@ page language="java" contentType="text/html; charset=utf-8" page... 2015-10-15 11:29 阅读 (1123) 评论 (1) jquery在设置max-height时请注意 前言：这是一个小问题，但是如果稍不注意，会更加让你气恼。《jquery在设置max-height时请注意》，max-height的value值只能是百分比和像素值，却不能直接指定为数值。if (self.options.maxheight > 0) { self.dc.css({ "max-height" : self.opti... 2015-10-14 10:11 阅读 (410) 评论 (0) 哈哈，bootstrap validate就是不错 前言：之前使用jquery的validate插件配合bootstrap来使用，但是效果很难让我满意，今天有幸看到BootstrapValidator，Twitter的开源真心好。效果图比起之前使用jquery validate确实好看，自然，毕竟这才是一家人。使用<input type="text" style="" class="form-control" id="j_username" name... 2015-10-13 17:50 阅读 (211) 评论 (0) bootstrap-switch使用 前言：bootstrap-switch是一个很经典的开关按钮组件，但是如果按照这个网页上的代码来配置，你怎么都不可能出来效果，就且来看看我是怎么做的吧。效果 材料准备Bootstrap 开关（switch）控开始<link type="text/css" rel="stylesheet" href="${ctx}/components/switch/css/bootstrap3/bootstrap... 2015-10-12 17:58 阅读 (617) 评论 (0) bootstrap input-file小例子 前言：英语不够好，吃亏倒大霉。且听我来絮叨絮叨，bootstrap input-file是一个很好的插件，可惜api又™是英文，折腾来折腾去，只能粗糙的使用一些预览和上传功能，可惜可惜啊。demo 插件引入 <s... 2015-10-07 16:11 阅读 (2514) 评论 (2) 登录跳转到上一个界面 前言：《登录跳转到上一个界面》，这个标题注定要词不达意，你可能会遇到这样的情形，当点击页面的某个请求时，由于用户未登录，需要跳转到登录页，用户登录成功后，再跳转到上一个页面；还有一种情况，多个页面都有登录按钮，登录成功后需要刷新对应的登录信息。图文并茂1.场景1 2.场景2 代码实现场景1的代码这次重点说明以下，场景2的代码可以参照本系列其他文章再谈ajax局部刷新全局拦截器public cla... 2015-10-07 15:10 阅读 (174) 评论 (0) 138条数据 共7页 首页 上一页 1 2 3 4 5 ... 下一页 尾页 个人资料 qing_gee 访问： 157844次 积分： 3210 等级： 积分：3210 排名： 第5842名 原创： 137篇 转载： 0篇 译文： 0篇 评论： 345条 我的微博 我的QQ群 扫描、点击二维码都可加群，QQ群： 120926808 博客专栏 北洋杂录：阿猿的浮想录 文章：18篇 阅读：20183 Java，漂亮的不像实力派 文章：24篇 阅读：18126 我的标杆 程序视界foruok 豆巴陆其明 JFinal 极速开发 阅读排行 你不得不读的书籍清单 (10855) VS2013安装SVN插件 (4832) jQuery validate之remote (2898) bootstrap input-file小例子 (2496) 论证select count(*)和select count(1) (2318) dwz中jqGrid的主题变更 (2258) 26岁程序员的出路 (2188) 升级mysql到5.7 (2084) Illegal overloaded getter method with ambiguous type for property (2019) 读京东技术解密，感桑田沧海变迁 (1791) 最新评论 wysiwyg富文本数据如何保存到mysql mxh403 : 不能后退的时候，不再彷徨的时候 ^_^.Merry Christmas！ 了解Activity u010247281 : 不错，写的很详细嘛 26岁程序员的出路 wtjandjay : 你还找辉哥给你当导师了，他竟然还拒绝了哈哈太有意思了 26岁程序员的出路 wtjandjay : 二哥你是来拉仇恨的吗 同 26 同it码农 哎不能比啊 你不得不读的书籍清单 wtjandjay : 哈哈楼主终于换头像了 我有个二十多年的发小也叫王二后来我给他起了个外号叫王俩 wysiwyg富文本数据如何保存到mysql qingluohuaxiang : 赞 你不得不读的书籍清单 liran9094 : @qing_gee:买的跑步说些什么 到了 打算平时在地铁时候慢慢的看它我平时也没怎么读书吧，... 你不得不读的书籍清单 xx326664162 : @qing_gee:我是来学习的，这些书我只有一本Java编程思想，刚买的，正在看，希望看完对我的技... 了解Activity Dark_Crow : 你不得不读的书籍清单 qing_gee : @xx326664162:诚如朋友所说，即使书读完一遍也不一定能领会得了。上面列出这18本书，有一些... 文章搜索 文章存档 2015年12月 (15) 2015年11月 (11) 2015年10月 (14) 2015年09月 (23) 2015年08月 (6) 2015年07月 (8) 2015年06月 (5) 2015年05月 (10) 2015年04月 (12) 2015年03月 (4) 2015年02月 (2) 2015年01月 (9) 2014年12月 (9) 2014年11月 (10)

Recno:: 21
URL:: http://blog.csdn.net/qing_gee/rss/list

ParseText::


Recno:: 22
URL:: http://blog.csdn.net/raylee2007/article/details/50402983

ParseText::
从头认识java-15.1 填充容器（2） - raylee2007的专栏 - 博客频道 - CSDN.NET raylee2007的专栏 目录视图 摘要视图 订阅 学院APP首次下载，可得50C币！     欢迎来帮助开源“进步”     当讲师？爱学习？投票攒课吧     认识Atlassian Datacenter产品     深圳小伙伴的福利来啦 从头认识java-15.1 填充容器（2） 标签： java 2015-12-25 14:32 96人阅读 评论 (0) 收藏 举报 分类： JAVA基础 （158） 作者同类文章 X 版权声明：本文为博主原创文章，未经博主允许不得转载。 接着上一章节，我们继续介绍填充容器。 这一章节我们结束另一种填充容器的方式：addAll 例子： package com.ray.ch15; import java.util.ArrayList; import java.util.Arrays; import java.util.LinkedHashSet; public class Test { public static void main(String[] args) { MyCollection<String> myCollection = new MyCollection<String>( new MyGenerator(), 25);//在构造器填充 System.out.println(Arrays.toString(myCollection.toArray())); LinkedHashSet<String> set = new LinkedHashSet<String>(myCollection); System.out.println(Arrays.toString(set.toArray())); set.clear(); set.addAll(myCollection);//另一种方式 System.out.println(Arrays.toString(set.toArray())); } } interface Generator<T> { T next(); } class MyCollection<T> extends ArrayList<T> { private static final long serialVersionUID = 1L; public MyCollection(Generator<T> generator, int count) { for (int i = 0; i < count; i++) { add(generator.next()); } } } class MyGenerator implements Generator<String> { private String strPool = "The annual expansion rate for " + "industrial output will be around 6 percent this year, " + "well below this year's GDP growth, which is likely to be " + "about 7 percent, the Ministry of Industry and Information " + "Technology said, adding that such a situation was happening " + "for the first time in nearly two decades."; private int index = 0; @Override public String next() { return strPool.split(" ")[index++]; } } 输出： [The, annual, expansion, rate, for, industrial, output, will, be, around] [The, annual, expansion, rate, for, industrial, output, will, be, around] [The, annual, expansion, rate, for, industrial, output, will, be, around] 我来解释一下上面的代码，有几个需要注意的地方： （1）上面继续前几个篇幅所提到的生成器，我们通过泛型生成器来生成相关的对象。这种方式创建的对象具备灵活性，不像系统提供的nCopy方法，只能创建单一的对象。 （2）创建一个自己的容器（继承Arraylist），它是用来装载生成器创建的对象，继承某个容器，可以方便的在构造器里面调用add方法，也具备容器的特性 （3）在main方法里面展现了两种填充容器的方式，一个是直接在构造器里面添加，一个是使用addAll方法，这两种方法都是接收Collection类型的容器，因此我们无论生成什么的容器，都可以add进去。 总结：这一章节展现了另一种填充容器的方式。 这一章节就到这里，谢谢。 ----------------------------------- 目录 上一篇 从头认识java-15.1 填充容器（1） 顶 0 踩 0 我的同类文章 JAVA基础 （158） http://blog.csdn.net 猜你在找 查看评论 * 以上用户言论只代表其个人观点，不代表CSDN网站的观点或立场 个人资料 raylee2007 访问： 181912次 积分： 5189 等级： 积分：5189 排名： 第2889名 原创： 327篇 转载： 1篇 译文： 2篇 评论： 115条 文章搜索 博客专栏 从头认识java 文章：125篇 阅读：91609 轻松python之设计模式 文章：1篇 阅读：490 轻松python之文件专题 文章：7篇 阅读：4472 轻松python-文本专题 文章：18篇 阅读：6429 数据结构与算法 文章：9篇 阅读：3377 java基础学习 文章：31篇 阅读：11575 轻松python 文章：155篇 阅读：72434 文章分类 JAVA基础 (159) GXT (1) Spring (1) 数据结构与算法 (9) 其他 (0) python (154) 项目 (1) 精通python设计模式 (1) 文章存档 2015年12月 (39) 2015年11月 (50) 2015年10月 (49) 2015年09月 (56) 2015年08月 (93) 2015年07月 (13) 2015年06月 (3) 2015年05月 (7) 2015年04月 (14) 2014年10月 (1) 2014年08月 (1) 2013年07月 (2) 2013年06月 (2) 2013年03月 (1) 阅读排行 零基础学python-目录 (2615) 从头认识java-目录 (2357) 从头认识java-7.4 实现多重接口 (1539) 从头认识java-7.3 接口怎样解耦？ (1414) 从头认识java-1.1 编程语言抽象过程以及java的基础特性 (1293) 从头认识java-1.2 对象-服务提供者 (1279) 从头认识java-8.11 为什么需要内部类？ (1266) ssh，spring 泛型注入，泛型dao和service的实现 (1177) 从头认识java-3.1 for each (1167) 从头认识java-2.3 自增自减与关系操作符 (1162) 评论排行 零基础学python-目录 (13) 从头认识java-6.7 初始化与类的加载 (12) 从头认识java-1.1 编程语言抽象过程以及java的基础特性 (6) java清理对象的时候“=null”与“gc”的比较 (5) 从头认识java-目录 (5) 从头认识java-6.6 final（1）-属性域 (5) 轻松python之文件专题-读取文件专题 (4) java基础入门-父类引用子类对象 (4) 从头认识java-4.5 对象的清理(finalize()) (4) 零基础学python-初识python与python的解释过程 (3) 推荐文章 *App竞品技术分析 （6）热修复 *架构设计：系统间通信（17）——服务治理与Dubbo 中篇（分析） *一款炫酷Loading动画--加载失败 *图解堆算法、链表、栈与队列（多图预警） *Android中ContentProvider组件详解 *Android平台Camera实时滤镜实现方法探讨(九)--磨皮算法探讨(一) 最新评论 从头认识java-目录 u013299671 : 好棒，支持作者！ 从头认识java-14.2 进一步了解数组 a1239761234 : 谢谢 从头认识java-13.15 使用泛型时出现的问题（2）-实现参数化接口与重载 sinat_23622505 : 第一个桥方法冲突第二个不符合重载都是由于泛型擦除引起的 _^_^_ 从头认识java-13.15 使用泛型时出现的问题（1）-泛型不能使用基础类型 u010850027 : 感谢楼主的分享，学习了`(*∩_∩*)′ 从头认识java-13.15 使用泛型时出现的问题（2）-实现参数化接口与重载 u010850027 : 感谢楼主的分享，学习了`(*∩_∩*)′ 从头认识java-1.2 对象-服务提供者 gwjsmgym : 好 从头认识java-13.11 对比数组与泛型容器，观察类型擦除给泛型容器带来什么问题？ Qiaofeng_cui : 好文章！赞一个！ 从头认识java-13.7 什么时候使用泛型？ cytzrs : 不错 从头认识java-13.7 什么时候使用泛型？ wangdan199112 : 底层需要用泛型，这样才能提高方法的复用！ 从头认识java-13.8 类型擦除的问题与解决 NoMasp : 有点简短呐

Recno:: 23
URL:: http://blog.csdn.net/sheismylife/article/list/2

ParseText::
Dean Chen的专栏 - 博客频道 - CSDN.NET Dean Chen的专栏 乐视大数据部招聘C++/Java工程师(chenshu@letv.com) 目录视图 摘要视图 订阅 学院APP首次下载，可得50C币！     欢迎来帮助开源“进步”     当讲师？爱学习？投票攒课吧     认识Atlassian Datacenter产品     深圳小伙伴的福利来啦 关闭transparent_hugepage 好多地方都提示关闭这个，MongoDB 3.0提示2015-10-21T09:03:24.256+0800 I CONTROL [initandlisten] ** WARNING: /sys/kernel/mm/transparent_hugepage/enabled is 'always'. 2015-10-21T09:03:24.256+0800 I CONTROL [initandli... 2015-10-21 18:32 阅读 (971) 评论 (0) C++网络通信库性能大比拼 C/C++网络通信库有不少，本次benchmark的目的是为了公平的评估它们的网络I/O性能，当然是作为REST server, 因此每个server都写了一些代码，好在不是特别复杂。这个测试经过了好几轮，本文给出了最终的结论。先上结论，大家都忙：）候选者：cppcms, boost asio, libevent, muduo和 nginx，nginx不是库，这里做测试使用它作为基准，毕竟很多人心... 2015-10-20 22:27 阅读 (1931) 评论 (1) Clojure语言十三: 宏的基本概念 micro与function的区别特点是允许在Clojure evaluate你的list之前，你能够像处理函数一样的处理它, 但是不evaluate。如果你想把一个表达式作为参数传递给函数，并要求这个参数不求值，这是做不到的。比如下面的函数定义会报错：user=> (def ignore-last-operand2 [function-call] (butlast function-ca... 2015-10-18 21:49 阅读 (744) 评论 (0) storm社区相关网站和资料 storm官方网站站点地址：http://storm.apache.org/文档列表：http://storm.apache.org/doc-index.htmlstorm clojure相关clojure dsl用clojure测试topologystorm社区站点地址：http://storm.apache.org/community.html开发者邮箱组：dev@storm.apache.o... 2015-10-18 16:22 阅读 (731) 评论 (0) storm 开发系列二 Clojue版本 对于第一个简单的topology，现在用clojure实现一遍。正好可以对比一下。创建工程用lein app模板创建工程demo$ lein new app hello_storm_clj Generating a project called hello_storm_clj based on the 'app' template.注意，app是lein提供的模板名称，以下是所有模板Subtask... 2015-10-17 19:37 阅读 (747) 评论 (0) emacs 括号自动高亮 推荐使用highlight-parentheses mode用list-packages安装，然后在init.el中添加(require 'highlight-parentheses) (define-globalized-minor-mode global-highlight-parentheses-mode highlight-parentheses-mode (lambda () ... 2015-10-15 19:51 阅读 (579) 评论 (0) Emacs 安装 clojure开发环境 安装CIDER模块还是比较简单的，就是用list-packages查找，找到CIDER后，安装。直接用官方文档的命令安装会失败，还是用上面的方式。使用middleware匹配版本在~/.lein/profiles中添加一行依赖:plugins [[cider/cider-nrepl "0.9.1"]]... 2015-10-15 15:08 阅读 (608) 评论 (1) clojure 1.7 安装 由于storm的普及，clojure重新回到了我的技术中，现在在ubuntu 15.04上安装clojure 1.7最新环境。下载并解压wget http://repo1.maven.org/maven2/org/clojure/clojure/1.7.0/clojure-1.7.0.zip unzip clojure-1.7.0.zip进入目录后，用下面的命令进入clojure shell, 做... 2015-10-14 11:26 阅读 (603) 评论 (0) storm 开发系列一 第一个程序 本文将在本地开发环境创建一个storm程序，力求简单。首先用mvn创建一个简单的工程hello_stormmvn archetype:generate -DgroupId=org.csfreebird -DartifactId=hello_storm -DarchetypeArtifactId=maven-archetype-quickstart -DinteractiveMode=false编辑... 2015-10-13 22:38 阅读 (673) 评论 (0) Storm 术语与概念 storm里面有很多术语，这些概念需要清晰的理解，下面是个人的一点心得。2 topologystorm jobtopology一直运行，不会终止由spout和bolt组成DAG3 stream一堆tuple的并发分布式处理流一个topology中可以包含若干个streams4 component包含spout 或者 bolt5 spoutstream的源头reliable spout可以在处理失败... 2015-10-13 18:28 阅读 (492) 评论 (0) storm 开发环境搭建 文档资料storm提供了local mode(本地开发环境)，便于调试，现在试一下。参考官方文档没有那么复杂，本地开发调试只需要使用maven依赖storm库，就能够在本地进程中模拟运行你的storm topology程序。从github的例子开始获取github上的官方例子代码git clone git://github.com/apache/storm.git && cd storm/然后编译... 2015-10-13 18:24 阅读 (498) 评论 (0) MongoDB 用时间筛选_id字段 下面的代码来自stackoverflow，在MongoDB shell中运行> function objectIdWithTimestamp(timestamp) { ... // Convert string date to Date object (otherwise assume timestamp is a date) ... if (typeof(timestamp) =... 2015-10-12 18:45 阅读 (416) 评论 (0) Ubuntu 升级 MongoDB 2.x 到 3.x 要先删除掉原来的mongodb 2.xapt-get autoremove mongodb-org reboot 这样/etc/init.d/mongodb 脚本也自动被删除了然后删除下面的配置文件/etc/apt/sources.list.d/10gen.list安装3.x的文章参考Ubuntu 15.04 安装 MongoDB 3.x... 2015-10-11 20:33 阅读 (454) 评论 (0) jenkins 升级无法启动的问题解决 不要猜，看日志，看配置。需要了解jenkins的几个主要目录/var/lib/jenkins 是 jenkins home目录/var/default/jenkins 是jenkins配置文件，里面可以修改端口号/etc/init.d/jenkins  是jenkins启动文件，里面可以修改端口号，通过在首行添加set -x 可以打印所有命令，检查是否有不正确的配置。通过set -x也可以看到日志... 2015-10-05 21:30 阅读 (1043) 评论 (0) 获取git项目最后的tag 在gitlab.com上面看到的，相当好用git describe --tags `git rev-list --tags --max-count=1`比如下面的项目：/cppwizard$ git tag -n10 v1.0.0 simplify console build v1.1.0 use file.lsp in same folder v1.2.0 ... 2015-10-05 00:02 阅读 (575) 评论 (1) emacs 24.4.1 终极 C++智能提示解决方案 采用ycmd模式 加上 前面介绍的company-mode首先下载并安装ycmd server参考，重点内容已经截出来Building[Clients commonly build and set up ycmd for you; you are unlikely to need tobuild ycmd yourself unless you want to build a new client... 2015-10-04 19:51 阅读 (734) 评论 (4) emacs 24.4.1 使用company mode智能提示C++程序 company 不是公司，而是两个单词的合成，complete anything。所以不只是用于C++编程。首先使用package system安装company-modeM-x list-packages然后搜索company-modei, x 安装company mode官方文档在这里修改~/.emacs.d/init.el, 添加一行(add-hook 'after-init-hook 'g... 2015-10-04 17:10 阅读 (735) 评论 (0) ubuntu 15.04 clang++ 3.6 编译cppcms1.0.5 首先下载cppcms库 wget -O cppcms-1.0.5.tar.bz2 http://downloads.sourceforge.net/project/cppcms/cppcms/1.0.5/cppcms-1.0.5.tar.bz2?r=http%3A%2F%2Fsourceforge.net%2Fprojects%2Fcppcms%2Ffiles%2F&ts=1443867793&u... 2015-10-03 18:44 阅读 (849) 评论 (1) 面对 MongoDB 3.x ，用什么C++ driver 首先要看下github的c++驱动项目https://github.com/mongodb/mongo-cxx-driver这里有个简要的介绍，当前C++驱动分成三个版本，放在不同的branch 中BranchStabilityDevelopmentPurposemasterAlphaIn progressNew C++11 driverlegacyStableStable EvolutionPr... 2015-10-03 13:57 阅读 (887) 评论 (0) Ubuntu 15.04 clang++ 3.6 编译boost 1.59/1.55 Ubuntu 15.04已经可以直接通过apt-get insall 安装clang 3.6, 并且预装的gcc版本是4.9.2。这些安装过程在这里介绍。首先下载boost源码wget -O boost.1.59.tar.bz2 http://sourceforge.net/projects/boost/files/latest/download?source=files解压tar jxvf ./... 2015-10-03 12:44 阅读 (1243) 评论 (0) 1101条数据 共56页 首页 上一页 1 2 3 4 5 ... 下一页 尾页 个人资料 sheismylife 访问： 3247664次 积分： 43541 等级： 积分：43541 排名： 第46名 原创： 1080篇 转载： 21篇 译文： 1篇 评论： 1074条 文章搜索 文章分类 田金龙太极拳法 (17) 数据分析理论与实践 (1) spark (4) storm (9) Clojure (34) thrift (2) Hadoop (35) zookeeper (6) Android (9) KVM (15) Redmine (13) c++ network (1) c++ 11 (3) c++语言 (96) c++模板技术 (9) c++编译 (30) c++ boost asio (17) c++ cppcms (17) c++ boost bind (19) c++ qt (21) c++ boost库 (6) c++ boost log (12) c++ boost smart pointer (5) c++ boost graph (0) c++ ace (7) c++ com (17) c++ wtl (10) c++ windows sdk (1) MongoDB (40) MongoDB JavaScript (4) MongoDB Sharding (4) Linux (63) Linux Disk (7) Linux wine (3) Linux Network (24) Linux 用户 (2) Scrum (17) 过程管理 (12) Emacs (37) Git&GitLab (64) c++ 14 (0) Web前端 (35) Emacs C++ (5) Emacs Org (15) Emacs Clojure (1) Emacs JDEE (6) Emacs Browser (7) Emacs Email (9) Emacs Muse (3) Emacs ELisp (15) protocol buffer (4) Monitor (15) 字符与编码 (10) 数据结构和算法 (12) HTTP (2) bash (22) Maven (22) Design Pattern (5) 图形图像 (18) Nginx (24) windows commands (1) 正则表达式 (3) Java (73) StarTeam (1) 3D (6) lua (5) cmake (6) Database (3) Ruby (3) 乒乓球 (1) dotNet (8) MySQL (3) 游戏编程 (2) MacBook (2) JSF (16) 杂谈 (3) Ubuntu (10) newLISP与人工智能 (7) newLISP 系统管理 (23) newLISP语法 (26) newLISP注释 (1) newLISP web开发 (6) newLISP FOOP (4) newLISP 大数据 (9) newLISP安装 (4) newLISP 网络通信 (5) newLISP 数字类型 (2) newLISP 正则表达式 (4) newLISP实用技巧 (9) newLISP文件处理 (5) newLISP list处理 (9) newLISP 进程管理 (1) newLISP时间日期 (5) newLISP C++ builder (2) Jenkins (26) kafka (4) sqoop (5) HBase (1) tableau (2) D语言编程 (6) 阅读排行 IDispatch接口原理与应用 (30583) git checkout之二 切换到分支和文件覆盖 (30134) Ubuntu 11.10 server 安装Git 服务器 (23594) 三年后再反思我的" Java Web项目管理得失谈" (21267) MongoDB Java 连接池的注意事项 (20258) git checkout之一 HEAD基本和detached 状态 (19881) Nginx的日志 (19601) JSP总结之六：创建第一个简单的JSP页面 (18720) Singleton之C++部分一 (16815) Windows安装Git客户端工具 (16151) 评论排行 回想那些年我抛弃的技术 (149) Singleton之C++部分一 (54) 三年后再反思我的" Java Web项目管理得失谈" (37) IDispatch接口原理与应用 (26) 最佳程序设计探索之一:需求驱动编写自顶向下的代码 (25) GitLab迁移 (22) SAFEARRAY使用实例 (19) Java HashMap 分析之三:放入元素 (17) git checkout之二 切换到分支和文件覆盖 (16) GitLab升级到5.1注意事项 (16) 最新评论 田金龙老师讲解杨式太极拳的起势 u011521468 : 夯劲的力量之源是来之翻胯，练习中我发现胯回落带不动身体下沉和前后摆的发力，应该注意哪里？ 前后摆发力 u011521468 : 初学，前后摆蹬腿的时候总是把身体等的往上去了，总也发不出前后这个劲，应该注意什么？ 数据分析的道与术 u010924878 : 总结的很棒，学习了 C++网络通信库性能大比拼 wingfiring : 博主能秀一下测试代码吗？ Clojure语言十六 clojure与java u010786678 : 谢谢小伙伴的分享，学习了 storm 开发系列三 Clojue编写程序读取kafka数据并写入到hdfs u010786678 : 谢谢小伙伴的分享，学习了 newlisp url 编码 wangdan199112 : 。。。。。 newlisp url 编码 dl_dl_ : @sheismylife:好可惜，好不容易碰到一个用 newlisp 的人……谢谢回复！我自己再想办... newlisp url 编码 sheismylife : @dl_dl_:windows? 我没有windows，真的没有，实在帮不了你。 newlisp url 编码 dl_dl_ : 您好，请教下 unicode 问题。(import "user32.dll" "MessageBox... 算法专家朋友的博客 GIS/ATL Server/JavaScript 清如许的博客 CSS/Android/Java/Linux 推荐文章 *App竞品技术分析 （6）热修复 *架构设计：系统间通信（17）——服务治理与Dubbo 中篇（分析） *一款炫酷Loading动画--加载失败 *图解堆算法、链表、栈与队列（多图预警） *Android中ContentProvider组件详解 *Android平台Camera实时滤镜实现方法探讨(九)--磨皮算法探讨(一)

Recno:: 24
URL:: http://blog.csdn.net/testcs_dn/article/details/21036345

ParseText::
ThinkPHP学习（一） Windows下Nginx+PHP5+ThinkPHP_3.2.1的安装与配置 - 无知人生，记录点滴 - 博客频道 - CSDN.NET 无知人生，记录点滴 不积硅步，无以至千里；不积小流，无以成江海…… 目录视图 摘要视图 订阅 学院APP首次下载，可得50C币！     欢迎来帮助开源“进步”     当讲师？爱学习？投票攒课吧     认识Atlassian Datacenter产品     深圳小伙伴的福利来啦 [置顶] ThinkPHP学习（一） Windows下Nginx+PHP5+ThinkPHP_3.2.1的安装与配置 标签： thinkphp nginx php5 安装 配置 2014-03-11 21:20 8016人阅读 评论 (7) 收藏 举报 分类： ThinkPHP （4） 作者同类文章 X php （8） 作者同类文章 X 版权声明：本文为博主原创文章，未经博主允许不得转载。 工具原料： Nginx153： 网盘下载地址：http://pan.baidu.com/s/1qWNgLf2 php-5.3.28-nts-Win32-VC9-x86 网盘下载地址：http://pan.baidu.com/s/1pdukY ThinkPHP_3.2.1 网盘下载地址：http://pan.baidu.com/s/1pJlpfuj RunHiddenConsole  是一个用来隐藏 DOS 窗口的小程序 网盘下载地址：http://pan.baidu.com/s/1gd7kApP 开始安装，其实就是解压文件： 解压Nginx到“F:\Nginx153”； 解压RunHiddenConsole到“F:\Nginx153”； 解压PHP5到“F:\PHP\php5328Win32”； 解压ThinkPHP到“F:\PHP”； 修改PHP配置文件 修改“F:\PHP\php5328Win32”目录下的文件“php.ini-development”的文件名，把“-development”去掉就可以，文件内容先不做任何修改。 修改Nginx配置文件 用文本编辑器，本人使用Notepad++打开“F:\Nginx153\conf”目录下的“Nginx.conf”文件， 配置文件内容如下，重点位置用中文简单注释了一下： #user nobody; worker_processes 1; #error_log logs/error.log; #error_log logs/error.log notice; #error_log logs/error.log info; #pid logs/nginx.pid; events { worker_connections 1024; } http { include mime.types; default_type application/octet-stream; #log_format main '$remote_addr - $remote_user [$time_local] "$request" ' # '$status $body_bytes_sent "$http_referer" ' # '"$http_user_agent" "$http_x_forwarded_for"'; #access_log logs/access.log main; sendfile on; #tcp_nopush on; #keepalive_timeout 0; keepalive_timeout 65; #gzip on; server { listen 80; #//端口号 server_name localhost; #//域名，主机头值 #charset koi8-r; #access_log logs/host.access.log main; location / { root F:\\www\\html; #//站点根目录 index index.html index.htm index.php; #//默认页 } #error_page 404 /404.html; # redirect server error pages to the static page /50x.html # error_page 500 502 503 504 /50x.html; location = /50x.html { root html; } # proxy the PHP scripts to Apache listening on 127.0.0.1:80 # #location ~ \.php$ { # proxy_pass http://127.0.0.1; #} # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000 # #location ~ \.php$ { # root F:\\PHP; # fastcgi_pass 127.0.0.1:9000; # fastcgi_index index.php; # fastcgi_param SCRIPT_FILENAME /scripts$fastcgi_script_name; # include fastcgi_params; #} #ThinkPHP配置 location ~ .*\.php.* { root F:\\PHP; #//ThinkPHP框架文件位置 fastcgi_pass 127.0.0.1:9000; fastcgi_index index.php; include fastcgi.conf; set $real_script_name $fastcgi_script_name; fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name; fastcgi_param SCRIPT_NAME $real_script_name; fastcgi_param PATH_INFO $path_info; if ($fastcgi_script_name ~ "^(.+?\.php)(/.+)$") { set $real_script_name $1; set $path_info $2; } } # deny access to .htaccess files, if Apache's document root # concurs with nginx's one # #location ~ /\.ht { # deny all; #} } # another virtual host using mix of IP-, name-, and port-based configuration # #server { # listen 8000; # listen somename:8080; # server_name somename alias another.alias; # location / { # root html; # index index.html index.htm; # } #} # HTTPS server # #server { # listen 443; # server_name localhost; # ssl on; # ssl_certificate cert.pem; # ssl_certificate_key cert.key; # ssl_session_timeout 5m; # ssl_protocols SSLv2 SSLv3 TLSv1; # ssl_ciphers HIGH:!aNULL:!MD5; # ssl_prefer_server_ciphers on; # location / { # root html; # index index.html index.htm; # } #} } fastcgi.conf的文件内容： 在 “Nginx.conf”文件的目录下 新建一个文本文件，然后重命名为“ fastcgi.conf ”，把以下内容粘贴进去，保存就可以了。 fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name; fastcgi_param QUERY_STRING $query_string; fastcgi_param REQUEST_METHOD $request_method; fastcgi_param CONTENT_TYPE $content_type; fastcgi_param CONTENT_LENGTH $content_length; fastcgi_param SCRIPT_NAME $fastcgi_script_name; fastcgi_param REQUEST_URI $request_uri; fastcgi_param DOCUMENT_URI $document_uri; fastcgi_param DOCUMENT_ROOT $document_root; fastcgi_param SERVER_PROTOCOL $server_protocol; fastcgi_param HTTPS $https if_not_empty; fastcgi_param GATEWAY_INTERFACE CGI/1.1; fastcgi_param SERVER_SOFTWARE nginx/$nginx_version; fastcgi_param REMOTE_ADDR $remote_addr; fastcgi_param REMOTE_PORT $remote_port; fastcgi_param SERVER_ADDR $server_addr; fastcgi_param SERVER_PORT $server_port; fastcgi_param SERVER_NAME $server_name; # PHP only, required if PHP was built with --enable-force-cgi-redirect fastcgi_param REDIRECT_STATUS 200; 创建启动服务批处理（.bat）文件，文件名“start_nginx.bat”，文件内容如下： @echo off echo Starting PHP FastCGI... RunHiddenConsole ../php/php5328Win32/php-cgi.exe -b 127.0.0.1:9000 -c ../php/php5328Win32/php.ini echo Starting nginx... nginx.exe pause 创建停止服务批处理（.bat）文件，文件名“stop_nginx.bat”，文件内容如下： @echo off echo Stopping nginx... taskkill /F /IM nginx.exe > nul echo Stopping PHP FastCGI... taskkill /F /IM php-cgi.exe > nul exit 见证奇迹的时刻： 双击“start_nginx.bat”启动服务，会打开一个DOS窗口，最小化或关闭即可； 打开浏览器，在地址栏输入“http://localhost/index.php”，回车，看到几个大字了吗？ 欢迎使用  ThinkPHP ！ 恭喜你，环境配置成功了！ 下一篇： ThinkPHP学习（二）理清ThinkPHP的目录结构及访问规则，创建第一个控制器 上一篇 如何定位导致Crash的代码位置 下一篇 MySQL学习（一）数据库安装与配置全程图解 顶 1 踩 0 我的同类文章 ThinkPHP （4） php （8） http://blog.csdn.net 猜你在找 查看评论 * 以上用户言论只代表其个人观点，不代表CSDN网站的观点或立场 个人资料 testcs_dn 访问： 1858730次 积分： 22270 等级： 积分：22270 排名： 第165名 原创： 466篇 转载： 169篇 译文： 7篇 评论： 512条 文章搜索 博客专栏 JAVA学习实践及问题记录 文章：98篇 阅读：390501 VC学习实践及问题记录 文章：33篇 阅读：89083 Markdown 文章：15篇 阅读：27803 NoSQL入门与提高 文章：0篇 阅读：0 CentOS服务器配置管理 文章：25篇 阅读：118455 MySQL图文进阶 文章：18篇 阅读：89044 C#软件开发实例 文章：44篇 阅读：147398 文章分类 VC (79) C# (88) JAVA (132) jquery (20) InstallShield (3) php (9) Android (1) sock5 (2) JavaScript (25) HTML5 (6) IIS (6) VS2010 (9) ASP.NET (4) Python (1) 数据库 (21) MySQL (24) CentOS (55) 操作系统 (20) Database (4) css (1) linux (14) 动态共享库 (2) gcc (3) gdb (1) ThinkPHP (5) 浏览器 (9) 调试 (6) 系统安全 (3) 其它 (29) C语言 (2) 开源协议 (2) 直播 (2) Maven (21) Redis (9) Nginx (5) FFmpeg (2) Hadoop (3) 逆向分析 (1) visio (1) mybatis (5) VB.NET (1) 同步机制 (2) 系统架构 (4) Eclipse (33) R语言 (2) Markdown (14) Tomcat (10) SVN (8) 活动 (9) 书摘 (2) WindowsAPI (2) UI设计 (1) UE设计 (2) Proguard (15) spring (2) 成功励志 (1) powerdesigner (1) 养生保健 (2) 数据结构 (1) 编程语言 (2) 星星点灯 (1) 程序猿/缘 (2) asp (3) 云服务器 (2) go语言入门 (4) Bluemix (3) Ruby (7) rails (2) 文章存档 2015年12月 (15) 2015年11月 (12) 2015年10月 (12) 2015年09月 (14) 2015年08月 (13) 2015年07月 (14) 2015年06月 (20) 2015年05月 (58) 2015年04月 (25) 2015年03月 (31) 2015年02月 (16) 2015年01月 (33) 2014年12月 (31) 2014年11月 (20) 2014年10月 (24) 2014年09月 (23) 2014年08月 (21) 2014年07月 (20) 2014年06月 (14) 2014年05月 (36) 2014年04月 (14) 2014年03月 (14) 2014年02月 (7) 2014年01月 (6) 2013年12月 (15) 2013年08月 (3) 2013年07月 (2) 2013年06月 (9) 2013年05月 (6) 2013年04月 (7) 2013年03月 (32) 2013年02月 (3) 2012年10月 (8) 2012年09月 (7) 2012年08月 (22) 2012年07月 (2) 2012年06月 (30) 2012年05月 (4) 阅读排行 Uncaught SyntaxError: Unexpected token ILLEGAL (56336) MICRO SIM卡(SIM小卡)尺寸图及剪卡图解 (55486) Uncaught SyntaxError: Unexpected token ) (51563) HTTP错误 404.17 - Not Found" IIS 7.5 请求的内容似乎是脚本，因而将无法由静态文件处理程序来处理 (43344) xxx cannot be resolved to a type 错误解决方法 (33234) The superclass "javax.servlet.http.HttpServlet" was not found on the Java Build Path (27780) HTML5使用 JavaScript File API 实现文件上传 (27251) js如何判断一个对象{}是否为空对象，没有任何属性 (26210) A child container failed during start (20944) ThinkPHP学习（二）理清ThinkPHP的目录结构及访问规则，创建第一个控制器 (19957) 评论排行 CSDN-markdown编辑器语法——字体、字号与颜色 (35) 你曾后悔进入 IT 行业吗？ (25) xxx cannot be resolved to a type 错误解决方法 (19) 欢迎使用CSDN-markdown编辑器 (15) HTTP错误 404.17 - Not Found" IIS 7.5 请求的内容似乎是脚本，因而将无法由静态文件处理程序来处理 (12) A child container failed during start (12) 《Visual c++2013入门经典（第7版）》上机练习：为 Win32 控制台应用程序创建项目 (11) The superclass "javax.servlet.http.HttpServlet" was not found on the Java Build Path (11) C语言中函数参数为什么是由右往左入栈的？ (10) VC Windows API应用之GetDesktopWindow ——获得桌面所有窗口句柄的方法 (9) 推荐文章 *App竞品技术分析 （6）热修复 *架构设计：系统间通信（17）——服务治理与Dubbo 中篇（分析） *一款炫酷Loading动画--加载失败 *图解堆算法、链表、栈与队列（多图预警） *Android中ContentProvider组件详解 *Android平台Camera实时滤镜实现方法探讨(九)--磨皮算法探讨(一) 最新评论 Your Ruby version is 2.2.3, but your Gemfile specified 2.2.2 u010850027 : 感谢楼主的分享，学习了`(*∩_∩*)′ C#软件开发实例.私人订制自己的屏幕截图工具（十）在截图中包含鼠标指针形状 qigeminghaofan : 大神，可以把完整

Recno:: 25
URL:: http://blog.csdn.net/testcs_dn/article/details/21122035

ParseText::
MySQL学习（二）图形界面管理工具Navicat for MySQL安装和使用 - 无知人生，记录点滴 - 博客频道 - CSDN.NET 无知人生，记录点滴 不积硅步，无以至千里；不积小流，无以成江海…… 目录视图 摘要视图 订阅 学院APP首次下载，可得50C币！     欢迎来帮助开源“进步”     当讲师？爱学习？投票攒课吧     认识Atlassian Datacenter产品     深圳小伙伴的福利来啦 [置顶] MySQL学习（二）图形界面管理工具Navicat for MySQL安装和使用 标签： MySQL 图形管理工具 Navicat 安装 使用 2014-03-12 23:17 11738人阅读 评论 (0) 收藏 举报 分类： MySQL （23） 作者同类文章 X 版权声明：本文为博主原创文章，未经博主允许不得转载。         Navicat for MySQL 是一款强大的 MySQL 数据库管理和开发工具，它为专业开发者提供了一套强大的足够尖端的工具，但对于新用户仍然易于学习。Navicat for MySQL 基于Windows平台，为 MySQL 量身订作，提供类似于 MySQL 的用管理界面工具。此解决方案的出现，将解放 PHP、J2EE 等程序员以及数据库设计者、管理者的大脑，降低开发成本，为用户带来更高的开发效率。 工具原料： Navicat for MySQL 官方下载地址：http://www.navicat.com/ 还没有安装MySQL？参考： MySQL学习（一）数据库安装与配置全程图解 安装过程： 其实整个过程非常简单，指需一路“Next”下一步就可以了 许可协议是必须同意的，除非你不打算安装这个软件了 如果不想把软件安装在系统盘下，这里可以修改安装目录 设置开始菜单》程序 中的名称 选择是否创建桌面快捷方式 确认安装配置是否正确 安装完成 新建连接： 双击桌面上的快捷方式，启动“Navicat for MySQL”，启动界面如下图： 主程序界面如下： 单击“Connection”连接按钮，打开“New Connection”新建连接对话框 输入“Connection Name”，“Password”，单击“Test COnnection”按钮，弹出“Connection Successful”对话框， OK，OK，连接创建成功 新建数据库： 双击刚刚创建的连接，可以展开节点，显示已经存在的数据库 在连接“localhost”上或空白处单击鼠标右键》New Database 输入数据库名称，选择“Character set”，可以在“Character set”框中输入“utf8”，软件会自动完成 Collection保持为空即可，单击“OK”按钮，数据库创建成功。 新建表： 双击刚刚创建的数据库展开，在Tables上单击鼠标右键》New Table ID字段比较关键，通常会设置为自增“Auto Increment”，主键“Primary Key”，单击“Add Field”可以增加一个字段行， 字段设置完成可以单击“Save”按钮保存数据表。 插入数据： 在刚刚创建的数据表上单击鼠标右键》Open Table 单击”加号“按钮可以增加一行，日期字段可以单击按钮选择，数据填写完成后需要单击”对号“按钮保存。 上一篇 多进程浏览器下ActiveX插件调试技巧 下一篇 ThinkPHP学习（二）理清ThinkPHP的目录结构及访问规则，创建第一个控制器 顶 3 踩 0 我的同类文章 MySQL （23） http://blog.csdn.net 猜你在找 查看评论 * 以上用户言论只代表其个人观点，不代表CSDN网站的观点或立场 个人资料 testcs_dn 访问： 1858745次 积分： 22270 等级： 积分：22270 排名： 第165名 原创： 466篇 转载： 169篇 译文： 7篇 评论： 512条 文章搜索 博客专栏 JAVA学习实践及问题记录 文章：98篇 阅读：390501 VC学习实践及问题记录 文章：33篇 阅读：89083 Markdown 文章：15篇 阅读：27803 NoSQL入门与提高 文章：0篇 阅读：0 CentOS服务器配置管理 文章：25篇 阅读：118455 MySQL图文进阶 文章：18篇 阅读：89044 C#软件开发实例 文章：44篇 阅读：147398 文章分类 VC (79) C# (88) JAVA (132) jquery (20) InstallShield (3) php (9) Android (1) sock5 (2) JavaScript (25) HTML5 (6) IIS (6) VS2010 (9) ASP.NET (4) Python (1) 数据库 (21) MySQL (24) CentOS (55) 操作系统 (20) Database (4) css (1) linux (14) 动态共享库 (2) gcc (3) gdb (1) ThinkPHP (5) 浏览器 (9) 调试 (6) 系统安全 (3) 其它 (29) C语言 (2) 开源协议 (2) 直播 (2) Maven (21) Redis (9) Nginx (5) FFmpeg (2) Hadoop (3) 逆向分析 (1) visio (1) mybatis (5) VB.NET (1) 同步机制 (2) 系统架构 (4) Eclipse (33) R语言 (2) Markdown (14) Tomcat (10) SVN (8) 活动 (9) 书摘 (2) WindowsAPI (2) UI设计 (1) UE设计 (2) Proguard (15) spring (2) 成功励志 (1) powerdesigner (1) 养生保健 (2) 数据结构 (1) 编程语言 (2) 星星点灯 (1) 程序猿/缘 (2) asp (3) 云服务器 (2) go语言入门 (4) Bluemix (3) Ruby (7) rails (2) 文章存档 2015年12月 (15) 2015年11月 (12) 2015年10月 (12) 2015年09月 (14) 2015年08月 (13) 2015年07月 (14) 2015年06月 (20) 2015年05月 (58) 2015年04月 (25) 2015年03月 (31) 2015年02月 (16) 2015年01月 (33) 2014年12月 (31) 2014年11月 (20) 2014年10月 (24) 2014年09月 (23) 2014年08月 (21) 2014年07月 (20) 2014年06月 (14) 2014年05月 (36) 2014年04月 (14) 2014年03月 (14) 2014年02月 (7) 2014年01月 (6) 2013年12月 (15) 2013年08月 (3) 2013年07月 (2) 2013年06月 (9) 2013年05月 (6) 2013年04月 (7) 2013年03月 (32) 2013年02月 (3) 2012年10月 (8) 2012年09月 (7) 2012年08月 (22) 2012年07月 (2) 2012年06月 (30) 2012年05月 (4) 阅读排行 Uncaught SyntaxError: Unexpected token ILLEGAL (56336) MICRO SIM卡(SIM小卡)尺寸图及剪卡图解 (55486) Uncaught SyntaxError: Unexpected token ) (51563) HTTP错误 404.17 - Not Found" IIS 7.5 请求的内容似乎是脚本，因而将无法由静态文件处理程序来处理 (43344) xxx cannot be resolved to a type 错误解决方法 (33234) The superclass "javax.servlet.http.HttpServlet" was not found on the Java Build Path (27780) HTML5使用 JavaScript File API 实现文件上传 (27251) js如何判断一个对象{}是否为空对象，没有任何属性 (26210) A child container failed during start (20944) ThinkPHP学习（二）理清ThinkPHP的目录结构及访问规则，创建第一个控制器 (19957) 评论排行 CSDN-markdown编辑器语法——字体、字号与颜色 (35) 你曾后悔进入 IT 行业吗？ (25) xxx cannot be resolved to a type 错误解决方法 (19) 欢迎使用CSDN-markdown编辑器 (15) HTTP错误 404.17 - Not Found" IIS 7.5 请求的内容似乎是脚本，因而将无法由静态文件处理程序来处理 (12) A child container failed during start (12) 《Visual c++2013入门经典（第7版）》上机练习：为 Win32 控制台应用程序创建项目 (11) The superclass "javax.servlet.http.HttpServlet" was not found on the Java Build Path (11) C语言中函数参数为什么是由右往左入栈的？ (10) VC Windows API应用之GetDesktopWindow ——获得桌面所有窗口句柄的方法 (9) 推荐文章 *App竞品技术分析 （6）热修复 *架构设计：系统间通信（17）——服务治理与Dubbo 中篇（分析） *一款炫酷Loading动画--加载失败 *图解堆算法、链表、栈与队列（多图预警） *Android中ContentProvider组件详解 *Android平台Camera实时滤镜实现方法探讨(九)--磨皮算法探讨(一) 最新评论 Your Ruby version is 2.2.3, but your Gemfile specified 2.2.2 u010850027 : 感谢楼主的分享，学习了`(*∩_∩*)′ C#软件开发实例.私人订制自己的屏幕截图工具（十）在截图中包含鼠标指针形状 qigeminghaofan : 大神，可以把完整的代码放出来吗？好像没有截图信息栏、编辑工具栏这些功能 欢迎使用CSDN-markdown编辑器 scufzk2008 : 代码块那地方很丑，不知道楼主怎么优化下？ A child container failed during start testcs_dn : @plok741:谢谢补充！ A child container failed during start plok741 : 遇到相同的问题，是由于tomcat的版本的问题导致的。用tomcat8之后，可以成功启动应用。或者使... Notepad++输入模式之修改模式、插入模式 testcs_dn : @zxbdlv:欢迎来踩！ Notepad++输入模式之修改模式、插入模式 zxbdlv : 谢谢分享！ Ruby On Rails中REST API使用示例——基于云平台+云服务打造自己的在线翻译工具 testcs_dn : @mengdonghui123456:欢迎来踩！ Could not publish to the server. java.lang.NullPointerException testcs_dn : @liutong123987:恩恩 Could not publish to the server. java.lang.NullPointerException liutong123987 : 今天刚好碰到，用解决方法的第一种可以解决 友情链接 computer99999999的专栏 陌路缘

Recno:: 26
URL:: http://blog.csdn.net/testcs_dn/article/details/23169549

ParseText::
C#软件开发实例.私人订制自己的屏幕截图工具（一）功能概览 - 无知人生，记录点滴 - 博客频道 - CSDN.NET 无知人生，记录点滴 不积硅步，无以至千里；不积小流，无以成江海…… 目录视图 摘要视图 订阅 学院APP首次下载，可得50C币！     欢迎来帮助开源“进步”     当讲师？爱学习？投票攒课吧     认识Atlassian Datacenter产品     深圳小伙伴的福利来啦 [置顶] C#软件开发实例.私人订制自己的屏幕截图工具（一）功能概览 标签： c# 软件开发 实例 屏幕截图 工具 2014-04-08 11:50 4042人阅读 评论 (7) 收藏 举报 分类： C# （87） 作者同类文章 X 版权声明：本文为博主原创文章，未经博主允许不得转载。 本实例全部文章目录 （一）功能概览 （二）创建项目、注册热键、显示截图主窗口 （三）托盘图标及菜单的实现 （四）基本截图功能实现 （五）针对拖拽时闪烁卡顿现象的优化 （六）添加配置管理功能 （七）添加放大镜的功能 （八）添加键盘操作截图的功能 （九）使用自定义光标，QQ截图时的光标 （十）在截图中包含鼠标指针形状 概述 开发该软件的原因主要是想订制实现自己想要的功能，比如：自动保存，气泡提示框类型的标注功（主要用于功能说明文档的写作）能。 托盘图标及菜单 添加托盘图标，是因为有些功能还是需要使用菜单呼出，不能什么都用快捷键。 有些东西（菜单、提示框）可能通过快捷键截图的时候截取不到，所以设置了“延时5秒截图”功能。 基本设置 QQ的截图热键是“Ctrl + Alt + A”，为了不和它冲突，这里默认使用“Ctrl + Shift + A”作为快捷键。 有些时候我们是希望截图中包含鼠标指针形状的，这里可以设置是否包含。 自动上传 如果你希望将截图自动上传到某个网站上，可以启用该功能，目前还不完善，需要进一步开发。 自动保存 自动保存是目前必备的功能，您可以设置存储的目录及子目录，以及文件的命名规则。 截图信息栏、编辑工具栏 标注工具 上传图片 放大镜功能 键盘控制截图功能 有时候我们需要精确的截取小图标之类的图片，使用鼠标操作的话很难精确到每一个像素，使用键盘操作的话，就很容易实现了。 操作方法一： 1、进入截图状态，鼠标移动到大概的位置； 2、使用上下左右键移动鼠标指针到确定的位置； 3、同时按下“Shift + Enter”开始截图； 4、使用上下左右键设置截图区域大小； 操作方法二： 1、和平时截图一样，先截取一个大概的区域； 2、使用上下左右键设置截图区域的位置； 3、使用“Shift + 上下左右键”设置截图区域大小； 上一篇 利用INF写注册表启动 及 浅析瑞星行为防御、360主动防御 下一篇 C#软件开发实例.私人订制自己的屏幕截图工具（二）创建项目、注册热键、显示截图主窗口 顶 8 踩 0 我的同类文章 C# （87） http://blog.csdn.net 猜你在找 查看评论 * 以上用户言论只代表其个人观点，不代表CSDN网站的观点或立场 个人资料 testcs_dn 访问： 1858748次 积分： 22270 等级： 积分：22270 排名： 第165名 原创： 466篇 转载： 169篇 译文： 7篇 评论： 512条 文章搜索 博客专栏 JAVA学习实践及问题记录 文章：98篇 阅读：390501 VC学习实践及问题记录 文章：33篇 阅读：89083 Markdown 文章：15篇 阅读：27803 NoSQL入门与提高 文章：0篇 阅读：0 CentOS服务器配置管理 文章：25篇 阅读：118455 MySQL图文进阶 文章：18篇 阅读：89044 C#软件开发实例 文章：44篇 阅读：147398 文章分类 VC (79) C# (88) JAVA (132) jquery (20) InstallShield (3) php (9) Android (1) sock5 (2) JavaScript (25) HTML5 (6) IIS (6) VS2010 (9) ASP.NET (4) Python (1) 数据库 (21) MySQL (24) CentOS (55) 操作系统 (20) Database (4) css (1) linux (14) 动态共享库 (2) gcc (3) gdb (1) ThinkPHP (5) 浏览器 (9) 调试 (6) 系统安全 (3) 其它 (29) C语言 (2) 开源协议 (2) 直播 (2) Maven (21) Redis (9) Nginx (5) FFmpeg (2) Hadoop (3) 逆向分析 (1) visio (1) mybatis (5) VB.NET (1) 同步机制 (2) 系统架构 (4) Eclipse (33) R语言 (2) Markdown (14) Tomcat (10) SVN (8) 活动 (9) 书摘 (2) WindowsAPI (2) UI设计 (1) UE设计 (2) Proguard (15) spring (2) 成功励志 (1) powerdesigner (1) 养生保健 (2) 数据结构 (1) 编程语言 (2) 星星点灯 (1) 程序猿/缘 (2) asp (3) 云服务器 (2) go语言入门 (4) Bluemix (3) Ruby (7) rails (2) 文章存档 2015年12月 (15) 2015年11月 (12) 2015年10月 (12) 2015年09月 (14) 2015年08月 (13) 2015年07月 (14) 2015年06月 (20) 2015年05月 (58) 2015年04月 (25) 2015年03月 (31) 2015年02月 (16) 2015年01月 (33) 2014年12月 (31) 2014年11月 (20) 2014年10月 (24) 2014年09月 (23) 2014年08月 (21) 2014年07月 (20) 2014年06月 (14) 2014年05月 (36) 2014年04月 (14) 2014年03月 (14) 2014年02月 (7) 2014年01月 (6) 2013年12月 (15) 2013年08月 (3) 2013年07月 (2) 2013年06月 (9) 2013年05月 (6) 2013年04月 (7) 2013年03月 (32) 2013年02月 (3) 2012年10月 (8) 2012年09月 (7) 2012年08月 (22) 2012年07月 (2) 2012年06月 (30) 2012年05月 (4) 阅读排行 Uncaught SyntaxError: Unexpected token ILLEGAL (56336) MICRO SIM卡(SIM小卡)尺寸图及剪卡图解 (55486) Uncaught SyntaxError: Unexpected token ) (51563) HTTP错误 404.17 - Not Found" IIS 7.5 请求的内容似乎是脚本，因而将无法由静态文件处理程序来处理 (43344) xxx cannot be resolved to a type 错误解决方法 (33234) The superclass "javax.servlet.http.HttpServlet" was not found on the Java Build Path (27780) HTML5使用 JavaScript File API 实现文件上传 (27251) js如何判断一个对象{}是否为空对象，没有任何属性 (26210) A child container failed during start (20944) ThinkPHP学习（二）理清ThinkPHP的目录结构及访问规则，创建第一个控制器 (19957) 评论排行 CSDN-markdown编辑器语法——字体、字号与颜色 (35) 你曾后悔进入 IT 行业吗？ (25) xxx cannot be resolved to a type 错误解决方法 (19) 欢迎使用CSDN-markdown编辑器 (15) HTTP错误 404.17 - Not Found" IIS 7.5 请求的内容似乎是脚本，因而将无法由静态文件处理程序来处理 (12) A child container failed during start (12) 《Visual c++2013入门经典（第7版）》上机练习：为 Win32 控制台应用程序创建项目 (11) The superclass "javax.servlet.http.HttpServlet" was not found on the Java Build Path (11) C语言中函数参数为什么是由右往左入栈的？ (10) VC Windows API应用之GetDesktopWindow ——获得桌面所有窗口句柄的方法 (9) 推荐文章 *App竞品技术分析 （6）热修复 *架构设计：系统间通信（17）——服务治理与Dubbo 中篇（分析） *一款炫酷Loading动画--加载失败 *图解堆算法、链表、栈与队列（多图预警） *Android中ContentProvider组件详解 *Android平台Camera实时滤镜实现方法探讨(九)--磨皮算法探讨(一) 最新评论 Your Ruby version is 2.2.3, but your Gemfile specified 2.2.2 u010850027 : 感谢楼主的分享，学习了`(*∩_∩*)′ C#软件开发实例.私人订制自己的屏幕截图工具（十）在截图中包含鼠标指针形状 qigeminghaofan : 大神，可以把完整的代码放出来吗？好像没有截图信息栏、编辑工具栏这些功能 欢迎使用CSDN-markdown编辑器 scufzk2008 : 代码块那地方很丑，不知道楼主怎么优化下？ A child container failed during start testcs_dn : @plok741:谢谢补充！ A child container failed during start

Recno:: 27
URL:: http://blog.csdn.net/testcs_dn/article/details/49965993

ParseText::
你曾后悔进入 IT 行业吗？ - 无知人生，记录点滴 - 博客频道 - CSDN.NET 无知人生，记录点滴 不积硅步，无以至千里；不积小流，无以成江海…… 目录视图 摘要视图 订阅 学院APP首次下载，可得50C币！     欢迎来帮助开源“进步”     当讲师？爱学习？投票攒课吧     认识Atlassian Datacenter产品     深圳小伙伴的福利来啦 [置顶] 你曾后悔进入 IT 行业吗？ 标签： it 行业 后悔 职业 方向 2015-11-21 18:52 2245人阅读 评论 (25) 收藏 举报 分类： 程序猿/缘 （1） 作者同类文章 X 版权声明：本文为博主原创文章，未经博主允许不得转载。 引言 最近的一篇博文  试读—增长黑客，创业公司必知的“黑科技” ，有朋友问到“你曾后悔进入 IT 行业吗？”引发了写这篇文章的想法。 你曾后悔进入 IT 行业吗？这不是两句话能说完的，相信很多入行多年的程序猿看到这个问题都不免有些沉思吧？ 我为什么会进入IT行业？ 我选择IT行业就因为初中班主任的一句话“21世纪不会计算机就是文盲”。因为这一句话我决定学好计算机。 我出生在吉林省吉林市（全国唯一一个省和市名称相同）的一个小山村，家里以种地、种果树为生。初中的时候有幸接触到电脑，80后可以说是初中就开始接触电脑第一代，电脑刚刚开始普及进入学校。初中时候计算机一个月好像才三四节课，一周只有一节课，一个学期下来也没几节课；当时用的还是Dos系统，需要插入软盘才能开机的，那时候好像已经有WPS了，要运行WPS需要再插入一张软盘才行。上课的时候就是学一些非常简单的命令，现在感觉实在是简单不过了，但那时候可是感觉天文数字一般。不过有一些聪明的同学就知道玩游戏了，我是属于非常笨的那种，只能按照老师讲的操作，其它的一概不会。由于小学的时候没有学过英语，而计算机都是英文操作，所以感觉特别的神秘。说起英语，这又引出下面一个小故事。 英语请假条 初中的班主任老师是英语老师，忘记了初几的英语课了，学到生病相关的英语课程，老师的课后作业就是谁能用英语写请假条，第二天就不用来上课了。当时也是巧合，刚好第二天出了点状况，就用英语写了请假条，让同寝室的同学带给老师。一天没去上学，放学后听同学说老师还在英语课上读了我的请假条。 从事IT行业的好与坏？ 优点： 1、未来发展趋势，不担心失业，好找工作； 2、工资较高，跟传统行业相比都是比较高薪的行业； 3、对于有思想、有能力的人，有更多获取成功的机会； 缺点： 1、比较累，脑力劳动强度大； 2、技术更新快，需要持续学习，否则几年就被淘汰； 3、长期操作电脑，坐着，对眼睛、身体健康不好； 4、工作压力较大； 5、加班几率比其他行业高； 发展的瓶颈 近期在考虑和朋友讨论将来发展方向时，有点后悔。 离开计算机自己似乎什么也不会！ 如果没有电，没有计算机我该怎么生存？ IT和销售对比 销售越往后越好做，人脉越来越多，不用天天坐的腰酸背痛。 程序员却没有什么人脉，多数时间都是和计算机打交道，加班，找对象都是难题。 不过什么都是相对的，一山望着一山高。销售到处出差也面临着交通安全，饮食安全等问题，而且烟酒，一些娱乐场所可能是难免的，销售找对象都不找做销售的。 我是82年出生的，周岁也33了，写代码的效率不如年轻的头脑灵活，加班不如年轻的干活有效率，虽然有一点经验，但可能都是过时的了，而且80后大都比较保守。 如何看待后悔？ 这个问题要感谢我的舅爷教育我的一句话： 从现在开始，一切都还不晚！ 后悔是没有用的，时光不能倒退，没有后悔药可以吃；惟有从现在开始，去改变、去纠正之前的过失、方向，才是应该做的；只沉浸在后悔的悲痛与苦恼之中是无济于事的。 程序员的出路 这里引用“ 漫谈程序员系列：一张图道尽程序员的出路 ”文章中的一张图： 写在最后 未来不迎，当时不杂，过往不恋。 船到桥头自然直。 个人觉得顺其自然，一切随缘才是最好的。 上一篇 试读—增长黑客，创业公司必知的“黑科技” 下一篇 《Go语言入门》如何在Windows下安装Go语言编程环境 顶 2 踩 3 我的同类文章 程序猿/缘 （1） http://blog.csdn.net 猜你在找 查看评论 * 以上用户言论只代表其个人观点，不代表CSDN网站的观点或立场 个人资料 testcs_dn 访问： 1858741次 积分： 22270 等级： 积分：22270 排名： 第165名 原创： 466篇 转载： 169篇 译文： 7篇 评论： 512条 文章搜索 博客专栏 JAVA学习实践及问题记录 文章：98篇 阅读：390501 VC学习实践及问题记录 文章：33篇 阅读：89083 Markdown 文章：15篇 阅读：27803 NoSQL入门与提高 文章：0篇 阅读：0 CentOS服务器配置管理 文章：25篇 阅读：118455 MySQL图文进阶 文章：18篇 阅读：89044 C#软件开发实例 文章：44篇 阅读：147398 文章分类 VC (79) C# (88) JAVA (132) jquery (20) InstallShield (3) php (9) Android (1) sock5 (2) JavaScript (25) HTML5 (6) IIS (6) VS2010 (9) ASP.NET (4) Python (1) 数据库 (21) MySQL (24) CentOS (55) 操作系统 (20) Database (4) css (1) linux (14) 动态共享库 (2) gcc (3) gdb (1) ThinkPHP (5) 浏览器 (9) 调试 (6) 系统安全 (3) 其它 (29) C语言 (2) 开源协议 (2) 直播 (2) Maven (21) Redis (9) Nginx (5) FFmpeg (2) Hadoop (3) 逆向分析 (1) visio (1) mybatis (5) VB.NET (1) 同步机制 (2) 系统架构 (4) Eclipse (33) R语言 (2) Markdown (14) Tomcat (10) SVN (8) 活动 (9) 书摘 (2) WindowsAPI (2) UI设计 (1) UE设计 (2) Proguard (15) spring (2) 成功励志 (1) powerdesigner (1) 养生保健 (2) 数据结构 (1) 编程语言 (2) 星星点灯 (1) 程序猿/缘 (2) asp (3) 云服务器 (2) go语言入门 (4) Bluemix (3) Ruby (7) rails (2) 文章存档 2015年12月 (15) 2015年11月 (12) 2015年10月 (12) 2015年09月 (14) 2015年08月 (13) 2015年07月 (14) 2015年06月 (20) 2015年05月 (58) 2015年04月 (25) 2015年03月 (31) 2015年02月 (16) 2015年01月 (33) 2014年12月 (31) 2014年11月 (20) 2014年10月 (24) 2014年09月 (23) 2014年08月 (21) 2014年07月 (20) 2014年06月 (14) 2014年05月 (36) 2014年04月 (14) 2014年03月 (14) 2014年02月 (7) 2014年01月 (6) 2013年12月 (15) 2013年08月 (3) 2013年07月 (2) 2013年06月 (9) 2013年05月 (6) 2013年04月 (7) 2013年03月 (32) 2013年02月 (3) 2012年10月 (8) 2012年09月 (7) 2012年08月 (22) 2012年07月 (2) 2012年06月 (30) 2012年05月 (4) 阅读排行 Uncaught SyntaxError: Unexpected token ILLEGAL (56336) MICRO SIM卡(SIM小卡)尺寸图及剪卡图解 (55486) Uncaught SyntaxError: Unexpected token ) (51563) HTTP错误 404.17 - Not Found" IIS 7.5 请求的内容似乎是脚本，因而将无法由静态文件处理程序来处理 (43344) xxx cannot be resolved to a type 错误解决方法 (33234) The superclass "javax.servlet.http.HttpServlet" was not found on the Java Build Path (27780) HTML5使用 JavaScript File API 实现文件上传 (27251) js如何判断一个对象{}是否为空对象，没有任何属性 (26210) A child container failed during start (20944) ThinkPHP学习（二）理清ThinkPHP的目录结构及访问规则，创建第一个控制器 (19957) 评论排行 CSDN-markdown编辑器语法——字体、字号与颜色 (35) 你曾后悔进入 IT 行业吗？ (25) xxx cannot be resolved to a type 错误解决方法 (19) 欢迎使用CSDN-markdown编辑器 (15) HTTP错误 404.17 - Not Found" IIS 7.5 请求的内容似乎是脚本，因而将无法由静态文件处理程序来处理 (12) A child container failed during start (12) 《Visual c++2013入门经典（第7版）》上机练习：为 Win32 控制台应用程序创建项目 (11) The superclass "javax.servlet.http.HttpServlet" was not found on the Java Build Path (11) C语言中函数参数为什么是由右往左入栈的？ (10) VC Windows API应用之GetDesktopWindow ——获得桌面所有窗口句柄的方法 (9) 推荐文章 *App竞品技术分析 （6）热修复 *架构设计：系统间通信（17）——服务治理与Dubbo 中篇（分析） *一款炫酷Loading动画--加载失败 *图解堆算法、链表、栈与队列（多图预警） *Android中ContentProvider组件详解 *Android平台Camera实时滤镜实现方法探讨(九)--磨皮算法探讨(一) 最新评论 Your Ruby version is 2.2.3, but your Gemfile specified 2.2.2 u010850027 : 感谢楼主的分享，学习了`(*∩_∩*)′ C#软件开发实例.私人订制自己的屏幕截图工具（十）在截图中包含鼠标指针形状 qigeminghaofan : 大神，可以把完整的代码放出来吗？好像没有截图信息栏、编辑工具栏这些功能 欢迎使用CSDN-markdown编辑器 scufzk2008 : 代码块那地方很丑，不知道楼主怎么优化下？ A child container failed during start testcs_dn : @plok741:谢谢补充！ A child container failed during start plok741 : 遇到相同的问题，是由于tomcat的版本的问题导致的。用tomcat8之后，可以成功启动应用。或者使... Notepad++输入模式之修改模式、插入模式 testcs_dn : @zxbdlv:欢迎来踩！ Notepad++输入模式之修改模式、插入模式 zxbdlv : 谢谢分享！ Ruby On Rails中REST API使用示例——基于云平台+云服务打造自己的在线翻译工具 testcs_dn : @mengdonghui123456:欢迎来踩！ Could not publish to the server. java.lang.NullPointerException testcs_dn : @liutong123987:恩恩 Could not publish to the server. java.lang.NullPointerException liutong123987 : 今天刚好碰到，用解决方法的第一种可以解决 友情链接 computer99999999的专栏 陌路缘

Recno:: 28
URL:: http://blog.csdn.net/testcs_dn/article/details/50143265

ParseText::
IBM的云平台Bluemix使用初体验——创建Go语言 Web 应用程序，添加并使用语言翻译服务 - 无知人生，记录点滴 - 博客频道 - CSDN.NET 无知人生，记录点滴 不积硅步，无以至千里；不积小流，无以成江海…… 目录视图 摘要视图 订阅 学院APP首次下载，可得50C币！     欢迎来帮助开源“进步”     当讲师？爱学习？投票攒课吧     认识Atlassian Datacenter产品     深圳小伙伴的福利来啦 IBM的云平台Bluemix使用初体验——创建Go语言 Web 应用程序，添加并使用语言翻译服务 标签： IBM Bluemix 云平台 云服务器 go语言 2015-12-03 10:05 891人阅读 评论 (0) 收藏 举报 分类： go语言入门 （3） 作者同类文章 X 版权声明：本文为博主原创文章，未经博主允许不得转载。 概述 上篇讲了： 创建PHP Web 应用程序，添加并使用语言翻译服务 通过本文学习，你将能够在IBM的云平台Bluemix上创建自己的Go语言 Web 应用程序，添加并使用语言翻译服务，发布自己的GO语言Web应用到云服务器上。 本地开发测试环境：Windows 7 x64，Go， 与其它Web后端语言不同，Go语言需要自己编写Web服务器 。 有关本地环境的搭建与基础学习，请参考： 《Go语言入门》如何在Windows下安装Go语言编程环境 《Go语言入门》第一个Go语言程序——HelloWorld 《Go语言入门》第一个Go语言Web程序——简单的Web服务器 Bluemix  是什么？ IBM Bluemix  是开放式标准云平台，用于构建、运行和管理应用程序。使用  Bluemix ，开发者可以集中通过灵活的计算选项、 DevOps  工具的选择以及一组强大的  IBM  及第三方  API  和服务来构建卓越的用户体验。 了解更多 注册Bluemix云服务器， 注册戳这里 登陆Bluemix平台，进行部署/开发， 登录戳这里 创建 Web 应用程序 通过 IBM® Bluemix™，可以在 Bluemix 用户界面中创建应用程序。创建应用程序后，可以决定是继续使用 UI，使用 cf 命令行界面，还是使用 IBM Bluemix DevOps Services 来开发、跟踪、规划和部署应用程序。 在 Bluemix 中创建应用程序时，首先是创建入门模板。入门模板是一种模板，包含预定义的服务和使用特定 buildpack 配置的应用程序代码。入门模板有两种类型：样板和运行时。 样板是一种容器，用于应用程序及其关联的运行时环境，以及针对特定域的预定义服务。例如，“移动云”样板包含 Node.js 运行时，以及 Mobile Data、Mobile Application Security 和 Push 服务。样板还包含 SDK 和样本应用程序，方便着手开发用于访问这些服务的移动应用程序。 运行时是用于运行应用程序的一组资源。Bluemix 提供运行时环境来作为不同类型应用程序的容器。运行时环境作为 buildpack 集成到 Bluemix 中，并自动配置以供使用，只需很少维护，甚至完全无需维护。 要开始创建应用程序，请执行以下步骤： 1、在  Bluemix  用户界面中，转至“ 仪表板 ”。 2、单击 创建应用程序 。 3、单击  Web ，然后按照指导经验来选择入门模板，指定名称以及选择编码方式。 输入应用程序名称 应用程序名称是唯一的，接下来要通过它做为二级域名来访问你的应用！ 点击完成之后，需要等待一会儿，然后可以看到下图的界面 这时就可以访问你刚刚创建的应用了。如下图： 4、按照指导经验完成操作后，单击 查看应用程序概述 。“ 仪表板 ”上将显示应用程序的“ 概述 ”。 通过文件和日志，可以查看默认页面的源代码： 通过仪表板页面的应用程序，可以找到自己已经创建的应用程序； 5、可以通过单击  Bluemix  用户界面中应用程序“ 概述 ”上的 添加服务或 API ，将服务添加到应用程序中。也可以使用 cf 命令行界面。请参阅 处理应用程序的可用选项 。 6、在应用程序“ 概述 ”上，单击 添加 Git  可将应用程序源代码保存到 Git 存储库中，并创建 Git 托管的项目。您还可以从  IBM Bluemix DevOps Services  部署应用程序。 本文不使用Git，而是使用CF（Cloud Foundry）上传应用程序！ 注：  如果绑定到应用程序的服务崩溃，那么该应用程序可能会停止运行或发生错误。 Bluemix  不会自动重新启动应用程序以从这些问题中恢复。请考虑对应用程序进行编码，以便识别中断、异常和连接失败状况并从中进行恢复。请参阅 应用程序不会自动重新启动 故障诊断主题，以获取更多信息。 开发基于服务的应用 1、获取服务信息 进入自己的应用程序》概述页面，找到已经添加的服务，点击“显示凭证”，可以查看服务的具体信息： 在浏览器中访问服务URL 在浏览器请求支持的语言： 服务URL：https://gateway.watsonplatform.net/language-translation/api/v2/identifiable_languages 2、编写Go语言代码 注意：云平台上Go语言的环境与PHP的有所不同，我直接在本地创建的应用上传之后都是启动失败， 不清楚是哪里的原因！ 可能是缺少manifest.yml，Procfile，Godeps\Godeps.json文件的原因。 建议最好是“下载起动器代码”，在这个基础上修改， 如下图：下载后解压到 C:\Go\src\goinfo 目录下 AJAX调用代码 //通过AJAX调用后台翻译程序 function doExecTrans(){ var txt = $("#InputText").val(); if (txt == ""){ alert("请输入要翻译的文本！"); return; } $("#ProgressDiv").show(); $.ajax({ type: "GET", url: "/trans", dataType:"json", data: {"txt":txt}, success: function(data){ $("#ProgressDiv").hide(); console.log(data); $("#OutputText").text(data.text); }, error: function(data){ console.log(data); alert( "Error Msg: " + data ); $("#ProgressDiv").hide(); } }); } G o语言代码 package main // powered by: testcs_dn // Blog: http://blog.csdn.net/testcs_dn // Create time: 2015/11/14 //简单的Web服务 import ( "fmt" "net/http" "log" "errors" "io/ioutil" "net/url" "os" "html/template" //for extracting service credentials from VCAP_SERVICES //"github.com/cloudfoundry-community/go-cfenv" ) //异常捕获方法 func catch(){ if err := recover(); err != nil { fmt.Println(err) } } //错误检测方法 func checkError(err error) { if err != nil { fmt.Println("Fatal error ", err.Error()) os.Exit(1) } } const ( DEFAULT_PORT = "8080" //默认端口号 //服务URL，注意@符号前用冒号分隔的字符串为语言翻译服务的username:password Surl = "https://用户名:密码@gateway.watsonplatform.net/language-translation/api/v2/translate?"; ) //调用WebServices处理翻译请求 func trans(w http.ResponseWriter, r *http.Request) { defer catch() r.ParseForm() //解析参数，默认是不会解析的 values := url.Values{} values.Add("source", "en") //source=en&target=es&text=hello values.Add("target", "es") //要翻译的文本 txt := r.FormValue("txt") if (txt == ""){ fmt.Fprintf(w, "{\"error\":\"请输入要翻译的文本！\"}") return } values.Add("text", txt) //拼接要翻译的文本 url := Surl + values.Encode() resp, err := http.Get(url) //改送HTTP Get请求 if err != nil { fmt.Fprintf(w, err.Error()) return } if resp != nil && resp.Body != nil { defer resp.Body.Close() } if resp.StatusCode != http.StatusOK { fmt.Fprintf(w, errors.New(resp.Status).Error()) return } data, err := ioutil.ReadAll(resp.Body) if err != nil { fmt.Fprintf(w, err.Error()) return } if err != nil { fmt.Fprintf(w, err.Error()) return } fmt.Fprintf(w, "{\"text\":\"" + string(data) + "\"}") } func helloworld(w http.ResponseWriter, r *http.Request) { t, err := template.ParseFiles("templates/index.html"); checkError(err) err = t.Execute(w, nil) checkError(err) } func main() { var port string if port = os.Getenv("PORT"); len(port) == 0 { port = DEFAULT_PORT } http.HandleFunc("/", helloworld) //设置访问的路由 http.HandleFunc("/trans", trans) //设置访问的路由 http.Handle("/static/", http.StripPrefix("/static/", http.FileServer(http.Dir("static")))) // 启动静态文件服务 http.Handle("/templates/", http.FileServer(http.Dir("templates"))) log.Printf("Starting app on port %+v\n", port) err := http.ListenAndServe(":"+port, nil) //设置监听的端口 if err != nil { log.Fatal("ListenAndServe: ", err) } } 上传应用程序 登录到  Bluemix™  后，可以使用  cf push  命令来上传应用程序。 开始之前，您必须： 1、安装 Cloud Foundry 命令行界面。 请根据自己使用的操作系统下载对应的版本；我使用的是Windows 7 64位操作系统， 下载 Binaries 版本的不需要安装， 直接解压到Windows目录就可以了 。 以下执行的命令你可以通过访问 https://www.ng.bluemix.net/docs/#starters/upload_app.html#upload_app__push 查看属于自己的命令； 2、连接到  Bluemix 。 打开命令提示符窗口：开始》运行，输入“cmd”，回车 执行：cf api https://api.ng.bluemix.net，如下图： 3、登录到  Bluemix 。 注意，这里要换成对应你自己账户的命令！ cf login -u ivu4e@qq.com -o ivu4e@qq.com -s ivu4e 4、发出  cf push  命令时， cf  命令行界面将提供使用 buildpack 来构建并运行应用程序的  Bluemix  环境的工作目录。 从应用程序目录中，输入带有应用程序名称的  cf push  命令。在  Bluemix  环境中，应用程序名称必须是唯一的。 后面的"-m 512m"是修改应用程序内存配额的，可以不带这个参数，如下图： 提示：  使用  cf push  命令时， cf  命令行界面会将当前目录中的所有文件和目录复制到  Bluemix 。确保应用程序目录中只包含必需的文件。 上传完成，启动成功就可以通过后面的地址看效果了：http://goinfo.mybluemix.net/static/ cf push  命令上传应用程序并将其部署到  Bluemix 。有关  cf push  的更多信息，请参阅  cf 命令 。有关 buildpack 的信息，请参阅 使用社区 buildpack 。 如果更改了应用程序，可以通过再次输入  cf push  命令来上传这些更改。   cf  命令行界面会使用您先前的选项以及您对提示的响应来通过新的代码段更新应用程序的任何运行中实例。 提示：  您还可以从  Bluemix DevOps Services  上传或部署应用程序。请参阅 在 Node.js 中使用 Web IDE 开发 Bluemix  应用程序 。 应用上线效果 点击效果图片链接可以直接在线访问，由于目前服务器还在国外，打开速度有点慢； http://goinfo.mybluemix.net/static/ 使用体验 在Bluemix上创建应用、添加服务、上传应用的过程步骤基本都是一样的， 不同的地方在于应用使用的语言，本地开发测试环境的搭建，以及一些相关的配置等。 注意：云平台上Go语言的环境与PHP的有所不同，我直接在本地创建的应用上传之后都是启动失败，不清楚是哪里的原因！ 可能是缺少manifest.yml，Procfile，Godeps\Godeps.json文件的原因。 建议最好是“下载起动器代码”，在这个基础上修改，我之前忽略了 “下载起动器代码”的作用，浪费了不少时间。 “下载起动器代码”感觉这个翻译的不够确切，改为“下载初始Hello World示例代码”是不是更好些？ 创建、部署和维护 Web 应用程序都很简单，让开发人员可以更专注于应用的开发。 文档比较全面，不过感觉有些地方说的不够细，比如语言翻译服务我就没有找到如何翻译一句话或一篇文章的方法，每次只能翻译一个单词！ 由于目前服务器还在国外，打开速度有点慢；希望能早日进驻国内。 上一篇 《Go语言入门》第一个Go语言程序——HelloWorld 下一篇 《Go语言入门》第一个Go语言Web程序——简单的Web服务器 顶 3 踩 0 我的同类文章 go语言入门 （3） http://blog.csdn.net 猜你在找 查看评论 * 以上用户言论只代表其个人观点，不代表CSDN网站的观点或立场 个人资料 testcs_dn 访问： 1858760次 积分： 22271 等级： 积分：22271 排名： 第165名 原创： 466篇 转载： 169篇 译文： 7篇 评论： 512条 文章搜索 博客专栏 JAVA学习实践及问题记录 文章：98篇 阅读：390501

Recno:: 29
URL:: http://blog.csdn.net/testcs_dn/article/details/50165089

ParseText::
《Go语言入门》第一个Go语言Web程序——简单的Web服务器 - 无知人生，记录点滴 - 博客频道 - CSDN.NET 无知人生，记录点滴 不积硅步，无以至千里；不积小流，无以成江海…… 目录视图 摘要视图 订阅 学院APP首次下载，可得50C币！     欢迎来帮助开源“进步”     当讲师？爱学习？投票攒课吧     认识Atlassian Datacenter产品     深圳小伙伴的福利来啦 《Go语言入门》第一个Go语言Web程序——简单的Web服务器 标签： go语言 web服务器 helloworld 入门 2015-12-03 20:08 703人阅读 评论 (0) 收藏 举报 分类： go语言入门 （3） 作者同类文章 X 版权声明：本文为博主原创文章，未经博主允许不得转载。 概述 上一篇讲了 《Go语言入门》第一个Go语言程序——HelloWorld ，接下来讲一下 Go语言Web开发 入门必修课：第一个Go语言Web程序——简单的Web服务器。 与其它Web后端语言不同，Go语言需要自己编写Web服务器 。 有关本地环境的搭建与基础学习，请参考： 《Go语言入门》如何在Windows下安装Go语言编程环境 Go语言Web应用： IBM的云平台Bluemix使用初体验——创建Go语言 Web 应用程序，添加并使用语言翻译服务 Web服务器代码 Google在 http://chart.apis.google.com  上提供了一个将表单数据自动转换为图表的服务。不过，该服务很难交互， 因为你需要将数据作为查询放到URL中。此程序为一种数据格式提供了更好的的接口： 给定一小段文本，它将调用图表服务器来生成二维码（QR码），这是一种编码文本的点格矩阵。 该图像可被你的手机摄像头捕获，并解释为一个字符串，比如URL， 这样就免去了你在狭小的手机键盘上键入URL的麻烦。 以下为完整的程序，随后有一段解释。 package main import ( "flag" "html/template" "log" "net/http" ) var addr = flag.String("addr", ":1718", "http service address") // Q=17, R=18 var templ = template.Must(template.New("qr").Parse(templateStr)) func main() { flag.Parse() http.Handle("/", http.HandlerFunc(QR)) err := http.ListenAndServe(*addr, nil) if err != nil { log.Fatal("ListenAndServe:", err) } } func QR(w http.ResponseWriter, req *http.Request) { templ.Execute(w, req.FormValue("s")) } const templateStr = ` <html> <head> <title>QR Link Generator</title> </head> <body> {{if .}} <img src="http://chart.apis.google.com/chart?chs=300x300&cht=qr&choe=UTF-8&chl={{.}}" /> <br> {{.}} <br> <br> {{end}} <form action="/" name=f method="GET"><input maxLength=1024 size=70 name=s value="" title="Text to QR Encode"><input type=submit value="Show QR" name=qr> </form> </body> </html> ` main  之前的代码应该比较容易理解。我们通过一个标志为服务器设置了默认端口。 模板变量  templ  正式有趣的地方。它构建的HTML模版将会被服务器执行并显示在页面中。 稍后我们将详细讨论。 main  函数解析了参数标志并使用我们讨论过的机制将  QR  函数绑定到服务器的根路径。然后调用  http.ListenAndServe  启动服务器；它将在服务器运行时处于阻塞状态。 QR  仅接受包含表单数据的请求，并为表单值  s  中的数据执行模板。 模板包  html/template  非常强大；该程序只是浅尝辄止。 本质上，它通过在运行时将数据项中提取的元素（在这里是表单值）传给  templ.Execute  执行因而重写了HTML文本。 在模板文本（ templateStr ）中，双大括号界定的文本表示模板的动作。 从  {{if .}}  到  {{end}}  的代码段仅在当前数据项（这里是点  . ）的值非空时才会执行。 也就是说，当字符串为空时，此部分模板段会被忽略。 其中两段  {{.}}  表示要将数据显示在模板中 （即将查询字符串显示在Web页面上）。HTML模板包将自动对文本进行转义， 因此文本的显示是安全的。 余下的模板字符串只是页面加载时将要显示的HTML。如果这段解释你无法理解，请参考  文档  获得更多有关模板包的解释。 你终于如愿以偿了：以几行代码实现的，包含一些数据驱动的HTML文本的Web服务器。 Go语言强大到能让很多事情以短小精悍的方式解决。 编译运行访问 在Go的安装目录下的Src目录下创建一个目录，我的Go安装在D盘， 所以我在D:\Go\src\目录下创建了一个“web1”文件夹，新建了一个“web1.go”文件，将上面的代码复制粘贴到文件中，保存。 编译 你可以通过在命令行窗口执行命令：go install web1  来完成编译，编译完成后会在 D:\Go\bin 目录下生成web1的exe。 执行 通过上面的方法编译后，双击运行即可。 也可以在命令行下切换到文件所在的目录，例如：D:\Go\src\web1 然后执行：go run web1.go 结果如下图： 点击允许访问。 访问 在浏览器中访问，查看效果，打开浏览器，输入： http://localhost:1718/ ，结果如下图： 在文本框中输入一个URL，如（http://blog.csdn.net/testcs_dn），点击Show QR，会生成一张二维码的图片 扫一扫这张二维码看看吧 小结 与其它Web后端语言不同，Go语言需要自己编写Web服务器 。 这里只是编译运行一个简单的例子，看看效果找找感觉。 上一篇 IBM的云平台Bluemix使用初体验——创建Go语言 Web 应用程序，添加并使用语言翻译服务 下一篇 在云平台上基于Go语言+Google图表API提供二维码生成应用 顶 2 踩 0 我的同类文章 go语言入门 （3） http://blog.csdn.net 猜你在找 查看评论 * 以上用户言论只代表其个人观点，不代表CSDN网站的观点或立场 个人资料 testcs_dn 访问： 1858750次 积分： 22270 等级： 积分：22270 排名： 第165名 原创： 466篇 转载： 169篇 译文： 7篇 评论： 512条 文章搜索 博客专栏 JAVA学习实践及问题记录 文章：98篇 阅读：390501 VC学习实践及问题记录 文章：33篇 阅读：89083 Markdown 文章：15篇 阅读：27803 NoSQL入门与提高 文章：0篇 阅读：0 CentOS服务器配置管理 文章：25篇 阅读：118455 MySQL图文进阶 文章：18篇 阅读：89044 C#软件开发实例 文章：44篇 阅读：147398 文章分类 VC (79) C# (88) JAVA (132) jquery (20) InstallShield (3) php (9) Android (1) sock5 (2) JavaScript (25) HTML5 (6) IIS (6) VS2010 (9) ASP.NET (4) Python (1) 数据库 (21) MySQL (24) CentOS (55) 操作系统 (20) Database (4) css (1) linux (14) 动态共享库 (2) gcc (3) gdb (1) ThinkPHP (5) 浏览器 (9) 调试 (6) 系统安全 (3) 其它 (29) C语言 (2) 开源协议 (2) 直播 (2) Maven (21) Redis (9) Nginx (5) FFmpeg (2) Hadoop (3) 逆向分析 (1) visio (1) mybatis (5) VB.NET (1) 同步机制 (2) 系统架构 (4) Eclipse (33) R语言 (2) Markdown (14) Tomcat (10) SVN (8) 活动 (9) 书摘 (2) WindowsAPI (2) UI设计 (1) UE设计 (2) Proguard (15) spring (2) 成功励志 (1) powerdesigner (1) 养生保健 (2) 数据结构 (1) 编程语言 (2) 星星点灯 (1) 程序猿/缘 (2) asp (3) 云服务器 (2) go语言入门 (4) Bluemix (3) Ruby (7) rails (2) 文章存档 2015年12月 (15) 2015年11月 (12) 2015年10月 (12) 2015年09月 (14) 2015年08月 (13) 2015年07月 (14) 2015年06月 (20) 2015年05月 (58) 2015年04月 (25) 2015年03月 (31) 2015年02月 (16) 2015年01月 (33) 2014年12月 (31) 2014年11月 (20) 2014年10月 (24) 2014年09月 (23) 2014年08月 (21) 2014年07月 (20) 2014年06月 (14) 2014年05月 (36) 2014年04月 (14) 2014年03月 (14) 2014年02月 (7) 2014年01月 (6) 2013年12月 (15) 2013年08月 (3) 2013年07月 (2) 2013年06月 (9) 2013年05月 (6) 2013年04月 (7) 2013年03月 (32) 2013年02月 (3) 2012年10月 (8) 2012年09月 (7) 2012年08月 (22) 2012年07月 (2) 2012年06月 (30) 2012年05月 (4) 阅读排行 Uncaught SyntaxError: Unexpected token ILLEGAL (56336) MICRO SIM卡(SIM小卡)尺寸图及剪卡图解 (55486) Uncaught SyntaxError: Unexpected token ) (51563) HTTP错误 404.17 - Not Found" IIS 7.5 请求的内容似乎是脚本，因而将无法由静态文件处理程序来处理 (43344) xxx cannot be resolved to a type 错误解决方法 (33234) The superclass "javax.servlet.http.HttpServlet" was not found on the Java Build Path (27780) HTML5使用 JavaScript File API 实现文件上传 (27251) js如何判断一个对象{}是否为空对象，没有任何属性 (26210) A child container failed during start (20944) ThinkPHP学习（二）理清ThinkPHP的目录结构及访问规则，创建第一个控制器 (19957) 评论排行 CSDN-markdown编辑器语法——字体、字号与颜色 (35) 你曾后悔进入 IT 行业吗？ (25) xxx cannot be resolved to a type 错误解决方法 (19) 欢迎使用CSDN-markdown编辑器 (15) HTTP错误 404.17 - Not Found" IIS 7.5 请求的内容似乎是脚本，因而将无法由静态文件处理程序来处理 (12) A child container failed during start (12) 《Visual c++2013入门经典（第7版）》上机练习：为 Win32 控制台应用程序创建项目 (11) The superclass "javax.servlet.http.HttpServlet" was not found on the Java Build Path (11) C语言中函数参数为什么是由右往左入栈的？ (10) VC Windows API应用之GetDesktopWindow ——获得桌面所有窗口句柄的方法 (9) 推荐文章 *App竞品技术分析 （6）热修复 *架构设计：系统间通信（17）——服务治理与Dubbo 中篇（分析） *一款炫酷Loading动画--加载失败 *图解堆算法、链表、栈与队列（多图预警） *Android中ContentProvider组件详解 *Android平台Camera实时滤镜实现方法探讨(九)--磨皮算法探讨(一) 最新评论 Your Ruby version is 2.2.3, but your Gemfile specified 2.2.2 u010850027 : 感谢楼主的分享，学习了`(*∩_∩*)′ C#软件开发实例.私人订制自己的屏幕截图工具（十）在截图中包含鼠标指针形状 qigeminghaofan : 大神，可以把完整的代码放出来吗？好像没有截图信息栏、编辑工具栏这些功能 欢迎使用CSDN-markdown编辑器 scufzk2008 : 代码块那地方很丑，不知道楼主怎么优化下？ A child container failed during start testcs_dn : @plok741:谢谢补充！ A child container failed during start

Recno:: 30
URL:: http://blog.csdn.net/testcs_dn/article/details/50255281

ParseText::
在云平台上基于Go语言+Google图表API提供二维码生成应用 - 无知人生，记录点滴 - 博客频道 - CSDN.NET 无知人生，记录点滴 不积硅步，无以至千里；不积小流，无以成江海…… 目录视图 摘要视图 订阅 学院APP首次下载，可得50C币！     欢迎来帮助开源“进步”     当讲师？爱学习？投票攒课吧     认识Atlassian Datacenter产品     深圳小伙伴的福利来啦 在云平台上基于Go语言+Google图表API提供二维码生成应用 标签： Bluemix IBM go语言 二维码 云平台 2015-12-11 07:00 792人阅读 评论 (0) 收藏 举报 分类： 活动 （8） 作者同类文章 X 云服务器 （1） 作者同类文章 X Bluemix （2） 作者同类文章 X 版权声明：本文为博主原创文章，未经博主允许不得转载。 二维码可以说已经深深的融入了我们的生活当中，到处可见它的身影；但通常我们都是去扫 二维码， 以前我们分享给朋友一个网址直接把Url发过去，现在我们可以把自己的信息生成 二维码再分享给他人。 这里就分享一下基于Go语言+Google图表API提供二维码生成功能的小应用，并演示如何把它发布到云平台上， 让每个人都可以通过网络访问使用它。 Google图表API Google在 http://chart.apis.google.com  上提供了一个将表单数据自动转换为图表的服务。 不过，该服务很难交互， 因为你需要将数据作为查询放到URL中。 此程序为一种数据格式提供了更好的的接口： 给定一小段文本， 它将调用图表服务器来生成二维码（QR码），这是一种编码文本的点格矩阵。 该图像可被你的手机摄像头捕获，并解释为一个字符串，比如URL，  这样就免去了你在狭小的手机键盘上键入URL的麻烦。 应用效果 在文本框中输入一个URL，如（http://blog.csdn.net/testcs_dn），点击Show QR，会生成一张二维码的图片 构建一个类似的应用程序的前提条件 一个 Bluemix 帐户，您还没有？ 点击 这里注册 ，已经有，点击 这里登录 。 对 HTML、CSS 、JavaScript 和Go语言的基本了解。我提供了所有必要代码，但对这些技术的基本了解有助于您理解有关的细节。 步骤 1. 创建您的 GO 应用程序 1、在  Bluemix  用户界面中，转至“ 仪表板 ”。 2、单击 创建应用程序 。 3、单击  Web ，然后按照指导经验来选择入门模板，指定名称以及选择编码方式。 输入应用程序名称 应用程序名称是唯一的，接下来要通过它做为二级域名来访问你的应用！ 点击完成之后，需要等待一会儿，然后可以看到下图的界面 这时就可以访问你刚刚创建的应用了。如下图： 步骤 2. 准备开发环境 如果您没还有Go语言的本地运行环境，该过程请参考： 《Go语言入门》如何在Windows下安装Go语言编程环境 步骤 3.编写代码 1、下载初始Hello World示例代码 进入您的应用程序，点击左侧的开始编码，在右侧点击“下载起动器代码”。 2、创建本地应用 在Go的$GOROOT或$GOPATH目录下创建一个文件夹，将下载后的 起动器代码 解压到刚创建的目录下， 例如我的是： C:\Go\src\web1 打开目录下的app.go文件，将文件的内容替换为下面的代码：  package main import ( "log" "net/http" "os" "html/template" //for extracting service credentials from VCAP_SERVICES //"github.com/cloudfoundry-community/go-cfenv" ) const ( DEFAULT_PORT = "8080" ) var templ = template.Must(template.New("qr").Parse(templateStr)) func main() { var port string if port = os.Getenv("PORT"); len(port) == 0 { port = DEFAULT_PORT } http.HandleFunc("/", helloworld) log.Printf("Starting app on port %+v\n", port) http.ListenAndServe(":"+port, nil) } func helloworld(w http.ResponseWriter, req *http.Request) { templ.Execute(w, req.FormValue("s")) } const templateStr = ` <html> <head> <title>QR Link Generator</title> </head> <body> {{if .}} <img src="http://chart.apis.google.com/chart?chs=300x300&cht=qr&choe=UTF-8&chl={{.}}" /> <br> {{.}} <br> <br> {{end}} <form action="/" name=f method="GET"><input maxLength=1024 size=70 name=s value="" title="Text to QR Encode"><input type=submit value="Show QR" name=qr> </form> </body> </html> ` 代码说明 main  之前的代码应该比较容易理解。我们通过一个常量为服务器设置了默认端口。 模板变量  templ  正式有趣的地方。它构建的HTML模版将会被服务器执行并显示在页面中。 稍后我们将详细讨论。 main  函数解析了参数标志并使用我们讨论过的机制将 helloworld 函数绑定到服务器的根路径。然后调用  http.ListenAndServe  启动服务器；它将在服务器运行时处于阻塞状态。 helloworld  仅接受包含表单数据的请求，并为表单值  s  中的数据执行模板。 模板包  html/template  非常强大；该程序只是浅尝辄止。 本质上，它通过在运行时将数据项中提取的元素（在这里是表单值）传给  templ.Execute  执行因而重写了HTML文本。 在模板文本（ templateStr ）中，双大括号界定的文本表示模板的动作。 从  {{if .}}  到  {{end}}  的代码段仅在当前数据项（这里是点  . ）的值非空时才会执行。 也就是说，当字符串为空时，此部分模板段会被忽略。 其中两段  {{.}}  表示要将数据显示在模板中 （即将查询字符串显示在Web页面上）。HTML模板包将自动对文本进行转义， 因此文本的显示是安全的。 余下的模板字符串只是页面加载时将要显示的HTML。如果这段解释你无法理解，请参考  文档  获得更多有关模板包的解释。 你终于如愿以偿了：以几行代码实现的，包含一些数据驱动的HTML文本的Web服务器。 Go语言强大到能让很多事情以短小精悍的方式解决。 步骤 4. 本地编译运行访问 编译 你可以通过在命令行窗口执行命令：go install web1 来完成编译，编译完成后会在 C:\Go\bin 目录下生成web1的exe。 执行 通过上面的方法编译后，双击运行即可。 也可以在命令行下切换到文件所在的目录，例如：C:\Go\src\web1 然后执行：go run app.go 这时可能会弹出Windows防火墙的安全提示，点击允许访问即可。 访问 在浏览器中访问，查看效果，打开浏览器，输入： http://localhost:8080/ ， 在文本框中输入一个URL，如（http://blog.csdn.net/testcs_dn），点击Show QR，会生成一张二维码的图片 扫一扫这张二维码看看吧 步骤 5. 上传应用程序 登录到  Bluemix™  后，可以使用  cf push  命令来上传应用程序。 开始之前，您必须： 1、安装 Cloud Foundry 命令行界面。 请根据自己使用的操作系统下载对应的版本；我使用的是Windows 7 64位操作系统， 下载 Binaries 版本的不需要安装， 直接解压到Windows目录就可以了 。 以下执行的命令你可以通过访问 https://www.ng.bluemix.net/docs/#starters/upload_app.html#upload_app__push 查看属于自己的命令； 2、连接到  Bluemix 。 打开命令提示符窗口：开始》运行，输入“cmd”，回车 执行：cf api https://api.ng.bluemix.net，如下图： 3、登录到  Bluemix 。 注意，这里要换成对应你自己账户的命令！ cf login -u ivu4e@qq.com -o ivu4e@qq.com -s ivu4e 4、发出  cf push  命令时， cf  命令行界面将提供使用 buildpack 来构建并运行应用程序的  Bluemix  环境的工作目录。 从应用程序目录中，输入带有应用程序名称的  cf push  命令。在  Bluemix  环境中，应用程序名称必须是唯一的。 后面的"-m 512m"是修改应用程序内存配额的，可以不带这个参数，如下图： 注意：执行cf push前将命令行当前目录切换到您刚刚创建的应用目录，例如我刚刚创建的 C:\Go\src\web1， cf push 后面的goinfo要替换为您在Bluemix上创建的应用名称。 提示：  使用  cf push  命令时， cf  命令行界面会将当前目录中的所有文件和目录复制到  Bluemix 。确保应用程序目录中只包含必需的文件。 cf push  命令上传应用程序并将其部署到  Bluemix 。有关  cf push  的更多信息，请参阅  cf 命令 。有关 buildpack 的信息，请参阅 使用社区 buildpack 。 如果更改了应用程序，可以通过再次输入  cf push  命令来上传这些更改。   cf  命令行界面会使用您先前的选项以及您对提示的响应来通过新的代码段更新应用程序的任何运行中实例。 提示：  您还可以从  Bluemix DevOps Services  上传或部署应用程序。请参阅 在 Node.js 中使用 Web IDE 开发 Bluemix  应用程序 。 步骤 6. 做个小小的测试 通过仪表板进入您刚刚创建的应用页面，点击左侧的开始编码，右侧顶部会显示：您的应用程序正在运行。 http://goqrcode.mybluemix.net 点击后面的链接访问刚刚发布的应用。 在输入框中输入您想分享的URL，点击Show QR按钮就可以生成二维码图片了。 结束语 通过 IBM的Bluemix云平台，我们可以轻松的将自己的应用共享到网络上； 创建Web应用之后会自动获得一个用来访问应用的二级域名； 通过应用程序概述中的应用程序运行状况，可以方便的查看和管理应用运行状态； 这里通过一个小例子展示如何将自己的应用发布到IBM的Bluemix云平台上， 如何与 Google在 http://chart.apis.google.com  上提供了的图表服务交互。 如果您有更好的应用或想法，试试通过 IBM的Bluemix云平台共享出来吧。 上一篇 《Go语言入门》第一个Go语言Web程序——简单的Web服务器 下一篇 Ruby Rails入门——windows下搭建Ruby Rails Web开发环境 顶 2 踩 0 我的同类文章 活动 （8） 云服务器 （1） Bluemix （2） http://blog.csdn.net 猜你在找 查看评论 * 以上用户言论只代表其个人观点，不代表CSDN网站的观点或立场

Recno:: 31
URL:: http://blog.csdn.net/testcs_dn/article/details/50273003

ParseText::
Ruby Rails入门——windows下搭建Ruby Rails Web开发环境 - 无知人生，记录点滴 - 博客频道 - CSDN.NET 无知人生，记录点滴 不积硅步，无以至千里；不积小流，无以成江海…… 目录视图 摘要视图 订阅 学院APP首次下载，可得50C币！     欢迎来帮助开源“进步”     当讲师？爱学习？投票攒课吧     认识Atlassian Datacenter产品     深圳小伙伴的福利来啦 Ruby Rails入门——windows下搭建Ruby Rails Web开发环境 标签： windows ruby 入门 Rails 开发环境 2015-12-12 14:03 1192人阅读 评论 (0) 收藏 举报 分类： Redis （8） 作者同类文章 X Ruby （6） 作者同类文章 X 版权声明：本文为博主原创文章，未经博主允许不得转载。 Ruby on Rails 是一个可以使你开发，部署，维护 web 应用程序变得简单的框架。2015年10月编程语言排行榜 Ruby进入TIOBE排行榜前十 ，可见其流行程度如此之高。本文就帮你打开 Ruby on Rails Web开发的大门，助你进入 Ruby on Rails的世界，感受不一样的风景。 Ruby on Rails完整安装包 下载地址：http://railsinstaller.org/en

Recno:: 32
URL:: http://blog.csdn.net/testcs_dn/article/details/50274703

ParseText::
Could not find gem 'sass-rails (~> 5.0) x64-mingw32' in any of the gem sources listed in your Gemfil - 无知人生，记录点滴 - 博客频道 - CSDN.NET 无知人生，记录点滴 不积硅步，无以至千里；不积小流，无以成江海…… 目录视图 摘要视图 订阅 学院APP首次下载，可得50C币！     欢迎来帮助开源“进步”     当讲师？爱学习？投票攒课吧     认识Atlassian Datacenter产品     深圳小伙伴的福利来啦 Could not find gem 'sass-rails (~> 5.0) x64-mingw32' in any of the gem sources listed in your Gemfil 标签： ruby gem rails sass 2015-12-12 16:18 1079人阅读 评论 (0) 收藏 举报 分类： Ruby （6） 作者同类文章 X Redis （8） 作者同类文章 X 版权声明：本文为博主原创文章，未经博主允许不得转载。 Could not find gem 'sass-rails (~> 5.0) x64-mingw32' in any of the gem sources listed in your Gemfile or available on this machine. Run `bundle install` to install missing gems. 在  windows下搭建Ruby Rails Web开发环境  时遇到这个问题， 出现此问题的原因是：没有安装sass-rails 安装：执行命令：gem install sass-rails 安装过程中可能会出现以下问题： Could not find gem 'sass-rails (~> 5.0) x64-mingw32' in any of the gem sources listed in your Gemfile or available on this machine. Run `bundle install` to install missing gems. host. - SSL_connect (https://api.rubygems.org/quick/Marshal.4.8/tilt-2.0.1.gemspec.rz) 这可能是由于网络的原因，多试几次就好了。 上一篇 Could not find gem 'sqlite3 (>= 0) x64-mingw32' in any of the gem sources listed in your Gemfile 下一篇 ERROR: Error installing json:The 'json' native gem requires installed build tools. 顶 1 踩 0 我的同类文章 Ruby （6） Redis （8） http://blog.csdn.net 猜你在找 查看评论 * 以上用户言论只代表其个人观点，不代表CSDN网站的观点或立场 个人资料 testcs_dn 访问： 1858758次 积分： 22271 等级： 积分：22271 排名： 第165名 原创： 466篇 转载： 169篇 译文： 7篇 评论： 512条 文章搜索 博客专栏 JAVA学习实践及问题记录 文章：98篇 阅读：390501 VC学习实践及问题记录 文章：33篇 阅读：89083 Markdown 文章：15篇 阅读：27803 NoSQL入门与提高 文章：0篇 阅读：0 CentOS服务器配置管理 文章：25篇 阅读：118455 MySQL图文进阶 文章：18篇 阅读：89044 C#软件开发实例 文章：44篇 阅读：147398 文章分类 VC (79) C# (88) JAVA (132) jquery (20) InstallShield (3) php (9) Android (1) sock5 (2) JavaScript (25) HTML5 (6) IIS (6) VS2010 (9) ASP.NET (4) Python (1) 数据库 (21) MySQL (24) CentOS (55) 操作系统 (20) Database (4) css (1) linux (14) 动态共享库 (2) gcc (3) gdb (1) ThinkPHP (5) 浏览器 (9) 调试 (6) 系统安全 (3) 其它 (29) C语言 (2) 开源协议 (2) 直播 (2) Maven (21) Redis (9) Nginx (5) FFmpeg (2) Hadoop (3) 逆向分析 (1) visio (1) mybatis (5) VB.NET (1) 同步机制 (2) 系统架构 (4) Eclipse (33) R语言 (2) Markdown (14) Tomcat (10) SVN (8) 活动 (9) 书摘 (2) WindowsAPI (2) UI设计 (1) UE设计 (2) Proguard (15) spring (2) 成功励志 (1) powerdesigner (1) 养生保健 (2) 数据结构 (1) 编程语言 (2) 星星点灯 (1) 程序猿/缘 (2) asp (3) 云服务器 (2) go语言入门 (4) Bluemix (3) Ruby (7) rails (2) 文章存档 2015年12月 (15) 2015年11月 (12) 2015年10月 (12) 2015年09月 (14) 2015年08月 (13) 2015年07月 (14) 2015年06月 (20) 2015年05月 (58) 2015年04月 (25) 2015年03月 (31) 2015年02月 (16) 2015年01月 (33) 2014年12月 (31) 2014年11月 (20) 2014年10月 (24) 2014年09月 (23) 2014年08月 (21) 2014年07月 (20) 2014年06月 (14) 2014年05月 (36) 2014年04月 (14) 2014年03月 (14) 2014年02月 (7) 2014年01月 (6) 2013年12月 (15) 2013年08月 (3) 2013年07月 (2) 2013年06月 (9) 2013年05月 (6) 2013年04月 (7) 2013年03月 (32) 2013年02月 (3) 2012年10月 (8) 2012年09月 (7) 2012年08月 (22) 2012年07月 (2) 2012年06月 (30) 2012年05月 (4) 阅读排行 Uncaught SyntaxError: Unexpected token ILLEGAL (56336) MICRO SIM卡(SIM小卡)尺寸图及剪卡图解 (55486) Uncaught SyntaxError: Unexpected token ) (51563) HTTP错误 404.17 - Not Found" IIS 7.5 请求的内容似乎是脚本，因而将无法由静态文件处理程序来处理 (43344) xxx cannot be resolved to a type 错误解决方法 (33234) The superclass "javax.servlet.http.HttpServlet" was not found on the Java Build Path (27780) HTML5使用 JavaScript File API 实现文件上传 (27251) js如何判断一个对象{}是否为空对象，没有任何属性 (26210) A child container failed during start (20944) ThinkPHP学习（二）理清ThinkPHP的目录结构及访问规则，创建第一个控制器 (19957) 评论排行 CSDN-markdown编辑器语法——字体、字号与颜色 (35) 你曾后悔进入 IT 行业吗？ (25) xxx cannot be resolved to a type 错误解决方法 (19) 欢迎使用CSDN-markdown编辑器 (15) HTTP错误 404.17 - Not Found" IIS 7.5 请求的内容似乎是脚本，因而将无法由静态文件处理程序来处理 (12) A child container failed during start (12) 《Visual c++2013入门经典（第7版）》上机练习：为 Win32 控制台应用程序创建项目 (11) The superclass "javax.servlet.http.HttpServlet" was not found on the Java Build Path (11) C语言中函数参数为什么是由右往左入栈的？ (10) VC Windows API应用之GetDesktopWindow ——获得桌面所有窗口句柄的方法 (9) 推荐文章 *App竞品技术分析 （6）热修复 *架构设计：系统间通信（17）——服务治理与Dubbo 中篇（分析） *一款炫酷Loading动画--加载失败 *图解堆算法、链表、栈与队列（多图预警） *Android中ContentProvider组件详解 *Android平台Camera实时滤镜实现方法探讨(九)--磨皮算法探讨(一) 最新评论 Your Ruby version is 2.2.3, but your Gemfile specified 2.2.2 u010850027 : 感谢楼主的分享，学习了`(*∩_∩*)′ C#软件开发实例.私人订制自己的屏幕截图工具（十）在截图中包含鼠标指针形状 qigeminghaofan : 大神，可以把完整的代码放出来吗？好像没有截图信息栏、编辑工具栏这些功能 欢迎使用CSDN-markdown编辑器 scufzk2008 : 代码块那地方很丑，不知道楼主怎么优化下？ A child container failed during start testcs_dn : @plok741:谢谢补充！ A child container failed during start plok741 : 遇到相同的问题，是由于tomcat的版本的问题导致的。用tomcat8之后，可以成功启动应用。或者使... Notepad++输入模式之修改模式、插入模式 testcs_dn : @zxbdlv:欢迎来踩！ Notepad++输入模式之修改模式、插入模式 zxbdlv : 谢谢分享！ Ruby On Rails中REST API使用示例——基于云平台+云服务打造自己的在线翻译工具 testcs_dn : @mengdonghui123456:欢迎来踩！ Could not publish to the server. java.lang.NullPointerException testcs_dn : @liutong123987:恩恩 Could not publish to the server. java.lang.NullPointerException liutong123987 : 今天刚好碰到，用解决方法的第一种可以解决 友情链接 computer99999999的专栏 陌路缘

Recno:: 33
URL:: http://blog.csdn.net/testcs_dn/article/details/50275683

ParseText::
ERROR: Error installing json:The 'json' native gem requires installed build tools. - 无知人生，记录点滴 - 博客频道 - CSDN.NET 无知人生，记录点滴 不积硅步，无以至千里；不积小流，无以成江海…… 目录视图 摘要视图 订阅 学院APP首次下载，可得50C币！     欢迎来帮助开源“进步”     当讲师？爱学习？投票攒课吧     认识Atlassian Datacenter产品     深圳小伙伴的福利来啦 ERROR: Error installing json:The 'json' native gem requires installed build tools. 标签： ruby rails json native 2015-12-12 16:28 999人阅读 评论 (0) 收藏 举报 分类： Ruby （6） 作者同类文章 X Redis （8） 作者同类文章 X 版权声明：本文为博主原创文章，未经博主允许不得转载。 ERROR:  Error installing json:The 'json' native gem requires installed build tools. C:\ruby\blog>gem install json -v '1.8.3' ERROR:  Error installing json:The 'json' native gem requires installed build tools. Please update your PATH to include build tools or download the DevKit from 'http://rubyinstaller.org/downloads' and follow the instructions at 'http://github.com/oneclick/rubyinstaller/wiki/Development-Kit' 在  windows下搭建Ruby Rails Web开发环境  时遇到这个问题，  发生这个错误的原因是没有安装DevKit DevKit 加上devkit之后，你的ruby中便具有了一个mingw32的本地编译环境，而且这个本地编译环境是自动调用的。只有在你要安装的gem需要本地编译时，才会调用devkit。  http://rubyinstaller.org/add-ons/devkit 下载DevKit http://rubyinstaller.org/downloads 安装DevKit 1、运行，解压到一个目录，例如：C:\DevKit 2、打开命令行，切换到这个目录； 3、执行命令： ruby dk.rb init 4、修改config.yml文件 [plain]   view plain copy # This configuration file contains the absolute path locations of all   # installed Rubies to be enhanced to work with the DevKit. This config   # file is generated by the 'ruby dk.rb init' step and may be modified   # before running the 'ruby dk.rb install' step. To include any installed   # Rubies that were not automagically discovered, simply add a line below   # the triple hyphens with the absolute path to the Ruby root directory.   #   # Example:   #   # ---   - C:\Ruby22-x64   # - C:/ruby192dev   #   ---   [plain]   view plain copy C:\Ruby22-x64 是我的Ruby安装目录   5、执行命令： ruby dk.rb install [plain]   view plain copy C:\DevKit>ruby dk.rb install   [INFO] Updating conve 安装完DevKit之后，再执行命令安装JSON包： gem install json -v '1.8.3' 安装过程中可能会出现以下问题： C:\ruby\blog>gem install json -v '1.8.3' ERROR: While executing gem ... (Gem::RemoteFetcher::FetchError) Errno::ECONNABORTED: An established connection was aborted by the software i n your host machine. - SSL_connect (https://api.rubygems.org/quick/Marshal.4.8/json-1.8.3.gemspec.rz) 这可能是由于网络的原因，多试几次就好了。 https://github.com/oneclick/rubyinstaller/wiki/Development-Kit 上一篇 Could not find gem 'sass-rails (~> 5.0) x64-mingw32' in any of the gem sources listed in your Gemfil 下一篇 Windows 7 x64环境下JDK8安装过程 顶 0 踩 0 我的同类文章 Ruby （6） Redis （8） http://blog.csdn.net 猜你在找 查看评论 * 以上用户言论只代表其个人观点，不代表CSDN网站的观点或立场 个人资料 testcs_dn 访问： 1858753次 积分： 22270 等级： 积分：22270 排名： 第165名 原创： 466篇 转载： 169篇 译文： 7篇 评论： 512条 文章搜索 博客专栏 JAVA学习实践及问题记录 文章：98篇 阅读：390501 VC学习实践及问题记录 文章：33篇 阅读：89083 Markdown 文章：15篇 阅读：27803 NoSQL入门与提高 文章：0篇 阅读：0 CentOS服务器配置管理 文章：25篇 阅读：118455 MySQL图文进阶 文章：18篇 阅读：89044 C#软件开发实例 文章：44篇 阅读：147398 文章分类 VC (79) C# (88) JAVA (132) jquery (20) InstallShield (3) php (9) Android (1) sock5 (2) JavaScript (25) HTML5 (6) IIS (6) VS2010 (9) ASP.NET (4) Python (1) 数据库 (21) MySQL (24) CentOS (55) 操作系统 (20) Database (4) css (1) linux (14) 动态共享库 (2) gcc (3) gdb (1) ThinkPHP (5) 浏览器 (9) 调试 (6) 系统安全 (3) 其它 (29) C语言 (2) 开源协议 (2) 直播 (2) Maven (21) Redis (9) Nginx (5) FFmpeg (2) Hadoop (3) 逆向分析 (1) visio (1) mybatis (5) VB.NET (1) 同步机制 (2) 系统架构 (4) Eclipse (33) R语言 (2) Markdown (14) Tomcat (10) SVN (8) 活动 (9) 书摘 (2) WindowsAPI (2) UI设计 (1) UE设计 (2) Proguard (15) spring (2) 成功励志 (1) powerdesigner (1) 养生保健 (2) 数据结构 (1) 编程语言 (2) 星星点灯 (1) 程序猿/缘 (2) asp (3) 云服务器 (2) go语言入门 (4)

Recno:: 34
URL:: http://blog.csdn.net/testcs_dn/article/details/50277347

ParseText::
Windows 7 x64环境下JDK8安装过程 - 无知人生，记录点滴 - 博客频道 - CSDN.NET 无知人生，记录点滴 不积硅步，无以至千里；不积小流，无以成江海…… 目录视图 摘要视图 订阅 学院APP首次下载，可得50C币！     欢迎来帮助开源“进步”     当讲师？爱学习？投票攒课吧     认识Atlassian Datacenter产品     深圳小伙伴的福利来啦 Windows 7 x64环境下JDK8安装过程 标签： windows 7 jdk 安装 2015-12-12 19:53 643人阅读 评论 (0) 收藏 举报 分类： JAVA （131） 作者同类文章 X 版权声明：本文为博主原创文章，未经博主允许不得转载。 Windows 7 x64环境下JDK8安装过程 下载地址：http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html 最好是不要使用默认的目录，通常默认的目录都带有空格，可能会引起不必要的麻烦； 上一篇 ERROR: Error installing json:The 'json' native gem requires installed build tools. 下一篇 Java中REST API使用示例——基于云平台+云服务打造自己的在线翻译工具 顶 1 踩 0 我的同类文章 JAVA （131） http://blog.csdn.net 猜你在找 查看评论 * 以上用户言论只代表其个人观点，不代表CSDN网站的观点或立场 个人资料 testcs_dn 访问： 1858754次 积分： 22271 等级： 积分：22271 排名： 第165名 原创： 466篇 转载： 169篇 译文： 7篇 评论： 512条 文章搜索 博客专栏 JAVA学习实践及问题记录 文章：98篇 阅读：390501 VC学习实践及问题记录 文章：33篇 阅读：89083 Markdown 文章：15篇 阅读：27803 NoSQL入门与提高 文章：0篇 阅读：0 CentOS服务器配置管理 文章：25篇 阅读：118455 MySQL图文进阶 文章：18篇 阅读：89044 C#软件开发实例 文章：44篇 阅读：147398 文章分类 VC (79) C# (88) JAVA (132) jquery (20) InstallShield (3) php (9) Android (1) sock5 (2) JavaScript (25) HTML5 (6) IIS (6) VS2010 (9) ASP.NET (4) Python (1) 数据库 (21) MySQL (24) CentOS (55) 操作系统 (20) Database (4) css (1) linux (14) 动态共享库 (2) gcc (3) gdb (1) ThinkPHP (5) 浏览器 (9) 调试 (6) 系统安全 (3) 其它 (29) C语言 (2) 开源协议 (2) 直播 (2) Maven (21) Redis (9) Nginx (5) FFmpeg (2) Hadoop (3) 逆向分析 (1) visio (1) mybatis (5) VB.NET (1) 同步机制 (2) 系统架构 (4) Eclipse (33) R语言 (2) Markdown (14) Tomcat (10) SVN (8) 活动 (9) 书摘 (2) WindowsAPI (2) UI设计 (1) UE设计 (2) Proguard (15) spring (2) 成功励志 (1) powerdesigner (1) 养生保健 (2) 数据结构 (1) 编程语言 (2) 星星点灯 (1) 程序猿/缘 (2) asp (3) 云服务器 (2) go语言入门 (4) Bluemix (3) Ruby (7) rails (2) 文章存档 2015年12月 (15) 2015年11月 (12) 2015年10月 (12) 2015年09月 (14) 2015年08月 (13) 2015年07月 (14) 2015年06月 (20) 2015年05月 (58) 2015年04月 (25) 2015年03月 (31) 2015年02月 (16) 2015年01月 (33) 2014年12月 (31) 2014年11月 (20) 2014年10月 (24) 2014年09月 (23) 2014年08月 (21) 2014年07月 (20) 2014年06月 (14) 2014年05月 (36) 2014年04月 (14) 2014年03月 (14) 2014年02月 (7) 2014年01月 (6) 2013年12月 (15) 2013年08月 (3) 2013年07月 (2) 2013年06月 (9) 2013年05月 (6) 2013年04月 (7) 2013年03月 (32) 2013年02月 (3) 2012年10月 (8) 2012年09月 (7) 2012年08月 (22) 2012年07月 (2) 2012年06月 (30) 2012年05月 (4) 阅读排行 Uncaught SyntaxError: Unexpected token ILLEGAL (56336) MICRO SIM卡(SIM小卡)尺寸图及剪卡图解 (55486) Uncaught SyntaxError: Unexpected token ) (51563) HTTP错误 404.17 - Not Found" IIS 7.5 请求的内容似乎是脚本，因而将无法由静态文件处理程序来处理 (43344) xxx cannot be resolved to a type 错误解决方法 (33234) The superclass "javax.servlet.http.HttpServlet" was not found on the Java Build Path (27780) HTML5使用 JavaScript File API 实现文件上传 (27251) js如何判断一个对象{}是否为空对象，没有任何属性 (26210) A child container failed during start (20944) ThinkPHP学习（二）理清ThinkPHP的目录结构及访问规则，创建第一个控制器 (19957) 评论排行 CSDN-markdown编辑器语法——字体、字号与颜色 (35) 你曾后悔进入 IT 行业吗？ (25) xxx cannot be resolved to a type 错误解决方法 (19) 欢迎使用CSDN-markdown编辑器 (15) HTTP错误 404.17 - Not Found" IIS 7.5 请求的内容似乎是脚本，因而将无法由静态文件处理程序来处理 (12) A child container failed during start (12) 《Visual c++2013入门经典（第7版）》上机练习：为 Win32 控制台应用程序创建项目 (11) The superclass "javax.servlet.http.HttpServlet" was not found on the Java Build Path (11) C语言中函数参数为什么是由右往左入栈的？ (10) VC Windows API应用之GetDesktopWindow ——获得桌面所有窗口句柄的方法 (9) 推荐文章 *App竞品技术分析 （6）热修复 *架构设计：系统间通信（17）——服务治理与Dubbo 中篇（分析） *一款炫酷Loading动画--加载失败 *图解堆算法、链表、栈与队列（多图预警） *Android中ContentProvider组件详解 *Android平台Camera实时滤镜实现方法探讨(九)--磨皮算法探讨(一) 最新评论 Your Ruby version is 2.2.3, but your Gemfile specified 2.2.2 u010850027 : 感谢楼主的分享，学习了`(*∩_∩*)′ C#软件开发实例.私人订制自己的屏幕截图工具（十）在截图中包含鼠标指针形状 qigeminghaofan : 大神，可以把完整的代码放出来吗？好像没有截图信息栏、编辑工具栏这些功能 欢迎使用CSDN-markdown编辑器 scufzk2008 : 代码块那地方很丑，不知道楼主怎么优化下？ A child container failed during start testcs_dn : @plok741:谢谢补充！ A child container failed during start plok741 : 遇到相同的问题，是由于tomcat的版本的问题导致的。用tomcat8之后，可以成功启动应用。或者使... Notepad++输入模式之修改模式、插入模式 testcs_dn : @zxbdlv:欢迎来踩！ Notepad++输入模式之修改模式、插入模式 zxbdlv : 谢谢分享！ Ruby On Rails中REST API使用示例——基于云平台+云服务打造自己的在线翻译工具 testcs_dn : @mengdonghui123456:欢迎来踩！ Could not publish to the server. java.lang.NullPointerException testcs_dn : @liutong123987:恩恩 Could not publish to the server. java.lang.NullPointerException liutong123987 : 今天刚好碰到，用解决方法的第一种可以解决 友情链接 computer99999999的专栏 陌路缘

Recno:: 35
URL:: http://blog.csdn.net/testcs_dn/article/details/50382395

ParseText::
Routing Error uninitialized constant TransController - 无知人生，记录点滴 - 博客频道 - CSDN.NET 无知人生，记录点滴 不积硅步，无以至千里；不积小流，无以成江海…… 目录视图 摘要视图 订阅 学院APP首次下载，可得50C币！     欢迎来帮助开源“进步”     当讲师？爱学习？投票攒课吧     认识Atlassian Datacenter产品     深圳小伙伴的福利来啦 Routing Error uninitialized constant TransController 标签： Bluemix rails ruby IBM gem 2015-12-24 19:23 362人阅读 评论 (0) 收藏 举报 分类： Ruby （6） 作者同类文章 X rails （1） 作者同类文章 X 版权声明：本文为博主原创文章，未经博主允许不得转载。 在文章  Ruby On Rails中REST API使用示例——基于云平台+云服务打造自己的在线翻译工具  中，从Bluemix上下载的初始Hello World示例代码在本地环境下修改后运行调试时提示： Routing Error uninitialized constant TransController Try running rake routes for more information on available routes. 这是因为创建文件trans_controller.rb的时候是从别的文件复制过来的，但文件中的Controller名称忘记修改了；

Recno:: 36
URL:: http://blog.csdn.net/wangshubo1989/article/details/50359750

ParseText::
实战c++中的vector系列--正确释放vector的内存(clear(), swap(), shrink_to_fit()) - wangshubo1989的博客 - 博客频道 - CSDN.NET wangshubo1989的博客 勿在浮沙筑高台 目录视图 摘要视图 订阅 学院APP首次下载，可得50C币！     欢迎来帮助开源“进步”     当讲师？爱学习？投票攒课吧     认识Atlassian Datacenter产品     深圳小伙伴的福利来啦 实战c++中的vector系列--正确释放vector的内存(clear(), swap(), shrink_to_fit()) 标签： vector c++ 2015-12-19 21:18 789人阅读 评论 (0) 收藏 举报 分类： C++ （147） 作者同类文章 X 版权声明：本文为博主原创文章，未经博主允许不得转载。 关于vector已经写的差不多了，似乎要接近尾声了，从初始化到如何添加元素再到copy元素都有所涉及，是时候谈一谈内存的释放了。 是的，对于数据量很小的vector，完全没必要自己进行主动的释放，因为那样对程序的效率几乎没有影响。但是当vector中存入大量的数据后，并且都数据进行了一些操作，比如删除后，如果我们能积极主动的去释放内存，那么是非常明智的。 写到这里，应该明确了size和capacity的区别了。 现在介绍一个方法， std::vector::clear() Removes all elements from the vector (which are destroyed), leaving the container with a size of 0. 看清楚了吗，英文中提到的是size=0，而非capacity。写程序验证一些： #include<iostream> #include<vector> using namespace std ; int main() { vector < int > v; v.push_back( 1 ); v.push_back( 2 ); v.push_back( 3 ); v.push_back( 4 ); v.push_back( 5 ); cout << "size:" << v.size() << endl; cout << "capacity:" << v.capacity() << endl; v.clear(); cout << "after clear size:" << v.size() << endl; cout << "after clear capacity:" << v.capacity() << endl; return 0 ; } //输出 size: 5 capacity: 6 after clear size: 0 after clear capacity: 6 看到了吗，clear后，size变为了0，capacity没有变化。再读一读clear的英文描述： A reallocation is not guaranteed to happen, and the vector capacity is not guaranteed to change due to calling this function. A typical alternative that forces a reallocation is to use swap: vector().swap(x); // clear x reallocating 所以这个时候swap该出厂了。 std::vector::swap Exchanges the content of the container by the content of x, which is another vector object of the same type. Sizes may differ. After the call to this member function, the elements in this container are those which were in x before the call, and the elements of x are those which were in this. All iterators, references and pointers remain valid for the swapped objects. Notice that a non-member function exists with the same name, swap, overloading that algorithm with an optimization that behaves like this member function. 直接看看使用： #include <iostream> #include <vector> int main() { std :: vector < int > foo; foo.push_back( 1 ); foo.push_back( 2 ); foo.push_back( 3 ); foo.push_back( 4 ); foo.push_back( 5 ); std :: vector < int > bar; bar.push_back( 1 ); bar.push_back( 2 ); std :: cout << "foo size:" << foo.size() << std ::endl; std :: cout << "foo capacity:" << foo.capacity() << std ::endl; std :: cout << "bar size:" << bar.size() << std ::endl; std :: cout << "bar capacity:" << bar.capacity() << std ::endl; foo.swap(bar); std :: cout << "after swap foo size:" << foo.size() << std ::endl; std :: cout << "after swap foo capacity:" << foo.capacity() << std ::endl; std :: cout << "after swap bar size:" << bar.size() << std ::endl; std :: cout << "after swap bar capacity:" << bar.capacity() << std ::endl; return 0 ; } //输出： foo size: 5 foo capacity: 6 bar size: 2 bar capacity: 2 after swap foo size: 2 after swap foo capacity: 2 after swap bar size: 5 after swap bar capacity: 6 看到了吗，swap之后，不仅仅是size变化了，capacity也是变化了。那么于是就把swap替代clear了： #include<iostream> #include<vector> using namespace std ; int main() { vector < int > v; v.push_back( 1 ); v.push_back( 2 ); v.push_back( 3 ); v.push_back( 4 ); v.push_back( 5 ); cout << "size:" << v.size() << endl; cout << "capacity:" << v.capacity() << endl; vector < int > ().swap(v); cout << "after swap size:" << v.size() << endl; cout << "after swap capacity:" << v.capacity() << endl; return 0 ; } //输出： size: 5 capacity: 6 after swap size: 0 after swap capacity: 0 还记得上篇博客的shrink_to_fit()吗，如果clear后在调用shrink_to_fit()不一样可以吗？ #include<iostream> #include<vector> using namespace std ; int main() { vector < int > v; v.push_back( 1 ); v.push_back( 2 ); v.push_back( 3 ); v.push_back( 4 ); v.push_back( 5 ); cout << "size:" << v.size() << endl; cout << "capacity:" << v.capacity() << endl; v.clear(); v.shrink_to_fit(); cout << "after swap size:" << v.size() << endl; cout << "after swap capacity:" << v.capacity() << endl; return 0 ; } //输出： size: 5 capacity: 6 after swap size: 0 after swap capacity: 0 所以 不用以为只有swap替代clear才能正确释放vector的内存，C++11推出了shrink_to_fit方法，也可以达到目的。 上一篇 实战c++中的vector系列--C++11对vector成员函数的扩展(cbegin()、cend()、crbegin()、crend()、emplace()、data()) 下一篇 实战c++中的vector系列--vector的一些异常 顶 0 踩 0 我的同类文章 C++ （147） http://blog.csdn.net 猜你在找 查看评论 * 以上用户言论只代表其个人观点，不代表CSDN网站的观点或立场 个人资料 wangshubo1989 访问： 127087次 积分： 3664 等级： 积分：3664 排名： 第4994名 原创： 212篇 转载： 14篇 译文： 6篇 评论： 153条 文章搜索 博客专栏 实战c++中的vector系列 文章：22篇 阅读：14137 实战c++中的string系列 文章：15篇 阅读：14121 一起学libcef 文章：5篇 阅读：4637 那些年躲过的坑儿 文章：33篇 阅读：37229 浅析C++11新特性 文章：19篇 阅读：12645 C++你所不知道的事儿 文章：4篇 阅读：4206 文章分类 WPF (20) MFC (17) C++ (147) C# (36) DuiLib (4) windows编程 (11) 非技术 (8) libcef (5) 文章存档 2015年12月 (49) 2015年11月 (49) 2015年10月 (36) 2015年09月 (26) 2015年08月 (45) 2015年07月 (22) 2015年06月 (5) 阅读排行 没有躲过的坑--正则表达式截取字符串 (14349) 为何我工作十年，内心仍无比恐慌（腾讯产品总监曹菲） (2485) C\C++编译器的未来.我们还需要C++么? (2168) 浅析C++中的初始化列表（区别赋值和初始化） (1749) 你所不知道的事儿--C++中delete指针后最好赋值为NULL (1529) C++11新特性之 std::array container (1512) 没有躲过的坑--std::string初始化、最快速判断字符串为空 (1466) 没有躲过的坑--指针（内存泄露） (1382) 没有躲过的坑--头文件相互包含（Compiler error C2653: not a class or namespace name） (1266) MVVM设计模式基础知识--NotificationObject类（Prism框架） (1265) 评论排行 为何我工作十年，内心仍无比恐慌（腾讯产品总监曹菲） (9) C++11新特性之 CALLBACKS (5) 一起学libcef--搭建自己的libcef运行环境（Win32程序，错误C2220解决方案） (4) 没有躲过的坑--智能指针陷阱 (4) C++11新特性之 default and delete specifiers (4) C++11新特性之 std::future and std::async (4) 开始使用C++11的几个理由 (4) C++11新特性之 std::array container (3) 微软VS苹果 桌面操作系统的终极一战 (3) 没有躲过的坑--指针（内存泄露） (3) 推荐文章 *App竞品技术分析 （6）热修复 *架构设计：系统间通信（17）——服务治理与Dubbo 中篇（分析） *一款炫酷Loading动画--加载失败 *图解堆算法、链表、栈与队列（多图预警） *Android中ContentProvider组件详解 *Android平台Camera实时滤镜实现方法探讨(九)--磨皮算法探讨(一) 最新评论 C\C++编译器的未来.我们还需要C++么? cosmart : Delphi可以做到跨平台了吧 实战c++中的vector系列--使用sort算法对vector进行排序(对vector<string>排序、使用稳定的排序std::stable_sort()) u010850027 : 没什么值得畏惧，你唯一需要担心的是，你配不上自己的梦想，也辜负了曾经的苦难。 实战c++中的vector系列--vector应用之STL的find、find_if、find_end、find_first_of、find_if_not(C++11) u010850027 : 感谢楼主的分享，学习了`(*∩_∩*)′ 一起学libcef--搭建自己的libcef运行环境（Win32程序，错误C2220解决方案） sinat_27399773 : @wangshubo1989:好像找到原因了，我用的是64位的cef源码，博主的是32位吧，我换回3... 一起学libcef--搭建自己的libcef运行环境（Win32程序，错误C2220解决方案） wangshubo1989 : @sinat_27399773:留邮箱 把我的win32的libcef项目发给你 vs2015的 我... 一起学libcef--搭建自己的libcef运行环境（Win32程序，错误C2220解决方案） sinat_27399773 : 我按你的步骤发现源文件的includ头都报错，然后修改路径后下面的代码还是有错，找不到错误的地方，有... 实战c++中的vector系列--vector<unique_ptr<>>赋值给vector<unique_ptr<>> chenyd9027 : 学习了 实战c++中的vector系列--可怕的迭代器失效之二（删除vector中元素） wangshubo1989 : @zouzhipeng1717:每一次erase()，删除元素后面的元素依次向前移动一个位置，所以这... 实战c++中的vector系列--可怕的迭代器失效（vector重新申请内存） wangyaninglm : 受益匪浅，学习了，这个之前用vector 的迭代器时候确实很少注意到 实战c++中的vector系列--可怕的迭代器失效之二（删除vector中元素） zouzhipeng1717 : 在擦除容器的时候，并不会改变vector的容量，那么自然就不会造成容器的重新加载，那么，为何迭代器会...

Recno:: 37
URL:: http://blog.csdn.net/wangshubo1989/article/details/50374381

ParseText::
实战c++中的vector系列--vector的一些异常 - wangshubo1989的博客 - 博客频道 - CSDN.NET wangshubo1989的博客 勿在浮沙筑高台 目录视图 摘要视图 订阅 学院APP首次下载，可得50C币！     欢迎来帮助开源“进步”     当讲师？爱学习？投票攒课吧     认识Atlassian Datacenter产品     深圳小伙伴的福利来啦 实战c++中的vector系列--vector的一些异常 标签： vector c++ 2015-12-21 20:43 522人阅读 评论 (0) 收藏 举报 分类： C++ （147） 作者同类文章 X 版权声明：本文为博主原创文章，未经博主允许不得转载。 今天就写一写vector的一些异常，可以捕捉的异常。 out_of_range 相当于数组的越界了。vector会自动增大容量，但是如果索引超出了当前的size，就会引发异常。 #include<iostream> #include<vector> using namespace std ; int main() { vector < int > v( 4 ); std :: cout << v[ 0 ] << std ::endl; std :: cout << v[ 1 ] << std ::endl; std :: cout << v[ 2 ] << std ::endl; std :: cout << v[ 3 ] << std ::endl; std :: cout << v[ 4 ] << std ::endl; //越界 return 0 ; } 除了使用索引外，还有使用vector.at()时发生越界： #include <iostream> // std::cerr #include <stdexcept> // std::out_of_range #include <vector> // std::vector int main ( void ) { std :: vector < int > myvector( 10 ); try { myvector.at( 20 )= 100 ; // vector::at throws an out-of-range } catch ( const std ::out_of_range& oor) { std :: cerr << "Out of Range error: " << oor.what() << '\n' ; } return 0 ; } std::length_error 在使用vector的时候，很少会引发std::length_error异常，但是如果疏忽大意写这样的代码： #include <iostream> // std::cerr #include <stdexcept> // std::length_error #include <vector> // std::vector int main ( void ) { try { // vector throws a length_error if resized above max_size std :: vector < int > myvector; myvector.resize(myvector.max_size()+ 1 ); } catch ( const std ::length_error& le) { std :: cerr << "Length error: " << le.what() << '\n' ; } return 0 ; } vector* pData; 上一篇 实战c++中的vector系列--正确释放vector的内存(clear(), swap(), shrink_to_fit()) 下一篇 实战c++中的vector系列--vector的遍历(stl算法、vector迭代器(不要在循环中判断不等于end())、operator[]) 顶 0 踩 0 我的同类文章 C++ （147） http://blog.csdn.net 猜你在找 查看评论 * 以上用户言论只代表其个人观点，不代表CSDN网站的观点或立场 个人资料 wangshubo1989 访问： 127090次 积分： 3664 等级： 积分：3664 排名： 第4994名 原创： 212篇 转载： 14篇 译文： 6篇 评论： 153条 文章搜索 博客专栏 实战c++中的vector系列 文章：22篇 阅读：14137 实战c++中的string系列 文章：15篇 阅读：14121 一起学libcef 文章：5篇 阅读：4637 那些年躲过的坑儿 文章：33篇 阅读：37229 浅析C++11新特性 文章：19篇 阅读：12645 C++你所不知道的事儿 文章：4篇 阅读：4206 文章分类 WPF (20) MFC (17) C++ (147) C# (36) DuiLib (4) windows编程 (11) 非技术 (8) libcef (5) 文章存档 2015年12月 (49) 2015年11月 (49) 2015年10月 (36) 2015年09月 (26) 2015年08月 (45) 2015年07月 (22) 2015年06月 (5) 阅读排行 没有躲过的坑--正则表达式截取字符串 (14349) 为何我工作十年，内心仍无比恐慌（腾讯产品总监曹菲） (2485) C\C++编译器的未来.我们还需要C++么? (2168) 浅析C++中的初始化列表（区别赋值和初始化） (1749) 你所不知道的事儿--C++中delete指针后最好赋值为NULL (1529) C++11新特性之 std::array container (1512) 没有躲过的坑--std::string初始化、最快速判断字符串为空 (1466) 没有躲过的坑--指针（内存泄露） (1382) 没有躲过的坑--头文件相互包含（Compiler error C2653: not a class or namespace name） (1266) MVVM设计模式基础知识--NotificationObject类（Prism框架） (1265) 评论排行 为何我工作十年，内心仍无比恐慌（腾讯产品总监曹菲） (9) C++11新特性之 CALLBACKS (5) 一起学libcef--搭建自己的libcef运行环境（Win32程序，错误C2220解决方案） (4) 没有躲过的坑--智能指针陷阱 (4) C++11新特性之 default and delete specifiers (4) C++11新特性之 std::future and std::async (4) 开始使用C++11的几个理由 (4) C++11新特性之 std::array container (3) 微软VS苹果 桌面操作系统的终极一战 (3) 没有躲过的坑--指针（内存泄露） (3) 推荐文章 *App竞品技术分析 （6）热修复 *架构设计：系统间通信（17）——服务治理与Dubbo 中篇（分析） *一款炫酷Loading动画--加载失败 *图解堆算法、链表、栈与队列（多图预警） *Android中ContentProvider组件详解 *Android平台Camera实时滤镜实现方法探讨(九)--磨皮算法探讨(一) 最新评论 C\C++编译器的未来.我们还需要C++么? cosmart : Delphi可以做到跨平台了吧 实战c++中的vector系列--使用sort算法对vector进行排序(对vector<string>排序、使用稳定的排序std::stable_sort()) u010850027 : 没什么值得畏惧，你唯一需要担心的是，你配不上自己的梦想，也辜负了曾经的苦难。 实战c++中的vector系列--vector应用之STL的find、find_if、find_end、find_first_of、find_if_not(C++11) u010850027 : 感谢楼主的分享，学习了`(*∩_∩*)′ 一起学libcef--搭建自己的libcef运行环境（Win32程序，错误C2220解决方案） sinat_27399773 : @wangshubo1989:好像找到原因了，我用的是64位的cef源码，博主的是32位吧，我换回3... 一起学libcef--搭建自己的libcef运行环境（Win32程序，错误C2220解决方案） wangshubo1989 : @sinat_27399773:留邮箱 把我的win32的libcef项目发给你 vs2015的 我... 一起学libcef--搭建自己的libcef运行环境（Win32程序，错误C2220解决方案） sinat_27399773 : 我按你的步骤发现源文件的includ头都报错，然后修改路径后下面的代码还是有错，找不到错误的地方，有... 实战c++中的vector系列--vector<unique_ptr<>>赋值给vector<unique_ptr<>> chenyd9027 : 学习了 实战c++中的vector系列--可怕的迭代器失效之二（删除vector中元素） wangshubo1989 : @zouzhipeng1717:每一次erase()，删除元素后面的元素依次向前移动一个位置，所以这... 实战c++中的vector系列--可怕的迭代器失效（vector重新申请内存） wangyaninglm : 受益匪浅，学习了，这个之前用vector 的迭代器时候确实很少注意到 实战c++中的vector系列--可怕的迭代器失效之二（删除vector中元素） zouzhipeng1717 : 在擦除容器的时候，并不会改变vector的容量，那么自然就不会造成容器的重新加载，那么，为何迭代器会...

Recno:: 38
URL:: http://blog.csdn.net/wangshubo1989/article/details/50374914

ParseText::
实战c++中的vector系列--vector的遍历(stl算法、vector迭代器(不要在循环中判断不等于end())、operator[]) - wangshubo1989的博客 - 博客频道 - CSDN.NET wangshubo1989的博客 勿在浮沙筑高台 目录视图 摘要视图 订阅 学院APP首次下载，可得50C币！     欢迎来帮助开源“进步”     当讲师？爱学习？投票攒课吧     认识Atlassian Datacenter产品     深圳小伙伴的福利来啦 实战c++中的vector系列--vector的遍历(stl算法、vector迭代器(不要在循环中判断不等于end())、operator[]) 标签： vector c++ 2015-12-21 22:01 553人阅读 评论 (0) 收藏 举报 分类： C++ （147） 作者同类文章 X 版权声明：本文为博主原创文章，未经博主允许不得转载。 遍历一个vector容器有很多种方法，使用起来也是仁者见仁。 通过索引遍历： for ( i = 0 ; i < v. size (); i ++) { cout << v[i] << " "; } 迭代器遍历： for ( vInt: :const_iterator iter = v. begin (); iter != v. end ();iter++) { cout << *iter << " " ; } 算法遍历： copy(v. begin (), v. end (), ostream_iterator< int >(cout, " " )); 很多书上推荐的是使用算法进行遍历。写了一个简单的程序对上面的三种方法进行了比较： #include<iostream> #include<vector> #include<iterator> #include<algorithm> #include<time.h> #include<windows.h> using namespace std ; typedef vector < int > vInt; void print_vec_operator( const vInt & v) //方法一，采用下标访问 { int i; for (i = 0 ; i<v.size(); i++) { cout << v[i] << " " ; } cout << endl; } void print_vec_iterator( const vInt &v) //方法二，采用迭代器访问 { for (vInt::const_iterator iter = v.begin(); iter != v.end();iter++) { cout << *iter << " " ; } cout << endl; } void print_vec_algorithm( const vInt &v) //方法三，将容器的内容复制到cout绑定的迭代器 { copy(v.begin(), v.end(), ostream_iterator< int >( cout , " " )); cout << endl; } int main() { vInt v; int i; for (i = 0 ; i< 100000 ; i++) { v.push_back(i); } int start_time_print_vec1 = GetTickCount(); print_vec_operator(v); int end_time_print_vec1 = GetTickCount(); int start_time_print_vec2 = GetTickCount(); print_vec_iterator(v); int end_time_print_vec2 = GetTickCount(); int start_time_print_vec3 = GetTickCount(); print_vec_algorithm(v); int end_time_print_vec3 = GetTickCount(); std :: cout << (end_time_print_vec1 - start_time_print_vec1) << endl; std :: cout << (end_time_print_vec2 - start_time_print_vec2) << endl; std :: cout << (end_time_print_vec3 - start_time_print_vec3) << endl; return 0 ; } 当vector初始化10000个元素时，三种方法的效率不相上下，运行几次时间相差无几： //输出： //1718 operator[] //1735 iterator //1797 algorithm 但是当把veector初始化100000的时候，三种方法的效率就有了较大的差距： //输出： //20016 operator[] //32172 iterator //62468 algorithm 再写一个vector里放一个类： #include<iostream> #include<vector> #include<iterator> #include <algorithm> #include <functional> #include<windows.h> class AAA { public : void MakeFull2() { } }; int main() { int nCount = 1000000 ; std :: vector < AAA* > vAAA; vAAA.resize(nCount); for ( int i = 0 ; i < nCount; ++i) { vAAA[i] = new AAA; } // 时间 int start, end; // 测试成员函数调用(std::vector下标访问方式) start = GetTickCount(); size_t count = vAAA.size(); for (size_t i = 0 ; i < count; ++i) vAAA[i]->MakeFull2(); end = GetTickCount(); std :: cout << end - start << std ::endl; // 测试成员函数调用(STL算法方式) start = GetTickCount(); std ::for_each(vAAA.begin(), vAAA.end(), std ::mem_fun< void , AAA>(&AAA::MakeFull2)); end = GetTickCount(); std :: cout << end - start << std ::endl; // 测试成员函数调用(STL迭代器方式) start = GetTickCount(); std :: vector < AAA* > ::iterator itr_end = vAAA.end(); for ( std :: vector < AAA* > ::iterator itr = vAAA.begin(); itr != itr_end; ++itr) (*itr)->MakeFull2(); end = GetTickCount(); std :: cout << end - start << std ::endl; // 测试成员函数调用(STL迭代器方式) start = GetTickCount(); for ( std :: vector < AAA* > ::iterator itr = vAAA.begin(); itr != vAAA.end(); ++itr) (*itr)->MakeFull2(); end = GetTickCount(); std :: cout << end - start << std ::endl; return 0 ; } //输出： //313 oprator[] //62 algorithm //422 iterator //922 iterator 再运行一次，结果为： //296 //63 //594 //1672 这个时候使用algorithm+functional进行遍历效率最高。 个人觉得下标索引的方式总是会效率高于迭代器方式。 下面分析一下两种迭代器方式，为何相差不小呢： 这就要看一下std::vector::end()的原型了： iterator end () _NOEXCEPT { // return iterator for end of mutable sequence return (iterator(this->_Mylast(), &this->_Get_data())); } 就是每次判断itr != vAAA.end()的时候，都要进行重新构造一个迭代器并进行返回，这样当然降低的效率。 上一篇 实战c++中的vector系列--vector的一些异常 下一篇 实战c++中的vector系列--使用sort算法对vector进行排序(对vector<string>排序、使用稳定的排序std::stable_sort()) 顶 2 踩 0 我的同类文章 C++ （147） http://blog.csdn.net 猜你在找 查看评论 * 以上用户言论只代表其个人观点，不代表CSDN网站的观点或立场 个人资料 wangshubo1989 访问： 127085次 积分： 3664 等级： 积分：3664 排名： 第4994名 原创： 212篇 转载： 14篇 译文： 6篇 评论： 153条 文章搜索 博客专栏 实战c++中的vector系列 文章：22篇 阅读：14137 实战c++中的string系列 文章：15篇 阅读：14121 一起学libcef 文章：5篇 阅读：4637 那些年躲过的坑儿 文章：33篇 阅读：37229 浅析C++11新特性 文章：19篇 阅读：12645 C++你所不知道的事儿 文章：4篇 阅读：4206 文章分类 WPF (20) MFC (17) C++ (147) C# (36) DuiLib (4) windows编程 (11) 非技术 (8) libcef (5) 文章存档 2015年12月 (49) 2015年11月 (49) 2015年10月 (36) 2015年09月 (26) 2015年08月 (45) 2015年07月 (22) 2015年06月 (5) 阅读排行 没有躲过的坑--正则表达式截取字符串 (14349) 为何我工作十年，内心仍无比恐慌（腾讯产品总监曹菲） (2485) C\C++编译器的未来.我们还需要C++么? (2168) 浅析C++中的初始化列表（区别赋值和初始化） (1749) 你所不知道的事儿--C++中delete指针后最好赋值为NULL (1529) C++11新特性之 std::array container (1512) 没有躲过的坑--std::string初始化、最快速判断字符串为空 (1466) 没有躲过的坑--指针（内存泄露） (1382) 没有躲过的坑--头文件相互包含（Compiler error C2653: not a class or namespace name） (1266) MVVM设计模式基础知识--NotificationObject类（Prism框架） (1265) 评论排行 为何我工作十年，内心仍无比恐慌（腾讯产品总监曹菲） (9) C++11新特性之 CALLBACKS (5) 一起学libcef--搭建自己的libcef运行环境（Win32程序，错误C2220解决方案） (4) 没有躲过的坑--智能指针陷阱 (4) C++11新特性之 default and delete specifiers (4) C++11新特性之 std::future and std::async (4) 开始使用C++11的几个理由 (4) C++11新特性之 std::array container (3) 微软VS苹果 桌面操作系统的终极一战 (3) 没有躲过的坑--指针（内存泄露） (3) 推荐文章 *App竞品技术分析 （6）热修复 *架构设计：系统间通信（17）——服务治理与Dubbo 中篇（分析） *一款炫酷Loading动画--加载失败 *图解堆算法、链表、栈与队列（多图预警） *Android中ContentProvider组件详解 *Android平台Camera实时滤镜实现方法探讨(九)--磨皮算法探讨(一) 最新评论 C\C++编译器的未来.我们还需要C++么? cosmart : Delphi可以做到跨平台了吧 实战c++中的vector系列--使用sort算法对vector进行排序(对vector<string>排序、使用稳定的排序std::stable_sort()) u010850027 : 没什么值得畏惧，你唯一需要担心的是，你配不上自己的梦想，也辜负了曾经的苦难。 实战c++中的vector系列--vector应用之STL的find、find_if、find_end、find_first_of、find_if_not(C++11) u010850027 : 感谢楼主的分享，学习了`(*∩_∩*)′ 一起学libcef--搭建自己的libcef运行环境（Win32程序，错误C2220解决方案） sinat_27399773 : @wangshubo1989:好像找到原因了，我用的是64位的cef源码，博主的是32位吧，我换回3... 一起学libcef--搭建自己的libcef运行环境（Win32程序，错误C2220解决方案） wangshubo1989 : @sinat_27399773:留邮箱 把我的win32的libcef项目发给你 vs2015的 我... 一起学libcef--搭建自己的libcef运行环境（Win32程序，错误C2220解决方案） sinat_27399773 : 我按你的步骤发现源文件的includ头都报错，然后修改路径后下面的代码还是有错，找不到错误的地方，有... 实战c++中的vector系列--vector<unique_ptr<>>赋值给vector<unique_ptr<>> chenyd9027 : 学习了 实战c++中的vector系列--可怕的迭代器失效之二（删除vector中元素） wangshubo1989 : @zouzhipeng1717:每一次erase()，删除元素后面的元素依次向前移动一个位置，所以这... 实战c++中的vector系列--可怕的迭代器失效（vector重新申请内存） wangyaninglm : 受益匪浅，学习了，这个之前用vector 的迭代器时候确实很少注意到 实战c++中的vector系列--可怕的迭代器失效之二（删除vector中元素） zouzhipeng1717 : 在擦除容器的时候，并不会改变vector的容量，那么自然就不会造成容器的重新加载，那么，为何迭代器会...

Recno:: 39
URL:: http://blog.csdn.net/wangshubo1989/article/details/50382343

ParseText::
实战c++中的vector系列--使用sort算法对vector进行排序(对vector<string>排序、使用稳定的排序std::stable_sort()) - wangshubo1989的博客 - 博客频道 - CSDN.NET wangshubo1989的博客 勿在浮沙筑高台 目录视图 摘要视图 订阅 学院APP首次下载，可得50C币！     欢迎来帮助开源“进步”     当讲师？爱学习？投票攒课吧     认识Atlassian Datacenter产品     深圳小伙伴的福利来啦 实战c++中的vector系列--使用sort算法对vector进行排序(对vector<string>排序、使用稳定的排序std::stable_sort()) 标签： vector c++ 2015-12-22 21:13 556人阅读 评论 (1) 收藏 举报 分类： C++ （147） 作者同类文章 X 版权声明：本文为博主原创文章，未经博主允许不得转载。 写了挺多关于vector的操作了，正好工作中遇到对vector进行排序的问题，这里就讨论一下。 直接使用sort算法，那就先了解一下： template < class RandomAccessIterator> void sort (RandomAccessIterator first, RandomAccessIterator last); template < class RandomAccessIterator, class Compare> void sort (RandomAccessIterator first, RandomAccessIterator last, Compare comp); Sorts the elements in the range [first,last) into ascending order. The elements are compared using operator< for the first version, and comp for the second. Equivalent elements are not guaranteed to keep their original relative order (see stable_sort). 也就是所说的不稳定排序。 直接上代码： #include <iostream> // std::cout #include <algorithm> // std::sort #include <vector> // std::vector #include <string> bool myfunction( int i, int j) { return (i<j); } struct myclass { bool operator () ( int i, int j) { return (i<j); } } myobject; int main() { int myints[] = { 32 , 71 , 12 , 45 , 26 , 80 , 53 , 33 }; std :: vector < int > myvector(myints, myints + 8 ); // 32 71 12 45 26 80 53 33 // using default comparison (operator <) std ::sort(myvector.begin(), myvector.begin() + 4 ); //(12 32 45 71)26 80 53 33 // using function as comp std ::sort(myvector.begin() + 4 , myvector.end(), myfunction); // 12 32 45 71(26 33 53 80) // using object as comp std ::sort(myvector.begin(), myvector.end(), myobject); //(12 26 32 33 45 53 71 80) // print out content: std :: cout << "myvector contains:" ; for ( std :: vector < int > ::iterator it = myvector.begin(); it != myvector.end(); ++it) std :: cout << ' ' << *it; std :: cout << '\n' ; // Sorting the string vector std :: vector < std :: string > stringVec = { "John" , "Bob" , "Joe" , "Zack" , "Randy" }; sort(stringVec.begin(), stringVec.end()); for ( std :: string &s : stringVec) std :: cout << s << " " ; return 0 ; } //输出： myvector contains: 12 26 32 33 45 53 71 80 Bob Joe John Randy Zack 这个时候可以使用std::stable_sort()来实现稳定的排序了： Sorts the elements in the range [first,last) into ascending order, like sort, but stable_sort preserves the relative order of the elements with equivalent values. #include <iostream> // std::cout #include <algorithm> // std::stable_sort #include <vector> // std::vector bool compare_as_ints( double i, double j) { return ( int (i)< int (j)); } int main() { double mydoubles[] = { 3.14 , 1.41 , 2.72 , 4.67 , 1.73 , 1.32 , 1.62 , 2.58 }; std::vector< double > myvector; myvector.assign(mydoubles, mydoubles + 8 ); std::cout << "using default comparison:" ; std::stable_sort(myvector.begin(), myvector.end()); for (std::vector< double >::iterator it = myvector.begin(); it != myvector.end(); ++it) std::cout << ' ' << *it; std::cout << '\n' ; myvector.assign(mydoubles, mydoubles + 8 ); std::cout << "using 'compare_as_ints' :" ; std::stable_sort(myvector.begin(), myvector.end(), compare_as_ints); for (std::vector< double >::iterator it = myvector.begin(); it != myvector.end(); ++it) std::cout << ' ' << *it; std::cout << '\n' ; return 0 ; } //输出： using default comparison: 1.32 1.41 1.62 1.73 2.58 2.72 3.14 4.67 using 'compare_as_ints' : 1.41 1.73 1.32 1.62 2.72 2.58 3.14 4.67 上一篇 实战c++中的vector系列--vector的遍历(stl算法、vector迭代器(不要在循环中判断不等于end())、operator[]) 下一篇 实战c++中的vector系列--vector应用之STL的find、find_if、find_end、find_first_of、find_if_not(C++11) 顶 1 踩 0 我的同类文章 C++ （147） http://blog.csdn.net 猜你在找 查看评论 * 以上用户言论只代表其个人观点，不代表CSDN网站的观点或立场 个人资料 wangshubo1989 访问： 127090次 积分： 3664 等级： 积分：3664 排名： 第4994名 原创： 212篇 转载： 14篇 译文： 6篇 评论： 153条 文章搜索 博客专栏 实战c++中的vector系列 文章：22篇 阅读：14137 实战c++中的string系列 文章：15篇 阅读：14121 一起学libcef 文章：5篇 阅读：4637 那些年躲过的坑儿 文章：33篇 阅读：37229 浅析C++11新特性 文章：19篇 阅读：12645 C++你所不知道的事儿 文章：4篇 阅读：4206 文章分类 WPF (20) MFC (17) C++ (147) C# (36) DuiLib (4) windows编程 (11) 非技术 (8) libcef (5) 文章存档 2015年12月 (49) 2015年11月 (49) 2015年10月 (36) 2015年09月 (26) 2015年08月 (45) 2015年07月 (22) 2015年06月 (5) 阅读排行 没有躲过的坑--正则表达式截取字符串 (14349) 为何我工作十年，内心仍无比恐慌（腾讯产品总监曹菲） (2485) C\C++编译器的未来.我们还需要C++么? (2168) 浅析C++中的初始化列表（区别赋值和初始化） (1749) 你所不知道的事儿--C++中delete指针后最好赋值为NULL (1529) C++11新特性之 std::array container (1512) 没有躲过的坑--std::string初始化、最快速判断字符串为空 (1466) 没有躲过的坑--指针（内存泄露） (1382) 没有躲过的坑--头文件相互包含（Compiler error C2653: not a class or namespace name） (1266) MVVM设计模式基础知识--NotificationObject类（Prism框架） (1265) 评论排行 为何我工作十年，内心仍无比恐慌（腾讯产品总监曹菲） (9) C++11新特性之 CALLBACKS (5) 一起学libcef--搭建自己的libcef运行环境（Win32程序，错误C2220解决方案） (4) 没有躲过的坑--智能指针陷阱 (4) C++11新特性之 default and delete specifiers (4) C++11新特性之 std::future and std::async (4) 开始使用C++11的几个理由 (4) C++11新特性之 std::array container (3) 微软VS苹果 桌面操作系统的终极一战 (3) 没有躲过的坑--指针（内存泄露） (3) 推荐文章 *App竞品技术分析 （6）热修复 *架构设计：系统间通信（17）——服务治理与Dubbo 中篇（分析） *一款炫酷Loading动画--加载失败 *图解堆算法、链表、栈与队列（多图预警） *Android中ContentProvider组件详解 *Android平台Camera实时滤镜实现方法探讨(九)--磨皮算法探讨(一) 最新评论 C\C++编译器的未来.我们还需要C++么? cosmart : Delphi可以做到跨平台了吧 实战c++中的vector系列--使用sort算法对vector进行排序(对vector<string>排序、使用稳定的排序std::stable_sort()) u010850027 : 没什么值得畏惧，你唯一需要担心的是，你配不上自己的梦想，也辜负了曾经的苦难。 实战c++中的vector系列--vector应用之STL的find、find_if、find_end、find_first_of、find_if_not(C++11) u010850027 : 感谢楼主的分享，学习了`(*∩_∩*)′ 一起学libcef--搭建自己的libcef运行环境（Win32程序，错误C2220解决方案） sinat_27399773 : @wangshubo1989:好像找到原因了，我用的是64位的cef源码，博主的是32位吧，我换回3... 一起学libcef--搭建自己的libcef运行环境（Win32程序，错误C2220解决方案） wangshubo1989 : @sinat_27399773:留邮箱 把我的win32的libcef项目发给你 vs2015的 我... 一起学libcef--搭建自己的libcef运行环境（Win32程序，错误C2220解决方案） sinat_27399773 : 我按你的步骤发现源文件的includ头都报错，然后修改路径后下面的代码还是有错，找不到错误的地方，有... 实战c++中的vector系列--vector<unique_ptr<>>赋值给vector<unique_ptr<>> chenyd9027 : 学习了 实战c++中的vector系列--可怕的迭代器失效之二（删除vector中元素） wangshubo1989 : @zouzhipeng1717:每一次erase()，删除元素后面的元素依次向前移动一个位置，所以这... 实战c++中的vector系列--可怕的迭代器失效（vector重新申请内存） wangyaninglm : 受益匪浅，学习了，这个之前用vector 的迭代器时候确实很少注意到 实战c++中的vector系列--可怕的迭代器失效之二（删除vector中元素） zouzhipeng1717 : 在擦除容器的时候，并不会改变vector的容量，那么自然就不会造成容器的重新加载，那么，为何迭代器会...

Recno:: 40
URL:: http://blog.csdn.net/wangshubo1989/article/details/50383216

ParseText::
实战c++中的vector系列--vector应用之STL的find、find_if、find_end、find_first_of、find_if_not(C++11) - wangshubo1989的博客 - 博客频道 - CSDN.NET wangshubo1989的博客 勿在浮沙筑高台 目录视图 摘要视图 订阅 学院APP首次下载，可得50C币！     欢迎来帮助开源“进步”     当讲师？爱学习？投票攒课吧     认识Atlassian Datacenter产品     深圳小伙伴的福利来啦 实战c++中的vector系列--vector应用之STL的find、find_if、find_end、find_first_of、find_if_not(C++11) 标签： vector c++ 2015-12-22 23:33 723人阅读 评论 (1) 收藏 举报 分类： C++ （147） 作者同类文章 X 版权声明：本文为博主原创文章，未经博主允许不得转载。 使用vector容器，即避免不了进行查找，所以今天就罗列一些stl的find算法应用于vector中。 find() Returns an iterator to the first element in the range [first,last) that compares equal to val. If no such element is found, the function returns last. #include <iostream> // std::cout #include <algorithm> // std::find #include <vector> // std::vector int main () { // using std::find with array and pointer: int myints[] = { 10 , 20 , 30 , 40 }; int * p; p = std ::find (myints, myints+ 4 , 30 ); if (p != myints+ 4 ) std :: cout << "Element found in myints: " << *p << '\n' ; else std :: cout << "Element not found in myints\n" ; // using std::find with vector and iterator: std :: vector < int > myvector (myints,myints+ 4 ); std :: vector < int > ::iterator it; it = find (myvector.begin(), myvector.end(), 30 ); if (it != myvector.end()) std :: cout << "Element found in myvector: " << *it << '\n' ; else std :: cout << "Element not found in myvector\n" ; return 0 ; } // 30 30 find_end() Searches the range [first1,last1) for the last occurrence of the sequence defined by [first2,last2), and returns an iterator to its first element, or last1 if no occurrences are found. #include <iostream> // std::cout #include <algorithm> // std::find_end #include <vector> // std::vector bool myfunction ( int i, int j) { return (i==j); } int main () { int myints[] = { 1 , 2 , 3 , 4 , 5 , 1 , 2 , 3 , 4 , 5 }; std :: vector < int > haystack (myints,myints+ 10 ); int needle1[] = { 1 , 2 , 3 }; // using default comparison: std :: vector < int > ::iterator it; it = std ::find_end (haystack.begin(), haystack.end(), needle1, needle1+ 3 ); if (it!=haystack.end()) std :: cout << "needle1 last found at position " << (it-haystack.begin()) << '\n' ; int needle2[] = { 4 , 5 , 1 }; // using predicate comparison: it = std ::find_end (haystack.begin(), haystack.end(), needle2, needle2+ 3 , myfunction); if (it!=haystack.end()) std :: cout << "needle2 last found at position " << (it-haystack.begin()) << '\n' ; return 0 ; } //输出： 5 3 find_if() Returns an iterator to the first element in the range [first,last) for which pred returns true. If no such element is found, the function returns last. #include <iostream> // std::cout #include <algorithm> // std::find_if #include <vector> // std::vector bool IsOdd ( int i) { return ((i% 2 )== 1 ); } int main () { std :: vector < int > myvector; myvector.push_back( 10 ); myvector.push_back( 25 ); myvector.push_back( 40 ); myvector.push_back( 55 ); std :: vector < int > ::iterator it = std ::find_if (myvector.begin(), myvector.end(), IsOdd); std :: cout << "The first odd value is " << *it << '\n' ; return 0 ; } //输出： 25 顺便说一句可以使用lambda表达式代替IsOdd函数，使得更加简洁。 find_first_of() Returns an iterator to the first element in the range [first1,last1) that matches any of the elements in [first2,last2). If no such element is found, the function returns last1. #include <iostream> // std::cout #include <algorithm> // std::find_first_of #include <vector> // std::vector #include <cctype> // std::tolower bool comp_case_insensitive ( char c1, char c2) { return ( std :: tolower (c1)== std :: tolower (c2)); } int main () { int mychars[] = { 'a' , 'b' , 'c' , 'A' , 'B' , 'C' }; std :: vector < char > haystack (mychars,mychars+ 6 ); std :: vector < char > ::iterator it; int needle[] = { 'A' , 'B' , 'C' }; // using default comparison: it = find_first_of (haystack.begin(), haystack.end(), needle, needle+ 3 ); if (it!=haystack.end()) std :: cout << "The first match is: " << *it << '\n' ; // using predicate comparison: it = find_first_of (haystack.begin(), haystack.end(), needle, needle+ 3 , comp_case_insensitive); if (it!=haystack.end()) std :: cout << "The first match is: " << *it << '\n' ; return 0 ; } 输出： A a find_if_not() 最后出厂这个 我们应该重视一些 是C++11才有的方法。个人觉得用处很多，看看官方的描述： Returns an iterator to the first element in the range [first,last) for which pred returns false. If no such element is found, the function returns last. 例子： #include <iostream> // std::cout #include <algorithm> // std::find_if_not #include <array> // std::array int main () { std :: array < int ,5> foo = { 1 , 2 , 3 , 4 , 5 }; std :: array < int ,5> ::iterator it = std ::find_if_not (foo.begin(), foo.end(), []( int i){ return i% 2 ;} ); std :: cout << "The first even value is " << *it << '\n' ; return 0 ; } //输出： 2 最后 再来一个程序： #include <vector> #include <string> #include <algorithm> struct value_t { int a; int b; }; class vector_finder { public : vector_finder( const int a) :m_i_a(a) {} bool operator ()( const std :: vector < struct value_t> ::value_type &value) { return value.a == m_i_a; } private : int m_i_a; }; int main() { std :: vector < struct value_t> my_vector; struct value_t my_value; my_value.a = 11 ; my_value.b = 1000 ; my_vector.push_back(my_value); my_value.a = 12 ; my_value.b = 1000 ; my_vector.push_back(my_value); my_value.a = 13 ; my_value.b = 1000 ; my_vector.push_back(my_value); my_value.a = 14 ; my_value.b = 1000 ; my_vector.push_back(my_value); std :: vector < struct value_t> ::iterator it = my_vector.end(); it = std ::find_if(my_vector.begin(), my_vector.end(), vector_finder( 13 )); if (it == my_vector.end()) printf ( "not found\n" ); else printf ( "found value.a:%d value.b:%d\n" , it->a, it->b); return 0 ; } 最后来一个实战中用到的， vector<string> 中的string的首字母按照字母表进行排序： #include <iostream> // std::cout #include <algorithm> // std::stable_sort #include <vector> // std::vector #include <string> static char ch = 'a' ; bool myfunction(const std ::string& lhs, const std ::string& rhs) { return lhs < rhs ; } bool myfunction2(const std ::string& lhs) { return lhs[ 0 ] == ch ; } int main() { std ::vector< std ::string> myvector ; myvector .push _back( "wo" ) ; myvector .push _back( "wi" ) ; myvector .push _back( "wa" ) ; myvector .push _back( "ao" ) ; myvector .push _back( "bo" ) ; myvector .push _back( "ae" ) ; myvector .push _back( "bv" ) ; myvector .push _back( "cd" ) ; myvector .push _back( "ef" ) ; myvector .push _back( "gd" ) ; myvector .push _back( "ww" ) ; myvector .push _back( "cd" ) ; myvector .push _back( "at" ) ; myvector .push _back( "bt" ) ; myvector .push _back( "ct" ) ; myvector .push _back( "dt" ) ; myvector .push _back( "et" ) ; myvector .push _back( "ft" ) ; myvector .push _back( "gt" ) ; myvector .push _back( "ht" ) ; myvector .push _back( "it" ) ; myvector .push _back( "jt" ) ; myvector .push _back( "kt" ) ; myvector .push _back( "lt" ) ; myvector .push _back( "mt" ) ; myvector .push _back( "nt" ) ; myvector .push _back( "ot" ) ; myvector .push _back( "pt" ) ; myvector .push _back( "qt" ) ; myvector .push _back( "rt" ) ; myvector .push _back( "st" ) ; myvector .push _back( "tt" ) ; myvector .push _back( "ut" ) ; myvector .push _back( "vt" ) ; myvector .push _back( "wt" ) ; myvector .push _back( "xt" ) ; //myvector .push _back( "yt" ) ; myvector .push _back( "zt" ) ; myvector .push _back( "qt" ) ; myvector .push _back( "et" ) ; myvector .push _back( "ee" ) ; std ::stable_sort(myvector .begin (), myvector .end (), myfunction) ; for ( std ::string &s : myvector) std ::cout << s << " " ; std ::cout << std ::endl ; std ::cout << "===============" << std ::endl ; for (int i = 1 ;i < 27; i++) { auto it_begin = std ::find_if(myvector .begin (), myvector .end (), myfunction2) ; auto it_end = std ::find_if_not(it_begin, myvector .end (), myfunction2) ; for (auto i = it_begin ; i != it_end; i++) { std ::cout << *i << " " ; } std ::cout << std ::endl ; ch++ ; } return 0 ; } //输出： ae ao at bo bt bv cd cd ct dt ee ef et et ft gd gt ht it jt kt lt mt nt ot pt qt qt rt st tt ut vt wa wi wo wt ww xt zt =============== ae ao at bo bt bv cd cd ct dt ee ef et et ft gd gt ht it jt kt lt mt nt ot pt qt qt rt st tt ut vt wa wi wo wt ww xt zt 上一篇 实战c++中的vector系列--使用sort算法对vector进行排序(对vector<string>排序、使用稳定的排序std::stable_sort()) 下一篇 实战c++中的vector系列--使用sort算法对vector<unique_ptr<string>>进行排序(sort函数“应输入 2 个参数，却提供了 3 个) 顶 1 踩 0 我的同类文章 C++ （147） http://blog.csdn.net 猜你在找 查看评论 * 以上用户言论只代表其个人观点，不代表CSDN网站的观点或立场 个人资料 wangshubo1989 访问： 127086次 积分： 3664 等级： 积分：3664 排名： 第4994名 原创： 212篇 转载： 14篇 译文： 6篇 评论： 153条 文章搜索 博客专栏 实战c++中的vector系列 文章：22篇 阅读：14137 实战c++中的string系列 文章：15篇 阅读：14121 一起学libcef 文章：5篇 阅读：4637 那些年躲过的坑儿 文章：33篇 阅读：37229 浅析C++11新特性 文章：19篇 阅读：12645 C++你所不知道的事儿 文章：4篇 阅读：4206 文章分类 WPF (20) MFC (17) C++ (147) C# (36) DuiLib (4) windows编程 (11) 非技术 (8) libcef (5) 文章存档 2015年12月 (49) 2015年11月 (49) 2015年10月 (36) 2015年09月 (26) 2015年08月 (45) 2015年07月 (22) 2015年06月 (5) 阅读排行 没有躲过的坑--正则表达式截取字符串 (14349) 为何我工作十年，内心仍无比恐慌（腾讯产品总监曹菲） (2485) C\C++编译器的未来.我们还需要C++么? (2168) 浅析C++中的初始化列表（区别赋值和初始化） (1749) 你所不知道的事儿--C++中delete指针后最好赋值为NULL (1529) C++11新特性之 std::array container (1512) 没有躲过的坑--std::string初始化、最快速判断字符串为空 (1466) 没有躲过的坑--指针（内存泄露） (1382) 没有躲过的坑--头文件相互包含（Compiler error C2653: not a class or namespace name） (1266) MVVM设计模式基础知识--NotificationObject类（Prism框架） (1265) 评论排行 为何我工作十年，内心仍无比恐慌（腾讯产品总监曹菲） (9) C++11新特性之 CALLBACKS (5) 一起学libcef--搭建自己的libcef运行环境（Win32程序，错误C2220解决方案） (4) 没有躲过的坑--智能指针陷阱 (4) C++11新特性之 default and delete specifiers (4) C++11新特性之 std::future and std::async (4) 开始使用C++11的几个理由 (4) C++11新特性之 std::array container (3) 微软VS苹果 桌面操作系统的终极一战 (3) 没有躲过的坑--指针（内存泄露） (3) 推荐文章 *App竞品技术分析 （6）热修复 *架构设计：系统间通信（17）——服务治理与Dubbo 中篇（分析） *一款炫酷Loading动画--加载失败 *图解堆算法、链表、栈与队列（多图预警） *Android中ContentProvider组件详解 *Android平台Camera实时滤镜实现方法探讨(九)--磨皮算法探讨(一) 最新评论 C\C++编译器的未来.我们还需要C++么? cosmart : Delphi可以做到跨平台了吧 实战c++中的vector系列--使用sort算法对vector进行排序(对vector<string>排序、使用稳定的排序std::stable_sort()) u010850027 : 没什么值得畏惧，你唯一需要担心的是，你配不上自己的梦想，也辜负了曾经的苦难。 实战c++中的vector系列--vector应用之STL的find、find_if、find_end、find_first_of、find_if_not(C++11) u010850027 : 感谢楼主的分享，学习了`(*∩_∩*)′ 一起学libcef--搭建自己的libcef运行环境（Win32程序，错误C2220解决方案） sinat_27399773 : @wangshubo1989:好像找到原因了，我用的是64位的cef源码，博主的是32位吧，我换回3... 一起学libcef--搭建自己的libcef运行环境（Win32程序，错误C2220解决方案） wangshubo1989 : @sinat_27399773:留邮箱 把我的win32的libcef项目发给你 vs2015的 我... 一起学libcef--搭建自己的libcef运行环境（Win32程序，错误C2220解决方案） sinat_27399773 : 我按你的步骤发现源文件的includ头都报错，然后修改路径后下面的代码还是有错，找不到错误的地方，有... 实战c++中的vector系列--vector<unique_ptr<>>赋值给vector<unique_ptr<>> chenyd9027 : 学习了 实战c++中的vector系列--可怕的迭代器失效之二（删除vector中元素） wangshubo1989 : @zouzhipeng1717:每一次erase()，删除元素后面的元素依次向前移动一个�

Recno:: 41
URL:: http://blog.csdn.net/wangshubo1989/article/details/50389470

ParseText::
实战c++中的vector系列--使用sort算法对vector<unique_ptr<string>>进行排序(sort函数“应输入 2 个参数，却提供了 3 个) - wangshubo1989的博客 - 博客频道 - CSDN.NET wangshubo1989的博客 勿在浮沙筑高台 目录视图 摘要视图 订阅 学院APP首次下载，可得50C币！     欢迎来帮助开源“进步”     当讲师？爱学习？投票攒课吧     认识Atlassian Datacenter产品     深圳小伙伴的福利来啦 实战c++中的vector系列--使用sort算法对vector<unique_ptr<string>>进行排序(sort函数“应输入 2 个参数，却提供了 3 个) 标签： vector c++ 2015-12-23 20:16 608人阅读 评论 (0) 收藏 举报 分类： C++ （147） 作者同类文章 X 版权声明：本文为博主原创文章，未经博主允许不得转载。 之前博客写了对vector使用sort算法进行的排序，之前也写到过 vector<unique_ptr<string>> 的一些处理方法。 今天就写一下对 vector<unique_ptr<string>> 使用sort算法进行排序。 #include<iostream> #include<string> #include<vector> #include<algorithm> #include<memory> bool compare_int( int &lhs, int & rhs) { return lhs > rhs; } bool compare_first_letter( const std ::unique_ptr< std :: string > &lhs, const std ::unique_ptr< std :: string > & rhs) { return ((*lhs) < (*rhs)); } bool compare_unique_ptr_int( std ::unique_ptr< int > &lhs, std ::unique_ptr< int > & rhs) { return *lhs < *rhs; } //bool compare_by_uniqptr(const unique_ptr<int>& a, // const unique_ptr<int>& b) { // return *a < *b; //} int main() { //sort vector<int> std :: vector < int > int_vector; int_vector.push_back( 5 ); int_vector.push_back( 4 ); int_vector.push_back( 3 ); int_vector.push_back( 6 ); int_vector.push_back( 9 ); for ( int i = 0 ; i < int_vector.size(); i++) { std :: cout << int_vector[i] << " " ; } std :: cout << std ::endl; sort(int_vector.begin(), int_vector.end(), compare_int); for ( int i = 0 ; i < int_vector.size(); i++) { std :: cout << (int_vector[i]) << " " ; } std :: cout << std ::endl; // sort vector<unique_ptr<string>> std :: vector < std ::unique_ptr< std :: string > > unique_ptr_string_vector; std ::unique_ptr< std :: string > unique_ptr_string( new std :: string ( "adr" )); unique_ptr_string_vector.push_back( std ::move(unique_ptr_string)); std ::unique_ptr< std :: string > unique_ptr_string8( new std :: string ( "abc" )); unique_ptr_string_vector.push_back( std ::move(unique_ptr_string8)); std ::unique_ptr< std :: string > unique_ptr_string7( new std :: string ( "abr" )); unique_ptr_string_vector.push_back( std ::move(unique_ptr_string7)); std ::unique_ptr< std :: string > unique_ptr_string6( new std :: string ( "aar" )); unique_ptr_string_vector.push_back( std ::move(unique_ptr_string6)); std ::unique_ptr< std :: string > unique_ptr_string2( new std :: string ( "ebr" )); unique_ptr_string_vector.push_back( std ::move(unique_ptr_string2)); std ::unique_ptr< std :: string > unique_ptr_string3( new std :: string ( "dbr" )); unique_ptr_string_vector.push_back( std ::move(unique_ptr_string3)); std ::unique_ptr< std :: string > unique_ptr_string4( new std :: string ( "cbr" )); unique_ptr_string_vector.push_back( std ::move(unique_ptr_string4)); std ::unique_ptr< std :: string > unique_ptr_string5( new std :: string ( "bbr" )); unique_ptr_string_vector.push_back( std ::move(unique_ptr_string5)); for ( int i = 0 ; i < unique_ptr_string_vector.size(); i++) { std :: cout << *(unique_ptr_string_vector[i]) << " " ; } std :: cout << std ::endl; sort(unique_ptr_string_vector.begin(), unique_ptr_string_vector.end(), compare_first_letter); for ( int i = 0 ; i < unique_ptr_string_vector.size(); i++) { std :: cout << *(unique_ptr_string_vector[i]) << " " ; } std :: cout << std ::endl; //sort vector<unique_ptr<int>> std :: vector < std ::unique_ptr< int > > v; std ::unique_ptr< int > unique_ptr_int( new int ( 5 )); v.push_back( std ::move(unique_ptr_int)); std ::unique_ptr< int > unique_ptr_int1( new int ( 4 )); v.push_back( std ::move(unique_ptr_int1)); std ::unique_ptr< int > unique_ptr_int2( new int ( 3 )); v.push_back( std ::move(unique_ptr_int2)); std ::unique_ptr< int > unique_ptr_int3( new int ( 6 )); v.push_back( std ::move(unique_ptr_int3)); std ::unique_ptr< int > unique_ptr_int4( new int ( 9 )); v.push_back( std ::move(unique_ptr_int4)); for ( int i = 0 ; i < v.size(); i++) { std :: cout << *v[i] << " " ; } std :: cout << std ::endl; //sort(std::make_move_iterator(v.begin()), std::make_move_iterator(v.end()), compare_unique_ptr_int); //for (auto i = v.begin(); i != v.end(); i++) //{ // std::cout << **i << " "; //} //std::cout << std::endl; sort(v.begin(), v.end(), compare_unique_ptr_int); for ( auto i = v.begin(); i != v.end(); i++) { std :: cout << **i << " " ; } std :: cout << std ::endl; return 0 ; } //输出： 5 4 3 6 9 9 6 5 4 3 adr abc abr aar ebr dbr cbr bbr aar abc abr adr bbr cbr dbr ebr 5 4 3 6 9 3 4 5 6 9 其实还很简单的，但是对于在类中使用sort算法进行排序，需要注意一些问题。 你很能会遇到这样的错误： sort函数出错“应输入 2 个参数，却提供了 3 个。 在类中你写了比较函数： bool compare_unique_ptr_int( std: :unique_ptr<int > &lhs, std: :unique_ptr<int > & rhs) { return *lhs < *rhs; } 然后在类的某个成员函数中，使用了sort方法进行排序，第三个参数使用compare_unique_ptr_int函数，这个时候就会出现上面所说的错误。 但是如何改进呢？ 方法有两种： 方法一：把compare_unique_ptr_int函数改为静态方法： static bool compare_unique_ptr_int( std: :unique_ptr<int > &lhs, std: :unique_ptr<int > & rhs) { return *lhs < *rhs; } sort(v. begin (), v. end (), compare_unique_ptr_int); 方法二：使用lambda表达式进行 sort(v. begin (), v. end (), []( std: :unique_ptr<int > &lhs, std: :unique_ptr<int > & rhs)(){ return *lhs < *rhs;}); 这样就大功告成了！！！ 上一篇 实战c++中的vector系列--vector应用之STL的find、find_if、find_end、find_first_of、find_if_not(C++11) 下一篇 实战c++中的vector系列--对vector<自定义类>使用std::find 和 std::find_if 算法 顶 2 踩 0 我的同类文章 C++ （147） http://blog.csdn.net 猜你在找 查看评论 * 以上用户言论只代表其个人观点，不代表CSDN网站的观点或立场 个人资料 wangshubo1989 访问： 127091次 积分： 3664 等级： 积分：3664 排名： 第4994名 原创： 212篇 转载： 14篇 译文： 6篇 评论： 153条 文章搜索 博客专栏 实战c++中的vector系列 文章：22篇 阅读：14137 实战c++中的string系列 文章：15篇 阅读：14121 一起学libcef 文章：5篇 阅读：4637 那些年躲过的坑儿 文章：33篇 阅读：37229 浅析C++11新特性 文章：19篇 阅读：12645 C++你所不知道的事儿 文章：4篇 阅读：4206 文章分类 WPF (20) MFC (17) C++ (147) C# (36) DuiLib (4) windows编程 (11) 非技术 (8) libcef (5) 文章存档 2015年12月 (49) 2015年11月 (49) 2015年10月 (36) 2015年09月 (26) 2015年08月 (45) 2015年07月 (22) 2015年06月 (5) 阅读排行 没有躲过的坑--正则表达式截取字符串 (14349) 为何我工作十年，内心仍无比恐慌（腾讯产品总监曹菲） (2485) C\C++编译器的未来.我们还需要C++么? (2168) 浅析C++中的初始化列表（区别赋值和初始化） (1749) 你所不知道的事儿--C++中delete指针后最好赋值为NULL (1529) C++11新特性之 std::array container (1512) 没有躲过的坑--std::string初始化、最快速判断字符串为空 (1466) 没有躲过的坑--指针（内存泄露） (1382) 没有躲过的坑--头文件相互包含（Compiler error C2653: not a class or namespace name） (1266) MVVM设计模式基础知识--NotificationObject类（Prism框架） (1265) 评论排行 为何我工作十年，内心仍无比恐慌（腾讯产品总监曹菲） (9) C++11新特性之 CALLBACKS (5) 一起学libcef--搭建自己的libcef运行环境（Win32程序，错误C2220解决方案） (4) 没有躲过的坑--智能指针陷阱 (4) C++11新特性之 default and delete specifiers (4) C++11新特性之 std::future and std::async (4) 开始使用C++11的几个理由 (4) C++11新特性之 std::array container (3) 微软VS苹果 桌面操作系统的终极一战 (3) 没有躲过的坑--指针（内存泄露） (3) 推荐文章 *App竞品技术分析 （6）热修复 *架构设计：系统间通信（17）——服务治理与Dubbo 中篇（分析） *一款炫酷Loading动画--加载失败 *图解堆算法、链表、栈与队列（多图预警） *Android中ContentProvider组件详解 *Android平台Camera实时滤镜实现方法探讨(九)--磨皮算法探讨(一) 最新评论 C\C++编译器的未来.我们还需要C++么? cosmart : Delphi可以做到跨平台了吧 实战c++中的vector系列--使用sort算法对vector进行排序(对vector<string>排序、使用稳定的排序std::stable_sort()) u010850027 : 没什么值得畏惧，你唯一需要担心的是，你配不上自己的梦想，也辜负了曾经的苦难。 实战c++中的vector系列--vector应用之STL的find、find_if、find_end、find_first_of、find_if_not(C++11) u010850027 : 感谢楼主的分享，学习了`(*∩_∩*)′ 一起学libcef--搭建自己的libcef运行环境（Win32程序，错误C2220解决方案） sinat_27399773 : @wangshubo1989:好像找到原因了，我用的是64位的cef源码，博主的是32位吧，我换回3... 一起学libcef--搭建自己的libcef运行环境（Win32程序，错误C2220解决方案） wangshubo1989 : @sinat_27399773:留邮箱 把我的win32的libcef项目发给你 vs2015的 我... 一起学libcef--搭建自己的libcef运行环境（Win32程序，错误C2220解决方案） sinat_27399773 : 我按你的步骤发现源文件的includ头都报错，然后修改路径后下面的代码还是有错，找不到错误的地方，有... 实战c++中的vector系列--vector<unique_ptr<>>赋值给vector<unique_ptr<>> chenyd9027 : 学习了 实战c++中的vector系列--可怕的迭代器失效之二（删除vector中元素） wangshubo1989 : @zouzhipeng1717:每一次erase()，删除元素后面的元素依次向前移动一个位置，所以这... 实战c++中的vector系列--可怕的迭代器失效（vector重新申请内存） wangyaninglm : 受益匪浅，学习了，这个之前用vector 的迭代器时候确实很少注意到 实战c++中的vector系列--可怕的迭代器失效之二（删除vector中元素） zouzhipeng1717 : 在擦除容器的时候，并不会改变vector的容量，那么自然就不会造成容器的重新加载，那么，为何迭代器会...

Recno:: 42
URL:: http://blog.csdn.net/wangshubo1989/article/details/50389811

ParseText::
实战c++中的vector系列--对vector<自定义类>使用std::find 和 std::find_if 算法 - wangshubo1989的博客 - 博客频道 - CSDN.NET wangshubo1989的博客 勿在浮沙筑高台 目录视图 摘要视图 订阅 学院APP首次下载，可得50C币！     欢迎来帮助开源“进步”     当讲师？爱学习？投票攒课吧     认识Atlassian Datacenter产品     深圳小伙伴的福利来啦 实战c++中的vector系列--对vector<自定义类>使用std::find 和 std::find_if 算法 标签： vector c++ 2015-12-23 21:19 719人阅读 评论 (0) 收藏 举报 分类： C++ （147） 作者同类文章 X 版权声明：本文为博主原创文章，未经博主允许不得转载。 之前博客讲了一些关于std::find和std::find_ if的一些用法，但是没有讲述对于vector中存储的是自定义的类，那么怎么样使用std::find和std::find_if进行查找呢？ 先定义一个类： class Item { private : std :: string m_ItemId; int m_Price; int m_Count; public : Item( std :: string id, int price, int count): m_ItemId(id), m_Count(count), m_Price(price){} int getCount() const { return m_Count; } std :: string getItemId() const { return m_ItemId; } int getPrice() const { return m_Price; } bool operator ==( const Item & obj2) const { if ( this ->getItemId().compare(obj2.getItemId()) == 0 ) return true ; else return false ; } }; std :: vector <Item> getItemList() { std :: vector <Item> vecOfItems ; vecOfItems.push_back(Item( "D121" , 100 , 2 )); vecOfItems.push_back(Item( "D122" , 12 , 5 )); vecOfItems.push_back(Item( "D123" , 28 , 6 )); vecOfItems.push_back(Item( "D124" , 8 , 10 )); vecOfItems.push_back(Item( "D125" , 99 , 3 )); return vecOfItems; } 接下来就是使用std::find算法了： int main() { std :: vector <Item> vecOfItems = getItemList(); std :: vector <Item> ::iterator it; it = std ::find(vecOfItems.begin(), vecOfItems.end(), Item( "D123" , 99 , 0 )); if (it != vecOfItems.end()) std :: cout << "Found with Price ::" << it->getPrice() << " Count :: " << it->getCount() << std ::endl; else std :: cout << "Item with ID :: D126 not Found" << std ::endl; return 0 ; } //输出： Found with Price :: 28 Count :: 6 但是如果不能使用==的情况下，我们就可以使用find_if解决问题了： 增加函数： bool priceComparision(Item & obj, int y) { if (obj.getPrice() == y) return true ; else return false ; } 就是这样： #include<iostream> #include<vector> #include<string> #include<algorithm> #include<functional> using namespace std ; class Item { private : std :: string m_ItemId; int m_Price; int m_Count; public : Item( std :: string id, int price, int count) : m_ItemId(id), m_Count(count), m_Price(price) {} int getCount() const { return m_Count; } std :: string getItemId() const { return m_ItemId; } int getPrice() const { return m_Price; } bool operator ==( const Item & obj2) const { if ( this ->getItemId().compare(obj2.getItemId()) == 0 ) return true ; else return false ; } }; bool priceComparision(Item & obj, int y) { if (obj.getPrice() == y) return true ; else return false ; } std :: vector <Item> getItemList() { std :: vector <Item> vecOfItems; vecOfItems.push_back(Item( "D121" , 100 , 2 )); vecOfItems.push_back(Item( "D122" , 12 , 5 )); vecOfItems.push_back(Item( "D123" , 28 , 6 )); vecOfItems.push_back(Item( "D124" , 8 , 10 )); vecOfItems.push_back(Item( "D125" , 99 , 3 )); return vecOfItems; } int main() { std :: vector <Item> vecOfItems = getItemList(); std :: vector <Item> ::iterator it; it = std ::find_if(vecOfItems.begin(), vecOfItems.end(), std ::bind(priceComparision, std ::placeholders::_1, 28 )); if (it != vecOfItems.end()) std :: cout << "Item Price ::" << it->getPrice() << " Count :: " << it->getCount() << std ::endl; else std :: cout << "Item not Found" << std ::endl; return 0 ; } 最后还可以使用lambda表达式： std :: vector <Item> vecOfItems = getItemList(); std :: vector <Item> ::iterator it; it = std ::find_if(vecOfItems.begin(), vecOfItems.end(), [](Item const & obj){ return obj.getPrice() == 28 ; } ); if (it != vecOfItems.end()) std :: cout << "Item Price ::" <<it->getPrice()<< " Count :: " <<it->getCount()<< std ::endl; else std :: cout << "Item not Found" << std ::endl; 上一篇 实战c++中的vector系列--使用sort算法对vector<unique_ptr<string>>进行排序(sort函数“应输入 2 个参数，却提供了 3 个) 下一篇 实战c++中的vector系列--再谈vector的insert()方法(都是make_move_iterator惹的祸) 顶 1 踩 0 我的同类文章 C++ （147） http://blog.csdn.net 猜你在找 查看评论 * 以上用户言论只代表其个人观点，不代表CSDN网站的观点或立场 个人资料 wangshubo1989 访问： 127091次 积分： 3664 等级： 积分：3664 排名： 第4994名 原创： 212篇 转载： 14篇 译文： 6篇 评论： 153条 文章搜索 博客专栏 实战c++中的vector系列 文章：22篇 阅读：14137 实战c++中的string系列 文章：15篇 阅读：14121 一起学libcef 文章：5篇 阅读：4637 那些年躲过的坑儿 文章：33篇 阅读：37229 浅析C++11新特性 文章：19篇 阅读：12645 C++你所不知道的事儿 文章：4篇 阅读：4206 文章分类 WPF (20) MFC (17) C++ (147) C# (36) DuiLib (4) windows编程 (11) 非技术 (8) libcef (5) 文章存档 2015年12月 (49) 2015年11月 (49) 2015年10月 (36) 2015年09月 (26) 2015年08月 (45) 2015年07月 (22) 2015年06月 (5) 阅读排行 没有躲过的坑--正则表达式截取字符串 (14349) 为何我工作十年，内心仍无比恐慌（腾讯产品总监曹菲） (2485) C\C++编译器的未来.我们还需要C++么? (2168) 浅析C++中的初始化列表（区别赋值和初始化） (1749) 你所不知道的事儿--C++中delete指针后最好赋值为NULL (1529) C++11新特性之 std::array container (1512) 没有躲过的坑--std::string初始化、最快速判断字符串为空 (1466) 没有躲过的坑--指针（内存泄露） (1382) 没有躲过的坑--头文件相互包含（Compiler error C2653: not a class or namespace name） (1266) MVVM设计模式基础知识--NotificationObject类（Prism框架） (1265) 评论排行 为何我工作十年，内心仍无比恐慌（腾讯产品总监曹菲） (9) C++11新特性之 CALLBACKS (5) 一起学libcef--搭建自己的libcef运行环境（Win32程序，错误C2220解决方案） (4) 没有躲过的坑--智能指针陷阱 (4) C++11新特性之 default and delete specifiers (4) C++11新特性之 std::future and std::async (4) 开始使用C++11的几个理由 (4) C++11新特性之 std::array container (3) 微软VS苹果 桌面操作系统的终极一战 (3) 没有躲过的坑--指针（内存泄露） (3) 推荐文章 *App竞品技术分析 （6）热修复 *架构设计：系统间通信（17）——服务治理与Dubbo 中篇（分析） *一款炫酷Loading动画--加载失败 *图解堆算法、链表、栈与队列（多图预警） *Android中ContentProvider组件详解 *Android平台Camera实时滤镜实现方法探讨(九)--磨皮算法探讨(一) 最新评论 C\C++编译器的未来.我们还需要C++么? cosmart : Delphi可以做到跨平台了吧 实战c++中的vector系列--使用sort算法对vector进行排序(对vector<string>排序、使用稳定的排序std::stable_sort()) u010850027 : 没什么值得畏惧，你唯一需要担心的是，你配不上自己的梦想，也辜负了曾经的苦难。 实战c++中的vector系列--vector应用之STL的find、find_if、find_end、find_first_of、find_if_not(C++11) u010850027 : 感谢楼主的分享，学习了`(*∩_∩*)′ 一起学libcef--搭建自己的libcef运行环境（Win32程序，错误C2220解决方案） sinat_27399773 : @wangshubo1989:好像找到原因了，我用的是64位的cef源码，博主的是32位吧，我换回3... 一起学libcef--搭建自己的libcef运行环境（Win32程序，错误C2220解决方案） wangshubo1989 : @sinat_27399773:留邮箱 把我的win32的libcef项目发给你 vs2015的 我... 一起学libcef--搭建自己的libcef运行环境（Win32程序，错误C2220解决方案） sinat_27399773 : 我按你的步骤发现源文件的includ头都报错，然后修改路径后下面的代码还是有错，找不到错误的地方，有... 实战c++中的vector系列--vector<unique_ptr<>>赋值给vector<unique_ptr<>> chenyd9027 : 学习了 实战c++中的vector系列--可怕的迭代器失效之二（删除vector中元素） wangshubo1989 : @zouzhipeng1717:每一次erase()，删除元素后面的元素依次向前移动一个位置，所以这... 实战c++中的vector系列--可怕的迭代器失效（vector重新申请内存） wangyaninglm : 受益匪浅，学习了，这个之前用vector 的迭代器时候确实很少注意到 实战c++中的vector系列--可怕的迭代器失效之二（删除vector中元素） zouzhipeng1717 : 在擦除容器的时候，并不会改变vector的容量，那么自然就不会造成容器的重新加载，那么，为何迭代器会...

Recno:: 43
URL:: http://blog.csdn.net/wangshubo1989/article/details/50396958

ParseText::
实战c++中的vector系列--再谈vector的insert()方法(都是make_move_iterator惹的祸) - wangshubo1989的博客 - 博客频道 - CSDN.NET wangshubo1989的博客 勿在浮沙筑高台 目录视图 摘要视图 订阅 学院APP首次下载，可得50C币！     欢迎来帮助开源“进步”     当讲师？爱学习？投票攒课吧     认识Atlassian Datacenter产品     深圳小伙伴的福利来啦 实战c++中的vector系列--再谈vector的insert()方法(都是make_move_iterator惹的祸) 标签： vector c++ 2015-12-24 21:33 577人阅读 评论 (0) 收藏 举报 分类： C++ （147） 作者同类文章 X 版权声明：本文为博主原创文章，未经博主允许不得转载。 之前说过了关于vector的insert()方法，把vector B的元素插入到vector A中，vector A中的结果我们可想而知，但是vector B中的元素还会如何？ 看看之前写过的程序： #include <iostream> #include <vector> int main () { std :: vector < int > myvector ( 3 , 100 ); std :: vector < int > ::iterator it; it = myvector.begin(); it = myvector.insert ( it , 200 ); myvector.insert (it, 2 , 300 ); // "it" no longer valid, get a new one: it = myvector.begin(); std :: vector < int > anothervector ( 2 , 400 ); myvector.insert (it+ 2 ,anothervector.begin(),anothervector.end()); int myarray [] = { 501 , 502 , 503 }; myvector.insert (myvector.begin(), myarray, myarray+ 3 ); std :: cout << "myvector contains:" ; for (it=myvector.begin(); it<myvector.end(); it++) std :: cout << ' ' << *it; std :: cout << '\n' ; return 0 ; } 现在关心一下别的：注意是insert后，被insert的vector为多少了： #include <iostream> #include <vector> int main() { std :: vector < int > myvector( 3 , 100 ); std :: vector < int > anothervector( 2 , 400 ); std :: cout << "Before insert myvector is:" ; for ( auto it = myvector.begin(); it<myvector.end(); it++) std :: cout << ' ' << *it; std :: cout << std ::endl; std :: cout << "Before insert anothervector is:" ; for ( auto it = anothervector.begin(); it<anothervector.end(); it++) std :: cout << ' ' << *it; std :: cout << std ::endl; myvector.insert(myvector.end(), anothervector.begin(), anothervector.end()); std :: cout << "After insert myvector is:" ; for ( auto it = myvector.begin(); it<myvector.end(); it++) std :: cout << ' ' << *it; std :: cout << std ::endl; std :: cout << "Now the anothervector is:" ; for ( auto it = anothervector.begin(); it<anothervector.end(); it++) std :: cout << ' ' << *it; std :: cout << std ::endl; int myarray[] = { 501 , 502 , 503 }; myvector.insert(myvector.begin(), myarray, myarray + 3 ); std :: cout << "After insert myarray[] to myvector, myvector is:" ; for ( auto it = myvector.begin(); it<myvector.end(); it++) std :: cout << ' ' << *it; std :: cout << std ::endl; std :: cout << "After insert myarray[] to myvector, myarray[] is:" ; for ( int i = 0 ; i < 3 ; i++) { std :: cout << ' ' << myarray[i]; } return 0 ; } //输出： //Before insert myvector is : 100 100 100 //Before insert anothervector is : 400 400 //After insert myvector is : 100 100 100 400 400 //Now the anothervector is : 400 400 //After insert myarray[] to myvector, myvector is : 501 502 503 100 100 100 400 400 //After insert myarray[] to myvector, myarray[] is : 501 502 503 如果你看到此时，你肯定会在心里骂娘，谁还关心vector B，并且vectorB并没有变化。 现在是时候来点猛药了，vector中放智能指针。 之前博客也讲诉过对于vector的元素为智能指针的时候： #include<iostream> #include<vector> #include <memory> using namespace std ; void display_vector( vector <unique_ptr< int > > &vec); int main() { vector <unique_ptr< int > > vec; unique_ptr< int > s1( new int ( 1 )); unique_ptr< int > s2( new int ( 2 )); unique_ptr< int > s3( new int ( 3 )); unique_ptr< int > s4( new int ( 4 )); vec.push_back( std ::move(s1)); vec.push_back( std ::move(s2)); vec.push_back( std ::move(s3)); vec.push_back( std ::move(s4)); unique_ptr< int > s5( new int ( 5 )); vector <unique_ptr< int > > des_vec; des_vec.push_back( std ::move(s5)); des_vec.insert(des_vec.end(), std ::make_move_iterator(vec.begin()), std ::make_move_iterator(vec.end())); display_vector(des_vec); cout << "now, des_vec size: " << des_vec.size() << endl; cout << "now, vec size: " << vec.size() << endl; //display_vector(vec); cout << "now, vec size: " << vec.size() << endl; for ( int i= 0 ; i<vec.size(); i++) { cout << *vec[i] << " " ; } return 0 ; } void display_vector( vector <unique_ptr< int > > &vec) { for ( auto it = vec.begin(); it != vec.end(); it++) { cout << **it << endl; } } 上面代码会崩溃，原因就是vec被insert后 ，vec变得无效了，我们不能对他做什么。。。。。 但是需要明确的是这不是insert造成的，如果copy也会造成这一的结局，其实罪魁祸首就是 make_move_iterator 再看程序： #include <iostream> #include <list> #include <vector> #include <string> #include <iterator> int main() { std :: list < std :: string > s{ "one" , "two" , "three" }; std :: vector < std :: string > v1(s.begin(), s.end()); // copy std :: vector < std :: string > v2( std ::make_move_iterator(s.begin()), std ::make_move_iterator(s.end())); // move std :: cout << "v1 now holds: " ; for ( auto str : v1) std :: cout << "\"" << str << "\" " ; std :: cout << "\nv2 now holds: " ; for ( auto str : v2) std :: cout << "\"" << str << "\" " ; std :: cout << "\noriginal list now holds: " ; for ( auto str : s) std :: cout << "\"" << str << "\" " ; std :: cout << '\n' ; } //输出： //v1 now holds : "one" "two" "three" //v2 now holds : "one" "two" "three" //original list now holds : "" 最后再上一个官方程序： #include <iostream> // std::cout #include <iterator> // std::make_move_iterator #include <vector> // std::vector #include <string> // std::string #include <algorithm> // std::copy int main() { std :: vector < std :: string > foo( 3 ); std :: vector < std :: string > bar{ "one" , "two" , "three" }; std ::copy(make_move_iterator(bar.begin()), make_move_iterator(bar.end()), foo.begin()); // bar now contains unspecified values; clear it: bar.clear(); std :: cout << "foo:" ; for ( std :: string & x : foo) std :: cout << ' ' << x; std :: cout << '\n' ; return 0 ; } * 需要注意：* * bar.clear();* 因此此时: bar now contains unspecified values; clear it: 上一篇 实战c++中的vector系列--对vector<自定义类>使用std::find 和 std::find_if 算法 下一篇 实战c++中的智能指针unique_ptr系列-- 使用std::unique_ptr代替new operator(错误：‘unique_ptr’ is not a member of ‘std’) 顶 1 踩 0 我的同类文章 C++ （147） http://blog.csdn.net 猜你在找 查看评论 * 以上用户言论只代表其个人观点，不代表CSDN网站的观点或立场 个人资料 wangshubo1989 访问： 127086次 积分： 3664 等级： 积分：3664 排名： 第4994名 原创： 212篇 转载： 14篇 译文： 6篇 评论： 153条 文章搜索 博客专栏 实战c++中的vector系列 文章：22篇 阅读：14137 实战c++中的string系列 文章：15篇 阅读：14121 一起学libcef 文章：5篇 阅读：4637 那些年躲过的坑儿 文章：33篇 阅读：37229 浅析C++11新特性 文章：19篇 阅读：12645 C++你所不知道的事儿 文章：4篇 阅读：4206 文章分类 WPF (20) MFC (17) C++ (147) C# (36) DuiLib (4) windows编程 (11) 非技术 (8) libcef (5) 文章存档 2015年12月 (49) 2015年11月 (49) 2015年10月 (36) 2015年09月 (26) 2015年08月 (45) 2015年07月 (22) 2015年06月 (5) 阅读排行 没有躲过的坑--正则表达式截取字符串 (14349) 为何我工作十年，内心仍无比恐慌（腾讯产品总监曹菲） (2485) C\C++编译器的未来.我们还需要C++么? (2168) 浅析C++中的初始化列表（区别赋值和初始化） (1749) 你所不知道的事儿--C++中delete指针后最好赋值为NULL (1529) C++11新特性之 std::array container (1512) 没有躲过的坑--std::string初始化、最快速判断字符串为空 (1466) 没有躲过的坑--指针（内存泄露） (1382) 没有躲过的坑--头文件相互包含（Compiler error C2653: not a class or namespace name） (1266) MVVM设计模式基础知识--NotificationObject类（Prism框架） (1265) 评论排行 为何我工作十年，内心仍无比恐慌（腾讯产品总监曹菲） (9) C++11新特性之 CALLBACKS (5) 一起学libcef--搭建自己的libcef运行环境（Win32程序，错误C2220解决方案） (4) 没有躲过的坑--智能指针陷阱 (4) C++11新特性之 default and delete specifiers (4) C++11新特性之 std::future and std::async (4) 开始使用C++11的几个理由 (4) C++11新特性之 std::array container (3) 微软VS苹果 桌面操作系统的终极一战 (3) 没有躲过的坑--指针（内存泄露） (3) 推荐文章 *App竞品技术分析 （6）热修复 *架构设计：系统间通信（17）——服务治理与Dubbo 中篇（分析） *一款炫酷Loading动画--加载失败 *图解堆算法、链表、栈与队列（多图预警） *Android中ContentProvider组件详解 *Android平台Camera实时滤镜实现方法探讨(九)--磨皮算法探讨(一) 最新评论 C\C++编译器的未来.我们还需要C++么? cosmart : Delphi可以做到跨平台了吧 实战c++中的vector系列--使用sort算法对vector进行排序(对vector<string>排序、使用稳定的排序std::stable_sort()) u010850027 : 没什么值得畏惧，你唯一需要担心的是，你配不上自己的梦想，也辜负了曾经的苦难。 实战c++中的vector系列--vector应用之STL的find、find_if、find_end、find_first_of、find_if_not(C++11) u010850027 : 感谢楼主的分享，学习了`(*∩_∩*)′ 一起学libcef--搭建自己的libcef运行环境（Win32程序，错误C2220解决方案） sinat_27399773 : @wangshubo1989:好像找到原因了，我用的是64位的cef源码，博主的是32位吧，我换回3... 一起学libcef--搭建自己的libcef运行环境（Win32程序，错误C2220解决方案） wangshubo1989 : @sinat_27399773:留邮箱 把我的win32的libcef项目发给你 vs2015的 我... 一起学libcef--搭建自己的libcef运行环境（Win32程序，错误C2220解决方案） sinat_27399773 : 我按你的步骤发现源文件的includ头都报错，然后修改路径后下面的代码还是有错，找不到错误的地方，有... 实战c++中的vector系列--vector<unique_ptr<>>赋值给vector<unique_ptr<>> chenyd9027 : 学习了 实战c++中的vector系列--可怕的迭代器失效之二（删除vector中元素） wangshubo1989 : @zouzhipeng1717:每一次erase()，删除元素后面的元素依次向前移动一个位置，所以这... 实战c++中的vector系列--可怕的迭代器失效（vector重新申请内存） wangyaninglm : 受益匪浅，学习了，这个之前用vector 的迭代器时候确实很少注意到 实战c++中的vector系列--可怕的迭代器失效之二（删除vector中元素） zouzhipeng1717 : 在擦除容器的时候，并不会改变vector的容量，那么自然就不会造成容器的重新加载，那么，为何迭代器会...

Recno:: 44
URL:: http://blog.csdn.net/wangshubo1989/article/list/2

ParseText::
wangshubo1989的博客 - 博客频道 - CSDN.NET wangshubo1989的博客 勿在浮沙筑高台 目录视图 摘要视图 订阅 学院APP首次下载，可得50C币！     欢迎来帮助开源“进步”     当讲师？爱学习？投票攒课吧     认识Atlassian Datacenter产品     深圳小伙伴的福利来啦 实战c++中的vector系列--vector<unique_ptr<>>作为函数的参数 现在就讨论一下，把vector作为函数的参数进行传递。 也是直接上一段代码：#include #include #include using namespace std; void display_vector(vector<unique_ptr> vec); int main() { vector<unique_ptr<in... 2015-12-17 21:20 阅读 (817) 评论 (0) 实战c++中的vector系列--vector<unique_ptr<>>初始化（所有权转移） C++11为我们提供了智能指针，给我们带来了很多便利的地方。那么如果把unique_ptr作为vector容器的元素呢？形式如出一辙：vector<unique_ptr > vec;但是怎么给vec添加元素呢？看下面：#include #include #include using namespace std; int main() {... 2015-12-17 21:05 阅读 (775) 评论 (0) 实战c++中的vector系列--可怕的迭代器失效之二（删除vector中元素） 有了上一篇博客《实战c++中的vector系列–可怕的迭代器失效（vector重新申请内存）》的基础，这里的内容就显得简单了。直接撸代码：#include #include using namespace std; int main() { vector v; v.push_back(1); v.push_back(2);... 2015-12-16 23:23 阅读 (637) 评论 (2) 实战c++中的vector系列--可怕的迭代器失效（vector重新申请内存） vector给我们提供了很多的方便，但是偶尔也会有陷阱。当不注意的时候，就掉入其中。说到底，还是对vector的机制不够彻底掌握。很轻松的写下这段代码：#include #include using namespace std; int main() { vector v; v.push_back(1); std::vector<i... 2015-12-16 23:05 阅读 (634) 评论 (1) 实战c++中的vector系列--使用vector构造二维数组 二维数组有时候被用到，但是很少有人会使用vector来构造一个二维数组。首先，需要明确的是，在计算机的世界中，根本不存在二维数组，只是使用者的一个概念罢了。其实我们所谓的二维数组也必须是一段连续的内存。很多情况下，我们可以把常规的二维数组用一个vector表示，只要索引对应即可。那么，我若一意孤行呢，我就想vector里面放一个vector呢？#include #incl... 2015-12-16 20:42 阅读 (536) 评论 (0) 实战c++中的vector系列--copy set to vector(别混淆了reserve和resize) stl算法中有个copy函数，我们可以轻松的写出这样的代码：#include #include #include using namespace std; int _tmain(int argc, _TCHAR* argv[]) { double darray[10]={1.0,1.1,1.2,1.3,1.4,1.5,1.6,1.7,... 2015-12-15 23:56 阅读 (633) 评论 (0) 实战c++中的vector系列--assign() push_back() or insert() 之前博客《实战c++中的vector系列–构造、operator=和assign区别》写了关于assign()方法，其中有一条就是: replacing its current contents modifying its size accordingly 就是替换了vector中已经存在的元素。这里就不再说明assign了。push_back故名意思就是在vector末尾追加：void p... 2015-12-15 21:51 阅读 (591) 评论 (0) 实战c++中的vector系列--将迭代器转换为索引 stl的迭代器很方便 用于各种算法。但是一想到vector，我们总是把他当做数组，总喜欢使用下标索引，而不是迭代器。这里有个问题就是如何把迭代器转换为索引：#include typedef std::vector MYARRAY;// This does the trick inline const int iterator_to_index(MYARRAY &a,... 2015-12-15 21:26 阅读 (570) 评论 (0) 实战c++中的vector系列--构造、operator=和assign区别 vector也许是实际过程中使用最多的stl容器，看似简单，其实有很多技巧和陷阱。着重看一看vector的构造，暂时按照C++11：default (1) explicit vector (const allocator_type& alloc = allocator_type());fill (2) explicit vector (size_type n); vect... 2015-12-15 20:48 阅读 (548) 评论 (0) 实战c++中的string系列--不要使用memset初始化string(一定别这么干) 参考链接： http://www.cppblog.com/qinqing1984/archive/2009/08/07/92479.html百度百科第一次这么给力： void *memset(void *s, int ch, size_t n); 函数解释：将s中前n个字节 （typedef unsigned int size_t ）用 ch 替换并返回 s 。 memset：作用是在一段内... 2015-12-14 21:32 阅读 (1105) 评论 (0) 实战c++中的string系列--将string用于switch语句(c++做C#的事儿, switch中break还是return厉害) 作为一个C++程序员，或是出于习惯，或是出于无奈，你多少次这么写：if (!strcmp(pszValue, "Value X")) DoThis(); else if (!strcmp(pszValue, "Value Y")) DoThat(); else if (!strcmp(pszValue, "Value Z")) DoSomethingElse(); else... 2015-12-14 20:57 阅读 (1069) 评论 (0) 实战c++中的string系列--函数返回局部变量string(引用局部string，局部string的.c_str()函数) 当函数返回字符串的时候，我们可以定义返回string和string&。1写一个返回string引用的函数std::string & TestStringReference() { std::string loal_str = "holy shit"; return loal_str; }这个函数当然是错误的，编译器会提示我们： 返回局部变量或临时变量的地址: loal_str 即... 2015-12-13 21:48 阅读 (819) 评论 (0) 实战c++中的string系列--string的连接(+= or append or push_back) string的连接也是经常用到的，string重载了一些运算符： 首先看一看重载+运算符，用于串联两个字符串对象： 源码：template basic_string operator+( const basic_string<C... 2015-12-13 20:15 阅读 (845) 评论 (1) 实战c++中的string系列--string与char*、const char *的转换(data() or c_str()) 在工程中，我们也有很多时候用到string与char*之间的转换，这里有个一我们之前提到的函数 c_str()，看看这个原型：const char *c_str();c_str()函数返回一个指向正规C字符串的指针, 内容与本string串相同. 这就看到了吧，返回值是const char*，这里需要注意一下。1 string转const char* 当然是用到上面所述的方法c_str()：st... 2015-12-13 11:43 阅读 (554) 评论 (0) 实战c++中的string系列--CDuiString和string的转换(duilib中的cduistring) 使用所duilib的人定会知道cduistring类型，先看看这个类是怎么定义的：class UILIB_API CDuiString { public: enum { MAX_LOCAL_STRING_LEN = 127/*63*/ }; CDuiString(); CDuiString(const TCHAR ch);... 2015-12-12 15:46 阅读 (1143) 评论 (0) 232条数据 共16页 首页 上一页 1 2 3 4 5 ... 下一页 尾页 个人资料 wangshubo1989 访问： 127093次 积分： 3664 等级： 积分：3664 排名： 第4994名 原创： 212篇 转载： 14篇 译文： 6篇 评论： 153条 文章搜索 博客专栏 实战c++中的vector系列 文章：22篇 阅读：14137 实战c++中的string系列 文章：15篇 阅读：14121 一起学libcef 文章：5篇 阅读：4637 那些年躲过的坑儿 文章：33篇 阅读：37229 浅析C++11新特性 文章：19篇 阅读：12645 C++你所不知道的事儿 文章：4篇 阅读：4206 文章分类 WPF (20) MFC (17) C++ (147) C# (36) DuiLib (4) windows编程 (11) 非技术 (8) libcef (5) 文章存档 2015年12月 (49) 2015年11月 (49) 2015年10月 (36) 2015年09月 (26) 2015年08月 (45) 2015年07月 (22) 2015年06月 (5) 阅读排行 没有躲过的坑--正则表达式截取字符串 (14349) 为何我工作十年，内心仍无比恐慌（腾讯产品总监曹菲） (2485) C\C++编译器的未来.我们还需要C++么? (2168) 浅析C++中的初始化列表（区别赋值和初始化） (1749) 你所不知道的事儿--C++中delete指针后最好赋值为NULL (1529) C++11新特性之 std::array container (1512) 没有躲过的坑--std::string初始化、最快速判断字符串为空 (1466) 没有躲过的坑--指针（内存泄露） (1382) 没有躲过的坑--头文件相互包含（Compiler error C2653: not a class or namespace name） (1266) MVVM设计模式基础知识--NotificationObject类（Prism框架） (1265) 评论排行 为何我工作十年，内心仍无比恐慌（腾讯产品总监曹菲） (9) C++11新特性之 CALLBACKS (5) 一起学libcef--搭建自己的libcef运行环境（Win32程序，错误C2220解决方案） (4) 没有躲过的坑--智能指针陷阱 (4) C++11新特性之 default and delete specifiers (4) C++11新特性之 std::future and std::async (4) 开始使用C++11的几个理由 (4) C++11新特性之 std::array container (3) 微软VS苹果 桌面操作系统的终极一战 (3) 没有躲过的坑--指针（内存泄露） (3) 推荐文章 *App竞品技术分析 （6）热修复 *架构设计：系统间通信（17）——服务治理与Dubbo 中篇（分析） *一款炫酷Loading动画--加载失败 *图解堆算法、链表、栈与队列（多图预警） *Android中ContentProvider组件详解 *Android平台Camera实时滤镜实现方法探讨(九)--磨皮算法探讨(一) 最新评论 C\C++编译器的未来.我们还需要C++么? cosmart : Delphi可以做到跨平台了吧 实战c++中的vector系列--使用sort算法对vector进行排序(对vector<string>排序、使用稳定的排序std::stable_sort()) u010850027 : 没什么值得畏惧，你唯一需要担心的是，你配不上自己的梦想，也辜负了曾经的苦难。 实战c++中的vector系列--vector应用之STL的find、find_if、find_end、find_first_of、find_if_not(C++11) u010850027 : 感谢楼主的分享，学习了`(*∩_∩*)′ 一起学libcef--搭建自己的libcef运行环境（Win32程序，错误C2220解决方案） sinat_27399773 : @wangshubo1989:好像找到原因了，我用的是64位的cef源码，博主的是32位吧，我换回3... 一起学libcef--搭建自己的libcef运行环境（Win32程序，错误C2220解决方案） wangshubo1989 : @sinat_27399773:留邮箱 把我的win32的libcef项目发给你 vs2015的 我... 一起学libcef--搭建自己的libcef运行环境（Win32程序，错误C2220解决方案） sinat_27399773 : 我按你的步骤发现源文件的includ头都报错，然后修改路径后下面的代码还是有错，找不到错误的地方，有... 实战c++中的vector系列--vector<unique_ptr<>>赋值给vector<unique_ptr<>> chenyd9027 : 学习了 实战c++中的vector系列--可怕的迭代器失效之二（删除vector中元素） wangshubo1989 : @zouzhipeng1717:每一次erase()，删除元素后面的元素依次向前移动一个位置，所以这... 实战c++中的vector系列--可怕的迭代器失效（vector重新申请内存） wangyaninglm : 受益匪浅，学习了，这个之前用vector 的迭代器时候确实很少注意到 实战c++中的vector系列--可怕的迭代器失效之二（删除vector中元素） zouzhipeng1717 : 在擦除容器的时候，并不会改变vector的容量，那么自然就不会造成容器的重新加载，那么，为何迭代器会...

Recno:: 45
URL:: http://blog.csdn.net/wangshubo1989/rss/list

ParseText::


Recno:: 46
URL:: http://blog.csdn.net/zhouzhaoxiong1227/article/details/47973427

ParseText::
《C程序员从校园到职场》带领大家从校园走向职场 - 周兆熊的专栏 - 博客频道 - CSDN.NET 周兆熊的专栏 目录视图 摘要视图 订阅 学院APP首次下载，可得50C币！     欢迎来帮助开源“进步”     当讲师？爱学习？投票攒课吧     认识Atlassian Datacenter产品     深圳小伙伴的福利来啦 [置顶] 《C程序员从校园到职场》带领大家从校园走向职场 2015-08-25 10:31 10860人阅读 评论 (52) 收藏 举报 分类： 杂谈 （113） 作者同类文章 X 版权声明：本文为博主原创文章，未经博主允许不得转载。 七夕节刚过，就有好消息传来：本人新书《 C程序员从校园到职场 》正式出版并在各大电商平台上发售了！ 下面，让我们一起来欣赏一下纸质书的“风采”吧。 本书目录 第 1 章 概述 1.1 C语言的发展历史 1.2 C语言的主要特点 1.3 常用工具软件 1.4 小结 第 2 章 学校到职场 2.1 认清自身不足 2.2 破除错误观念 2.3 工作所需软技能的培养 2.4 小结 第 3 章 程序的样式 3.1 头文件 3.2 源文件 3.3 空格和空行 3.4 大括号 3.5 注释 3.6 小结 第 4 章 变量和函数 4.1 数据类型 4.2 变量及函数 4.3 静态变量及其应用 4.4 小结 第 5 章 内存操作 5.1 memset 和 memcpy 5.2 strcat 和 strncat 5.3 strcpy 和 strncpy 5.4 strcmp 和 strncmp 5.5 小结 第 6 章 文件 6.1 常用文件操作函数 6.2 配置文件 6.3 makefile文件 6.4 小结 第 7 章 指针和结构体 7.1 简介 7.2 示例流程 7.3 示例程序 7.4 程序详解和测试 7.5 小结 第 8 章 算法和协议 8.1 算法及其应用 8.2 协议及其应用 8.3 小结 第 9 章 程序重构 9.1 重构原因 9.2 重构原则 9.3 重构流程 9.4 重构示例 9.5 小结 第 10 章 SQL语句和Shell命令 10.1 SQL语句 10.2 Shell命令 10.3 小结 第 11 章 程序问题排查 11.1 日志 11.2 配置项问题 11.3 时序问题 11.4 变量初始化问题 11.5 数据表索引问题 11.6 小结 参考资料 附录A 同行评审 附录B 我在南邮的 3 年 更多有关本书内容的介绍，请见我之前写的有关本书的宣传文章： (1) 《C程序员：从校园到职场》出版预告(1)：从“高大上”到“柴米油盐” (2) 《C程序员：从校园到职场》出版预告(2)：从“百花齐放”到“一枝独秀” (3) 《C程序员：从校园到职场》出版预告(3)：从“阳春白雪”到“下里巴人” (4) 《C程序员：从校园到职场》出版预告(4)：从“散兵游勇”到“正规部队” (5) 《C程序员：从校园到职场》出版预告(5)：一种情怀，几分感悟 前辈评价 C语言的书虽然已经不少，但像本书这样，不拘泥于知识体系，而是从真实软件项目实践出发来组织内容的却一直空缺。这种身边过来人的经验之谈很多时候对不少人来说，可能比大师名作更有帮助。我相信本书会得到广大C语言程序员的欢迎，与很多从CSDN博客里走出来的著作一样，成为市场上的畅销书。 - -- 刘江， CSDN 总编 和作者在一家公司工作三年，却从未正式谋面，直到看了他在CSDN的博客文章，才惊感身边竟有一位“持续学习，诲人不倦”的优秀IT才俊，他不仅长期坚持通过博客分享自己的成长历程，更重要的是通过互动交流，专业问答等方式，介绍从“莘莘学子”到“IT码农”转变的技术心得，特别是结合IT行业对软件编程的实际要求，介绍软件编程规范、设计方案、管理流程等内容，对指导学生尽快进入企业，适应公司工作要求，有很好的参考价值。 互联网+时代已经到来，正如作者所说“互联网的精神就是开放，就是分享。通过互联网，我们可以认识更多的人，我们可以从他人身上学到很多东西”，也希望读者能够通过本书学有所获，顺利完成从学生到工程师的蜕变，从优秀走向卓越。 - -- 罗圣美，中兴通讯首席架构师 和兆熊相识在CSDN博客。他有一种很强烈的责任感，也很善于总结，他以过来人的身份，为在校学生和职场新人送出了成长路上需要的营养。读他的技术博文，能明显感受到在工程实践中练就的严格、规范，以及对完整开发流程的重视。但他的博文，不同于一般职场人士只局限于在技术层面进行展示，他总能为学习者给出恰如其分的指导。欣闻他的积累即将成为正式的印刷品，有些迫不及待地想看到他要展现的由校园到职场的蜕变路线了。 - -- 贺利坚 ，烟台大学计算机学院副教授，《逆袭大学—传给 IT 学子的正能量》作者 在我所有接触过的朋友里，兆熊是无疑最适合做程序员的。黄易的小说被大家骂的狗血淋头，但其中有一句写浪翻云的话我是很认同：因为极于情，故能极于剑。从兆熊写过的这一系列文章里，抛开技术细节不论，我主要能看到的就是这种专注和执着。 - -- 李智勇，《完美软件开发：方法与逻辑》作者 致谢 自从我入职开始，我就在构思这样一本基于个人经验的技术书籍，如今，之前的这个小小的愿望得以实现了，我的内心的喜悦之情真的是无法用言语来表达。 本书得以与广大的读者朋友们见面，我首先要感谢我的家人，是他们在背后不断地支持我、不断地鼓励我，他们为我免除了生活上的很多后顾之忧，让我能够全身心地投入到本书的写作中；其次，我要感谢人民邮电出版社的陈冀康老师和胡俊英编辑，在将博客文章整理成书的过程中，从章节标题的命名到文字的表情达意，他们都不厌其烦地给我以指导，让我能够及时地对本书的内容进行修改，让本书顺利地呈现在了读者的面前；再次，我要感谢CSDN社区，感谢阅读、评论及支持我的博客的每一个人，感谢通过各种方式与我交流的每一位朋友，你们的支持与鼓励是我坚持写作的动力！ 作者联系方式 科学技术日新月异，新的IT技术层出不穷，本书的出版只是我学习的又一个起点。 IT行业发展到今天，软件种类繁多，不同种类的软件之间差别相当大，没有一种规范适用于所有的软件开发项目。而本书中的内容提炼于作者本人所从事的软件开发工作，因此必然会存在局限性。加之作者本人的水平有限，本书中的内容难免会有所纰漏，还请各位读者和同行海涵。对于大家针对本书提出的宝贵的意见，作者将洗耳恭听并尽量采纳。大家可以通过下面的任何一种方式表达你们的建议，作者保证会在及时给予回复。 微信公众号：zhouzxi CSDN博客：http://blog .csdn .net /zhouzhaoxiong1227?viewmode=contents 独立博客：www .zhouzhaoxiong .com 邮箱：zhouzxi @126 .com QQ（微信）： 245924426 微博：http://weibo .com /zhouzxi?topnav= 1 &wvr= 5 本书试读章节下载 豆瓣上的评论页面 本书网购链接 京东 亚马逊 当当网 china-pub 异步社区 文轩网 上一篇 HDFS简介及用C语言访问HDFS接口操作实践 下一篇 写文件时字段对齐和填充的C代码实现 顶 23 踩 5 我的同类文章 杂谈 （113） http://blog.csdn.net 猜你在找 查看评论 * 以上用户言论只代表其个人观点，不代表CSDN网站的观点或立场 我的微信 与本人单独交流~~ 个人资料 zhouzxi 访问： 574061次 积分： 12297 等级： 积分：12297 排名： 第552名 原创： 359篇 转载： 7篇 译文： 8篇 评论： 1204条 《C程序员从校园到职场》 京东    china-pub    亚马逊    当当网 试读章节    豆瓣 《信息通信技术百科全书》 京东商城    china-pub 博客专栏 一个程序员的成长史 文章：5篇 阅读：3991 IT读者问答 文章：30篇 阅读：31888 软件项目实践中的C语言一瞥 文章：41篇 阅读：62912 我的微博 友情链接 周兆熊的独立博客 周兆熊的微博 周兆熊的GitHub 文章搜索 文章分类 编程 (41) 操作系统 (14) 杂谈 (114) 电子技术 (1) 算法 (4) 行业预测 (5) 设计模式 (5) 软件工程 (3) 计算机网络 (12) 软件项目实践中的C语言一瞥 (55) 经典书籍读后感 (26) 软件研发项目工作总结 (35) 答读者问 (32) 软件项目实践中的SQL语言一瞥 (23) 一个程序员的成长史 (5) 文章存档 2015年12月 (8) 2015年11月 (7) 2015年10月 (2) 2015年09月 (7) 2015年08月 (3) 2015年07月 (14) 2015年06月 (15) 2015年05月 (14) 2015年04月 (12) 2015年03月 (16) 2015年02月 (1) 2014年11月 (5) 2014年10月 (13) 2014年09月 (11) 2014年08月 (17) 2014年07月 (19) 2014年06月 (14) 2014年05月 (14) 2014年04月 (13) 2014年03月 (11) 2014年02月 (2) 2014年01月 (3) 2013年12月 (2) 2013年11月 (1) 2013年10月 (2) 2013年05月 (1) 2013年04月 (2) 2013年03月 (5) 2013年02月 (1) 2013年01月 (5) 2012年12月 (2) 2012年11月 (1) 2012年10月 (3) 2012年09月 (2) 2012年08月 (4) 2012年07月 (5) 2012年06月 (2) 2012年05月 (8) 2012年04月 (18) 2012年03月 (16) 2012年02月 (17) 2012年01月 (7) 2011年12月 (9) 2011年11月 (15) 2011年10月 (25) 阅读排行 《C程序员从校园到职场》带领大家从校园走向职场 (10839) 再见，南邮！别了，南京！ (8062) 读《桥—巴拉克•奥巴马的人生及其崛起》有感 (7395) 学习习惯浅谈(二) (7294) 两年开发工作总结及未来展望 (7120) 软件开发模式 (5909) 我在南邮的三年—保研生涯 (5666) 蚂蚁与蚱蜢(The Ant and the Grasshopper) (5311) 我在南邮的三年—研二生活 (4728) 我在南邮的三年—研三生活 (4471) 推荐文章 *App竞品技术分析 （6）热修复 *架构设计：系统间通信（17）——服务治理与Dubbo 中篇（分析） *一款炫酷Loading动画--加载失败 *图解堆算法、链表、栈与队列（多图预警） *Android中ContentProvider组件详解 *Android平台Camera实时滤镜实现方法探讨(九)--磨皮算法探讨(一) 评论排行 两年开发工作总结及未来展望 (68) 《C程序员从校园到职场》带领大家从校园走向职场 (52) 一个女程序员的故事 (47) 答读者问(8)：有关Java学习的相关问题 (44) 再见，南邮！别了，南京！ (33) 学习习惯浅谈(二) (32) 我与京东的那些事儿 (26) 我在南邮的三年—总结篇 (24) 写博客的那些事儿 (19) 我在南邮的三年—保研生涯 (18) 最新评论 《C程序员从校园到职场》勘误 zhouzxi : 谢谢，请多多支持！ 《C程序员从校园到职场》勘误 zjy15203167987 : 又有了一些收获，多谢分享 《黑客与画家》阅读笔记 zhouzxi : 谢谢。 《C程序员从校园到职场》勘误 ikkmme28206 : 支持一个！ 《黑客与画家》阅读笔记 ikkmme28206 : 支持一个！ 查找栈的增长方向的分析及C代码实现 u013312497 : @zhouzxi:谢谢! 查找栈的增长方向的分析及C代码实现 zhouzxi : 手动写的。 查找栈的增长方向的分析及C代码实现 u013312497 : /*************************************************... 读取配置文件的shell脚本实现 qq_33329066 : 不错，学习了 去除源文件中的重复行的程序流程及其C代码实现 zhouzxi : 这个要看数据量及数据内容，对于一般的小文件，链表已经够用了。

Recno:: 47
URL:: http://blog.csdn.net/zhouzhaoxiong1227/article/details/49755765

ParseText::
部分博客中的代码已放到了GitHub上，欢迎大家下载阅读！ - 周兆熊的专栏 - 博客频道 - CSDN.NET 周兆熊的专栏 目录视图 摘要视图 订阅 学院APP首次下载，可得50C币！     欢迎来帮助开源“进步”     当讲师？爱学习？投票攒课吧     认识Atlassian Datacenter产品     深圳小伙伴的福利来啦 部分博客中的代码已放到了GitHub上，欢迎大家下载阅读！ 2015-11-10 10:05 703人阅读 评论 (0) 收藏 举报 分类： 杂谈 （113） 作者同类文章 X 版权声明：本文为博主原创文章，未经博主允许不得转载。 GitHub上的代码与CSDN博文之间的对应关系为： 代码 博文 https://github.com/zhouzxi/ReadConfig Linux下配置文件读取操作流程及其C代码实现： http://blog.csdn.net/zhouzhaoxiong1227/article/details/45563263 https://github.com/zhouzxi/SimpleLogSystem-Linux Linux下一个简单的日志系统的设计及其C代码实现： http://blog.csdn.net/zhouzhaoxiong1227/article/details/45917613 https://github.com/zhouzxi/SimpleLogSystem-Windows Windows下一个简单的日志系统的C代码实现： http://blog.csdn.net/zhouzhaoxiong1227/article/details/44592819 https://github.com/zhouzxi/ChangeFileSuffix 修改文件后缀的C语言实现： http://blog.csdn.net/zhouzhaoxiong1227/article/details/44491887 https://github.com/zhouzxi/SerialNo C程序中唯一序列号的生成： http://blog.csdn.net/zhouzhaoxiong1227/article/details/28291647 https://github.com/zhouzxi/TestFileDelete Linux下的删除过期文件操作： http://blog.csdn.net/zhouzhaoxiong1227/article/details/38496785 https://github.com/zhouzxi/Sh2Sql Linux下如何将数据库脚本文件从sh格式变为sql格式： http://blog.csdn.net/zhouzhaoxiong1227/article/details/38084031 https://github.com/zhouzxi/DirCreate Linux下的目录创建命令使用实践： http://blog.csdn.net/zhouzhaoxiong1227/article/details/37767005 https://github.com/zhouzxi/Struct2Struct C语言中结构体变量之间赋值： http://blog.csdn.net/zhouzhaoxiong1227/article/details/44783305 https://github.com/zhouzxi/WriteFileHeader 写文件头的算法流程及C代码实现： http://blog.csdn.net/zhouzhaoxiong1227/article/details/44959323 https://github.com/zhouzxi/EncryptPwdAndDecryptPwd 程序中对密码进行加解密的C代码示例： http://blog.csdn.net/zhouzhaoxiong1227/article/details/45046249 https://github.com/zhouzxi/Sleep 程序休眠问题的C代码实现： http://blog.csdn.net/zhouzhaoxiong1227/article/details/45394003 https://github.com/zhouzxi/LockAndUnlock Linux下互斥量加锁与解锁操作的C代码实现： http://blog.csdn.net/zhouzhaoxiong1227/article/details/45599463 https://github.com/zhouzxi/FileNameAndLine Linux下获取代码文件名、代码所在行数及日期时间的C程序实现： http://blog.csdn.net/zhouzhaoxiong1227/article/details/45716153 https://github.com/zhouzxi/GetSecNumBetweenTwoYear Linux下获取当前时间到1970年之前某年份的秒数的C代码实现： http://blog.csdn.net/zhouzhaoxiong1227/article/details/45848241 https://github.com/zhouzxi/CombineSpace 合并字符串中连续的多个空格的C代码实现： http://blog.csdn.net/zhouzhaoxiong1227/article/details/45932891 https://github.com/zhouzxi/BatchReadFile 分批读取文件中数据的程序流程及其C代码实现： http://blog.csdn.net/zhouzhaoxiong1227/article/details/46236117 https://github.com/zhouzxi/LoopCreateTableAndProc 基于ORACLE数据库的循环建表及循环创建存储过程的SQL语句实现： http://blog.csdn.net/zhouzhaoxiong1227/article/details/46344419 https://github.com/zhouzxi/TestSocket socket消息流程介绍及其C代码实现： http://blog.csdn.net/zhouzhaoxiong1227/article/details/46416555 https://github.com/zhouzxi/TimeSpan Linux下时间范围判断的程序流程及其C代码实现： http://blog.csdn.net/zhouzhaoxiong1227/article/details/46534497 https://github.com/zhouzxi/FileMerge Linux下合并前缀相同的文件的程序流程及其C代码实现： http://blog.csdn.net/zhouzhaoxiong1227/article/details/46813985 https://github.com/zhouzxi/WriteLocalFile Linux下按照时间和大小生成新文件的程序流程及其C代码实现： http://blog.csdn.net/zhouzhaoxiong1227/article/details/46990525 https://github.com/zhouzxi/DelExpiredFiles Linux下两种删除过期文件的方法详述： http://blog.csdn.net/zhouzhaoxiong1227/article/details/47124707 https://github.com/zhouzxi/TestAlign 写文件时字段对齐和填充的C代码实现： http://blog.csdn.net/zhouzhaoxiong1227/article/details/48162189 https://github.com/zhouzxi/WriteFileNonStop 目的文件已不在原目录，程序还会继续执行写文件操作吗？： http://blog.csdn.net/zhouzhaoxiong1227/article/details/48524801   我以后写的大部分文章将首先发表在 大师兄社区 里面，欢迎大家继续支持，也欢迎大家来社区提问和写文章。 上一篇 “大师兄”社区(http://www.daxixiong.com/)欢迎你！！！ 下一篇 我的大学之路---《大学之路》读后感 顶 2 踩 0 我的同类文章 杂谈 （113） http://blog.csdn.net 猜你在找 查看评论 * 以上用户言论只代表其个人观点，不代表CSDN网站的观点或立场 我的微信 与本人单独交流~~ 个人资料 zhouzxi 访问： 574063次 积分： 12297 等级： 积分：12297 排名： 第552名 原创： 359篇 转载： 7篇 译文： 8篇 评论： 1204条 《C程序员从校园到职场》 京东    china-pub    亚马逊    当当网 试读章节    豆瓣 《信息通信技术百科全书》 京东商城    china-pub 博客专栏 一个程序员的成长史 文章：5篇 阅读：3991 IT读者问答 文章：30篇 阅读：31888 软件项目实践中的C语言一瞥 文章：41篇 阅读：62912 我的微博 友情链接 周兆熊的独立博客 周兆熊的微博 周兆熊的GitHub 文章搜索 文章分类 编程 (41) 操作系统 (14) 杂谈 (114) 电子技术 (1) 算法 (4) 行业预测 (5) 设计模式 (5) 软件工程 (3) 计算机网络 (12) 软件项目实践中的C语言一瞥 (55) 经典书籍读后感 (26) 软件研发项目工作总结 (35) 答读者问 (32) 软件项目实践中的SQL语言一瞥 (23) 一个程序员的成长史 (5) 文章存档 2015年12月 (8) 2015年11月 (7) 2015年10月 (2) 2015年09月 (7) 2015年08月 (3) 2015年07月 (14) 2015年06月 (15) 2015年05月 (14) 2015年04月 (12) 2015年03月 (16) 2015年02月 (1) 2014年11月 (5) 2014年10月 (13) 2014年09月 (11) 2014年08月 (17) 2014年07月 (19) 2014年06月 (14) 2014年05月 (14) 2014年04月 (13) 2014年03月 (11) 2014年02月 (2) 2014年01月 (3) 2013年12月 (2) 2013年11月 (1) 2013年10月 (2) 2013年05月 (1) 2013年04月 (2) 2013年03月 (5) 2013年02月 (1) 2013年01月 (5) 2012年12月 (2) 2012年11月 (1) 2012年10月 (3) 2012年09月 (2) 2012年08月 (4) 2012年07月 (5) 2012年06月 (2) 2012年05月 (8) 2012年04月 (18) 2012年03月 (16) 2012年02月 (17) 2012年01月 (7) 2011年12月 (9) 2011年11月 (15) 2011年10月 (25) 阅读排行 《C程序员从校园到职场》带领大家从校园走向职场 (10839) 再见，南邮！别了，南京！ (8062) 读《桥—巴拉克•奥巴马的人生及其崛起》有感 (7395) 学习习惯浅谈(二) (7294) 两年开发工作总结及未来展望 (7120) 软件开发模式 (5909) 我在南邮的三年—保研生涯 (5666) 蚂蚁与蚱蜢(The Ant and the Grasshopper) (5311) 我在南邮的三年—研二生活 (4728) 我在南邮的三年—研三生活 (4471) 推荐文章 *App竞品技术分析 （6）热修复 *架构设计：系统间通信（17）——服务治理与Dubbo 中篇（分析） *一款炫酷Loading动画--加载失败 *图解堆算法、链表、栈与队列（多图预警） *Android中ContentProvider组件详解 *Android平台Camera实时滤镜实现方法探讨(九)--磨皮算法探讨(一) 评论排行 两年开发工作总结及未来展望 (68) 《C程序员从校园到职场》带领大家从校园走向职场 (52) 一个女程序员的故事 (47) 答读者问(8)：有关Java学习的相关问题 (44) 再见，南邮！别了，南京！ (33) 学习习惯浅谈(二) (32) 我与京东的那些事儿 (26) 我在南邮的三年—总结篇 (24) 写博客的那些事儿 (19) 我在南邮的三年—保研生涯 (18) 最新评论 《C程序员从校园到职场》勘误 zhouzxi : 谢谢，请多多支持！ 《C程序员从校园到职场》勘误 zjy15203167987 : 又有了一些收获，多谢分享 《黑客与画家》阅读笔记 zhouzxi : 谢谢。 《C程序员从校园到职场》勘误 ikkmme28206 : 支持一个！ 《黑客与画家》阅读笔记 ikkmme28206 : 支持一个！ 查找栈的增长方向的分析及C代码实现 u013312497 : @zhouzxi:谢谢! 查找栈的增长方向的分析及C代码实现 zhouzxi : 手动写的。 查找栈的增长方向的分析及C代码实现 u013312497 : /*************************************************... 读取配置文件的shell脚本实现 qq_33329066 : 不错，学习了 去除源文件中的重复行的程序流程及其C代码实现 zhouzxi : 这个要看数据量及数据内容，对于一般的小文件，链表已经够用了。

Recno:: 48
URL:: http://blog.csdn.net/zhouzhaoxiong1227/article/details/50352944

ParseText::
展示C代码覆盖率的gcovr工具简介及相关命令使用示例 - 周兆熊的专栏 - 博客频道 - CSDN.NET 周兆熊的专栏 目录视图 摘要视图 订阅 学院APP首次下载，可得50C币！     欢迎来帮助开源“进步”     当讲师？爱学习？投票攒课吧     认识Atlassian Datacenter产品     深圳小伙伴的福利来啦 展示C代码覆盖率的gcovr工具简介及相关命令使用示例 2015-12-18 17:09 462人阅读 评论 (0) 收藏 举报 分类： 编程 （40） 作者同类文章 X 版权声明：本文为博主原创文章，未经博主允许不得转载。 (本人正在参加2015博客之星评选，诚邀你来投票，谢谢： http://vote.blog.csdn.net/blogstar2015/candidate?username=zhouzxi ) 最近，因为要展示某项目的单元测试的代码覆盖率，我无意间在网上找到了gcovr工具。使用之后，觉得这个工具相当的不错，于是便写下这篇文章，可供相关的开发人员参考。 简而言之，gcovr是一个将单元测试中的代码覆盖率以多种方式(包括列表方式、XML文件方式、HTML网页方式等)展示出来的工具，目前最新的版本是3.2。gcovr的下载地址是： https://pypi.python.org/pypi/gcovr/ 。 该工具运行在Linux之下，解压后，将scripts目录下的gcovr拷贝到/usr/bin目录下就可以了。 下面以寻找栈的增长方向的FindStackDirection.c程序为例，介绍gcovr的使用方法。 程序源代码为： / ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** * 版权所有 (C)2015, Zhou Zhaoxiong。 * * 文件名称：FindStackDirection.c * 文件标识：无 * 内容摘要：寻找栈的增长方向 * 其它说明：无 * 当前版本：V1.0 * 作 者：Zhou Zhaoxiong * 完成日期：20151218 * ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** / #include <stdio.h> // 重定义数据类型 typedef unsigned char UINT8; typedef signed int INT32; // 函数声明 void FindStackDirection(void); / ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** * 功能描述：主函数 * 输入参数：无 * 输出参数：无 * 返 回 值：无 * 其它说明：无 * 修改日期 版本号 修改人 修改内容 * --------------------------------------------------------------- * 20151218 V1.0 Zhou Zhaoxiong 创建 ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** */ INT32 main() { FindStackDirection(); return 0; } / ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** * 功能描述：查找栈增长方向 * 输入参数：无 * 输出参数：无 * 返 回 值：无 * 其它说明：无 * 修改日期 版本号 修改人 修改内容 * --------------------------------------------------------------- * 20151218 V1.0 Zhou Zhaoxiong 创建 ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** */ void FindStackDirection(void) { UINT8 iStackAddr = 0; // 用于获取栈地址 static UINT8 *pStackAddr = NULL; // 用于存放第一个iStackAddr的地址 if (pStackAddr == NULL) // 第一次进入 { pStackAddr = &iStackAddr; // 保存iStackAddr的地址 FindStackDirection(); // 递归 } else // 第二次进入 { if (&iStackAddr > pStackAddr) // 第二次iStackDirection的地址大于第一次iStackDirection, 那么说明栈增长方向是向上的 { printf("Stack grows up!\n"); } else if (&iStackAddr < pStackAddr) // 第二次iStackDirection的地址小于第一次iStackDirection, 那么说明栈增长方向是向下的 { printf("Stack grows down!\n"); } else { printf("Bad stack!\n"); } } } 1.程序编译及执行 将示例程序上传到Linux机器上，并在程序所在的目录下使用“gcc -fprofile-arcs -ftest-coverage -fPIC -O0 FindStackDirection.c -o FindStackDirection”命令对程序进行编译，生成FindStackDirection.gcno和FindStackDirection文件。 编译命令中的“-fprofile-arcs -ftest-coverage -fPIC”用于产生能够被gcovr命令处理的文件。 接着执行“./FindStackDirection”命令，又生成了FindStackDirection.gcda文件。 2.输出列表形式的代码覆盖率 在程序所在的目录下运行“gcovr -r .”命令，可看到输出结果如下： ------------------------------------------------------------------------------ GCC Code Coverage Report Directory: . ------------------------------------------------------------------------------ File Lines Exec Cover Missing ------------------------------------------------------------------------------ FindStackDirection.c 14 12 85% 65,73 ------------------------------------------------------------------------------ TOTAL 14 12 85% ------------------------------------------------------------------------------ 这就是代码覆盖率报告，我们可以看到，程序运行之后，覆盖了85%的代码。 3.输出分支覆盖率 在程序所在的目录下运行“gcovr -r . –branches”命令，可看到输出结果如下： ------------------------------------------------------------------------------ GCC Code Coverage Report Directory: . ------------------------------------------------------------------------------ File Branches Taken Cover Missing ------------------------------------------------------------------------------ FindStackDirection.c 6 4 66% 63,67 ------------------------------------------------------------------------------ TOTAL 6 4 66% ------------------------------------------------------------------------------ 我们可以看到，程序一共有6个分支，执行了其中的4个。 4.输出展示覆盖率的XML文件 在程序所在的目录下运行“gcovr -r . –xml-pretty”命令，可看到输出结果如下： <?xml version="1.0" ?> <!DOCTYPE coverage SYSTEM 'http://cobertura.sourceforge.net/xml/coverage-03.dtd'> < coverage branch-rate = "0.666666666667" line-rate = "0.857142857143" timestamp = "1450424892" version = "gcovr 3.2" > < sources > < source > . </ source > </ sources > < packages > < package branch-rate = "0.666666666667" complexity = "0.0" line-rate = "0.857142857143" name = "" > < classes > < class branch-rate = "0.666666666667" complexity = "0.0" filename = "FindStackDirection.c" line-rate = "0.857142857143" name = "FindStackDirection_c" > < methods /> < lines > < line branch = "false" hits = "0" number = "65" /> < line branch = "false" hits = "1" number = "34" /> < line branch = "false" hits = "1" number = "35" /> < line branch = "false" hits = "1" number = "37" /> < line branch = "false" hits = "0" number = "73" /> < line branch = "false" hits = "2" number = "76" /> < line branch = "true" condition-coverage = "50% (1/2)" hits = "1" number = "63" > < conditions > < condition coverage = "50%" number = "0" type = "jump" /> </ conditions > </ line > < line branch = "true" condition-coverage = "50% (1/2)" hits = "1" number = "67" > < conditions > < condition coverage = "50%" number = "0" type = "jump" /> </ conditions > </ line > < line branch = "false" hits = "2" number = "52" /> < line branch = "false" hits = "2" number = "53" /> < line branch = "true" condition-coverage = "100% (2/2)" hits = "2" number = "56" > < conditions > < condition coverage = "100%" number = "0" type = "jump" /> </ conditions > </ line > < line branch = "false" hits = "1" number = "58" /> < line branch = "false" hits = "1" number = "59" /> < line branch = "false" hits = "1" number = "69" /> </ lines > </ class > </ classes > </ package > </ packages > </ coverage > 我们可以看到，命令的执行结果是输出了XML格式的代码覆盖率报告。 5.输出展示覆盖率的HTML文件 在程序所在的目录下运行“gcovr -r . –html -o FindStackDirection.html”命令，可看到在当前目录下生成了FindStackDirection.html文件。用浏览器打开，其内容如下图所示： 这个HTML文件以图形化的方式直观地展示了代码的覆盖率。 我们还可以添加“–html-details”选项为代码工程中的每个文件生成一个独立的web页。例如，我们在程序所在的目录下运行“gcovr -r . –html –html-details -o FindStackDirection2.html”命令，可看到在当前目录下生成了FindStackDirection2.html文件和FindStackDirection2.FindStackDirection.c.html文件。用浏览器打开FindStackDirection2.html文件，其内容如下图所示： 可以看到，页面上的“FindStackDirection.c”文字有一条下划线，单击该文字，出现的一个新的页面，其内容如下图所示： 可以看到，某些代码行前面有数字，表示该行运行的次数。如“if (pStackAddr == NULL)”行运行了2次，“pStackAddr = &iStackAddr;”行运行了1次。 6.更多的gcovr命令 前面展示了部分经常用到的gcovr命令，更详细的gcovr命令及对命令的介绍请参考此文档： http://gcovr.com/guide.pdf 。 7.总结 如果大家要查看自己所编写的C代码在执行过程中的代码覆盖率，那么gcovr工具就是一个相当不错的选择。 下面是两个网址，大家可以通过它们对gcovr有一个更加深入的了解： (1) gcovr官网： http://gcovr.com/ (2) 如何利用gcovr生成代码覆盖率的趋势图： http://www.cnblogs.com/jackyim/p/3772306.html 最后再啰嗦几句，gcovr是一个用Python编写的开源软件，大小只有几十KB，但功能强大。让我们一起向开发该软件的前辈们致敬！ 上一篇 《黑客与画家》阅读笔记 下一篇 Linux中在主机上实现对备机上目录及文件的操作的C代码实现 顶 1 踩 0 我的同类文章 编程 （40） http://blog.csdn.net 猜你在找 查看评论 * 以上用户言论只代表其个人观点，不代表CSDN网站的观点或立场 我的微信 与本人单独交流~~ 个人资料 zhouzxi 访问： 574058次 积分： 12297 等级： 积分：12297 排名： 第552名 原创： 359篇 转载： 7篇 译文： 8篇 评论： 1204条 《C程序员从校园到职场》 京东    china-pub    亚马逊    当当网 试读章节    豆瓣 《信息通信技术百科全书》 京东商城    china-pub 博客专栏 一个程序员的成长史 文章：5篇 阅读：3991 IT读者问答 文章：30篇 阅读：31888 软件项目实践中的C语言一瞥 文章：41篇 阅读：62912 我的微博 友情链接 周兆熊的独立博客 周兆熊的微博 周兆熊的GitHub 文章搜索 文章分类 编程 (41) 操作系统 (14) 杂谈 (114) 电子技术 (1) 算法 (4) 行业预测 (5) 设计模式 (5) 软件工程 (3) 计算机网络 (12) 软件项目实践中的C语言一瞥 (55) 经典书籍读后感 (26) 软件研发项目工作总结 (35) 答读者问 (32) 软件项目实践中的SQL语言一瞥 (23) 一个程序员的成长史 (5) 阅读排行 《C程序员从校园到职场》带领大家从校园走向职场 (10839) 再见，南邮！别了，南京！ (8062) 读《桥—巴拉克•奥巴马的人生及其崛起》有感 (7395) 学习习惯浅谈(二) (7294) 两年开发工作总结及未来展望 (7120) 软件开发模式 (5909) 我在南邮的三年—保研生涯 (5666) 蚂蚁与蚱蜢(The Ant and the Grasshopper) (5311) 我在南邮的三年—研二生活 (4728) 我在南邮的三年—研三生活 (4471) 推荐文章 *App竞品技术分析 （6）热修复 *架构设计：系统间通信（17）——服务治理与Dubbo 中篇（分析） *一款炫酷Loading动画--加载失败 *图解堆算法、链表、栈与队列（多图预警） *Android中ContentProvider组件详解 *Android平台Camera实时滤镜实现方法探讨(九)--磨皮算法探讨(一) 评论排行 两年开发工作总结及未来展望 (68) 《C程序员从校园到职场》带领大家从校园走向职场 (52) 一个女程序员的故事 (47) 答读者问(8)：有关Java学习的相关问题 (44) 再见，南邮！别了，南京！ (33) 学习习惯浅谈(二) (32) 我与京东的那些事儿 (26) 我在南邮的三年—总结篇 (24) 写博客的那些事儿 (19) 我在南邮的三年—保研生涯 (18) 最新评论 《C程序员从校园到职场》勘误 zhouzxi : 谢谢，请多多支持！ 《C程序员从校园到职场》勘误 zjy15203167987 : 又有了一些收获，多谢分享 《黑客与画家》阅读笔记 zhouzxi : 谢谢。 《C程序员从校园到职场》勘误 ikkmme28206 : 支持一个！ 《黑客与画家》阅读笔记 ikkmme28206 : 支持一个！ 查找栈的增长方向的分析及C代码实现 u013312497 : @zhouzxi:谢谢! 查找栈的增长方向的分析及C代码实现 zhouzxi : 手动写的。 查找栈的增长方向的分析及C代码实现 u013312497 : /*************************************************... 读取配置文件的shell脚本实现 qq_33329066 : 不错，学习了 去除源文件中的重复行的程序流程及其C代码实现 zhouzxi : 这个要看数据量及数据内容，对于一般的小文件，链表已经够用了。

Recno:: 49
URL:: http://c.csdnimg.cn/comm_ask/js/apps/ask_float_block.js

ParseText::


Recno:: 50
URL:: http://c.csdnimg.cn/comm_ask/js/libs/prettify.js

ParseText::


Recno:: 51
URL:: http://c.csdnimg.cn/comm_ask/js/libs/showdown.js

ParseText::


Recno:: 52
URL:: http://c.csdnimg.cn/comm_ask/js/libs/wmd.js

ParseText::


Recno:: 53
URL:: http://c.csdnimg.cn/rabbit/search-service/main.js

ParseText::


Recno:: 54
URL:: http://creatim.qtmojo.cn/td/delay.min.js

ParseText::
/*!
*description: delay for AllyesDeliver
*email:lei_ding@allyes.com
*date:2013.12.1
*version:2.1
*/
!function(a){var b,c,d;"undefined"!=typeof AllyesDeliver&&(d=function(b){a.document.write(b)},b=a.allyes_inter||0,c=AllyesDeliver.cdnSrc("delay.min.js"),++b<5?(a.allyes_inter=b,d('<script type="text/javascript" data-belong="allyes" src="'+c+'"></script>')):(d("</div>"),b=null,c=null,a.allyes_inter=null,AllyesDeliver.checking()))}(window);

Recno:: 55
URL:: http://csdnimg.cn/jobreco/job_reco.js

ParseText::


Recno:: 56
URL:: http://csdnimg.cn/public/common/libs/jquery/jquery-1.9.1.min.js

ParseText::


Recno:: 57
URL:: http://my.csdn.net/NoMasp

ParseText::
我的CSDN 首页 技术问答 JOB 个人主页 消息中心 我的C币 发私信 关注 35 关注 1577 粉丝 nomasp 计算机软件 | 学生 | 柯于旺 | 中国 | 男 脚踏实地，全力以赴。博客：http://blog.csdn.net/nomasp V1 博客 V1 下载 V1 论坛 V1 CODE V1 高校 C币 0 勋章 发表的博客 发布的帖子 贡献的资源 详细资料 最新动态 熟悉的领域 专业技能 教育经历 工作经历 联系方式 电子邮箱： 手机号码： QQ号码： 微信号： 我的全部动态 显示更多 对Ta感兴趣的人 最近一周被访问了 次 Ta的关系 关注： 35 人 被关注： 1577 人

Recno:: 58
URL:: http://my.csdn.net/qing_gee

ParseText::
我的CSDN 首页 技术问答 JOB 个人主页 消息中心 我的C币 发私信 关注 15 关注 382 粉丝 沉默王二 计算机软件 | 总监 | 马伟青 | 中国-河南省-洛阳市 | 男 兴趣：读书，写博客。 癖好：偷偷的瞥两眼美女，哈哈！ 格言：对自己负责，对父母感恩！ 信条：人生总是要拼的，无论未来如何，把握当下，踏踏实实一步步走向人生之巅！ V1 博客 V1 下载 V1 论坛 V1 CODE V1 高校 C币 0 勋章 发表的博客 发布的帖子 贡献的资源 详细资料 最新动态 熟悉的领域 专业技能 教育经历 工作经历 联系方式 电子邮箱： 手机号码： QQ号码： 微信号： 我的全部动态 显示更多 对Ta感兴趣的人 最近一周被访问了 次 Ta的关系 关注： 15 人 被关注： 382 人

Recno:: 59
URL:: http://my.csdn.net/sheismylife

ParseText::
我的CSDN 首页 技术问答 JOB 个人主页 消息中心 我的C币 发私信 关注 150 关注 3092 粉丝 csfreebird 互联网·电子商务 | 乐视控股大数据部-技术总监 | 中国-北京-朝阳区 | http://csfreebird.blogspot.com is my English blog V1 博客 V1 下载 V1 论坛 V1 CODE V1 高校 C币 0 勋章 发表的博客 发布的帖子 贡献的资源 详细资料 最新动态 熟悉的领域 专业技能 教育经历 工作经历 联系方式 电子邮箱： 手机号码： QQ号码： 微信号： 我的全部动态 显示更多 对Ta感兴趣的人 最近一周被访问了 次 Ta的关系 关注： 150 人 被关注： 3092 人

Recno:: 60
URL:: http://my.csdn.net/wangshubo1989

ParseText::
我的CSDN 首页 技术问答 JOB 个人主页 消息中心 我的C币 发私信 关注 51 关注 152 粉丝 博览群书1989 国防/军队 | software engineer | 中国-北京-朝阳区 | software engineer V1 博客 V1 下载 V1 论坛 V1 CODE V1 高校 C币 0 勋章 发表的博客 发布的帖子 贡献的资源 详细资料 最新动态 熟悉的领域 专业技能 教育经历 工作经历 联系方式 电子邮箱： 手机号码： QQ号码： 微信号： 我的全部动态 显示更多 对Ta感兴趣的人 最近一周被访问了 次 Ta的关系 关注： 51 人 被关注： 152 人

Recno:: 61
URL:: http://static.blog.csdn.net/scripts/category.js

ParseText::
﻿
$(function()
{
   
        var aCategory = $(".category_r label"),
            aClose = $(".category_r").find(".J_close");
        aCategory.click(function () {
            if ($(this).find(".subItem").is(":hidden")) {
                //close all
                var thisClickText = $(this).attr("onclick");

                $.each(aCategory, function (i) {
                    var thisCategory = $(aCategory[i]);
                    var thisCategoryText = thisCategory.attr("onclick");
                   
                    if (thisCategoryText != thisClickText)
                    {
                        if (!thisCategory.find(".subItem").is(":hidden")) {
                            thisCategory.find(".arrow-up").hide().end()
                                .find(".arrow-down").show();
                            thisCategory.find(".subItem").hide();
                        }
                    }
                });

                $(this).find(".arrow-up").show().end()
                        .find(".arrow-down").hide();
                $(this).find(".subItem").show();

                //$("#body").css("overflow", "visible");
                //$("#main").css("overflow", "visible");               
            }
            else {
                $(this).find(".arrow-up").hide().end()
                       .find(".arrow-down").show();
                $(this).find(".subItem").hide();

               // $("#body").css("overflow", "hidden");
               // $("#main").css("overflow", "hidden");
            }
        });
        aClose.click(function () {
            $(this).parents(".subItem").hide()
                    .siblings(".arrow-up").hide()
                    .siblings(".arrow-down").show();

            //$("#body").css("overflow", "hidden");
            //$("#main").css("overflow", "hidden");

            return false;
        });

     $(".similar_c_t label span").click(function () {         
         $(".similar_cur").removeClass("similar_cur");
         $(this).parent().addClass("similar_cur");
     });
})

function GetCategoryArticles(id,username,type,aid)
{
    var topid = "top_" + id;

    if (type == "top") {
        var objtop = $("#" + topid +" li");
        if (objtop.length > 0)
        {
            return;
        }
    }
    var url = "/" + username + "/svc/GetCategoryArticleList?id=" + id + "&type="+ type;
	//url="http://dev.blog.csdn.net:5391"+url;
	$.get(url, function (res) {	  

	    if (type == "top")
	    {
	        var objtop = $("#" + topid);
	        objtop.html("");	       
	        $(res).each(function (i) {
	            var obj = res[i];
	            if (aid != obj.articleid) {	             
	                var articleurl = "http://blog.csdn.net/" + username + "/article/details/" + obj.articleid;
	                var aritcleid = "top_aritcle_" + obj.articleid + Math.random().toString().replace("0.");
	                objtop.append("<li class=\"tracking-ad\" data-mod=\"popu_140\"><em>•</em><a href='" + articleurl + "'  id='" + aritcleid + "' target=\"_blank\"></a></li> ");
	                $("#" + aritcleid).text(obj.title);
	                $("#" + aritcleid).attr("title",obj.title);
	            }
	        });

	        var count = $(objtop.parent().parent().find("em")[0]).text().replace("（", "").replace("）", "");
	        if (parseInt(count) > 5)
	        {
	            var moreurl = objtop.parent().find(".subItem_t a").attr("href");
	            objtop.append("<li style=\"padding-left: 300px;\"><a href='" + moreurl + "' target=\"_blank\">更多</a></li>");
	        }

	    }
	    else if (type == "foot")
	    {	       	       
	        var objfootleft = $(".similar_list.fl");
	        var objfootright = $(".similar_list.fr");

	        objfootleft.html("");
	        objfootright.html("");

	        var j = 0;

	        $.each(res, function (i) {	            
	            var obj = res[i];
	            if (aid != obj.articleid) {
	                var articleurl = "http://blog.csdn.net/" + username + "/article/details/" + obj.articleid;
	                var aritcleid = "foot_aritcle_" + obj.articleid + Math.random().toString().replace("0.");

	                var html = "<li><em>•</em><a href='" + articleurl + "'  id='" + aritcleid + "' target=\"_blank\"></a></li> ";
	                if (j % 2 == 1) {
	                    objfootright.append(html);
	                }
	                else {
	                    objfootleft.append(html);
	                }
	                $("#" + aritcleid).text(obj.title);
	                $("#" + aritcleid).attr("title",obj.title);
	                j++;

	                $(".similar_article").show();
	            }
	        });

	        var count = $(".similar_cur span em").text().replace("（", "").replace("）", "");
	        if (parseInt(count) > 10) {
	            var moreurl ="";
	            $.each($(".subItem_t a"), function (i) {
	                if($(this).attr("href").toString().indexOf(id)>-1)
	                {
	                    moreurl = $(this).attr("href");	                    
	                }
	            });
	            if (moreurl != "") {
	                objfootright.append("<li style=\"padding-left: 200px;\"><a href='" + moreurl + "' target=\"_blank\">更多</a></li>");
	            }
	        }
	    }
	});
}

Recno:: 62
URL:: http://static.blog.csdn.net/scripts/comment.js

ParseText::
﻿var list = []; //评论列表
var editorId = "#comment_content";
var verifycodeId = "#img_verifycode";
var listId = "#comment_list";

$(document).ready(init_comment);

function init_comment() {
    load_comment_form();

    editor = $(editorId);

    var editor_inter = null;
    if (editor.length > 0) {
       // var v = ["html", "objc", "javascript", "css", "php", "csharp", "cpp", "java", "python", "ruby", "vb", "delphi", "sql", "plain"];
       // var k = ["HTML/XML","Objective-C", "JavaScript", "CSS", "PHP", "C#", "C++", "Java", "Python", "Ruby", "Visual Basic", "Delphi", "SQL", "其它"];
       // for (var i = 0; i < v.length; i++) {
      //      $("#lang_list").append('<a href="#' + v[i] + '">' + k[i] + '</a>');
        // }
        $("#lang_list").append('<a class="long_name" href="#html">HTML/XML</a><a class="long_name" href="#objc">objective-c</a><a class="zhong_name" href="#delphi">Delphi</a><a  class="zhong_name" href="#ruby">Ruby</a><a href="#php">PHP</a><a class="duan_name" href="#csharp">C#</a><a style=" border-right: none;"  class="duan_name" href="#cpp">C++</a><a style=" border-bottom:none;"class="long_name" href="#javascript">JavaScript</a><a style=" border-bottom:none;" class="long_name" href="#vb">Visual Basic</a><a style=" border-bottom:none;" class="zhong_name" href="#python">Python</a><a style=" border-bottom:none;" class="zhong_name" href="#java">Java</a><a style="border-bottom:none;" class="duan_name" href="#css">CSS</a><a style="border-bottom:none;" class="duan_name" href="#sql">SQL</a><a style="border:none;"  class="duan_name" href="#plain">其它</a>');
        editor.focus(function () {
            editor_inter = setInterval(function () {
                commentTip("还能输入" + (1000 - editor.val().length) + "个字符");
            }, 200);
        }).blur(function () {
            if (editor_inter) clearInterval(editor_inter);
        });
    }

    //加载列表
    loadList(1);
}
function noComments() {
    $(listId).html('<br />&nbsp;&nbsp;暂无评论<br /><br /><div class="clear"></div>');
}
function loadList(pageIndex, isSub) {
    if (commentscount == 0) {
        noComments();
        return;
    }
    pageIndex = parseInt(pageIndex) || 1;

    $("#comments_bar").html("正在加载评论...");
    //var cmtUrl = "../../comment/list/" + fileName + "?page=" + (pageIndex || 1);
    var url = location.href.toString().split('/');
    var cmtUrl = "http://"+url[2]+"/"+url[3]+"/comment/list/" + fileName + "?page=" + (pageIndex || 1);
    if (isSub) cmtUrl += "&_" + Math.random();
    $.get(cmtUrl, function (json) {

        if (!json) {
            noComments();
            return;
        }
        var data = (typeof json == 'object') ? json : eval("(" + json + ")");
        if (isSub) list = data.list;
        else list = list.concat(data.list);

        var listHtml = '';

        //构造主题
        var topics = getTopics(list);

        var total = data.total > 0 ? data.total : topics.length;
        //组装HTM
        for (var i = 0; i < topics.length; i++) {
            var comment = topics[i];
            var layer = total - i;

            listHtml += getItemHtml(comment, layer);
        }
        listHtml += '<div class="clear"></div>';
        //输出列表
        $(listId).html(listHtml);
        //高亮评论中的代码段
        dp.SyntaxHighlighter.HighlightAll('code2');
        //展示昵称
        new CNick(listId + ' a.username').showNickname();

        //分页处理
        if (data.page.PageIndex >= data.page.PageCount) {
            $("#comment_bar").hide();
        } else {
            $("#comment_bar").html('<div id="load_comments" page="' + (pageIndex + 1) + '">查看更多评论</div>');
        }
        //添加按钮事件
        setBtnEvent();
    });
};

//获取评论主题
function getTopics(list) {
    var topics = [];
    for (var i = 0; i < list.length; i++) {
        var t = list[i];
        if (t.ParentId == 0) {
            t.Replies = getReplies(t, list);
            topics.push(t);
        }
    }
    return topics;
}
//获取评论回复
function getReplies(item, list) {
    var replies = [];
    for (var i = 0; i < list.length; i++) {
        var r = list[i];
        if (r.ParentId == item.CommentId) {
            r.Replies = getReplies(r, list);
            replies.push(r);
        }
    }
    return replies;
}
//获取评论的HTML
function getItemHtml(comment, index, floor, deep) {
    if (!deep) deep = 0;
    var sty = deep > 3 ? ' style="margin-left:0;"' : '';
    var html = '<dl class="comment_item comment_' + (comment.ParentId > 0 ? "reply" : "topic") + '" id="comment_item_{id}"' + sty + '>' +
		'<dt class="comment_head" floor=' + (floor || index) + '>' + (comment.ParentId > 0 ? "Re:" : index + '楼') + ' <span class="user">';

    if (comment.UserName != null && comment.UserName != '')
        html += '<a class="username" href="/' + comment.UserName + '" target="_blank">' + comment.UserName + '</a>';
    else
        html += '[游客]';

    html += " <span class='ptime'>" + comment.PostTime + "发表</span> ";
    html += ' <a href="#reply" class="cmt_btn reply" title="回复">[回复]</a> <span class="comment_manage" style="display:none;" commentid={id} username={username}> <a href="#quote" class="cmt_btn quote" title="引用">[引用]</a> <a href="#report" class="cmt_btn report" title="举报">[举报]</a>';
    if (username == currentUserName || comment.UserName == currentUserName) html += ' <a href="#delete" class="cmt_btn delete" title="删除">[删除]</a>';
    html += '</span></dt>';
    html += '<dd class="comment_userface"><a href="/' + comment.UserName + '" target="_blank"><img src="' + comment.Userface + '" width="40" height="40" /></a></dd>';
    html += '<dd class="comment_body">' + replaceUBBToHTML(comment) + '</dd>';
    html = html.replace(/\{id\}/g, comment.CommentId).replace(/\{username\}/g, comment.UserName);

    if (comment.Replies != null) {
        for (var j = 0; j < comment.Replies.length; j++) {
            html += getItemHtml(comment.Replies[j], j + 1, index, deep + 1);
        }
    }
    html += "</dl>";

    return html;
}
//获取评论对象
function getComment(commentId, list) {
    for (var i = 0; i < list.length; i++) {
        var comment = list[i];
        if (comment.CommentId == commentId)
            return comment;
    }
    return null;
}
function setBtnEvent() {

    $("#load_comments").click(function () {
        var page = $(this).attr("page");
        loadList(page);
    });

    //评论按钮点击
    $(".comment_head a").click(function () {
        var action = $(this).attr("href");

        action = action.substring(action.lastIndexOf('#'));

        var commentId = $(this).parent().attr("commentid");
        switch (action) {
            case "#reply":
                if (currentUserName) {
                    commentId = $(".comment_manage", $(this).parent()).attr("commentid");
                    replyComment(commentId, list);
                    setEditorFocus();
                }
                return true;
            case "#quote":
                if (currentUserName) {
                    quoteComment(commentId, list);
                    setEditorFocus();
                }
                return true;
            case "#report":
                reportComment(commentId, this);
                break;
            case "#delete":
                deleteComment(commentId);
                break;
            default:
                return true;
        }
        return false;
    });

    $(".comment_item").mouseover(function () {
        $(".comment_manage", $(this)).eq(0).show();
    }).mouseout(function () {
        $(".comment_manage", $(this)).eq(0).hide();
    });
}
/*使评论框获得焦点*/
function setEditorFocus() {
    var val = editor.val();
    editor.val('');
    editor.focus();
    editor.val(val);
}
//引用评论
function quoteComment(commentId, list) {
    var comment = getComment(commentId, list);
    var content = comment.Content;
    if (comment.Content.length > 50) {
        content = comment.Content.substring(0, 50) + "...";
    }
    editor.val("[quote=" + (comment.UserName == null ? "游客" : comment.UserName) + "]" + content + "[/quote]\r\n");
}
//回复评论
function replyComment(commentId, list) {
    var comment = getComment(commentId, list);
    editor.val('[reply]' + comment.UserName + "[/reply]\r\n");
    $("#comment_replyId").val(commentId);
}
//举报评论
function reportComment(commentId, e) {
    report(commentId, 3, e);
}
//删除评论
function deleteComment(commentId) {
    if (!confirm("你确定要删除这篇评论吗？")) return;

    var delUrl = blog_address + "/comment/delete?commentid=" + commentId + "&filename=" + fileName;
    $.get(delUrl, function (data) {
        if (data.result == 1) {
            $("#comment_item_" + commentId).hide().remove();
        } else {
            alert("你没有删除该评论的权限！");
        }
    });
}
//替换评论的UBB代码
function replaceUBBToHTML(comment) {
    var content = $.trim(comment.Content);

    var re = /\[code=([\w#\.]+)\]([\s\S]*?)\[\/code\]/ig;

    var codelist = [];
    while ((mc = re.exec(content)) != null) {
        codelist.push(mc[0]);
        content = content.replace(mc[0], "--code--");
    }
    content = replaceQuote(content);
    //content = content.replace(/\[e(\d+)\]/g, "<img src=\"" + static_host + "/images/emotions/e$1.gif\"\/>");
    content = content.replace(/\[reply]([\s\S]*?)\[\/reply\][\r\n]{0,2}/gi, "回复$1：");
    content = content.replace(/\[url=([^\]]+)]([\s\S]*?)\[\/url\]/gi, '<a href="$1" target="_blank">$2</a>');
    content = content.replace(/\[img(=([^\]]+))?]([\s\S]*?)\[\/img\]/gi, '<img src="$3" style="max-width:400px;max-height:200px;" border="0" title="$2" />');
    //content = content.replace(/\[(\/?)(b|i|u|p)\]/ig, "<$1$2>");
    content = content.replace(/\r?\n/ig, "<br />");

    if (codelist.length > 0) {
        var re1 = /--code--/ig;
        var i = 0;
        while ((mc = re1.exec(content)) != null) {
            content = content.replace(mc[0], codelist[i]);
            i++;
        }
    }
    content = content.replace(/\[code=([\w#\.]+)\]([\s\S]*?)\[\/code\]/ig, function (m0, m1, m2) {
        if ($.trim(m2) == "") return '';
        return '<pre name="code2" class="' + m1 + '">' + m2 + '</pre>';
    });
    return content;
}
//替换评论的引用
function replaceQuote(str) {
    var m = /\[quote=([^\]]+)]([\s\S]*)\[\/quote\]/gi.exec(str);
    if (m) {
        return str.replace(m[0], '<fieldset><legend>引用“' + m[1] + '”的评论：</legend>' + replaceQuote(m[2]) + '</fieldset>');
    } else {
        return str;
    }
}



function load_comment_form() {
    var un = getcookie("UserName").toLowerCase();
    if (islock) {
        $("#comment_form").html("<div class='notice'>该文章已被禁止评论！</div>");
    } else if (currentUserName || (un != null&&un!=""&&un!=undefined)) {
        var html = '<a name="commentbox"></a><a name="reply"></a><a name="quote"></a><form action="/' + username + '/comment/submit?id=' + fileName + '" method="post" onsubmit="return subform(this);">' +
		'<div class="commentform"><div class="panel_head">发表评论</div>' +
		'<ul><li class="left">用 户 名：</li><li class="right">' + currentUserName + '</li></ul>' +
		'<ul><li class="left">评论内容：</li><li class="right" style="position:relative;">' +
		'<div id="ubbtools">' +
		'<a href="#insertcode" code="code"><img src="' + static_host + '/images/ubb/code.gif" border="0" alt="插入代码" title="插入代码"/></a>' +
		'</div>' +
		'<div id="lang_list" style="position: absolute; top: 28px; left: 0px; display: none;"></div>' +
		'<textarea class="comment_content" name="comment_content" id="comment_content" style="width: 400px; height: 200px;"></textarea>' +
		'</li></ul>' +
        '<ul><input type="hidden" id="comment_replyId" name="comment_replyId" />' +
		'<input type="hidden" id="comment_userId" name="comment_userId" value="521203" />' +
		'<input type="hidden" id="commentId" name="commentId" value="" />';		

        if (isBole)
        {
            html += '<input type="checkbox" value="1" id="boleattohome" name="boleattohome" />推荐到首页';
        }
        
        html+= '<input type="submit" class="comment_btn" value="提交" />&nbsp;&nbsp;<span id="tip_comment" style="color: Red; display: none;"></span>' +
		'</ul></div></form>';

        $("#comment_form").html(html);
    } else {
        var curl = encodeURIComponent(location.href);
        $("#comment_form").html('<div class="guest_link">您还没有登录,请' +
		//'<a href="javascript:void(0);" onclick="javascript:csdn.showLogin(function (dat) {js_logined(dat.data.userName);});">[登录]</a>或' +
        '<a href="javascript:void(0);" onclick="javascript:loginbox();">[登录]</a>或' +
		'<a href="http://passport.csdn.net/account/register?from=' + curl + '">[注册]</a></div>');
    }
    ubb_event(); 
}

function getcookie(name) {
    var cookie_start = document.cookie.indexOf(name);
    var cookie_end = document.cookie.indexOf(";", cookie_start);
    return cookie_start == -1 ? '' : unescape(document.cookie.substring(cookie_start + name.length + 1, (cookie_end > cookie_start ? cookie_end : document.cookie.length)));
}

var c_doing = false;
function subform(e) {
    if (c_doing) return false;
    var content = $.trim($(editorId).val());
    if (content == "") {
        commentTip("评论内容没有填写!");
        return false;
    } else if (content.length > 1000) {
        commentTip("评论内容太长了，不能超过1000个字符！");
        return false;
    }
    var commentId = $("#commentId").val();
    commentTip("正在发表评论...");
    var beginTime = new Date();
    $(editorId).attr("disabled", true);
    $("button[type=submit]", e).attr("disabled", true);
    c_doing = true;
    $.ajax({
        type: "POST",
        url: $(e).attr("action"),
        data: {
            "commentid": commentId,
            "content": content,
            "replyId": $("#comment_replyId").val(),
            "boleattohome": $("#boleattohome").val()
        },
        success: function (data) {
            c_doing = false;
            commentTip(data.content);
            if (data.result) {
                var rcommentid=$("#comment_replyId").val()
                $(editorId).val('');
                $("#comment_replyId,#comment_verifycode").val('');

                commentscount++;
                loadList(1, true);
                $(editorId).attr("disabled", false);
                $("button[type=submit]", e).attr("disabled", false);

                commentTip("发表成功！评论耗时:" + (new Date() - beginTime) + "毫秒")

                if (rcommentid!=undefined && rcommentid != "")
                {
                    $("html,body").animate({ scrollTop: $("#comment_item_" + rcommentid).offset().top }, 1000);
                }
                
            }
        }
    });
    return false;
}

//操作提示
var _c_t;
function commentTip(message) {
    $("#tip_comment").html(message).show();
    clearTimeout(_c_t);
    _c_t = setTimeout(function () {
        $("#tip_comment").hide();
    }, 10000);
}

function ubb_event() {
    //ubb按钮事件
    $("#ubbtools").children().click(function () {
        var selectedValue = editor.selection();
        editor.focus();
        var code = $(this).attr("code");
        switch (code) {
            case "code":
                var lang_list = $("#lang_list");
                lang_list.show();
                lang_list.children().each(function () {
                    $(this).unbind("click").click(function () {
                        editor.val("[code=" + $.trim(this.href.split('#')[1]) + "]\n" + selectedValue + "\n[/code]");
                        lang_list.hide();
                    });
                });
                editor.click(function (e) {
                    lang_list.hide();
                });
                break;
            default:
                editor.val("[" + code + "]" + selectedValue + "[/" + code + "]");
                break;
        }
        return false;
    });
}

Recno:: 63
URL:: http://v3.jiathis.com/code/jia.js

ParseText::
/* (c) 2015 JiaThis Inc. 0727*/
eval(function(p,a,c,k,e,r){e=function(c){return(c<a?'':e(parseInt(c/a)))+((c=c%a)>35?String.fromCharCode(c+29):c.toString(36))};if(!''.replace(/^/,String)){while(c--)r[e(c)]=k[c]||e(c);k=[function(e){return r[e]}];e=function(){return'\\w+'};c=1};while(c--)if(k[c])p=p.replace(new RegExp('\\b'+e(c)+'\\b','g'),k[c]);return p}('I 1a={fM:"1D://1f.1J.N",6s:"1D://l.1J.N",4G:"1D://s.1J.N",fL:27,1X:"",fJ:1c,1M:5D,5H:"fG",5R:"5W",4j:"",3p:[],4g:{\'fB\':\'一键分享,fA\',\'fz\':\'猜你喜欢,fy\',\'fr\':\'复制网址,fp\',\'fo\':\'收藏夹,fk\',\'fg\':\'打印,dy\',\'fe\':\'邮件,fd\',\'fc\':\'2A空间,f7,5P.2z.1V.N\',\'f4\':\'新浪微博,f3,f0.N\',\'eZ\':\'微信,eY,2j,2j.1V.N\',\'eX\':\'腾讯微博,eW,t.1V.N\',\'eV\':\'搜狐微博,eU,t.6K.N\',\'eT\':\'网易微博,eS,t.5c.N\',\'eR\':\'人人网,eP,1f.2W.N\',\'eN\':\'开心网,eJ,1f.3n.N\',\'eG\':\'eE+,eD,ez.15.3U.N\',\'ey\':\'易信,ew,1f.ev.eu\',\'et\':\'阿里巴巴,es,1f.en.N\',\'el\':\'豆瓣,db,1f.3C.N\',\'ek\':\'朋友网,ej,2Y.ei.N\',\'eh\':\'麦库记事,eg\',\'ef\':\'百度搜藏,ee,ed.35.N\',\'eb\':\'淘江湖,e6,i.6A.N\',\'e4\':\'有道云笔记,e3,e2.6L.N\',\'dZ\':\'手机快传,dV\',\'dT\':\'天涯社区,dS,4M.dR.cn\',\'dQ\':\'飞信,fx,dP.dO.dN.cn\',\'dK\':\'百度贴吧,dH,5b.35.N\',\'dG\':\'轻笔记,dF\',\'dE\':\'凤凰微博,dC,t.5i.N\',\'dB\':\'优士网,dA,1f.dz.cn\',\'dq\':\'饭否,ff,dn.N\',\'dm\':\'点点网,dl,1f.dk.N\',\'dj\':\'明道,df,1f.dc.N\',\'d9\':\'中搜v商,d5,d4.d3\',\'cV\':\'谷歌,cS\',\'cR\':\'谷歌cQ,cP\',\'cN\':\'有道书签,cM,5T.6L.N\',\'cL\':\'2A好友,cI,cH,5X.1V.N\',\'cG\':\'2A书签,cF,5T.1V.N\',\'cD\':\'3x,66\',\'cC\':\'cB,cy\',\'cw\':\'花瓣网,ct,cs.N\',\'cr\':\'堆糖,dt,1f.cq.N\',\'cp\':\'摇篮微博,cl\',\'ck\':\'cg收藏,cd\',\'cc\':\'百度空间,cb,ca.6I.35.N\',\'c9\':\'c8邮箱,c7,6O.3U.N\',\'c4\':\'c3邮箱,c0\',\'bY\':\'雪球,bX,bG.N\',\'bE\':\'和讯,bv,bu.73.N\',\'bs\':\'南方微博,br\',\'bq\':\'4O邮箱,bp\',\'bo\':\'4R邮箱,bn\',\'bl\':\'爱分享,77\',\'bg\':\'bf+分享,be,bd,i.bc.N.cn\',\'bb\':\'翼友圈,b9,b8.4R.cn\',\'b7\':\'移动微博,b6\',\'b5\':\'人民微博,b4,t.aY.N.cn\',\'aV\':\'中金微博,aU\',\'aT\':\'新华微博,aQ\',\'aP\':\'财迷,cm,t.aN.N\',\'aM\':\'谷歌翻译,aJ\',\'aG\':\'推他,aF,1f.aE.N\',\'aD\':\'猫扑推客,aC,aB.aA.N\',\'az\':\'嘀咕网,ay,ax.N\',\'aw\':\'鲜果,av\',\'au\':\'发现啦,ar\',\'aq\':\'赶牛网,aj,1f.ai.N\',\'ah\':\'米聊,af\',\'ae\':\'搜狐随身看,ad\',\'ac\':\'51社区,ab,aa.51.N\',\'a8\':\'凤凰快博,a7,k.5i.N\',\'a5\':\'法律微博,a0\',\'9X\':\'光明网,9W\',\'9S\':\'雷猴网,9R,9Q.N\',\'9O\':\'和讯微博,9M,t.73.N\',\'9L\':\'游戏江湖,9K,6I.5c.N\',\'9J\':\'玛撒网,9I\',\'9H\':\'宾至网,9G,1f.9F.N\',\'9E\':\'9C,6j,1f.6j.N\',\'9B\':\'9A,9z,t.co\',\'9x\':\'9w,6r,1f.6r.N\',\'9v\':\'9u,9s\',\'9r\':\'9q,6z,1f.6z.N\',\'9p\':\'9o,9n,9l.N\',\'9k\':\'若邻网,9j\',\'9i\':\'乐收,9h,9g.9f.N\',\'9e\':\'挖客网,9d\',\'9c\':\'创业邦,9b,u.9a.cn\',\'95\':\'救救地球,94\',\'93\':\'抽屉网,92\',\'91\':\'递客网,8Z,1f.8W.cn\',\'8U\':\'豆瓣9点,8T,9.3C.N\',\'8S\':\'美丽说,8R\',\'8Q\':\'蘑菇街,8P,8O.cn\',\'8N\':\'天际网,8M,8L.8I.N\',\'8H\':\'8G网,8F,4M.8E.cn\',\'8D\':\'易集网,8C,1f.8A.N\',\'8z\':\'8y在线转换,8x\',\'8w\':\'友好打印,8v\',\'8u\':\'8t验证,8r\',\'8p\':\'8o.5d,8n,8m.5d\',\'8l\':\'8k,5h,5h.N\',\'8j\':\'8i.5k,6O.5k\',\'8h\':\'8g,8f\',\'8e\':\'8d,8c\',\'8a\':\'89,88\',\'87\':\'86,85\',\'83\':\'82,81\',\'7Y\':\'7X,7W\',\'7V\':\'7T,7S\',\'7R\':\'7Q,7P\',\'7O\':\'7N,7M\',\'7K\':\'7J.fm,7I.fm\',\'7H\':\'7G,7F\',\'7E\':\'7B,5S,1f.5S.N\',\'7A\':\'7z 7y,7x\',\'7w\':\'7v,7u\',\'7s\':\'7r,7q\',\'7p\':\'7n,7m\',\'7k\':\'7i,7h\',\'7g\':\'7f,7e\'}};(Z(){I z=18.2q(\'1W\');1i(I i=0,ci;ci=z[i++];){L(/1J.N/.1T(ci.1q)){1a.1X=ci.1q.6m(0,ci.1q.7d("/"));ci.1q.2B(/(1M)=([^&]+)/g,Z(a,p,v){1a[p]=v})}}I d=18,4i=d.7c=="7b",dd=d.6x,db=d.3r,m=25.6B,4o=!!d.6D,4p=2m.2n.3t(),24=d.2q("24")[0]||dd,6J=1p.1K.3u,1h=(2v(2N)==\'28\')?{}:2N,29=1a.5H,1L=1a.4g,6T=d.7a,4E=1c,6W=Z(){14{h:(4i?dd:db).79,w:(4i?dd:db).78}},3z=Z(){14{t:m(dd.2R,db.2R),l:m(dd.4K,db.4K)}},75=Z(a){I r={t:0,l:0},71=/bk/.1T(4p),2x=Z(t,l){r.l+=l,r.t+=t},p=a,4D=3z();L(a&&a!=db){L(a.6v){I b=a.6v();L(b.1t==b.6a){I g=a.11.1d;a.11.1d="2p";b.1t=b.1t-a.1Y;a.11.1d=g}2x(b.1t+4D.t-dd.7j,b.1S+4D.l-dd.7l)}13{I c=d.7o;40(p){2x(p.61,p.5Z);I e=c.7t(p,27);L(71){I f=1r(e.3W("26-1S-1o"),10)||0,bt=1r(e.3W("26-1t-1o"),10)||0;2x(bt,f);L(p!=a&&e.3W("2G")!="7C"){2x(bt,f)}}p=p.7D}p=a.3l;40(p&&p!=db){2x(-p.2R,-p.4K);p=p.3l}}}14 r},1A=Z(o,t,a){I b=d.2I(t||"17");1i(I p 1O o){p=="11"?(b[p].6b=o[p]):(b[p]=o[p])}14(a||db).7L(b,(a||db).2M)},5J=Z(a,b){I c={};1i(I i=0;i<a.1u;i++){c[a[i]]=1}1i(I i=0;i<b.1u;i++){L(!c[b[i]]){a.5G(b[i]);c[b[i]]=1}}14 a},5F=Z(a,b,c){I d=2O 3G();d.7U(d.3F()+c*3e);18.5A=a+"="+5z(b)+(c?";7Z="+d.80():"")+";3D=/"},5x=Z(a){I b=18.5A;I c=b.1w(a+"=");L(c!=-1){c+=a.1u+1;I d=b.1w(";",c);L(d==-1){d=b.1u}14 84(b.6m(c,d))}14""},3d=Z(w,d,a){w/=d;w=25.4J(w*10)/10;L((w+"").1u>=4){w=25.4J(w)}14 w+a},5s=Z(a){I d=(""+a).1k(".").3b().1u;L(8b(a)){14\'0\'}13{L(d<4){14 25.4J(a)}13{L(d<7){14 3d(a,3e,"K")}13{L(d<10){14 3d(a,5p,"M")}13{14 3d(a,4A,"B")}}}}},4w=Z(X){I A={},D=(2O 3G()).3F(),E,F,G,H,V=2k(X);L(V!==28&&V.1w("|")>-1){E=V.1k(\'|\');F=E[0];G=E[1];H=25.8q((D-G)/3e);A.1y=1r(F);A.8s=G;A.5a=H;14 A}14 1c},37=Z(){I A=5x("58"),B={};L(A){B=3O("("+A+")")}14 B},56=Z(U,S,T){I A=37();L(A[U]){8B A[U]}$1g.1y=1r(S);A[U]=\'"\'+1r(S)+\'|\'+T+\'"\';5F("58",4Z(A),0)},4Z=Z(o){I A=\'\',B=\'\';1i(I k 1O o){A+=B+\'"\'+k+\'":\'+o[k];B=!B?\',\':B}14"{"+A+"}"},3I=Z(a,b){1i(I k 1O a){I c=d.2o(a[k]);L(c){c.1b=\'累计分享\'+b+\'次\';c.1v=5s(b)}}},4U=Z(){I u=1h.8J;L(u){L(!(u 8K 4T)){u=[u]}1i(I a=0;a<u.1u;a++){I c=u[a];L(c.2l&&c.4B&&c.15){c.2f=c.15=c.15.2B(/ /g,"");c.2f=c.2f.1k("//").2P().1k("?").3b().1k("/").3b().3t();1a.3p[c.2f]=c;1a.4g[29+c.2f]=c.2l+\',\'+c.2f+\',\'+c.2f}}}},3X=Z(a,b,c){I d="";do{d=a[b++]}40(b<a.1u&&(!1L[29+d]||c[d]));L(c[d]||!1L[29+d]){d=\'\';1i(I k 1O 1L){k=k.2E(3);L(!c[k]&&1L[29+k]){d=k;76}}}14 d},4H=Z(){4U();I e=1h.8V||{},4s=1h.8X||1c;e.8Y&&1A({1q:1a.1X+"/70.90.2w",2e:"2b-8"},"1W",24);I f="2z,3M,96,2j,2W,3n,97,98,3C,6A,99,66,4O,6K,5b,35,3U",6S=1a.4j||f,3T=5J(6S.1k(","),f.1k(",")),2Z={},22={},h=d.2q("a"),6N=2k(1h.15||d.1K),3i=27,19,1F,1C,fl,bt,21;1i(I i=0,ci,1l;ci=h[i++];){L(/\\9m\\b/.1T(ci.1m)){L(6C()){ci.2c=6y()}13{ci.6w=$1g.4h;ci.9t=$1g.6t;!4s&&(ci.2t=$1g.33);ci.6p=$1g.6o;ci.9y=1x}6l}L(ci.1m&&(1l=ci.1m.20(/^6i(\\w+)(?:\\9D|$)(.*)$/))&&1l[1]){L(2v($1g.2K)=="3B"){L(!3i){3i=1A({2c:1a.1X+"/2r/3E.2r",36:"6c",1R:"1I/2r"},"68")}L(ci.2M&&ci.2M.9N==3){ci.67(ci.2M)}L(!ci.2M){I B=1l[1]==\'11\'?\'9P\':1l[1],C=1l[2]?1l[2]:\'\',K="6i"+i,E=d.2I("1G");E.1m=\'9T 3E 9U\'+B+\'9V\';!4s&&(E.2t=Z(){$1g.33()});E.1H=K;E.2h(d.9Y("0"));L(C){E.11.6b=C}ci.2h(E)}$1g.2K.5G(K)}6l}19=\'\',1F=\'\',1C=1c,fl=1c,bt=1c,21=1c;L(ci.1m&&(1l=ci.1m.20(/^9Z([\\w\\.]+)(?:\\s|$)/))&&1l[1]){L(1l[1].1w("5Y")>-1||1l[1].1w("a1")>-1){L(1l[1].1w("5Y")>-1){1C=1x;I s=ci.1m.20(/a2([0-9]+)(?:\\s|$)/)}13{I s=ci.1m.20(/a3([0-9]+)(?:\\s|$)/)}I g=((s&&s.1u)?25.a4(16,25.6B(1,1r(s[1]))):1)-1;19=3X(3T,g,2Z);21=1x}13{19=1l[1]}bt=1x}L(ci.1m&&(1l=ci.1m.20(/^a6(\\w+)$/))&&1l[1]){19=1l[1];fl=1x}L(19&&1L[29+19]){bt&&(2Z[19]=1);I j=Z(a,b){1i(I c 1O b){I o=b[c];L(o.21&&o.19==a){14 c}}14 1c},t=j(19,22);L(t!==1c){I T=22[t]||{};L(T.19&&T.ci){4x=3X(3T,0,2Z);T.bt&&(2Z[4x]=1);22[t]={"ci":T.ci,"19":4x,"bt":T.bt,"fl":T.fl,"1C":T.1C,"21":T.21}}}22[i]={"ci":ci,"19":19,"bt":bt,"fl":fl,"1C":1C,"21":21}}13 L(bt||fl){ci.1v=""}L(ci.1m&&(1l=ci.1m.20(/^a9(\\w+)$/))&&1l[1]){1F=1l[1];I o=5U(ci,\'2X\'),2i=\'\',2a=6N,2d=\'\';L(1F==\'2z\'){I l=1N(o.1V,1c);L(l){2a="1D://ag.2z.1V.N/"+l;2i=\'1D://2u.2z.1V.N/23?15=\'+1n(2a)+\'&1R=\'+1N(o.1R,\'ak\')}13{2i=\'1D://5P.2z.1V.N/al-am/ao/ap?15=\'+1n(2a)+\'&5L=\'+1N(o.5L,1)+\'&11=\'+1N(o.11,2)}}13 L(1F==\'2W\'){I n=1N(o.as,1c);2a=n?("1D://at.2W.N/"+n):2a;2i=\'1D://1f.5X.2W.N/23?15=\'+1n(2a)+\'&5I=\'+1N(o.5I,\'1c\')}13 L(1F==\'3n\'){2i=\'1D://1f.3n.N/23/23.3H?15=\'+1n(2a)+\'&5E=\'+1N(o.5E,\'1c\')}13 L(1F==\'3M\'||1F==\'3J\'){I p=3h(),1e=\'\',1b=1h.1b||18.1b,p=1h.1B==28?p:1h.1B,1e=1h.1e==28?3j():1h.1e,15=1h.15==28?18.1K:1h.15}L(2i){ci.1v=\'<1G 1P="2H 3m 3S"><1E 1q="\'+2i+\'" aH="1x" aI="5q" 26="0" aK="0" 11="1o:\'+1N(o.1o,aL)+\'1z;1j:\'+1N(o.1j,38)+\'1z;\'+2d+\'"></1E></1G>\'}13{L(1F==\'3J\'||1F==\'3M\'){L(1F==\'3J\'){ci.1v=\'<1G 1P="2H 3m 3S"><2C:23 1R="1I"></2C:23></1G>\'}13{ci.1v=\'<1G 1P="2H 3m 3S"><2C:23 1R="aO"></2C:23></1G>\'}I q=[\'2V:1R=aR\',\'2V:15=\'+1n(15)+\'\',\'2V:1b=\'+1n(1b)+\'\',\'2V:aS=\'+1n(1e)+\'\',\'2V:2U=\'+1n(p)+\'\'];1i(m=0;m<q.1u;m++){3o=18.2I(\'5g\');I r=q[m].1k(\'=\');I t=r[0];I u=r[1];3o.aW(\'aX\',t);3o.2S=aZ(u);24.2h(3o)}1A({1q:"1D://b0.b1.b2.cn/2u/b3/2w/2C.2w",2e:"2b-8",1R:"1I/5e"},"1W")}13{ci.1v=\'\'}}}}L(22){1i(I k 1O 22){I o=22[k],ci=o.ci,bt=o.bt,fl=o.fl,1C=o.1C,19=o.19;L(2v(ci)=="3B"&&ci.1v.1w(\'42 43\')==-1){I v=1L[29+19].1k(\',\');I w=ci.1v.2B(/^\\s+|\\s+$/g,"");I x=1a.3p[19]||{};I y=(x.4B)?\' 11="46:15(\'+x.4B+\') 5q-ba 1S;"\':\'\';L(1C||w){w=w?w:v[0];ci.1v=\'<1G 1P="2H 3m 42 43\'+19+\'"\'+y+\'>\'+w+\'</1G>\'}13{ci.1v=\'<1G 1P="2H 42 43\'+19+\'"\'+y+\'></1G>\'}L(fl){ci.2t=Z(a){14 Z(){L(a.1m.20(/2j$/)){47(a.36)}13{1p.2u(a.36,\'\')}}}(ci);ci.1b=ci.1b?ci.1b:"在"+v[0]+"关注我们"}13{ci.2t=Z(a){14 Z(){54(a)}}(19);L(!ci.1b){L(19==\'48\'||19==\'49\'){ci.1b=v[0]}13 L(19==\'4a\'){ci.1b="加入"+v[0]}13{ci.1b="分享到"+v[0]}}}}}}L(3i){$1g.4X()}},1N=Z(v,a){L(v===28){14 a}14 v},5U=Z(a,b){I p=[],c=a.bi[b];L(c){o=c.bj.1k(\'&\')||\'\';1i(I i=o.1u;i--;){I j=o[i].1k(\'=\');p[j[0]]=j[1]}}14 p},4c=Z(e){L(!4E){L(!!e.4V&&e.4V.2E(-12)==".1J.N"){L(e.2X&&e.2X!="bm"){1a.4j=e.2X}}4H();4S();4E=1x}},4S=Z(){I a,s,E=1n,o=4Q(6T),T=18.1b||"",Y=1p.1K.2c||"",an=Y?Y.1w(1a.5R):-1,d1=4d(o.3u),d2=4d(Y),q=27,f=(d1&&d2&&d1==d2)?1c:1x;L(an>-1){a=Y.6Z(an);q=a.1k("#").2P().1k("-").2P().1k("=").2P();q=1L[29+q]?q:\'\'}q=(!q&&o.19)?o.19:q;L(q&&f){s=\'bw=\'+q+\'&bx=\'+1r(1a.1M)+\'&by=\'+E(o.3u)+\'&bz=\'+E(o.3D)+\'&bA=\'+E(Y)+\'&bB=\'+5z(T);(2O bC).1q=1a.6s+"/l.bD?"+s}},4d=Z(o){I d=27;L(o){d=o.1k(".").2E(-2).6Y(".");d=(d=="N.cn")?o.1k(".").2E(-3).6Y("."):d;d=d.1k("/").3b()}14 d},4Q=Z(r){I h="",p="",q="",m;L(r.20(/(?:[a-z]\\:\\/\\/)([^\\/\\?]+)(.*)/bF)){h=6X.$1;p=6X.$2;h=h?h:"";p=p?p:"";L(h){1i(I k 1O 1L){m=1L[k].1k(\',\');L(m[2]&&m[2]==h){q=k.2E(3);76}}}}14{3u:h,3D:p,19:q}},6C=Z(){I a=2m.2n.3t().20(/bH|bI|bJ|bK|bL|bM|bN|bO|bP|bQ|bR|bS bT|bU ce|bV:1.2.3.4|bW/i);I b=1r(1p.6V.1o);I c=1r(1p.6V.1j);I d=1c;L(a){L(b<c){d=1x}}14 d},6y=Z(){I a=3h(),1e=3j(),G=\'?15=\'+1n(2k(1h.15||18.1K)),T=\'&1b=\'+1n(2k(1h.1b||18.1b)),S=1h.1B?\'&1B=\'+1n(1h.1B):(a?\'&1B=\'+1n(a):\'\'),F=1a.1M?\'&1M=\'+1r(1a.1M):\'&1M=5D\',P=1h.1e?\'&1e=\'+1n(1h.1e):(1e?\'&1e=\'+1n(1e):\'\');14\'1D://1f.1J.N/2Y\'+G+T+S+F+P},bZ=!!1p.6R?1A({11:"1d:1U;",6P:0,1q:1a.1X+"/c5.c6"},"1E"):27,17=1A({1m:"6M",11:"2g:3q;z-6H:4A;1d:1U;2G:6G;"}),1s=1A({1m:"6M",11:"2g:3q;z-6H:4A;1d:1U;1t:50%;1S:50%;2G:6G;"}),1E=1A({11:"2g:"+(/cf/.1T(4p)?"4n":"3q")+";1d:1U;ch:cj(4q=0);4q:0",6P:0},"1E"),3s,4t,2D,4u,h,2Q={},1Z,4v;1A({2c:1a.1X+"/2r/cv.2r",36:"6c",1R:"1I/2r"},"68");$1g={3v:"",2P:17,cx:1s,1y:0,2K:[],4y:Z(a){I b=1p.cz||a,t=b.cA||b.4z,3w=t.64?t.64.cE():"",c=17.3y?17.3y(t):!!(17.62(t)&16),c1=1s.3y?1s.3y(t):!!(1s.62(t)&16),c2=1x;L(3w=="cJ"){c2=t.3l.1m.1w("1J")=="-1"}13 L(3w=="A"){c2=t.1m.1w("1J")=="-1"}13 L(3w=="cK"){c2=t.1m.1w("3E")=="-1"}L(!c&&!c1&&c2){1E.11.1d=1s.11.1d=\'1U\'}},6o:Z(){I s,T=5V,4F,fn=Z(){4F=cO(Z(){L(17.1v){I p=75(T),5Q=6W(),1C=3z();4I(17.11){1d="2p";I a=T.11.1d;T.11.1d="2p";1t=(p.t+T.1Y+17.1Y>5Q.h+1C.t?p.t-17.1Y:p.t+T.1Y)+"1z";1S=p.l+"1z";T.11.1d=a}4I(1E.11){1t=17.61+"1z";1S=17.5Z+"1z";1o=17.30+"1z";1j=17.1Y+"1z";1Q="";1d="2p"}cT(4F)}},50)};L(!1Z){1Z=1A({1q:1a.1X+"/cU.2w",2e:"2b-8"},"1W",24);1Z.3P=0;1Z.cW=Z(){1Z.3P=1;!4o&&fn()};1Z.cX=Z(){/cY|cZ/.1T(1Z.d0)&&!1Z.3P&&fn()}}13{fn()}14 1c},4h:Z(){3s=4L(Z(){17.11.1d="1U";1s.11.1d!="2p"&&(1E.11.1d="1U")},4m)},6t:Z(){3Z(3s)},33:Z(){17.11.1d=1E.11.1d="1U";L(!4v){4v=1A({1q:1a.1X+"/d6.2w",2e:"2b-8"},"1W",24);db.11.2g="d7"}13{I a=3z();1s.11.1d="2p";1s.11.1Q=(-1s.1Y/2+a.t)+"1z "+(-1s.30/2+a.l)+"1z";2D=d.2o("d8"),4u=2D.3V(1x),h=4u.2q("da");1i(I i=0,ci;ci=h[i++];){2Q[ci.5y]=ci.3l}4I(1E.11){1S=1t="50%";1o=1s.30+"1z";1j=1s.1Y+"1z";1Q=1s.11.1Q;1d="2p"}}14 1c},de:Z(o){3Z(4t);4t=4L(Z(){I s=o.5y.2B(/^\\s+|\\s+$/,""),3A=d.dg();1i(I p 1O 2Q){3O("I f = /"+(s||".")+"/dh.1T(p)");!!2Q[p].3V&&(f&&3A.2h(2Q[p].3V(1x)))}2D.1v="";2D.2h(3A)},4m)},di:Z(){1E.11.1d=1s.11.1d="1U"},5v:Z(o){L(o.1y!==28){I A=$1g.2K,B=1r(o.1y),C=2k(1h.15||d.1K),D=37(),J=4w(D[C]),T=(2O 3G()).3F(),S=B;L(J&&J.1y>B){S=J.1y}56(C,S,T);3I(A,S)}},4X:Z(){I A=$1g.2K,B=37(),C=2k(1h.15||d.1K),J=4w(B[C]),R=1x;L(J&&J.5a<=60){$1g.1y=J.1y;3I(A,J.1y);R=1c}L(R){1A({1q:"//i.1J.N/15/1y.3H?15="+1n(C),2e:"2b-8"},"1W",24)}},2u:Z(A){1A({1q:A,2e:"2b-8"},"1W",24)},5r:Z(F,O){L(F){F=2v(F)=="Z"?F:3O(F);F(O)}}};L(!!1p.3a){!!1p.3a&&1p.3a("dp",4c,1c)}13{L(!!1p.6R){(!!1p.4l&&1p.4l("dr",4c))}13{4H()}}17.6p=Z(){3Z(3s)};17.6w=Z(){$1g.4h()};4o?d.4l("2t",$1g.4y):d.3a("ds",$1g.4y,1c);L(!1h.du&&6J&&2v(dv)!=\'3B\'){d.dw(\'<1W 1R="1I/5e" 1q="\'+1a.1X+\'/70.dx.2w" 2e="2b-8"></1W>\')}})();Z 54(a){I b=3h(),1e=3j();3R{I c=2N||{}}4C(e){I c={}};I d=1n,cu=1a.3p[a]||{},U=2k(c.15||18.1K),W="?19="+a,G="&15="+d(U),T="&1b="+d(c.1b||18.1b),S=c.1B?"&1B="+d(c.1B):(b?"&1B="+d(b):""),F=1a.1M?"&1M="+1r(1a.1M):"",E=c.dD?"&5W=1":"",K=(c.32&&c.32[a])?"&32="+c.32[a]:"",P=c.1e?"&1e="+d(c.1e):(1e?"&1e="+d(1e):\'\'),C=$1g.3v?"&3v="+$1g.3v:"",R=(c.31&&c.31[a])?"&31="+c.31[a]:"",Q=(c.3K&&c.3K[\'2Y\'])?c.3K[\'2Y\']:27,A=\'1D://s.1J.N/\',X=(cu.2l&&cu.15)?"&dI="+d(cu.2l)+"&dJ="+d(cu.15):"",57=c.dL==1c?\'\':\'&dM=1\';B=A+W+G+T+F+E+K+P+R+S+X+C+57;L(a==\'48\'||a==\'4a\'||a==\'49\'||a==\'2j\'){$1g.2u(B);L(a==\'48\'){55()}13 L(a==\'4a\'){53()}13 L(a==\'2j\'){52=c.1b||18.1b;4Y=c.1B?c.1B:(b?b:"");4W=G.2B(\'&15=\',\'\');4N=52+4Y;74=72(4N,dU);6U(d(74+\'...\'),4W)}13{1p.49()}}13{1p.2u(B,\'\')}$1g.5v({1y:($1g.1y+1)});$1g.5r(Q,{1R:\'2Y\',2X:{dW:a,15:U}});14 1c}Z 53(){3R{I d=2N||{}}4C(e){I d={}};I a=d.1b||18.1b;I b=d.15||dX.1K.2c;I c=1p.dY;L(c&&!!c.6Q){c.6Q(a,b,"")}13 L(18.6D){1p.e0.e1(b,a)}13{34(\'请按 6F + D 为你的浏览器添加书签！\')}}Z 55(){3R{I d=2N||{}}4C(e){I d={}};I a=d.15||5V.1K.2c;I b=d.1b||18.1b;I c=b+" "+a;I f=2m.2n.3t();I g=f.1w(\'6E\')!=-1&&6E.e5();I h=(f.1w(\'2J\')!=-1&&!g)&&f.6Z(f.1w(\'2J\')+5,3);L(h){e7.e8(\'e9\',c);34("复制成功,请粘贴到你的2A/3x上推荐给你的好友！")}13 L(ea(\'你使用的是非6q核心浏览器，请按下 6F+C 复制代码到剪贴板\',c)){34(\'复制成功,请粘贴到你的2A/3x上推荐给你的好友！\')}13{34(\'目前只支持6q，请复制地址栏ec,推荐给你的2A/3x好友！\')}}Z 3j(){I a=18.2q(\'3L\'),1e=\'\',3Q=\'\',39=2O 4T();1i(i=0;i<a.1u;i++){I b=1r(a.4k(i).30),4r=1r(a.4k(i).1Y),6d=3c,65=3f,1o=(3c/4r)*3f,1j=(3f/b)*3c;L(b>=6d&&4r>=65){L((1o-1j)<=3f){1e+=3Q+a.4k(i).1q;3Q=\',\'}}}39=1e.1k(\',\');I c=1r(25.em()*39.1u);14 39[c]}Z 3h(){I a=\'\';I b=18.2q("5g");I c=b.1u;L(/2J/i.1T(2m.2n)){1i(i=0;i<c;i++){L(b[i].2l==\'2U\'){a=b[i].2S}}L(a==\'\'){1i(k 1O b){L(k==\'2U\'){a=b[k].2S}}}L(/2J 6/i.1T(2m.2n)){a=\'\'}}13{1i(k 1O b){L(/eo/i.1T(2m.2n)){L(2v(b[k].2l)!=\'28\'){L(b[k].2l==\'2U\'){a=b[k].2S}}}13{L(k==\'2U\'){a=b[k].2S}}}}a=a.2B(/\\s/g,\'\');14 a}Z 72(a,b){I c=0;I s="";1i(I i=0;i<a.1u;i++){L(a.ep(i)>eq){c+=2}13{c++}s+=a.er(i);L(c>=b){14 s}}14 s}Z 6U(a,b){47(\'\',b,a);14 1c}Z 47(c,d,e){I f,3g,ft,3k,2d,1o,1j,bh,2d,5K=/2J|ex 6/.1T(2m.2n);L(g=18.2o(\'2F\')){g=18.2o(\'2F\')}13{I g=18.2I("17");L(5K){g.11.2g="3q";g.11.5B="5p";g.11.1S=\'eA\';I h=18.3r.2R||18.6x.2R;g.11.1t=1r(h)+3c+\'1z\'}13{g.11.2g="4n";g.11.5B="eB"}g.1H=\'2F\'}L(c){f=c;3g=\'在微信上关注我们\';ft=\'打开微信，点击底部的“发现”，使用 “扫一扫” 即可关注我们。\';3k=\'<3L 1q="\'+f+\'" 11="1Q-1t:eC;" 1o="5w" 5u="二维码加载失败" 1j="5w" 1H="eF">\';1o=\'1o:5t;\';1j=\'1j:5t;\';bh=\'1j:eH;\';2d=\'1Q: -eI 0 0 -3Y;\'}13{f=1a.4G+\'?19=2j&15=\'+d+\'&1b=\'+e+\'&eK=1c\';3g=\'分享到微信朋友圈\';ft=\'打开微信，点击底部的“发现”，使用 “扫一扫” 即可将网页分享到我的朋友圈。 <a 2c="\'+f+\'" 4z="eL">如何使用？</a>\';3k=eM=\'二维码加载中....\';1o=\'1o:5m;\';1j=\'1j:5m;\';bh=\'1j:eO;\';2d=\'1Q: -3Y 0 0 -3Y;\'}g.1v=\'<17 1H="5j" 11="46-eQ: 2T-41;46-4P: #44;26: 2L 45 6h(0, 0, 0, 0.3);  26-6f: 2y 2y 2y 2y;  41-4b: 0 f1 f2 6h(0, 0, 0, 0.3); 1S: 50%; \'+2d+\'2G: 69; 2g: 4n; 1t: 50%; \'+1o+1j+\' 2G:69;" 1P="5j"><17 1P="63" 1H="63" 11="26-6a: 2L 45 #f5; 2T: f6 5O;"><a 11="1I-f8:1U;  1Q-1t: f9; 4P: #fa; fb: 5M;  2s-4e: 5C;  2s-5o: fh; fi:fj;5n-1j: 5C; 4q: 0.2; 1I-4b: 0 2L 0 #44;"1P="5l" 1H="5l" 2t="5f()"4z="fq">×</a><59 1H="fs"11=" 5n-1j: fu; 1Q: 0; 2s-5o:fv; 2s-fw:"微软雅黑";">\'+3g+\'</59></17><17 1P="6u"1H="6u"11="1I-4f:33;\'+bh+\'"><p 1H="6n">\'+3k+\'</p></17><17 1P="6k" 1H="6k"11="26-6f: 0 0 2y 2y; 26-1t: 2L 45 #fC; 41-4b: 0 2L 0 #44 fD; 1j:4m%;2T:0 fE;2T-1t:fF;1I-4f: 5M; 2s-4e:5N;"><17 1H="fH"11="1I-4f:1S;1Q:0; 2T:0;2s-4e:5N;">\'+ft+\'</17>  </17></17>\';18.3r.2h(g);L(!c){4L(Z(){I a=18.2I(\'3L\');I b=18.2o(\'6n\');a.1q=1a.4G+\'/fI.3H?15=\'+d;a.1o=\'6e\';a.1j=\'6e\';a.11.fK=\'5O\';b.1v=\'\';a.5u=\'二维码加载失败...\';b.2h(a)},3e)}6g=18.2o("2F")}Z 5f(){3N=18.2o(\'2F\');18.3r.67(3N);3N=fN=6g=fO=27}',62,981,'||||||||||||||||||||||||||||||||||||||||||||var|||if||com||||||||||||function||style||else|return|url||div|document|webid|JIATHIS_CONFIGS|title|false|display|pic|www|CKE|conf|for|height|split|tmp|className|encodeURIComponent|width|window|src|parseInt|div1|top|length|innerHTML|indexOf|true|shares|px|creElm|summary|tl|http|iframe|likeid|span|id|text|jiathis|location|_lists|uid|_gv|in|class|margin|type|left|test|none|qq|script|codehost|offsetHeight|clickpopjs|match|preferred|_WR|like|head|Math|border|null|undefined|_ckpre|likeurl|utf|href|mt|charset|code|position|appendChild|ifsrc|weixin|String|name|navigator|userAgent|getElementById|block|getElementsByTagName|css|font|onclick|open|typeof|js|add|6px|qzone|QQ|replace|wb|list|slice|jiathis_weixin_share|overflow|jiathis_txt|createElement|msie|containers|1px|firstChild|jiathis_config|new|pop|texts|scrollTop|content|padding|description|og|renren|data|share|parentServices|offsetWidth|ralateuid|appkey|center|alert|baidu|rel|_gck||picArr|addEventListener|shift|300|_MR|1000|150|wt|jiathis_get_des|_CF|jiathis_get_pic|innerhtml|parentNode|jiathis_separator|kaixin001|met|custom|absolute|body|timer|toLowerCase|host|jid|tn|MSN|contains|getS|frag|object|douban|path|jiathis_counter|getTime|Date|php|_renderCounter|tsinat|evt|img|tsina|_oDlgEl|eval|onloaded|con|try|jialike|jck|google|cloneNode|getPropertyValue|_gw|200px|clearTimeout|while|box|jtico|jtico_|FFFFFF|solid|background|jiathis_popup|copy|print|fav|shadow|_rec|_gd|size|align|servicelist|out|isStrict|jtck|item|attachEvent|100|fixed|ie|ua|opacity|imgH|hidemore|inputTimer|clist|ckcpjs|_rck|TWID|disappear|target|1000000000|icon|catch|sTL|_reced|timerCont|shost|_renderToolbox|with|round|scrollLeft|setTimeout|my|AT|139|color|_grf|189|_req|Array|_custom|origin|WU|counter|WS|_otc|||WT|jiathis_addBookmark|jiathis_sendto|jiathis_copyUrl|_sck|SU|jiathis_rdc|h3|timedeff|tieba|163|ly|javascript|jiathis_cancel|meta|digg|ifeng|jiathis_weixin_modal|ru|jiathis_weixin_close|360px|line|weight|1000000|no|fireEvent|_FN|300px|alt|rdc|129|_gc|value|escape|cookie|zIndex|20px|1626433|show_faces|_sc|push|ckprefix|showfaces|_uniqueConcat|isIe6|showcount|right|12px|15px|sns|wh|jtcbk|delicious|shuqian|_gp|this|jtss|connect|tools|offsetLeft||offsetTop|compareDocumentPosition|jiathis_modal_header|tagName|minH|msn|removeChild|link|hidden|bottom|cssText|stylesheet|minW|220|radius|_oMaskEl|rgba|jiathis_counter_|facebook|jiathis_modal_footer|continue|substring|jiathis_webchat|over|onmouseover|IE|tumblr|lhost|move|jiathis_modal_body|getBoundingClientRect|onmouseout|documentElement|jiathis_more_href|instapaper|taobao|max|jiathis_is_mobile|all|opera|Ctrl|auto|index|hi|wlh|sohu|youdao|jiathis_style|_url|mail|frameBorder|addPanel|postMessage|_jck|_ref|jiathis_sharewx|screen|getWH|RegExp|join|substr|plugin|isGecko|jiathis_SetString|hexun|AS|getP|break|afx|clientWidth|clientHeight|referrer|CSS1Compat|compatMode|lastIndexOf|fwisp|Fwisp|jt_fwisp|myshare|Myshare|clientTop|jt_myshare|clientLeft|funp|Funp|defaultView|jt_funp|plurk|Plurk|jt_plurk|getComputedStyle|stumbleupon|Stumbleupon|jt_stumbleupon|misterwong|Wong|Mister|jt_wong|Delicious|visible|offsetParent|jt_delicious|plaxo|Plaxo|jt_plaxo|ping|Ping|jt_pingfm|insertBefore|phonefavs|Phonefavs|jt_phonefavs|netvibes|Netvibes|jt_netvibes|netlog|NetLog|setTime|jt_netlog|mixx|Mixx|jt_mixx|expires|toGMTString|linkedin|LinkedIn|jt_linkedin|unescape|myspace|Myspace|jt_myspace|friendfeed|FriendFeed|jt_friendfeed|isNaN|evernote|EverNote|jt_evernote|diigo|Diigo|jt_diigo|Mail|jt_mailru|Digg|jt_digg|bit|bitly|Bit|jt_bitly|floor|w3cyz|lifetime|W3c|jt_w3c|yhdy|jt_printfriendly|pdfzxzh|Pdf|jt_pdfonline|yijee|delete|yjw|jt_yijee|poco|pocow|Poco|jt_poco|tianji|services_custom|instanceof|app|tjw|jt_tianji|mogujie|mgj|jt_mogujie|mls|jt_meilishuo|db9d|jt_douban9dian|shareImg|dig24|hideMore|showType|dkw|shareimg|jt_dig24|ctw|jt_chouti|jjdq|jt_99earth|tqq|t163|tsohu|xiaoyou|cyzone|cyb|jt_cyzone|wkw|jt_waakee|leshou|site|ls|jt_leshou|rlw|jt_wealink|getpocket|bjiathis|pocket|Pocket|jt_pocket|Instapaper|jt_instapaper|reddit|onmousemove|Reddit|jt_reddit|Tumblr|jt_tumblr|hideFocus|twitter|Twitter|jt_twitter|Facebook|_|jt_fb|binzhi|bzw|jt_binzhi|msw|jt_masar|yxjh|jt_dream163|hxwb|nodeType|jt_thexun|bubble|leihou|lhw|jt_leihou|jiathis_button_expanded|jiathis_|_style|gmw|jt_gmw|createTextNode|jiathis_button_|flwb|icons|jiathis_button_tools_|jiathis_button_icons_|min|jt_jcrb|jiathis_follow_|fhkb|jt_ifengkb|jiathis_like_|home|51sq|jt_51|shssk|jt_kansohu|ml|user|jt_miliao|ganniu|gnw|button_num|cgi|bin||qzshare|cgi_qzshare_likeurl|jt_ganniu|fxl|pageid|page|jt_faxianla|xg|jt_xianguo|digu|dgw|jt_digu|mop|tk|mptk|jt_mop|tuita|tt|jt_tuita|allowTransparency|scrolling|ggfy|frameborder|200|jt_translate|eastmoney|number|jt_caimi|xhwb|webpage|image|jt_txinhua|zjwb|jt_cnfol|setAttribute|property|people|decodeURIComponent|tjs|sjs|sinajs|api|rmwb|jt_tpeople|ydwb|jt_139|club|yyq|repeat|jt_189cn|wo|wfx|iwo|WO|jt_iwo||attributes|nodeValue|gecko|jt_i139|FALSE|189yx|jt_189mail|139yx|jt_139mail|nfwb|jt_toeeee||bookmark|hx|rsc|rnm|rfh|rfp|pre|tit|Image|gif|jt_hexun|gi|xueqi|ucweb|ios|mobile|ipad|ipod|blackberry|motorola|YahooSeeker|symbian|nokia|android|iphone|os|windows|rv|midp|xqw|jt_xqw|jiathis_utility_ifr|hotmailyx|||Hotmail|jt_hotmail|jiathis_utility|html|gmailyx|Gmail|jt_gmail|apps|bdkj|jt_hi|115sc||firefox|115|filter||alpha|jt_115|ylwb||||jt_tyaolan|duitang|jt_duitang|huaban|hbw||jiathis_share|jt_huaban|centerpop|pinterest|event|srcElement|Pinterest|jt_pinterest|jt_msn|toUpperCase|qqsq|jt_qq|qqhl|cqq|IMG|SPAN|jt_cqq|ydsq|jt_youdao|setInterval|ggbuzz|Buzz|jt_buzz|gg|clearInterval|ckepop|jt_google|onload|onreadystatechange|complete|loaded|readyState|||net|zhongsou|zsvs|ckecenterpop|static|jiathis_sharelist|jt_zsvs|input||mingdao||choose|md|createDocumentFragment|ig|centerClose|jt_mingdao|diandian|ddw|jt_diandian|fanfou||message|jt_fanfou|onmessage|click||do_not_track|_gnayTrack|write|client||ushi|ysw|jt_youshi|fhwb|data_track_clickback|jt_tifeng|qbj|jt_qingbiji|bdtb|acn|acu|jt_tieba|shortUrl|su|10086|feixin|space|jt_feixin|tianya|tysq|jt_tianya|110|sjkc|service|parent|sidebar|jt_189share|external|AddFavorite|note|ydybj|jt_ydnote|version|tjh|clipboardData|setData|Text|prompt|jt_taobao|URL|cang|bdsc|jt_baidu|mkjs|jt_sdonote|pengyou|pyw|jt_xiaoyou|jt_douban|random|1688|chrome|charCodeAt|128|charAt|albb|jt_alibaba|im|yixin|yx|MSIE|jt_yixin|plus|650px|10000000001|25px|googlej|Google|jiathis_follow_img|jt_googleplus|181px|100px|kxw|isexit|_blank|innerhtmlw|jt_kaixin001|251px|rrw|clip|jt_renren|wywb|jt_t163|shwb|jt_tsohu|txwb|jt_tqq|wx|jt_weixin|weibo|3px|7px|xlwb|jt_tsina|EEEEEE|9px|qqkj|decoration|2px|000000|float|jt_qzone|yj|jt_email||jt_print|bold|cursor|pointer|scj||||jt_fav|fzwz|_self|jt_copy|jiathis_weixin_h3||30px|normal|family||cnxh|jt_ujian|yjfx|jt_ishare|DDDDDD|inset|10px|11px|jt_|jiathis_weixin_tip|qrcode|sc|marginTop|_s|webhost|_oDivEl|_oErweimaMaskEl'.split('|'),0,{}))
