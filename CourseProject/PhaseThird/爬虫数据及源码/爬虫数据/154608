
Recno:: 0
URL:: http://blog.csdn.net/crazy__chen/article/details/50338895

ParseText::
一款炫酷Loading动画--加载失败 - crazychen的专栏 - 博客频道 - CSDN.NET crazychen的专栏 只要有一个人爱我，懂我，愿意等我，我便勇往直前，无所不能。 目录视图 摘要视图 订阅 学院APP首次下载，可得50C币！     欢迎来帮助开源“进步”     当讲师？爱学习？投票攒课吧     认识Atlassian Datacenter产品     深圳小伙伴的福利来啦 一款炫酷Loading动画--加载失败 标签： 动画 Android 进度条 loading 2015-12-17 11:43 5752人阅读 评论 (7) 收藏 举报 分类： android开发 （83） 作者同类文章 X 版权声明：本文为博主原创文章，转载请注明出处。 简介 上一篇文章 一款炫酷Loading动画–加载成功 ，给大家介绍了成功动画的绘制过程，这篇文章将接着介绍加载失败特效的制作。 相比成功动画，有了前面的经验，失败动画的过程就显得比较简单了。 动画结构分析 首先我们来看失败动画的一张图： 失败动画的状态转移描述如下： 1、加载过程，画蓝色圆环，当进度为100%时，圆环完成 2、从右侧抛出蓝色小方块，小方块沿着曲线到达圆环 正上方 3、小方块突然消失， 红色感叹号逐渐 出现 4、感叹号完整出现以后，圆环变红色，感叹号发生 震动 由于前两个过程，和加载成功是一样的，所以我们主要来看 过程3,4 。 红色感叹号逐渐出现 “ 逐渐 ”，有这两个字，我们就应该知道这是一个动画效果。 将感叹号分成两个路径，较长的和较短的，剩下来的工作，就是我们将这个路径逐渐绘制出来。这个思路和之前的 绿色勾 等的绘制是一样的。 我们需要 一个计时器，两个路径Path，和对应的PathMeasure 。 这里我们结合代码说得更清楚些，路径是这样的: //感叹号路径 Path commaPath1 = new Path(); Path commaPath2 = new Path(); commaPath1.moveTo( 2f * radius+strokeWidth, 1.25f * radius+strokeWidth); commaPath1.lineTo( 2f * radius+strokeWidth, 2.25f * radius+strokeWidth); commaPath2.moveTo( 2f * radius+strokeWidth, 2.75f * radius+strokeWidth); commaPath2.lineTo( 2f * radius+strokeWidth, 2.5f * radius+strokeWidth); commaPathMeasure1 = new PathMeasure(commaPath1, false ); commaPathMeasure2 = new PathMeasure(commaPath2, false ); 计时器就简单了，是一个 ValueAnimator //感叹号动画 mCommaAnimation = ValueAnimator.ofFloat( 0 f, 1 f); mCommaAnimation.setDuration( 500 ); mCommaAnimation.setInterpolator( new AccelerateInterpolator()); mCommaAnimation.addUpdateListener( new ValueAnimator.AnimatorUpdateListener() { @Override public void onAnimationUpdate (ValueAnimator animation) { commaPrecent = ( float ) animation.getAnimatedValue(); invalidate(); } }); 最后，利用PathMeasure计算出的部分路径，就可以逐渐将完整路径绘制出来 /** * 绘制感叹号 */ private void drawComma (Canvas canvas) { Path path1 = new Path(); commaPathMeasure1.getSegment( 0 , commaPrecent * commaPathMeasure1.getLength(), path1, true ); path1.rLineTo( 0 , 0 ); Path path2 = new Path(); commaPathMeasure2.getSegment( 0 , commaPrecent * commaPathMeasure2.getLength(), path2, true ); path2.rLineTo( 0 , 0 ); canvas.drawPath(path1, commaPaint); //较长 canvas.drawPath(path2, commaPaint); //较短 canvas.drawArc(mRectF, 0 , 360 , false , commaPaint); //红色圆环 } 红色感叹号震动 震动效果怎么实现了，我的思路是 旋转画布！ 仔细观察震动效果，会发现过程是这样的： 向左偏移-》回到中间-》向右偏移-》回到中间-》向左偏移-》。。。 这意味着震动其实是一个快速偏移的过程，但是要偏移一定角度，再绘制感叹号会比较麻烦。我想出来的办法，就是 将画布偏移，而不是将感叹号偏移 。 于是我们的计时器是这样的: //震动动画 mshockAnimation = ValueAnimator.ofInt(- 1 , 0 , 1 , 0 , - 1 , 0 , 1 , 0 ); mshockAnimation.setDuration( 1000 ); mshockAnimation.setInterpolator( new LinearInterpolator()); mshockAnimation.addUpdateListener( new ValueAnimator.AnimatorUpdateListener() { @Override public void onAnimationUpdate (ValueAnimator animation) { shockPrecent = ( int ) animation.getAnimatedValue(); invalidate(); } }); 如果是-1,画布就向左旋转30度，0就不旋转，1就向右旋转30度。 /** * 绘制震动效果 * @param canvas */ private void drawShockComma (Canvas canvas) { Path path1 = new Path(); commaPathMeasure1.getSegment( 0 , commaPathMeasure1.getLength(), path1, true ); path1.rLineTo( 0 , 0 ); Path path2 = new Path(); commaPathMeasure2.getSegment( 0 , commaPathMeasure2.getLength(), path2, true ); path2.rLineTo( 0 , 0 ); if (shockPrecent!= 0 ){ canvas.save(); if (shockPrecent== 1 ) canvas.rotate(shockDir, 2 * radius, 2 * radius); else if (shockPrecent==- 1 ) canvas.rotate(-shockDir, 2 * radius, 2 * radius); } canvas.drawPath(path1, commaPaint); canvas.drawPath(path2, commaPaint); canvas.drawArc(mRectF, 0 , 360 , false , commaPaint); if (shockPrecent!= 0 ) { canvas.restore(); } } 其中注意， canvas.save()方法和canvas.restore()方法必须成对使用，然后我们调用canvas.rotate()方法，就可以旋转画布了。 写在最后 有了前面的经验，失败动画其实就是新瓶装旧酒了，使用画布旋转来实现震动，这个思路也是比较有趣的。 对于API不熟悉的朋友，建议用到的时候去查官方文档，或者看看其他朋友的一些介绍基础的文章。 最后，提供 源码下载地址 和 github地址 ，欢迎大家下载和star。 上一篇 一款炫酷Loading动画--加载成功 顶 4 踩 0 我的同类文章 android开发 （83） http://blog.csdn.net 猜你在找 查看评论 * 以上用户言论只代表其个人观点，不代表CSDN网站的观点或立场 个人资料 kangaroo835127729 访问： 148074次 积分： 5858 等级： 积分：5858 排名： 第2297名 原创： 430篇 转载： 36篇 译文： 14篇 评论： 119条 文章搜索 博客专栏 leetcode题解(java实现) 文章：0篇 阅读：0 异步网络请求框架Volley源码解析 文章：8篇 阅读：5692 Android控件源码解析 文章：13篇 阅读：7398 剑指offer题解 文章：63篇 阅读：11678 文章分类 android开发 (84) php杂 (19) mysql数据库 (1) java (75) 算法与数据结构 (73) thinkphp (11) html5 (1) 缓存 (2) linux (1) j2EE (3) 剑指offer (65) acm (3) 源码解析 (24) leetcode (178) PAT (0) 二叉树 (43) 数组 (64) 链表 (7) Hash (5) 字符串 (12) 回溯 (3) 图 (5) BFS&DFS (3) 动态规划 (11) 计算机网络 (9) 阅读排行 Android制作粒子爆炸特效 (13982) 一款炫酷Loading动画--加载失败 (4992) TextView中英文排版混乱 (4052) 打造简易NineoldAndroids动画库，深入理解Android动画原理 (3529) Android实现炫酷SVG动画效果 (2411) 一款炫酷Loading动画--加载成功 (1982) 广州地铁离线查询app源码 (1904) 模仿手机QQ红点消除功能 (1418) volley源码解析(一)--volley的使用和架构 (1408) Android雷达图(蜘蛛网图)绘制 (1369) 评论排行 Android制作粒子爆炸特效 (21) 一款炫酷Loading动画--加载成功 (11) 模仿手机QQ红点消除功能 (10) Android实现炫酷SVG动画效果 (9) dmytrodanylyk/circular-progress-button源码解析(一) (8) 一款炫酷Loading动画--加载失败 (7) dmytrodanylyk/circular-progress-button源码解析(二) (6) 打造简易NineoldAndroids动画库，深入理解Android动画原理 (4) Maxwin-z/XListView-Android(下拉刷新上拉加载)源码解析(二) (4) Android短信拦截机制适配的坑(下)--4.4以上系统，主要是6.0 (4) 最新评论 Android制作粒子爆炸特效 u010560898 : 不错，为我提供了不错的思考方向 一款炫酷Loading动画--加载失败 oCanHong : @kangaroo835127729:，其实我是想结合Imageloader使用的，我把它放在ima... 一款炫酷Loading动画--加载成功 kangaroo835127729 : @Chalno:多谢(*^__^*) 一款炫酷Loading动画--加载成功 Chalno : 特别喜欢这样分析思路的文章，多谢博主！ 一款炫酷Loading动画--加载失败 kangaroo835127729 : @u010539352:多谢支持! Android制作粒子爆炸特效 u010539352 : 感觉非常酷啊，感谢博主的分享啊 一款炫酷Loading动画--加载失败 u010539352 : 真的很棒啊，感谢博主的分享啊 一款炫酷Loading动画--加载失败 zhengyikuangge : 真会玩~~~ 一款炫酷Loading动画--加载成功 kangaroo835127729 : @yuan514168845:是的，你可以调整，因为方块在抛出过程中，会越来越短，所以这样定义 一款炫酷Loading动画--加载失败 kangaroo835127729 : @oCanHong:设置visibility为gone

Recno:: 1
URL:: http://blog.csdn.net/david_520042/article/details/7979409

ParseText::
Ext.Net 1.x_Ext.Net.常用控件属性集合 - 德仔 - 博客频道 - CSDN.NET 德仔 It is never too old to learn 目录视图 摘要视图 订阅 学院APP首次下载，可得50C币！     欢迎来帮助开源“进步”     当讲师？爱学习？投票攒课吧     认识Atlassian Datacenter产品     深圳小伙伴的福利来啦 [置顶] Ext.Net 1.x_Ext.Net.常用控件属性集合 标签： 正则表达式 function 文本编辑 action 服务器 2012-09-14 15:40 1938人阅读 评论 (0) 收藏 举报 分类： 前端设计 Ext.Net （116） 作者同类文章 X 转自： http://blog.csdn.net/lulu_jiang/article/category/669748   Ext_数字输入框_Ext.form.NumberField : <mce:script type="text/javascript"><!-- /* Ext.form.NumberField独有配置表: allowDecimals             Boolean             是否允许输入小数(默认true) allowNegative             Boolean             是否允许输入负数(默认true) baseChars                 String              输入有效数字集合,默认为'0123456789' decimalPrecision          Number              输入数字精度(默认保留小数点后2位) decimalSeparator          String              十进制分隔符(默认'.') maxValue                  Number              允许输入最大数值 maxText                   String              最大值验证失败错误提示信息 minValue                  Number              允许输入最小值 minText                   String              最小值验证失败错误提示信息 nanText                   String              无效数据错误提示信息 */ Ext.onReady( function (){     Ext.BLANK_IMAGE_URL = '../extjs2.0/resources/images/default/s.gif';          Ext.QuickTips.init();          Ext.form.Field.prototype.msgTarget = 'side';           var  config = {         title:'Ext.form.NumberField示例',         labelSeparator:':',         labelWidth:80,         bodyStyle:'padding:5 5 5 5',         frame: true ,         height:150,         width:250,         renderTo:'form',         items:[              new  Ext.form.NumberField({                 fieldLabel:'整数',                 allowDecimals: false ,                // 不允许输入小数                 nanText:'请输入有效整数',            // 无效数字提示                 allowNegative: false                  // 不允许输入负数             }),              new  Ext.form.NumberField({                 fieldLabel:'小数',                 decimalPrecision:2,                  // 精确到小数点后2位(执行4舍5入)                 allowDecimals: true ,                 // 允许输入小数                 nanText:'请输入有效小数',                 allowNegative: false             }),              new  Ext.form.NumberField({                 fieldLabel:'数字限制',                 nanText:'请输入有效数字',                 baseChars:'12345'                    // 输入数字范围             }),              new  Ext.form.NumberField({                 fieldLabel:'数字限制',                 maxValue:100,                        // 最大值                 maxText:'值太大',                 minValue:50,                         // 最小值                 minText:'值太小'             })         ]     }           var  form =  new  Ext.form.FormPanel(config); }); //  --></mce:script> Ext_多行文本输入框_Ext.form.TextArea   <mce:script type="text/javascript"><!-- /* Ext.form.TextArea独有配置表: preventScrollbars           Boolean           文本溢出是否显示滚动条，true隐藏滚动条(默认false) */ Ext.onReady( function (){     Ext.BLANK_IMAGE_URL = '../extjs2.0/resources/images/default/s.gif';           // Ext.QuickTips.init();           var  config = {         title:'Ext.form.TextArea示例',         labelSeparator:':',         labelWidth:60,         bodyStyle:'padding:5 5 5 5',         frame: true ,         height:150,         width:250,         renderTo:'form',         items:[              new  Ext.form.TextArea({                 id:'memo',                 widht:150,                 fieldLabel:'备注'             })         ],         buttons:[             {text:'确定',handler:showValue}         ]     }           var  form =  new  Ext.form.FormPanel(config);           // 单击按钮后事件处理      function  showValue()     {          var  memo = form.findById('memo');        // 取得输入框控件                   var  config = {             title:'TextArea值是:',             msg:memo.getValue(),                 // 取得控件值             width:200         }                  Ext.Msg.show(config);     } }); //  --></mce:script>   Ext_基本文本输入框_Ext.form.TextField     <mce:script type="text/javascript"><!-- /* Ext.form.TextField主要配置表: allowBlank                 Boolean             是否允许为空(默认true) blankText                  String              为空验证失败提示信息 emptyText                  String              空字段中默认显示信息 grow                       Boolean             设置字段是否根据内容伸缩(默认false) growMax                    Number              字段伸展的最大宽度(默认800) growMin                    Number              字段收缩最小宽度(默认30) inputType                  String              字段类型(默认text) maxLength                  Number              字段允许输入最大长度 masLengthText              String              最大长度验证失败提示信息 minLength                  Number              字段允许输入最小长度 minLenghtText              String              最小长度验证失败提示信息 regex                      String              javascript正则表达式 regexText                  String              正则表达式验证失败提示信息 selectOnFocus              Boolean             设置当前字段得到焦点是否自动选择已存在文本(默认false) vtype                      String              验证类型名字 vtypeText                  String              自定义提示信息，代替vtype本身的错误提示信息 validator                  Function            在所有基本验证通过后调用(默认null) */ Ext.onReady( function (){     Ext.BLANK_IMAGE_URL = '../extjs2.0/resources/images/default/s.gif';      // 初始化信息提示功能     Ext.QuickTips.init();      // 统一指定错误信息提示浮动显示方式     Ext.form.Field.prototype.msgTarget = 'side';           var  config = {         title:'Ext.form.TextField例',                     // 表单标题         labelSeparator:':',                               // 表单label与其他元素分割符         labelWidth:60,                                    // 标签宽         labelAlign:'right',                               // 标签对齐方式         bodyStyle:'padding:5 5 5 5',                      // 表单边距         frame: true ,                                      // 是否渲染表单         height:120,                                       // 表单高         width:250,                                        // 表单宽         renderTo:'form',                                  // 表单定位          // 表单子元素数组         items:[              new  Ext.form.TextField({                 fieldLabel:'用户名',                 id:'userName',                 selectOnFocus: true ,                      // 得到焦点自动选择文本                 allowBlank: false ,                        // 不允许为空                 blankText:'用户名不可为空',               // 空验证失败错误提示信息                  // javascript邮件验证正则表达式                 regex:/^([/w]+)(.[/w]+)*@([/w-]+/.){1,5}([A-Za-z]){2,4}$/,                 regexText:'用户格式错误'                  // javascript正则表达式验证失败错误信息提示             }),              new  Ext.form.TextField({                 fieldLabel:'密码',                 inputType:'password',                     // 设置输入类型为password                 allowBlank: false ,                 blankText:'密码不可为空'             })         ]     }           var  form =  new  Ext.form.FormPanel(config); }); //  --></mce:script>   Ext_Ext.form.Field基类     <mce:script type="text/javascript"><!-- /* 其他表单字段都从Ext.form.Field类中扩展 Ext.form.Field主要配置项表: name              String              字段名(数据提交后台的名称) id                String              控件唯一表示(系统会自动生成) value             String              字段初始化值 readOnly          Boolean             是否只读 validateOnBlur    Boolean             字段失去焦点时是否被验证(默认true) validationDelay   Number              验证延时(默认250毫秒) disabled          Boolean             字段是否不可用‘ fieldLabel        String              字段对应标签说明(默认'') hideLabel         Boolean             是否隐藏字段标签(默认false) hideMode          String              值:visibility,offsets,display hideParent        Boolean             true显示隐藏组件同时显示隐藏其容器(默认false) labelSeparator    String              字段标签于字段间分隔符(默认':') msgTarget         String              设置错误信息显示位置：qtip:显示浮动提示信息                                                             title:显示一浏览器浮动提示信息                                                             under:在字段下方显示一提示信息                                                             side:在字段右边显示一提示信息 */ Ext.onReady( function (){     Ext.BLANK_IMAGE_URL = '../extjs2.0/resources/images/default/s.gif';          Ext.QuickTips.init();            // 初始化信息提示功能           var  config = {         title:'信息提示(qtip)',            // 表单标题         height:100,                        // 表单高度         width:300,                         // 表单宽度         frame: true ,                       // 是否渲染表单         labelSeparator:':',               // 分隔符         labelWidth:60,                    // 标签宽         labelAlign:'right',               // 标签对齐方式         renderTo:'form',                  // 表单定位          // 表单子元素数组         items:[              // 单行文本框              new  Ext.form.TextField({                 fieldLabel:'姓名',           // 标签内容                 allowBlank: false ,           // 是否允许空                 blankText:'请输入姓名',      // 为空之后的错误信息提示                 msgTarget:'qtip'             // 显示浮动信息提示框                  // msgTarget:'title'                  // msgTarget:'under'      //注意表单高度！                  // msgTarget:'side'       //注意表单宽度！             }),              // 数字框              new  Ext.form.NumberField({                 fieldLabel:'年龄',                 allowBlank: false ,                 blankText:'请输入年龄',                 msgTarget:'qtip'             })         ]     }           var  form =  new  Ext.form.FormPanel(config); }); //  --></mce:script> Ext_表单相关动作_Ext.form.Action     /* Ext.form.Action提供表单相关动作，只在表单执行submit,load时创建 或通过设置该类的method可执行不同动作 Ext.form.Action配置表: failure            Function           设置错误处理函数 method             String             请求服务器的方式 params             Mixed              附加参数，附加到Ext.form.BasicForm.baseParams中，同表单字段一同提交指定URL sucess             Function           设置请求成功后回调函数 url                String             当前动作请求url waitMsg            String             当前动作执行调用Ext.Msg.wait组建显示的等待信息 waitTitle          String             调用Ext.Msg.wait显示的标题 Ext.form.Action.Submit 提交表单数据并处理返回结果(只在表单创提交时创建) 返回信息示例: {     success:false,       //必备，表示表单提交成功否     error:{              //可选,错误信息         ...     } } Ext.form.Action.Submit配置表: clientValidation          boolean               是否进行客户端验证(默认true) Ext.form.Action.Load 读取服务器数据到表单(只在表单创提交时创建) 返回信息示例: {     success:true,        //表示表单加载数据是否成功     data:{               //表单数据         ...     } } */   Ext_表单面板_Ext.form.FormPanel   /* Ext.form.BasicForm基本表单组件，提供对表单动作的支持并负责初始化已有字段组件 默认采用Ajax方式进行异步数据提交， 如要用原始方法提交表单可覆盖表单的onSubmit及Submit方法 ###################################################################################### var myForm = new Ext.form.BasicForm("form-el-id",{     onSubmit:Ext.emptyFn,               //覆盖onSubmit方法为空函数     submit:function()                   //覆盖submit方法     {         this.getEl().dom.submit();      //调用底层表单元素的submit方法进行表单提交     } }); ###################################################################################### Ext.form.BasicForm主要配置表 baseParams             Object               传递到请求中的参数，如{id;'123',foo:'bar'} errorReader            DataReader           表单提交时用来读取错误信息的数据读取器 fileUpload             Boolean              设置表单是否进行文件上传 method                 String               设置表单提交方式GET或POST reader                 DataReader           设置表单执行load读取数据时的数据读取器 timeout                Number               设置表单动作的超时时间 trackResetOnLoad       Boolean              设置true表单在初次创建将清除最近一次加载的数据或用setValues()设置数据 url                    String               设置表单执行请求时默认提交路径 waitMsgTarget          Mixed                默认情况下，表单执行中显示的是以Ext.MessageBox.wait组件，可指定其他目标元素 Ext.form.BasicForm常用方法(继承到FormPanel中，可直接使用) clearInvalid():BasicForm                    清除表单中所有无效验证信息 doAction(String/Object actionName,          执行一个预定动作(Ext.form.Action.Submit或Ext.form.Action.Load)或自定义扩 [Object options]):BasicForm                 Ext.form.Action动作，执行一个特殊请求处理 findField(String id):Field                  通过id,dataIndex,name,hiddenName查找表单字段 isDirty():Boolean                           如表单在第一次读取后被更改过返回true isValid():Boolean                           如果客户端验证成功返回true load(Object options):BasicForm              执行表单读取动作，配置对象options被传递到action中 loadRecord(Record record):BasicForm         从一个数据记录中读取数据到表单中 markInvalid(Array/Object errors):BasicForm  成批设置表单字段为验证无效，参数可为数组[{id;'2',msg:'me'},...],JSON对象 reset():BasicForm                           重置表单 setValues(Array/Object values):BasicForm    成批设置表单字段值[{id:'name',value:'tom'},...] submit(Object options):BasicForm            执行表单提交动作，配置对象options被传递到action中 updateRecord(Record record):BasicForm       持久化表单数据到记录集中 Ext.form.FormPanel支持的主要表单组件 Ext.form.Checkbox                  复选框 Ext.form.ComboBox                  下拉列表框 Ext.form.DateField                 日期选择框 Ext.form.Hidden                    隐藏域 Ext.form.HtmlEditor                HTML文本编辑器 Ext.form.NumberField               数字输入框 Ext.form.Radio                     单选框 Ext.form.TextArea                  多行文本框 Ext.form.TextField                 单行文本框 Ext.form.TimeField                 时间选择框 Ext.form.TriggerField              触发按钮文本框 Ext.form.FormPanel主要配置项目表 buttons            Array               按钮对象配置数组 buttonAlign        String              设置buttons中按钮对齐方式:left,center(默认),right footer             Boolean             是否创建表单页脚 header             Boolean             是否创建表单标题栏，如设置title自动创建 headerAsText       Boolean             标题栏中是否显示title默认true items              Mixed               一子元素或子元素数组 labelAlign         String              表单标签对齐方式：left(默认),top,right labelWidth         Number              表单标签宽度 title              Strin

Recno:: 2
URL:: http://blog.csdn.net/domypp/article/details/24144501

ParseText::
我与刘强东的故事：他的1000亿和我的5000万 - 超级表格官方博客ChaojiBiaoge.com - 博客频道 - CSDN.NET 超级表格官方博客ChaojiBiaoge.com 一个互联网公司的创业史记 目录视图 摘要视图 订阅 学院APP首次下载，可得50C币！     欢迎来帮助开源“进步”     当讲师？爱学习？投票攒课吧     认识Atlassian Datacenter产品     深圳小伙伴的福利来啦 我与刘强东的故事：他的1000亿和我的5000万 标签： 创业 刘强东 天使投资 超级表格 陈坤极 2014-04-19 23:05 74661人阅读 评论 (100) 收藏 举报 版权声明：本文为博主原创文章，未经博主允许不得转载。 首先承认我标题党了。取这个标题，一是想对比一下刘强东和我的创业经历，二是这个标题也不完全是标题党。本来取另一名：我与5000万还有多远。 去年在一个创业活动上我宣布了4年后的梦想：我创立的公司，估值5000万元（RMB）。上个月，超级表格(一款基于云端的数据协作软件)获得一位我同学介绍的美籍华人的天使投资50万（必须说不是$），公司估值500万。他还是大学生呐（是否全美国最年轻的天使投资人？）！未打一次电话，全程在微信上谈定。前后三周时间，资金到账。这比VC效率高多了。那些跟我谈过的投资机构，即使启动谈判流程，要完成资金到账至少要三个月。 这是公司价值第一次被以现金的方式被认可。我的计划是在用3到4个季度获得A轮投资300-500万，估值1000万。 昨天看到中国企业家杂志关于刘强东最近回母校人大的回忆性演讲，其标题是“如何从500元做到1000亿”。读完后想到了自己的大学创业经历，联想到了我现在的创业公司。那就乘机梳理一下创业思路吧。我原来是很保护自己的隐私的，从不在网络上公开自己的身份。后来由于工作需要，不得不逐步公开了，包括论坛和博客。很早以前我百度自己姓名“陈坤极”，搜索结果的第一条就是“陈坤极可能与赵薇合拍新片…”。前段时间我故意把微信名改为“陈坤极可能与赵薇”，有朋友接下文“生小孩”、“私奔”…现在变了，我不怕公开自己，也不担心公开自己的梦想。朋友们，我说出我的梦想和创业思路，是让你们关注我、监督我。我不但要对公司员工负责，对用户负责，还要对投资者、家人和关心过我的朋友负责。回到标题。 刘强东在大学时的专业是文科，后来自学计算机。我的本科专业也是文科（硕士是PM和Marketing），毕业后自学了计算机编程。 刘强东大学期间的兼职挣钱的工作是抄信封、写程序、开饭店。他是班上第二富，另类的学生。我回想自己的大学，也不走常规路线：不是外语专业，却学了日语和英语，在看爱因斯坦的相对论；大一是曾退学一段时间要下海经商，在期末考场居然给一位姓杨的同学写信，后来多门课程不及格，被留级。为了弥补过失，我同时学两个年级的课程，完成了跳级。但我放弃跳级，选择休学一年去打工，希望在毕业之前获得足够的社会经历好让我做出毕业后的去向决定。期间我做了全校最大的炊具出租生意、开钟点旅馆（那是够早了，按现在的创业思路，那是很前卫的商业模式），还卖过油饼和袜子。虽然我没有刘强东挣的多，但我也以我自己的能力，挣来了大学期间的大部分费用。 有一次，刘强东很自豪回忆，他曾经给某单位写的程序，还在运行着。我大学毕业后为一家单位写的财务软件，到我离开后5年后还在使用（有一次该单位打电话到北京，我做了最后一次“客服”）。不知道现在是否还在使用。还记得那是用VFP开发。 再后来，刘强东继续创业一骑绝尘，我毕业后开始了打工生涯。直到三年前开始创业。创业失败。身怀几百元来到上海，后来的情形就是我写的《2013，我的创业记忆片段》里的故事了。其实想想，不安分才是我的本分。我后悔为什么不早点创业。 《从优秀到卓越》一书说，成功的创业和伟大的公司都不是以财务作为目标。我却规划四年后的5000万目标。万科的王石说“无论是行业不同竞争局面不同，但人生的目标怎样，要达到什么目的，其实没什么差别。”我说创业的目的是让千百万的用户用超级表格解决了在线数据共享的问题，或是为了自己挣到人生的第一个5000万，更高尚吗？，我不说自己是为了挣到5000万，我说我希望自己能创造一个价值5000万的公司，是否更高尚？不去想这个区别。当然我们要明白公司估值的基础是用户价值！一起默念三遍：用户价值！用户价值！用户价值！5000万离我还有多远？我相信，我能实现的程度跟自己的思想格局大小有关系，跟自己的野心大小有关系，跟自己的勤奋程度有关系。回忆了下，毕业后有几年时间，我的追求和野心变小了。是这三年创业的激情和痛苦让我重拾大学时代的抱负，重拾梦想，重新发现自己：我不是安分的人。 我身边有个实例，一个学外语大学生希望毕业后拿到月薪2万的工作，后来拿到了1万5。另一个同学的要求是找到稳定的工作，后来找了一份中学英语教师，月薪3500。没见过月薪10万美元的人，能相信这可以是身边的故事吗? 能否实现5000万，更取决于我的团队。我们的互联网产品面对的竞争一开始就是全国性的。要获得国内的成功，就必须有国内最好的团队，即使不是最好，也必须是最好之一。面对电商阿里巴巴和搜索百度，那是我认定只能仰视的大山。但在超级表格所在企业管理软件领域，我自信没有哪个产品和公司让我仰视。同样，团队里还需要技术、营销、UI人员组成的团队，也必须是国内一流水准的。当然一流团队不要求每个岗位的员工都是一流的。现在我要呼唤团队。朋友们，如果你有一颗不安分的心，有追求卓越的抱负，有创业梦想，请加入我们。 我们在上海，也有可能在北京设立办公室。有意加入我们请点击这里官方网站（www.domypp.com）最下方的招聘链接。任何岗位，都要求你必须是优秀的：要么现在很能干；如果现在成功经验不足，那么你原来的学习基础必须非常扎实；如果当初没学好，那现在必须非常勤奋。什么是勤奋？每天12-15小时花在专业上（工作、学习均可）。如果上述情况你都不具备，那sorry，不合适。 公司5000万估值的实现节奏：现在500万，第二年1000万，第四年5000万。如果有人替我担心怀疑地问：要是实现不了怎么办？那我要说，我们的人生观不在一个层次上。 花了一个周六上午的时间，完成了这篇文章。中间还穿插晒了衣服。 上一篇 看完我是歌手第二季，觉得自己的产品差距大了。 下一篇 作为互联网创业者的我，与职业网络色情女的QQ过招 顶 41 踩 5 猜你在找 查看评论 * 以上用户言论只代表其个人观点，不代表CSDN网站的观点或立场 文章搜索 阅读排行 我与刘强东的故事：他的1000亿和我的5000万 (74659) 2013，我的创业记忆片段 (3811) 上海商报:超级表格创始人叫板Excel (3699) 超级表格全新界面全新体验 (3472) 一支巧乐兹引发的感想(这个标题实在没有创意) (3405) 只有在中华帝都才能免费享受到的北大商业课程：财富定律与愿景规划 (3173) 在中关村创业大街Binggo这半年 (3100) 直击中关村创业大街，新街头霸王来了 (3037) 《一见》采访超级表格创始人陈坤极 (2948) 从软件工程师的角度看MacBook Air的几个设计亮点 (2948) 个人资料 kongki 访问： 203896次 积分： 2690 等级： 积分：2690 排名： 第7676名 原创： 99篇 转载： 1篇 译文： 0篇 评论： 233条 最新评论 即将被裁掉，她是如何替他力挽狂澜？ zzznnn : 嗯,软文 即将被裁掉，她是如何替他力挽狂澜？ weixin_33492943 : 这广告打的啪啪的 我与刘强东的故事：他的1000亿和我的5000万 alex159s : 公司用，感觉的确不错吧。互联网多人协作的模式，完全摒弃了办公中各人生在全国各地的问题，每天自己按时上... 从普通程序员到估值上亿的公司老板，他只用了1年！ u010927640 : 希望这个超大能量场能遍及世界各地。 稳定高薪vs追求梦想，当你在犹豫时别人已经放弃新加坡绿卡！ kongki : @qq_25223941:恩啊。人生就是不断拼搏的过程！ 稳定高薪vs追求梦想，当你在犹豫时别人已经放弃新加坡绿卡！ kongki : @allan_chan:没错！ 稳定高薪vs追求梦想，当你在犹豫时别人已经放弃新加坡绿卡！ allan_chan : 只有向前~~~ 稳定高薪vs追求梦想，当你在犹豫时别人已经放弃新加坡绿卡！ qq_25223941 : 就是要拼 人生才有意义！ 超级表格全新界面全新体验 kongki : @zjy15203167987:你喜欢就好啊！哈哈 当你躲在被窝里点外卖时，看看比你忙碌100倍的领导者们是如何坚持跑步的？！ kongki : @u010786678:只要对您有价值，我们就值了。

Recno:: 3
URL:: http://blog.csdn.net/domypp/article/details/49177811

ParseText::
王健林=马云+2个刘强东—《2015胡润百富榜》 - 超级表格官方博客ChaojiBiaoge.com - 博客频道 - CSDN.NET 超级表格官方博客ChaojiBiaoge.com 一个互联网公司的创业史记 目录视图 摘要视图 订阅 学院APP首次下载，可得50C币！     欢迎来帮助开源“进步”     当讲师？爱学习？投票攒课吧     认识Atlassian Datacenter产品     深圳小伙伴的福利来啦 王健林=马云+2个刘强东—《2015胡润百富榜》 标签： 王健林 马云 刘强东 胡润百富榜 创业 2015-10-16 13:54 1453人阅读 评论 (0) 收藏 举报 分类： 创业故事 （43） 作者同类文章 X 版权声明：本文为博主原创文章，未经博主允许不得转载。   超级表格微信公众号： chaojibiaoge 昨天，胡润研究院发布《2015胡润百富榜》(Hurun  Rich List 2015)。顿时在网上掀起了热议！相信王思聪的小老婆们都高兴坏了吧！ 先来看看Top10具体的排名吧。 值得关注的是，61岁的王健林及其家族以2200亿财富超过马云，自2013年以净资产860亿问鼎福布斯中国首富后第二次成为首富，财富比去年增长52%。而51岁的马云及其家族以1450亿退居第二。 王健林 王健林，男，1954年10月24日出生于四川省广元市，1989年起担任大连万达集团股份有限公司董事长。 著名的企业家，也是联想创始人柳传志曾这样评价他：“他身上军人的特质很强，做事干脆” 王健林并不仅仅是个埋头苦干的人。他很精明，善于抓住机会，非常雄心勃勃。尽管他是世界级的富翁，在中国之外却很少人知道他。正如他同时代的中国商业巨头那样，王健林抓住了中国从落后的农业国迈向城市经济大国的机遇。 ————《财富》 而王健林却不仅仅只是商人，他被评为最有艺术品味的富豪。而且酷爱足球，他早在1994年就买下了大连足球队，并改名大连万达俱乐部。随后六年里，大连万达队四次夺得甲A联赛冠军。让他颇为自豪。 更有意思的是，2013年，作为万达核心的商业地产模式，遭到了马云和一些观察人士的极力否定。马云与王健林曾就传统零售业与电商谁将是主导爆发过一场争论，后来演变成一场公开的亿元“赌局”。2022年，如果电商在中国零售市场份额占50%，王健林将给马云一亿元，如果没到50%，马云给王健林一亿元。 有钱就是任性，已经看傻，让我默默想想午餐吃什么（凌乱在风里） 马云 这次排名，王健林将马云远远甩在后面，不知当初他们各执一词的观点是否还那么坚定。而京东的爸爸刘强东只有445亿被抛下，排名28位。不过，商场如战场，不到最后真不知谁能一直笑下去。 我特意去看了下王思聪的微博……可能他习惯了吧，没有发任何关于此次排名的状态。让我想想，如果我爹哋是中国首富……（干嘛打我头？我做做白日梦不行么？） 榜单亮点： 此次排行，最大的亮点莫过于中国大陆的十亿美金富豪增加了242人，达到了596位，并且第一次超过了美国，如果加上港澳台的119位，大中华地区现在有715位十亿美金富豪，相比美国的537位，超过美国178人之多！ 这些上榜者都住在哪里呢？ 北京仍然是最多企业家偏好居住的城市，279位上榜企业家居住在北京，比去年增加99位；深圳保持第二，172位，比去年增加62位。北京和深圳连续两年拉大与第三名上海的距离.上海137位，比去年增加44位。人数涨幅最大的是长沙，增加20人，达到32人。杭州、宁波、常州、苏州、厦门和成都的涨幅也都在50%以上。 ——《东方财富网》 另外，有3位文体明星备受瞩目，也荣登上榜。 赵薇以40亿的身价位列第947名。 李连杰以25亿位列1496。 运动员姚明以21亿位列第1690。 上榜人数中21%位女富豪，榜单上仅有5%的企业家是继承财富，剩下的95%的富豪都是白手起家，一点一点挣起来的。给了我们创业者莫大的鼓励！！ 点击 【超级表格】 ，立刻体验轻松办公！ 多人协作的在线表格 优美的企业管理软件   超级表格微信公众号：chaojibiaoge 上一篇 15年IT经验，如何从一无所有成为上市公司高层！ 下一篇 微信支付不再免费，浅谈它的四年发展史 顶 0 踩 1 我的同类文章 创业故事 （43） http://blog.csdn.net 猜你在找 查看评论 * 以上用户言论只代表其个人观点，不代表CSDN网站的观点或立场 文章搜索 阅读排行 我与刘强东的故事：他的1000亿和我的5000万 (74659) 2013，我的创业记忆片段 (3811) 上海商报:超级表格创始人叫板Excel (3699) 超级表格全新界面全新体验 (3472) 一支巧乐兹引发的感想(这个标题实在没有创意) (3405) 只有在中华帝都才能免费享受到的北大商业课程：财富定律与愿景规划 (3173) 在中关村创业大街Binggo这半年 (3100) 直击中关村创业大街，新街头霸王来了 (3037) 《一见》采访超级表格创始人陈坤极 (2948) 从软件工程师的角度看MacBook Air的几个设计亮点 (2948) 个人资料 kongki 访问： 203897次 积分： 2690 等级： 积分：2690 排名： 第7676名 原创： 99篇 转载： 1篇 译文： 0篇 评论： 233条 最新评论 即将被裁掉，她是如何替他力挽狂澜？ zzznnn : 嗯,软文 即将被裁掉，她是如何替他力挽狂澜？ weixin_33492943 : 这广告打的啪啪的 我与刘强东的故事：他的1000亿和我的5000万 alex159s : 公司用，感觉的确不错吧。互联网多人协作的模式，完全摒弃了办公中各人生在全国各地的问题，每天自己按时上... 从普通程序员到估值上亿的公司老板，他只用了1年！ u010927640 : 希望这个超大能量场能遍及世界各地。 稳定高薪vs追求梦想，当你在犹豫时别人已经放弃新加坡绿卡！ kongki : @qq_25223941:恩啊。人生就是不断拼搏的过程！ 稳定高薪vs追求梦想，当你在犹豫时别人已经放弃新加坡绿卡！ kongki : @allan_chan:没错！ 稳定高薪vs追求梦想，当你在犹豫时别人已经放弃新加坡绿卡！ allan_chan : 只有向前~~~ 稳定高薪vs追求梦想，当你在犹豫时别人已经放弃新加坡绿卡！ qq_25223941 : 就是要拼 人生才有意义！ 超级表格全新界面全新体验 kongki : @zjy15203167987:你喜欢就好啊！哈哈 当你躲在被窝里点外卖时，看看比你忙碌100倍的领导者们是如何坚持跑步的？！ kongki : @u010786678:只要对您有价值，我们就值了。

Recno:: 4
URL:: http://blog.csdn.net/foruok/article/details/50258567

ParseText::
加班到底有什么用 - 程序视界，漫谈程序人生，原创，有趣，有料，有能量 - 博客频道 - CSDN.NET 程序视界，漫谈程序人生，原创，有趣，有料，有能量 关注程序员的职业规划，愿更多人找到适合自己的修行路 目录视图 摘要视图 订阅 学院APP首次下载，可得50C币！     欢迎来帮助开源“进步”     当讲师？爱学习？投票攒课吧     认识Atlassian Datacenter产品     深圳小伙伴的福利来啦 加班到底有什么用 标签： 程序开发 加班 软件开发 程序员 2015-12-11 06:43 2695人阅读 评论 (20) 收藏 举报 分类： 随笔 （68） 作者同类文章 X 版权声明：本文为foruok原创文章，未经博主允许不得转载。 最近在阅读温伯格的《程序员开发心理学》，这本44年前的书，其中的很多探索和观点，现在看来依然鲜活而不过时。它开创了以人为本的软件开发研究方法，是软件从业者思想启蒙的巨著，技术人生的必读经典。我在我的订阅号“程序视界”的每周一书栏目里推荐了它，回复10067可以查看。 当我想讨论加班到底有什么用时，《程序开发心理学》中的一些内容如同弹幕一样从眼前浮现，启发了我。 放眼周围，到处都是加班的程序员。我原来在零壹广场时，有时披着月光到路边打车，出租车司机就会和我聊天，说你是华为（华为在我们对面有个研发中心）的吧……其实，我不是的。很多公司都加班，这是软件开发从业者的噩梦。 我应聘时被人问过“你怎么看待加班这件事”这个问题，我面试别人时也问过这个问题。有的人这么回答：“我希望能在正常的工作时间内有效的完成工作，如果情况需要，也可以适度加班”。有的人这么回答：“我就是因为受不了加班才从上家公司离职的”。 这次我不想讨论这些，我只想理一理另外一个问题：加班到底有什么用？ 尽管多数程序员对加班深恶痛绝，但加班并不是毫无作用。首先它有很多负面作用： 让程序员厌恶眼下的工作 让程序员厌恶传递加班指示的领导 让程序员厌恶所在的团队 让程序员厌恶所在的公司 让程序员无法对他需要照顾的家人交代 让程序员怀疑他所从事的这一行是否能长久干下去 降低工作效率 浪费公司资源（水、电、办公用品等） 耽误正常工作 造成“正常工作时间瞎胡混，加班赶白天落下的进度”这种工作方式 有效降低程序员的工作积极性 交付低质量和埋了各种雷的产品 其次，实际上，不管对个人还是对公司，它也可能多多少少有一些“积极”作用： 造成一种假象，让领导觉得大家都在忙，心里踏实 造成团队凝聚力、执行力高的假象 不能按时交付时，向老板和客户展示努力的过程，给个不是交代的交代 对于依赖工时的任务，是有效的 有助于那些不推不动的人产出点东西 对于海绵一样的新手或极度渴望学习的程序员，可以学到一些知识、技能、经验 磨练程序员的心性，让程序员变得敷衍或者淡然 影响绩效 从另一个维度来说，加班有没有作用，就看这次加班，这个人是接纳的，还是拒绝的。假如阿猿乐意通过加班来完成某些事情，那自然是有效果的，因为这样的加班有明确的目的性，阿猿是自发地奔向它的目的。此时的加班，不觉其苦，反倒有愉悦之感，只恨时间飞逝不能多做停留。 《程序开发心理学》在“积极性、培训及经验”一章里有这么一段话： 过于努力地去查找错误，与根本不去查找同样坏，甚至还要更坏。实际上，往往要等到程序员已经决定放弃从而不再承受压力之后，许多程序错误才能被排除掉。给程序员施加高压，以期他们能够很快地排除某个程序错误，这种做法已经被证明是最差的策略——尽管截至目前，这仍是最常被采用的策略。 44年过去了，温伯格的话还没过时，我们还天天在用这种“压一压就出活”的策略，想想真是令人唏嘘。 更多精彩文章，参看“ 漫谈程序员 ”专栏。 困惑、成长、发展、增值、新知，尽在微信订阅号“程序视界”： 上一篇 35岁程序员的独家面试经历 下一篇 如何成为技术领导者 顶 10 踩 0 我的同类文章 随笔 （68） http://blog.csdn.net 猜你在找 查看评论 * 以上用户言论只代表其个人观点，不代表CSDN网站的观点或立场 我的微信订阅号“程序视界” 微信扫一扫： IT职业咨询QQ群：522419415 个人资料 foruok 访问： 1819961次 积分： 20930 等级： 积分：20930 排名： 第189名 原创： 244篇 转载： 3篇 译文： 13篇 评论： 3193条 我的课程 更多 Qt Quick 4小时入... 难度：初级 类型：技术教程 Qt网络编程实战之HTTP... 难度：中级 类型：实战教学 JavaScript fo... 难度：中级 类型：实战教学 我的视频课程 Qt基础与Qt on Android入门 Node.js(MEAN)全栈开发入门 视频：Qt基础与Qt on Android入门 我的图书 《Qt on Android核心编程》 京东 当当 《Qt Quick核心编程》 京东 当当 友情链接 渡世白玉 多多指教-寒山居士 彩阳 QTCN 一去二三里 Jason's Home 鸿洋的Android世界 去问津找我 博客专栏 Node.js开发入门 文章：21篇 阅读：33252 漫谈程序员 文章：62篇 阅读：911300 Qt Quick简明教程 文章：30篇 阅读：192477 Qt on Android 文章：38篇 阅读：255870 C语言面向对象编程 文章：6篇 阅读：35167 文章分类 android开发 (55) Qt (79) 研发管理 (11) C/C++ (15) 设计 (10) 网络编程 (36) win32 (8) 泛技术 (11) 脚本语言 (9) 随笔 (69) 多媒体 (0) 翻译 (10) 生活 (3) 阅读排行 漫谈程序员系列：咦，你也在混日子啊 (164303) Windows下Qt 5.2 for Android开发入门 (57117) 漫谈程序员系列：怎样成为技术达人 (37205) 漫谈程序员系列：一张图道尽程序员的出路 (35020) Android开源框架AsyncHttpClient (android-async-http)使用 (31754) 漫谈程序员系列：怎么告别“混日子” (29749) 漫谈程序员系列：一个老程序员的2014年终总结 (26488) Qt Quick 之 QML 与 C++ 混合编程详解 (26022) 漫谈程序员系列：看看你离优秀有多远 (25604) 月薪3万的程序员都避开了哪些坑 (23708) 评论排行 漫谈程序员系列：一个老程序员的2014年终总结 (137) 漫谈程序员系列：一张图道尽程序员的出路 (84) 月薪3万的程序员都避开了哪些坑 (83) 程序员保值的4个秘密 (79) 漫谈程序员系列：咦，你也在混日子啊 (75) 漫谈程序员系列：看看你离优秀有多远 (74) 漫谈程序员系列：怎样成为技术达人 (74) 程序员跳槽神级攻略 (64) 大龄程序员的未来在何方 (60) 漫谈程序员系列：请区别对待女程序员 (59)

Recno:: 5
URL:: http://blog.csdn.net/foruok/article/details/50389497

ParseText::
Qt SDK的x64与x86版本以及与VS的配合 - 程序视界，漫谈程序人生，原创，有趣，有料，有能量 - 博客频道 - CSDN.NET 程序视界，漫谈程序人生，原创，有趣，有料，有能量 关注程序员的职业规划，愿更多人找到适合自己的修行路 目录视图 摘要视图 订阅 学院APP首次下载，可得50C币！     欢迎来帮助开源“进步”     当讲师？爱学习？投票攒课吧     认识Atlassian Datacenter产品     深圳小伙伴的福利来啦 Qt SDK的x64与x86版本以及与VS的配合 标签： sdk qt visual studio VS-2013 2015-12-23 20:20 631人阅读 评论 (0) 收藏 举报 分类： Qt （79） 作者同类文章 X 版权声明：本文为foruok原创文章，未经博主允许不得转载。 今天遇到一个奇怪的问题，我用Qt的64位版本，动态加载一个SDK的dll，无论如何都是加载失败，QLibrary也没什么有价值的信息。 实在没辙，就用VS2013写了个小程序，用LoadLibrary来加载，嘿，碰见了RC1106错误，挡了我1个小时，最后看这里（ http://blog.csdn.net/zhongchengli/article/details/6152492 ）解决掉了这个错误。然后，调用DLL居然成了。 于是我把Qt Creator里的项目导入到VS 2013中，心想可能会好呢，死马当作活马医吧，结果还是不好。 一怒之下，把QLibrary替换为LoadLibrary何GetProcAddress，结果还是不好。 于是我整个人都不好了。苦苦思索中，后来忽然想到目标平台，于是就去看我的小demo，发现时x86的。而我的Qt SDK和项目，是x64的。再看我用的SDK，也是x86的。 尼玛，问题找到了！重新到qt.io下载去，看下图： 看到了没，我标注的部分，带64的那个安装包，安装出来的Qt环境，库都是x64的，你用它建立的项目，默认生成的目标文件也是x64的。如果你去混合使用其他x86的SDK，就会遇到和我类似的问题。 我安装了32位的Qt SDK，结果我计算机上Qt版本太多，把VS 2013给搞乱了……编译的应用跑都跑不起来……一顿乱调整环境，把VS 2013里项目属性页中调试分类里的环境这一项的值设置了固定的Qt路径，终于可以运行了…… 一个小问题来来回回折磨了将近3个小时，真是想不到……开发真是充满惊喜，你想不到你会在哪个坑里耽搁半天，耽搁多了，进度会大大偏离预期，而我们在做计划时往往看不到这些行进过程中的小障碍，所以，怎么评估都是乐观的，所以我是 乐观的程序员 。 上一篇 做自己想做的工作，你也可以 顶 0 踩 0 我的同类文章 Qt （79） http://blog.csdn.net 猜你在找 查看评论 * 以上用户言论只代表其个人观点，不代表CSDN网站的观点或立场 我的微信订阅号“程序视界” 微信扫一扫： IT职业咨询QQ群：522419415 个人资料 foruok 访问： 1819959次 积分： 20930 等级： 积分：20930 排名： 第189名 原创： 244篇 转载： 3篇 译文： 13篇 评论： 3193条 我的课程 更多 Qt Quick 4小时入... 难度：初级 类型：技术教程 Qt网络编程实战之HTTP... 难度：中级 类型：实战教学 JavaScript fo... 难度：中级 类型：实战教学 我的视频课程 Qt基础与Qt on Android入门 Node.js(MEAN)全栈开发入门 视频：Qt基础与Qt on Android入门 我的图书 《Qt on Android核心编程》 京东 当当 《Qt Quick核心编程》 京东 当当 友情链接 渡世白玉 多多指教-寒山居士 彩阳 QTCN 一去二三里 Jason's Home 鸿洋的Android世界 去问津找我 博客专栏 Node.js开发入门 文章：21篇 阅读：33252 漫谈程序员 文章：62篇 阅读：911300 Qt Quick简明教程 文章：30篇 阅读：192477 Qt on Android 文章：38篇 阅读：255870 C语言面向对象编程 文章：6篇 阅读：35167 文章分类 android开发 (55) Qt (79) 研发管理 (11) C/C++ (15) 设计 (10) 网络编程 (36) win32 (8) 泛技术 (11) 脚本语言 (9) 随笔 (69) 多媒体 (0) 翻译 (10) 生活 (3) 阅读排行 漫谈程序员系列：咦，你也在混日子啊 (164303) Windows下Qt 5.2 for Android开发入门 (57117) 漫谈程序员系列：怎样成为技术达人 (37205) 漫谈程序员系列：一张图道尽程序员的出路 (35020) Android开源框架AsyncHttpClient (android-async-http)使用 (31754) 漫谈程序员系列：怎么告别“混日子” (29749) 漫谈程序员系列：一个老程序员的2014年终总结 (26488) Qt Quick 之 QML 与 C++ 混合编程详解 (26022) 漫谈程序员系列：看看你离优秀有多远 (25604) 月薪3万的程序员都避开了哪些坑 (23708) 评论排行 漫谈程序员系列：一个老程序员的2014年终总结 (137) 漫谈程序员系列：一张图道尽程序员的出路 (84) 月薪3万的程序员都避开了哪些坑 (83) 程序员保值的4个秘密 (79) 漫谈程序员系列：咦，你也在混日子啊 (75) 漫谈程序员系列：看看你离优秀有多远 (74) 漫谈程序员系列：怎样成为技术达人 (74) 程序员跳槽神级攻略 (64) 大龄程序员的未来在何方 (60) 漫谈程序员系列：请区别对待女程序员 (59)

Recno:: 6
URL:: http://blog.csdn.net/haomengzhu/article/details/26577633

ParseText::
手机支付宝扫一扫 给郝萌主捐赠 - 郝萌主-Cocos2d-x、iOS - 博客频道 - CSDN.NET 郝萌主-Cocos2d-x、iOS 伟大是熬出来的，专注于移动应用和游戏开发的技术博客 目录视图 摘要视图 订阅 学院APP首次下载，可得50C币！     欢迎来帮助开源“进步”     当讲师？爱学习？投票攒课吧     认识Atlassian Datacenter产品     深圳小伙伴的福利来啦 [置顶] 手机支付宝扫一扫 给郝萌主捐赠 标签： 游戏开发 cocos2d-x 源代码 手机支付 手机网游 2014-05-22 13:02 2031人阅读 评论 (0) 收藏 举报 分类： 萌主的”人生“ （15） 作者同类文章 X 版权声明：本文为博主原创文章，未经博主允许不得转载。 更多游戏源码，请点击我 如果文章对您有所帮助，欢迎给作者捐赠，支持郝萌主的独立游戏工作，捐赠数额随意，重在心意^_^ + -------------------------------------------------------- End -------------------------------------------------------- 如果文章对您有所帮助，欢迎给作者捐赠，支持郝萌主的独立游戏工作，捐赠数额随意，重在心意^_^ +  --------------------------------------------------------------------------------------------------------------------- 更多游戏源码，请点击我 上一篇 【cocos2d-x IOS游戏开发】cocos2d-x视频专辑链接汇总 下一篇 郝萌主的微信公众号上线了 顶 3 踩 3 我的同类文章 萌主的”人生“ （15） http://blog.csdn.net 猜你在找 查看评论 * 以上用户言论只代表其个人观点，不代表CSDN网站的观点或立场 个人资料 danielzzu 访问： 262001次 积分： 4750 等级： 积分：4750 排名： 第3201名 原创： 190篇 转载： 3篇 译文： 1篇 评论： 184条 博客公告 Name:郝萌主 QQ: 120641476 邮箱: imobfun@163.com 加我QQ好友 Cocos2d-x手游源码站 文章搜索 博客专栏 cocos2d-swift游戏开发实战 文章：1篇 阅读：1428 从零开始iOS8编程 文章：11篇 阅读：8125 Objective-C之成魔之路 文章：21篇 阅读：16167 cocos2d-x3.0游戏开发 文章：25篇 阅读：51565 左邻右舍 精品手游源码下载 小塔博客 文章分类 iOS编程之设计模式 (1) Objective-C之成魔之路 (21) 从零开始iOS8编程 (53) MAC and Xcode全攻略 (10) Cocos2dx 3.0游戏开发找小三 (26) cocos2d-x IOS游戏开发-捕鱼达人 (23) Cocos2d-X IOS游戏开发-城市跑酷 (20) Cocos2d-X游戏【泰然网《跑酷》】JS到C++移植 (12) 手游<进击的勇士>【cocos2d-x+json】 (6) 新游戏开发 (7) 软件开发 (6) 萌主的”人生“ (16) Cocos2d-X视频专辑+动作类游戏 (4) iOS开发之十万个为什么 (1) 文章存档 2015年12月 (10) 2015年11月 (3) 2015年08月 (5) 2015年07月 (13) 2015年06月 (30) 2015年01月 (1) 2014年12月 (3) 2014年11月 (31) 2014年10月 (5) 2014年07月 (2) 2014年06月 (13) 2014年05月 (16) 2014年03月 (1) 2014年01月 (1) 2013年12月 (59) 阅读排行 cocos2d-x 手游源码站 (6114) Cocos2d-x 手机游戏《疯狂的蝌蚪》源代码 “开源” win32+安卓+iOS三合一 (4222) 【cocos2d-x IOS游戏开发-城市跑酷1】跑酷游戏介绍 (4074) Cocos2d-X游戏【泰然网《跑酷》】JS到C++移植1：环境搭建及Parkour介绍 (3985) Cocos2d-X游戏【泰然网《跑酷》】JS到C++移植6：Running This Way (3840) Cocos2d-X游戏【泰然网《跑酷》】JS到C++移植5：初始化物理世界【Chipmunk】 (3703) [置顶]【cocos2d-x IOS游戏开发】2013年末开发及学习计划 (3581) 3、Cocos2dx 3.0游戏开发找小三之搭建开发环境 (3315) 【cocos2d-x IOS游戏开发-城市跑酷16】碰撞检测：撞墙 or 从房子上掉下来 (3183) 4、Cocos2dx 3.0游戏开发找小三之Hello World 分析 (3131) 推荐文章 *App竞品技术分析 （6）热修复 *架构设计：系统间通信（17）——服务治理与Dubbo 中篇（分析） *一款炫酷Loading动画--加载失败 *图解堆算法、链表、栈与队列（多图预警） *Android中ContentProvider组件详解 *Android平台Camera实时滤镜实现方法探讨(九)--磨皮算法探讨(一)

Recno:: 7
URL:: http://blog.csdn.net/haomengzhu/article/details/37829061

ParseText::
cocos2d-x 手游源码站 - 郝萌主-Cocos2d-x、iOS - 博客频道 - CSDN.NET 郝萌主-Cocos2d-x、iOS 伟大是熬出来的，专注于移动应用和游戏开发的技术博客 目录视图 摘要视图 订阅 学院APP首次下载，可得50C币！     欢迎来帮助开源“进步”     当讲师？爱学习？投票攒课吧     认识Atlassian Datacenter产品     深圳小伙伴的福利来啦 [置顶] cocos2d-x 手游源码站 2014-07-15 23:16 6121人阅读 评论 (0) 收藏 举报 分类： 萌主的”人生“ （15） 作者同类文章 X 版权声明：本文为博主原创文章，未经博主允许不得转载。 尊重开发者的劳动成果，转载的时候请务必注明出处 ： http://blog.csdn.net/haomengzhu/article/details/37829061 1、魔幻方块 链接： 魔幻方块源码 关键词： 魔幻方块 源码 源代码 Cocos2d-x2 .0  游戏源码 益智  休闲 游戏 游戏类型： 休闲益智 游戏使用引擎： Cocos2d-x V2 .0 代码平台： Windows VS2012 版权说明： 该游戏由本人开发，买家购买后可任意使用代码（但不能转卖、不能使用相关资源文件用于商业用途）。 游戏版本： V1. 0 游戏预览： 游戏已移植到Android版本，可下载体验： http://www.mumayi.com/android-621794.html?1400403268/ 游戏包含的主要功能： 1、 游戏源码可作为Cocos2d-x2.0 入门参考 2、集成WiYun广告，可以参考怎么在游戏中加入广告 3、集成WiYun排行榜功能 游戏截图：   2、有种来solo 链接： 有种来solo源码 关键词： 自动战斗 源码 源代码 Cocos2d-x2 .0  游戏源码  游戏 战斗 dota solo 游戏类型： 休闲益智 dota solo 游戏使用引擎： Cocos2d-x V2 .0 代码平台： Windows VS2012 版权说明： 该游戏由本人开发，买家购买后可任意使用代码（但不能转卖、不能使用相关资源文件用于商业用途）。 游戏版本： V1. 0 游戏预览： 游戏已移植到Android版本，可下载体验： http://www.mumayi.com/android-639259.html 游戏包含的主要功能： 1、 游戏源码可作为Cocos2d-x2.0 入门参考 2、布阵小兵 3、天灾与近卫的战斗 4、卡牌战斗参考 代码结构（部分截图）： 游戏截图： 3、水果爆爆乐 链接： 水果爆爆乐源码 关键词：消除游戏 源码 源代码 Cocos2d-x3.0 一键分享 集成微博好友 游戏类型： 休闲益智 消除爆爆乐 游戏使用引擎： Cocos2d-x V3 .0 代码平台： Windows VS2012 版权说明： 该游戏由本人开发，买家购买后可任意使用代码（但不能转卖、不能使用相关资源文件用于商业用途）。 游戏版本： V1. 0 游戏预览： 游戏已移植到Android版本， 木蚂蚁游戏体验： http://www.mumayi.com/android-635779.html 游戏包含的主要功能： 1、 游戏源码可作为Cocos2d-x3.0 入门参考 2、集成腾讯、新浪微博好友 3、集成排行榜功能 4、集成分享炫耀功能 游戏简介： 水果爆爆乐fruitbang一款消除类游戏，游戏每局60秒，这段时间内玩家要尽量消除水果。 解锁所有秘密和魔法超能力：消除水果直到您将水果魔法槽填满！别忘了使用水果来释放魔法超能力！ 游戏截图： 4、找小三 链接： 找小三源码 关键词：找茬 游戏 源码 源代码  Cocos2d-x V2 .0   Cocos2d-x3.0 集成数据库 游戏类型： 休闲 益智 找茬 游戏使用引擎： Cocos2d-x V3 .0  Cocos2d-x V2 .0  代码平台： Windows VS2012 版权说明： 该游戏由本人开发，买家购买后可任意使用代码（但不能转卖、不能使用相关资源文件用于商业用途）。 游戏版本： V1. 0 游戏预览：cocos2d-x3.0找小三源码win32版 游戏包含的主要功能： 1、 游戏源码可作为Cocos2d-x3.0 和 Cocos2d-x V2 .0的 入门参考 2、找茬游戏模型 3、角色技能升级 4、集成sql数据库 游戏简介： 简单的找茬游戏，学习、项目开发参考之必备源码、、、 游戏截图： 上一篇 24、Cocos2dx 3.0游戏开发找小三之网格动作：高炫酷的3D动作 下一篇 休闲娱乐游戏-贱鸟跳跳 顶 1 踩 0 我的同类文章 萌主的”人生“ （15） http://blog.csdn.net 猜你在找 查看评论 * 以上用户言论只代表其个人观点，不代表CSDN网站的观点或立场 个人资料 danielzzu 访问： 262000次 积分： 4750 等级： 积分：4750 排名： 第3201名 原创： 190篇 转载： 3篇 译文： 1篇 评论： 184条 博客公告 Name:郝萌主 QQ: 120641476 邮箱: imobfun@163.com 加我QQ好友 Cocos2d-x手游源码站 文章搜索 博客专栏 cocos2d-swift游戏开发实战 文章：1篇 阅读：1428 从零开始iOS8编程 文章：11篇 阅读：8125 Objective-C之成魔之路 文章：21篇 阅读：16167 cocos2d-x3.0游戏开发 文章：25篇 阅读：51565 左邻右舍 精品手游源码下载 小塔博客 文章分类 iOS编程之设计模式 (1) Objective-C之成魔之路 (21) 从零开始iOS8编程 (53) MAC and Xcode全攻略 (10) Cocos2dx 3.0游戏开发找小三 (26) cocos2d-x IOS游戏开发-捕鱼达人 (23) Cocos2d-X IOS游戏开发-城市跑酷 (20) Cocos2d-X游戏【泰然网《跑酷》】JS到C++移植 (12) 手游<进击的勇士>【cocos2d-x+json】 (6) 新游戏开发 (7) 软件开发 (6) 萌主的”人生“ (16) Cocos2d-X视频专辑+动作类游戏 (4) iOS开发之十万个为什么 (1) 文章存档 2015年12月 (10) 2015年11月 (3) 2015年08月 (5) 2015年07月 (13) 2015年06月 (30) 2015年01月 (1) 2014年12月 (3) 2014年11月 (31) 2014年10月 (5) 2014年07月 (2) 2014年06月 (13) 2014年05月 (16) 2014年03月 (1)

Recno:: 8
URL:: http://blog.csdn.net/haomengzhu/article/details/41266515

ParseText::
Cocos2d-x 手机游戏《疯狂的蝌蚪》源代码 “开源” win32+安卓+iOS三合一 - 郝萌主-Cocos2d-x、iOS - 博客频道 - CSDN.NET 郝萌主-Cocos2d-x、iOS 伟大是熬出来的，专注于移动应用和游戏开发的技术博客 目录视图 摘要视图 订阅 学院APP首次下载，可得50C币！     欢迎来帮助开源“进步”     当讲师？爱学习？投票攒课吧     认识Atlassian Datacenter产品     深圳小伙伴的福利来啦 [置顶] Cocos2d-x 手机游戏《疯狂的蝌蚪》源代码 “开源” win32+安卓+iOS三合一 标签： cocos2d-x 手机游戏 源代码 开源 ios 2014-11-19 01:06 4231人阅读 评论 (7) 收藏 举报 分类： 新游戏开发 （6） 作者同类文章 X 版权声明：本文为博主原创文章，未经博主允许不得转载。 郝萌主倾心贡献，尊重作者的劳动成果，转载请注明出处 From郝萌主。 如果文章对您有所帮助，欢迎给作者捐赠，支持郝萌主，捐赠数额随意，重在心意^_^  我要捐赠:  点击捐赠 Cocos2d-X源码下载： 点我传送 游戏简介： 《疯狂的蝌蚪》是一个很邪恶的角色扮演加休闲防守游戏。 2015年1月1日，城堡将存在青蛙过剩的风险。似乎青蛙注定要死于缺乏食物。 但是你可以拯救魔幻城堡和它的青蛙子民们！ 现在，你要和机灵的的"蝌蚪"们战斗，阻止新生命的诞生。  【游戏玩法】 玩家发射炮弹杀死屏幕上的不停的蠕动的" 蝌蚪" ，以防止其接触到青蛙导致怀孕。。。 注意配合不同的魔法来防御这些疯狂的" 蝌蚪" 们的进攻哦。。。 还要记得升级魔法哦、、 地狱焱火、双龙戏珠、灭绝天雷， 以吾之名，召唤，粉碎这些疯狂的" 蝌蚪" 吧、、、 APP体验下载地址： http://www.mumayi.com/android-853293.html?1412956168 疯狂的蝌蚪源码传送门： 源码 下载 更多游戏开源请前往： cocos2d-x 手游源码站 更多游戏请关注： http://blog.csdn.net/haomengzhu 游戏截图： 上一篇 Objective-C之成魔之路【19-归档】 下一篇 从零开始iOS8编程【HelloWorld】 顶 1 踩 1 我的同类文章 新游戏开发 （6） http://blog.csdn.net 猜你在找 查看评论 * 以上用户言论只代表其个人观点，不代表CSDN网站的观点或立场 个人资料 danielzzu 访问： 261999次 积分： 4750 等级： 积分：4750 排名： 第3201名 原创： 190篇 转载： 3篇 译文： 1篇 评论： 184条 博客公告 Name:郝萌主 QQ: 120641476 邮箱: imobfun@163.com 加我QQ好友 Cocos2d-x手游源码站 文章搜索 博客专栏 cocos2d-swift游戏开发实战 文章：1篇 阅读：1428 从零开始iOS8编程 文章：11篇 阅读：8125 Objective-C之成魔之路 文章：21篇 阅读：16167 cocos2d-x3.0游戏开发 文章：25篇 阅读：51565 左邻右舍 精品手游源码下载 小塔博客 文章分类 iOS编程之设计模式 (1) Objective-C之成魔之路 (21) 从零开始iOS8编程 (53) MAC and Xcode全攻略 (10) Cocos2dx 3.0游戏开发找小三 (26) cocos2d-x IOS游戏开发-捕鱼达人 (23) Cocos2d-X IOS游戏开发-城市跑酷 (20) Cocos2d-X游戏【泰然网《跑酷》】JS到C++移植 (12) 手游<进击的勇士>【cocos2d-x+json】 (6) 新游戏开发 (7) 软件开发 (6) 萌主的”人生“ (16) Cocos2d-X视频专辑+动作类游戏 (4) iOS开发之十万个为什么 (1) 文章存档 2015年12月 (10) 2015年11月 (3) 2015年08月 (5) 2015年07月 (13) 2015年06月 (30) 2015年01月 (1) 2014年12月 (3) 2014年11月 (31) 2014年10月 (5) 2014年07月 (2) 2014年06月 (13) 2014年05月 (16) 2014年03月 (1) 2014年01月 (1) 2013年12月 (59) 阅读排行 cocos2d-x 手游源码站 (6114) Cocos2d-x 手机游戏《疯狂的蝌蚪》源代码 “开源” win32+安卓+iOS三合一 (4222) 【cocos2d-x IOS游戏开发-城市跑酷1】跑酷游戏介绍 (4074) Cocos2d-X游戏【泰然网《跑酷》】JS到C++移植1：环境搭建及Parkour介绍 (3985) Cocos2d-X游戏【泰然网《跑酷》】JS到C++移植6：Running This Way (3840) Cocos2d-X游戏【泰然网《跑酷》】JS到C++移植5：初始化物理世界【Chipmunk】 (3703) [置顶]【cocos2d-x IOS游戏开发】2013年末开发及学习计划 (3581) 3、Cocos2dx 3.0游戏开发找小三之搭建开发环境 (3315) 【cocos2d-x IOS游戏开发-城市跑酷16】碰撞检测：撞墙 or 从房子上掉下来 (3183) 4、Cocos2dx 3.0游戏开发找小三之Hello World 分析 (3131) 推荐文章 *App竞品技术分析 （6）热修复 *架构设计：系统间通信（17）——服务治理与Dubbo 中篇（分析） *一款炫酷Loading动画--加载失败 *图解堆算法、链表、栈与队列（多图预警） *Android中ContentProvider组件详解 *Android平台Camera实时滤镜实现方法探讨(九)--磨皮算法探讨(一)

Recno:: 9
URL:: http://blog.csdn.net/itmyhome1990/article/details/50380718

ParseText::
Oracle的REGEXP_REPLACE函数简单用法 - itmyhome的专栏 - 博客频道 - CSDN.NET itmyhome的专栏 我们的生命，就是以不断出发的姿势得到重生 走在路上 无法停息...... 目录视图 摘要视图 订阅 学院APP首次下载，可得50C币！     欢迎来帮助开源“进步”     当讲师？爱学习？投票攒课吧     认识Atlassian Datacenter产品     深圳小伙伴的福利来啦 Oracle的REGEXP_REPLACE函数简单用法 标签： oracle 函数 2015-12-24 22:40 489人阅读 评论 (0) 收藏 举报 分类： Oracle （46） 作者同类文章 X 版权声明：本文为博主原创文章，未经博主允许不得转载。 REGEXP_REPLACE让你搜索的字符串的正则表达式模式REPLACE函数的功能。默认情况下， 该函数返回source_char与replace_string取代了正则表达式模式的每个实例。 返回的字符串是在相同的字符集source_char。 语法 Oracle数据库中的REGEXP_REPLACE函数的语法是： REGEXP_REPLACE(source_char, pattern [, replace_string [, position [, occurrence [, match_parameter ] ] ] ] ) 参数 source_char 搜索值的字符表达式。这通常是一个字符列，可以是任何数据类型CHAR，VARCHAR2，NCHAR，NVARCHAR2，CLOB或NCLOB。 pattern 正则表达式 Value Description ^ Matches the beginning of a string. If used with a match_parameter of ‘m’, it matches the start of a line anywhere within expression . $ Matches the end of a string. If used with a match_parameter of ‘m’, it matches the end of a line anywhere within expression . * 匹配零个或多个. + 匹配一个或多个出现. ? 匹配零次或一次出现. . 匹配任何字符，除了空. | Used like an "OR" to specify more than one alternative. [ ] Used to specify a matching list where you are trying to match any one of the characters in the list. [^ ] Used to specify a nonmatching list where you are trying to match any character except for the ones in the list. ( ) Used to group expressions as a subexpression. {m} Matches m times. {m,} Matches at least m times. {m,n} Matches at least m times, but no more than n times. \n n is a number between 1 and 9. Matches the nth subexpression found within ( ) before encountering \n. [..] Matches one collation element that can be more than one character. [::] Matches character classes. [==] Matches equivalence classes. \d 匹配一个数字字符. \D 匹配一个非数字字符. \w 匹配包括下划线的任何单词字符. \W 匹配任何非单词字符. \s 匹配任何空白字符，包括空格、制表符、换页符等等. \S 匹配任何非空白字符. \A Matches the beginning of a string or matches at the end of a string before a newline character. \Z Matches at the end of a string. *? Matches the preceding pattern zero or more occurrences. +? Matches the preceding pattern one or more occurrences. ?? Matches the preceding pattern zero or one occurrence. {n}? Matches the preceding pattern n times. {n,}? Matches the preceding pattern at least n times. {n,m}? Matches the preceding pattern at least n times, but not more than m times. replace_string 可选。匹配的模式将被替换replace_string字符串。如果省略replace_string参数， 将删除所有匹配的模式，并返回结果字符串。 position 可选。在字符串中的开始位置搜索。如果省略，则默认为1。 occurrence 可选。是一个非负整数默认为1，指示替换操作的发生： 如果指定0，那么所有出现将被替换字符串。 如果指定了正整数n，那么将替换第n次出现。 match_parameter 可选。它允许你修改REGEXP_REPLACE功能匹配的行为。它可以是以下的组合： Value Description ‘c’ 区分大小写的匹配. ‘i’ 不区分大小写的匹配. ‘n’ Allows the period character (.) to match the newline character. By default, the period is a wildcard. ‘m’ expression is assumed to have multiple lines, where ^ is the start of a line and $ is the end of a line, regardless of the position of those characters in expression . By default, expression is assumed to be a single line. ‘x’ Whitespace characters are ignored. By default, whitespace characters are matched like any other character. EXAMPLE - 匹配第一个字 让我们开始使用REGEXP_REPLACE函数替换字符串中的第一个字。 For example: SELECT REGEXP_REPLACE ( 'itmyhome is my network id' , '^(\S*)' , 'luck' ) FROM dual; Result: luck is my network id 这个例子会返回”luck is my network id”， 因为它会再字符串的开始找到第一个匹配的字符，然后替换为”luck” EXAMPLE - 匹配数字字符 我们将使用REGEXP_REPLACE函数来匹配单个数字字符模式。 For example: SELECT REGEXP_REPLACE ( '2, 5, and 10 are numbers in this example' , '\d' , '#' ) FROM dual; Result: '#, #, and ## are numbers in this example' 此示例将所指定的 \d 数字将以#字符替换 我们可以改变我们的正则模式来搜索仅两位数字。 For example: SELECT REGEXP_REPLACE ( '2, 5, and 10 are numbers in this example' , '(\d)(\d)' , '#' ) FROM dual; Result: '2, 5, and # are numbers in this example' 这个例子将替换具有两个数字并排指定的 (\d)(\d) 模式。在这种情况下，它将跳过2和5个数字值和用#字符替换10。 作者： itmyhome 上一篇 Oracle的REGEXP_INSTR函数简单用法 顶 0 踩 0 我的同类文章 Oracle （46） http://blog.csdn.net 猜你在找 查看评论 * 以上用户言论只代表其个人观点，不代表CSDN网站的观点或立场 版权声明 本博客文章可以被转载，但未经本人许可，不得用于商业用途。 如需转载，请保证文章的完整性并注明出处。 友情链接 需要交换友链的请留言 赖信涛的个人网站 淡忘~浅思 程序员访谈录 轩枫阁-前端开发 麦田技术博客 虚位以待... 个人资料 itmyhome 访问： 953410次 积分： 18891 等级： 积分：18891 排名： 第232名 原创： 470篇 转载： 23篇 译文： 26篇 评论： 1385条 我的微博 文章搜索 博客专栏 Git教程 文章：7篇 阅读：15196 ibatis实战 文章：5篇 阅读：8904 springMVC3学习 文章：12篇 阅读：39104 锋利的jQuery 文章：6篇 阅读：14022 面试那些事儿 文章：12篇 阅读：22144 java学习笔记 文章：16篇 阅读：28288 文章分类 Git (14) jekyll (6) 编程语言 (28) JAVA (66) Struts1 (3) Struts2 (17) Hibernate (19) Spring (3) springMVC (12) jQuery (41) IBATIS (5) web前端 (39) EasyUI (19) JS (42) CKEditor (5) jQuery插件 (18) 数据库 (15) Oracle (47) MySQL (5) 架构设计 (7) 工作相关 (21) 异常错误 (29) 移动开发 (1) 工作之余 (11) 框架整合 (5) 关于面试 (12) 腾讯地图 (1) Simditor (2) KindEditor (2) Hexo (5) Coding (2) uploadify (1) Markdown (2) Ant (4) POI (2) 百度地图 (3) Maven (3) 博客统计 3Q  新博客： itmyhome.com  JAVA技术交流：74955800

Recno:: 10
URL:: http://blog.csdn.net/itmyhome1990/article/details/8769913

ParseText::
二十岁出头，你一无所有，但你却拥有一切 - itmyhome的专栏 - 博客频道 - CSDN.NET itmyhome的专栏 我们的生命，就是以不断出发的姿势得到重生 走在路上 无法停息...... 目录视图 摘要视图 订阅 学院APP首次下载，可得50C币！     欢迎来帮助开源“进步”     当讲师？爱学习？投票攒课吧     认识Atlassian Datacenter产品     深圳小伙伴的福利来啦 [置顶] 二十岁出头，你一无所有，但你却拥有一切 2013-04-07 22:19 3554人阅读 评论 (106) 收藏 举报 分类： 生活心情 （33） 作者同类文章 X 我从来没有看到过一句话，如此让我共鸣。 二十岁出头，你一无所有，但你却拥有一切，因为你还有牛逼的梦想。 可那又怎样， 只有行动，才能解除你所有的不安   （一）嘴上说说的人生 　　 　　那年我在离家的时候一个劲地往自己的硬盘里塞《灌篮高手》，我妈一副嗤之以鼻的表情 看着我，似乎是在说：“这么大的人了居然还这么喜欢看动漫。” 　　 　　我不知道怎么回应她，只好耸耸肩，因为我实在无法对我亲爱的娘亲说明这部动漫对我的 意义。 　　 　　你知道，有些歌有些东西就是有那种力量。哪怕它在你的手机里藏了好几年，哪怕它早就 过了黄金期，哪怕越来越少的人会提起它。你就是知道，当你一听起这首歌的时候，当你一看 起那些漫画的时候，你就会想到以前的自己，你就会获得一种莫名的力量。这种力量能够让你 感受到自己的节奏，让你以跟世界不同的方式独自运转着，你能听到自己。比如那首永远的 butterfly和直到世界的尽头，它们比记忆更可靠。 　　 　　在记忆里最让你印象深刻的，一定是当年的你自己。因为只有在这个时候才发现，在你嚷 嚷着“时间变化太快”的同时，在那些所谓的“物是人非”里，变化最多的人是你自己。我不 知道怎么样的人生是最可怕的，但是我知道当你有一天你回头看，当你发现你曾经所说的一切 ，你曾经信誓旦旦的一切变成说说而已的时候，一定不会好受到哪里去。 　　 　　好像人一长大，就会把很多东西给弄丢了。比如那些简单却能让自己充实开心一天的东西 ，比如让自己肆意哭和笑的能力，还有那些曾经一起结伴同行的人。最可怕的不是弄丢了这些 东西，而是你变得心安理得。你开始安慰自己，这就是成长，这就是我们最终会变成的样子。 你只是找了个借口继续这样的生活，对以前的自己嗤之以鼻。 　　 　　只是每当你听起以前的歌的时候，或者你看到某个人在他自己的道路坚持下去的时候，你 都会像被自己扇了一个大嘴巴。 　　 　　看着别人的努力羡慕一下然后转身回去过自己的生活的你，又凭什么去过自己想要的人生 ？ （二）努力，是为了给自己交代 　　 　　曾经跟好友为了商谈一个项目去北京，对方是一个标准的八零后，北漂。这是他飘着的第 三年，伴随着他一直没有改变的直来直往的性格。这是他第三年换的第三份工作，一直没有安 稳过。他说：“这些年我看过了很多人，有些人不用做什么就可以有很好的前景，有些人拼死 拼活还是没有办法在这个城市里生存。” 　　 　　在沪江上认识的一个小姑娘，她曾经差点为了她的男朋友去国外陪读一年，可是后来他们 偏偏分手了。 后来她决定一个人去上海，最苦逼的时候连饭都没得 吃，就拿着几个包子躲在地铁站里，不知道去哪里。 　　 　　曾经我总是无法理解，明明回到爸妈身边工作更好，也可以陪在爸妈身边，何必在大城市 里摸爬滚打，还得不到一个很好的结果。就像我曾经写过的那个在动车里哭泣的姑娘，到最后 没办法了只能回家。我曾觉得这样太不值得，然而当我有一天面临选择的时候，我终于明白他 们做决定的时候是一个什么样的心情。 　　 　　那个北漂着的哥们说过，哪怕自己奋斗了一辈子也是个屌丝，那么至少这样子自己不会再 有借口了，不会在老的时候悔不该当初。你说值得么？我觉得值得。虽然我直来直往的性格给 自己带来了很多麻烦，但这就是我，这就是我存在的方式。 　　 　　其实所有漂泊的人，不过是为了有一天能够不再漂泊，能用自己的力量撑起身后的家人和 自己爱的人。你觉得最好的生活状态是什么？我觉得最好的生活状态莫过于，在你的青春年纪 傻逼地为了理想坚持过，最后回到平淡用现实的方法让自己生活下去。能实现梦想自然是最好 ，但没能实现自己的梦想那也没有什么可惜的。成长的第一步就是接受这个世界的多样性，认 识到现实的不美好，然后还是决定要坚持最初的坚持。 　　 　　小时候我总嚷嚷着，努力是了改变世界，然而现在的我会觉得，有些人努力只是为了变成 一个普通人，有些人努力只是为了给自己交代，也许我们始终都只是一个小人物，但这并不妨 碍我们选择用什么样的方式活下去。窃以为，那些在看透了生活的无奈之后，还是选择不敷衍 不抱怨不自卑依旧热爱生活依旧努力做好身边的事的人，努力便是他们对自己的交代。 　　 　　就像我曾经跟李婧讨论去哪里工作的时候，最后我们得出结论，其实无论在哪个城市存活 都不容易，但无论过成什么样子，都要自己承担的起。 　　 　　我有勇气做选择，自然要有本事承担地起后果。 　　 　　（三）只有行动，才能解除你所有的不安 　　 　　你说你想要当自由撰稿人，可从不见你努力写稿；你说你想考研，可从不见你背词做题； 你看到学霸出没于是嗤之以鼻说这样活着没意思，你看到有人旅行又不屑一顾说这只是从大流 。我开始怀疑你挂在嘴边的是不是逃避现实的借口，我开始怀疑你是不是在一遍遍逃避和自我 安慰中变得惴惴不安。 　　 　　于是你慢慢屈服于自己的欲望。明明在几年以后能有更好的生活，却一定要在现在买上最 新的包。每个人都开始想要达到一定的社会地位和物质条件，似乎结果才是最重要的。然而， 你有没有想过，你所谓的所有努力，是为了满足你的欲望还是真的追求上进？就像汪峰的歌里 面说的：“少人走着却困在原地，多少人活着却如同死去，多少人爱着却好似分离，多少人笑 着却满含泪滴。” 　　 　　终于有一天，你发现你取得了当时所要的结果，可是在那之后，却再也不知道怎么继续了 。 　　 　　二十岁出头的时候，请把自己摆在二十岁出头的位置上。你没有理由也没能力去拥有一个 四十岁的人拥有的阅历和财富，你除了手头的青春你一无所有，但就是你手头这为数不多的东 西，能决定你是一个怎么样的人。 　　 　　我不知道这个世界上是不是真的有所谓的安全感，还是因为每个人都说自己没有安全感， 所以你也觉得自己没有安全感。我对安全感的定义只有两个：一是别人给你的能量总有一天会 消失的，只有自己给自己的安全感最可靠，只有行动才会给你带来安全感；二是永远要记得， 不管你是一个什么样的德行，你都是你父母的安全感。 　　 　　所以当你觉得不安的时候，请想一想身后的父母，想想他们正在为你打拼；请想一想自己 的初衷，然后抬起头继续倔强地走下去。 　　 　　唯有行动，才能解除你所有的不安。 　　 　　（四）有梦想，不抱怨 　　 　　时间一天天过去，我们终会因我们的努力或堕落变得丰富或苍白。 　　 　　有时间我就每天花两小时看书，没时间就睡前看二十分钟，周末的话可以看完整本书。做 论题做一遍做不好我就做两遍，文稿要求我写一万字我就写将近两万字然后删。写出一篇好文 是运气，如果一个人一直在写的话，那就是靠努力。更多时候，世界对你的态度取决于你对世 界的态度，没什么好抱怨的。 　　 　　为什么我们一再打击还要继续向前走？为什么明明很失望了我们也不愿意放弃一个人和一 个理想？ 　　 　　所有人，所有人还坚持向前走着，只是因为他想要向前走着，只是因为他还不愿意像世界 投降。也许没有人跟你完全一样，也没有人可以时时刻刻地陪在你身边，也许我们很久以后回 过头来看，会连现在的珍惜的人的样貌都记不清。可是我最大的幸运却是，即便如此，还是有 人愿意在有限的时间里用心地陪我走过这一段。愿意跟我一起为了梦想努力，经历那些孤单流 离。 　　 　　这样一想，人生也还真是不错呢。 　　 　　当你看书看到头痛两眼通红的时候；当你按着遥控器不停转台的时候；当你翻着通讯录不 知道打给谁的时候；当你独自穿越人群看着两岸灯火找不到归属感的时候；你就应该听起一首 歌，看起一本书，想想自己最初的坚持和你站在这个地方的理由，然后抬起头勇敢地走下去了 。 　　 　　这首歌（汪峰《存在》）有一句话是：“是否找个理由随波逐流，或是勇敢前行挣脱牢笼 。”我想，你知道答案。 　　 　　你现在一无所有，但你却拥有一切，因为你还有牛逼的梦想。只要路是自己选的，就不怕 走远，生活总会留点什么给对它抱有信心的人的。 上一篇 重拾Hibernate(1)之环境配置 下一篇 setInterval() 方法使用 顶 42 踩 0 我的同类文章 生活心情 （33） http://blog.csdn.net 猜你在找 查看评论 * 以上用户言论只代表其个人观点，不代表CSDN网站的观点或立场 版权声明 本博客文章可以被转载，但未经本人许可，不得用于商业用途。 如需转载，请保证文章的完整性并注明出处。 友情链接 需要交换友链的请留言 赖信涛的个人网站 淡忘~浅思 程序员访谈录 轩枫阁-前端开发 麦田技术博客 虚位以待... 个人资料 itmyhome 访问： 953407次 积分： 18891 等级： 积分：18891 排名： 第232名 原创： 470篇 转载： 23篇 译文： 26篇 评论： 1385条 我的微博 文章搜索 博客专栏 Git教程 文章：7篇 阅读：15196 ibatis实战 文章：5篇 阅读：8904 springMVC3学习 文章：12篇 阅读：39104 锋利的jQuery 文章：6篇 阅读：14022 面试那些事儿 文章：12篇 阅读：22144 java学习笔记 文章：16篇 阅读：28288 文章分类 Git (14) jekyll (6) 编程语言 (28) JAVA (66) Struts1 (3) Struts2 (17) Hibernate (19) Spring (3) springMVC (12) jQuery (41) IBATIS (5) web前端 (39) EasyUI (19) JS (42) CKEditor (5) jQuery插件 (18) 数据库 (15) Oracle (47) MySQL (5) 架构设计 (7) 工作相关 (21) 异常错误 (29) 移动开发 (1) 工作之余 (11) 框架整合 (5) 关于面试 (12) 腾讯地图 (1) Simditor (2) KindEditor (2) Hexo (5) Coding (2) uploadify (1) Markdown (2) Ant (4) POI (2) 百度地图 (3) Maven (3) 博客统计 3Q  新博客： itmyhome.com  JAVA技术交流：74955800

Recno:: 11
URL:: http://blog.csdn.net/jspandasp/article/details/49339451

ParseText::
App竞品技术分析 （6）热修复 - 包建强的无线技术博客 - 博客频道 - CSDN.NET 包建强的无线技术博客 目录视图 摘要视图 订阅 学院APP首次下载，可得50C币！     欢迎来帮助开源“进步”     当讲师？爱学习？投票攒课吧     认识Atlassian Datacenter产品     深圳小伙伴的福利来啦 App竞品技术分析 （6）热修复 2015-10-22 21:45 451人阅读 评论 (0) 收藏 举报 分类： App （6） 作者同类文章 X Android （6） 作者同类文章 X iOS （6） 作者同类文章 X 版权声明：本文为博主原创文章，未经博主允许不得转载。 1 Native页面和Html5页面的相互切换 　　终于说到这里了，Native页面和Html5页面的相互切换，这是最激动人心的技术，比我一直在研究的App插件化技术还要震撼。因为插件化技术只能适用于Android，对iOS无能为力。即使如此，搞Android插件化技术需要投入大量的人力物力。如果团队不够大是不建议搞插件化编程的。记得2年前我去一家公司面试，他们当时就在搞App插件化，面试时问我这方面的东西，被我当场泼了一头冷水，然后就没有然后了。 　　我们知道，Android插件化更多是为了解决线上严重的崩溃或者bug，有时也可以紧急上线一个新功能，而不用等到新版本发布。但问题恰恰出在这里，真正需要紧急修复的是iOS，因为每次审核都要1-2周的时间，而Android可以随时发版到国内各大市场。我们不能做亏本的买卖，费了巨大人力结果发现并没有解决主要矛盾。 　　于是我们会选择Html5，如果发现App出事了，就把那个模块临时切换到Html5网站。但注意，我们通常是把整个模块切换为Html5站点，这个模块再也不会有Native页面了。这种做法有些得不偿失。于是我开始思考，能否只修改有问题的那个页面，将其临时换成Html5，而这个模块的其他页面仍然使用Native的？ 　　我仔细研究了一个页面——无论是Android还是iOS，所必备的几个要素，列举如下： 　　首先是入口和出口，也就是复旦正门前的保安老哥每天都要问的那几条哲学命题，“你从哪里来，要到哪里去”。把入口和出口控制住了，尤其是传进来的参数和传出去的参数，我们就能做到随时在Native和Html5之间切换。我们不能再随意的在A页面中实例化B页面了，我们应该使用7.1介绍的页面跳转器，来解耦各个页面之间的依赖，才能把任何Native页面切换为Html5。 　　注意，直接使用7.1 中介绍的Navigator是有问题的。我们在BaseActivity和BaseViewController中定义的字典，用来在页面间传递参数。但是Html5可不认这一套机制。所以有必要定义一套新的协议，同时适用于Android、iOS和Html5，pagename?k1=v1&k2=v2是一种比较合适的协议。比如说，从Html5跳转到Android或iOS页面，协议如图9-14所示，其中单引号中的内容是协议，由3部分组成，android页面名称，iOS页面名称，参数键值对，分别用逗号和分号分隔开。 <a onclick="baobao.gotoAnyWhere('com.example.youngheart.MovieDetailActivity, iOS.MovieDetailViewController:movieId=( int )123')"> gotoAnyWhere</a> 　　图9-14从Html5跳转到Android或iOS页面的协议。 　　其次是状态，这其中包括全局变量、本地存储。一个Native页面通常要读写全局变量和本地存储，如果切换成Html5页面，就不能干这些事情了，因此，我们要提供Native和Html5之间的交互方法，以便于Html5页面能读写Native中的全局变量和本地存储。 　　最后是公共组件，比如说网络请求和打点统计。这些要在Native中封装成公用方法，以便于Html5回调这些方法。 　　如果把以上三点都做到了，就可以随时更换线上的某个页面了，我们只要在App启动的时候调用一个MobileAPI接口，获取一份页面清单，指定哪些页面是Native的哪些页面是Html5的即可。 2 在iOS中使用脚本编程 2.1 寻找快速修复App线上bug的办法 　　我们前面提到了在App中使用Html5，这其实就是脚本编程的一种，只不过要在WebView中展现。 　　我见过有些App通过返回XML格式或者JSON格式的数据，通知App绘制UI。这其实也是一门脚本语言，但这么做只能把UI绘制出来，并不能动态返回一个Native的方法，比如说，点击按钮该做些什么事情。 　　我接下来要介绍的脚本编程，是指在iOS使用Lua或JavaScript这样的脚本语言。对于应用类App而言，也确实需要脚本语言介入了，尤其是那些对转化率要求很高的的电商App，线上一旦有致命的bug或者Crash，可以迅速用脚本语言改好。这就好比身体受伤了，帖一个创可贴，等伤口愈合了（下次发新版本），再把创可贴摘掉。 　　在手机游戏领域，已经广泛的采用Lua进行编程了。这样的好处是，每天都能通过Lua修改代码，增加个新的地图或者道具，然后通过MobileAPI把Lua脚本返回给App，达到新功能迅速上线的效果，而不用受发版上线的制约。接下来的章节，我们看iOS中是如何植入Lua或JavaScript脚本的。 2.2 在iOS中使用脚本语言的八卦史 　　首先隆重介绍Wax这个第三方开源库。Wax是使用Lua脚本语言来编写iOS原生应用的一个框架，它建立了iOS原生objective-C语言和Lua脚本语言之间的映射关系。 　　但是发明Wax的这哥们从13年开始就不维护这个框架了，导致了Wax中的很多遗留问题没有得到解决，比如说不支持自定义的结构体和结构体指针，不支持多线程等等。 　　后来，13年年底，屠毅敏在Wax的基础上开发出WaxPatch，这也是GitHub上的一个开源项目，它的神奇之处就在于，在App启动时会加载服务器上的zip包，zip包中是用Lua脚本编写的补丁，在App运行期间，这些补丁文件中的方法，能替换iOS中的任何一个类的任何一个方法的实现。它的实现原理是重写了运行时的class_replaceMethod方法。 [1] 　　就在我们庆幸iOS找到了快速修复线上bug的解决方案，再不用因为线上有bug而要忍受老板能杀死你的眼神时，苹果在15年2月强制要求所有新提交的应用必须兼容64位，但原来使用lua的框架wax是不支持64位的。 　　人生不如意事，十有八九。 　　于是又等了几个月，开源社区给出了Wax的64位版本，在此基础上，我们把WaxPatch的改动也移植过去，就有了WaxPatch的64位版本。 [2] 　　2015年5月，JSPatch面世。它的原理和WaxPatch一样，都是在App运行期间替换iOS中的任何一个类的任何一个方法的实现，只是它是基于JavaScript来实现的。估计是JSPatch的作者等不及Wax和WaxPatch迟迟不更新所以才另起炉灶了吧。与此同时，JSPatch的作者还提供了大量的实例来帮助我们理解这个开源项目。 [3] 　　Wax和WaxPatch毕竟很久不维护了，它不支持iOS的多线程语法以及自定义结构体和结构体指针，而JSPatch是支持这些iOS特性的，所以建议大家使用JSPatch。本书即将出版的时候，JSPatch已经比较成熟了，而且还在持续更新，优化因反射而带来的性能问题。让我们拭目以待。 　　本书不打算过多介绍如何把objective-c代码转换为Lua或者javascript，官方文档已经讲得很清楚了。在下面的章节中，我将以WaxPatch为例，介绍一下它的使用策略。JSPatch的使用思路也是一样的。 2.3 Zip包下载策略 　　接下来介绍WaxPatch中压缩包的下载规则。压缩包中的内容就是用于热修补的Lua脚本。 　　首先返回Lua下载地址的MobileAPI接口，要区分App的版本。比如说当前版本有一个严重的bug，为了修复它引入了lua001.zip，而我们在下一个版本修复了这个bug，就不需要lua001.zip包，或者说等下个版本上线后又发现了新的bug，这时候要引入lua002.zip。所以这个MobileAPI接口应该根据版本号返回不同的lua压缩包下载地址。 　　如何控制App不重复下载相同的lua压缩包呢？每次调用MobileAPI接口获取到Lua压缩包的地址，比如说lua001.zip，我们在解压lua001.zip这个压缩包到本地lua001这个目录下的同时，同时会把lua001这个值存到本地文件的变量luaVer中。下次再调用MobileAPI接口，就会根据返回的Lua压缩包的地址进行判断， 如果值为空，说明不需要lua脚本来修复bug，那么就把luaVer设置为空。 如果值仍然是lua001.zip没有变化，就什么都不做； 如果值是一个新的Lua压缩包的地址，比如说lua002.zip，那么就下载这个压缩包，将其解压到lua002这个新的目录，并把luaVer这个值设置为lua002。 　　按照上述策略，我们就可以根据luaVer的值，来控制App能加载到最新的lua压缩包，而且避免重复下载。 2.4 调试策略 　　我们的策略是依赖于MobileAPI返回的lua压缩包的下载地址，但是不可能每次开发调试时，都把一个用于测试lua压缩包发布到服务器上，因为我们在调试期间会频繁的修改lua压缩包中的文件。 　　基于此，在调试期间，我们绕开从服务器下载lua压缩包并比较版本的做法，改为把Lua压缩包中的文件直接复制到本地目录的方式，比如说，lua001.zip包中有2个lua文件，我们把这两个文件集成到App项目中，在App每次启动的时候，就把这两个lua文件复制到本地，然后就可以直接使用了。 　　在全部调试完成，就把代码切回到仍然从服务器下载lua压缩包的模式。 2.5 Lua不支持的场景及解决方案 　　并不是所有的iOS代码都能转换为lua脚本。以下是我遇到的情况以及相应的解决方案。 　　1）如果变量或属性声明错了呢？ 　　我们知道WaxPatch编程的思想是在iOS运行时注入，动态修改任何一个类的任何一个方法的实现。 　　也就是说任何一个方法体都可以替换为Lua脚本，但就是不能修改方法的签名。但这还好，遇到这种情况，我们在Lua中重写一个方法，简单的包装一下Objective-c中不符合我们要去的方法即可。 　　但是如果是一个属性或类级别的变量的类型声明错了，我们就真的没办法了。仔细检查WaxPatch这个框架，还真没有定义一个属性或变量的地方。遇到这种情况，我们的解决方案是，在项目中增加一个LuaClass类，里面只有一个字典属性dicLuaObject。 　　在Lua脚本中，我们把错误类型的属性或者变量所出现的任何地方，替换为正确类型的变量，而这个变量，则定义在LuaClass类的dicLuaObject字典属性中。 2）对于block块该如何处理呢？ 　　Lua-Wax不支持block块。因此一旦block块内的代码有问题，就要重写这个block块所在的方法，同时将block块中的代码封装成另成一个方法，也在Lua脚本中重写。 2.6 如果zip包被劫持了呢？ 　　不要以为MobileAPI返回了Lua压缩包下载的地址，就可以直接下载并使用了。经常有恶意攻击者劫持了服务器返回给我们的下载地址，而让我们去下载一个恶意的压缩包。我们一旦下载并解压缩这个恶意的包，接下来可能发生各种意想不到的事情。 　　为此，我们不能认为网上下载的任何压缩包都是安全的。我们需要一套校验机制，来保证这个下载到的压缩包是我们自己提供的，如果验证不过，就删除或者隔离这个文件。 　　SSH是最简单的解决方案，但就是https协议访问起来太慢了，能否做成http的呢？可以，我们需要准备一对公钥和私钥：把zip包使用私钥进行签名后再放到服务器提供下载：而App下载这个zip包到本地，则使用保存在App中的公钥进行校验。我们要对私钥进行严格的保密，不能泄漏给他人，这样即使有人在App中取到了公钥，因为没有配套的私钥，也没办法生成一个符合我们要取的zip包。 2.7 Lua对iOS的深远影响 　　有了Lua这个利器，线上的任何bug或者Crash都能以最快的速度修复，而不需要重新提交审核新的版本并等待超长的时间。比如说，我们最苦恼的是页面打点经常就发现打错了或者漏打了，这是为了能不影响数据的采集，使用Lua能及时缝补这个漏洞。 　　最后需要补充的是，虽然Lua语言很简单，尤其是WaxPatch这个框架的支持，使得我们可以改写任何方法都很容易。但是我经常看到的是很多objective-c方法都有成百上千行代码，这就给改写带来了很大的工作量。这就又回到了编码规范的层面，尽量把方法写的短小。每个方法只做一件 事情 。 [1] WaxPatch的源码地址：https://github.com/mmin18/WaxPatch [2] WaxPatch的64位版本，参见https://github.com/felipejfc/n-wax [3] JSPatch的下载地址，参见https://github.com/bang590/JSPatch   上一篇 App竞品技术分析 （5）数据采集工具 顶 1 踩 0 我的同类文章 App （6） Android （6） iOS （6） http://blog.csdn.net 猜你在找 查看评论 * 以上用户言论只代表其个人观点，不代表CSDN网站的观点或立场 我的新书 《App研发录》 个人资料 JspAndAsp 访问： 14289次 积分： 223 等级： 积分：223 排名： 千里之外 原创： 7篇 转载： 0篇 译文： 0篇 评论： 15条 文章分类 Android (7) App (7) iOS (7) 文章存档 2015年10月 (7) 阅读排行 App竞品技术分析 序言 (4221) App竞品技术分析 （1）App启动速度 (2689) App竞品技术分析 （3）减小安装包的体积 (2417) App竞品技术分析 （5）数据采集工具 (2081) App竞品技术分析 （2）Html5页面的打开速度 (2074) App竞品技术分析 （4）性能优化 (304) App竞品技术分析 （6）热修复 (304) 评论排行 App竞品技术分析 序言 (4) App竞品技术分析 （5）数据采集工具 (4) App竞品技术分析 （3）减小安装包的体积 (3) App竞品技术分析 （1）App启动速度 (2) App竞品技术分析 （2）Html5页面的打开速度 (1) App竞品技术分析 （4）性能优化 (1) App竞品技术分析 （6）热修复 (0) 最新评论 App竞品技术分析 序言 fk002008 : 很好,我也来拜读下 App竞品技术分析 （5）数据采集工具 JspAndAsp : @ranxiedao:要面向抽象编程，而不是面向实现编程 App竞品技术分析 （5）数据采集工具 JspAndAsp : @ranxiedao:肯定是强引用啊，MainActivity中，必须import SecondAc... App竞品技术分析 （5）数据采集工具 ranxiedao : 用反射的方式来实现解藕，但是如果Activity的包名变了呢？岂不是 ActivityNameCon... App竞品技术分析 （5）数据采集工具 ranxiedao : Intent intent = new Intent(MainActivity.this, Seco... App竞品技术分析 （3）减小安装包的体积 shenmeyang : 快速的浏览了一遍，对于不满足于画UI实现接口的我来说有很大的帮助 App竞品技术分析 （3）减小安装包的体积 shenmeyang : 快速的浏览了一遍，对于不满足于画UI实现接口的我来说有很大的帮助 App竞品技术分析 （4）性能优化 iwantnb : 楼主加油，期待下一篇。 App竞品技术分析 （2）Html5页面的打开速度 iwantnb : 谢谢楼主分享心得，继续加油。 App竞品技术分析 （3）减小安装包的体积 iwantnb : 谢谢楼主分享心得。很有用。

Recno:: 12
URL:: http://blog.csdn.net/kkdelta/article/details/43086133

ParseText::
Windows共享文件夹的权限设定 - 交换一个思想，能得到俩思想 - 博客频道 - CSDN.NET 交换一个思想，能得到俩思想 目录视图 摘要视图 订阅 学院APP首次下载，可得50C币！     欢迎来帮助开源“进步”     当讲师？爱学习？投票攒课吧     认识Atlassian Datacenter产品     深圳小伙伴的福利来啦 Windows共享文件夹的权限设定 标签： windows 共享文件 权限 2015-01-24 16:19 608人阅读 评论 (0) 收藏 举报 分类： 软件开发杂项 （35） 作者同类文章 X 版权声明：本文为博主原创文章，未经博主允许不得转载。 在windows中共享文件夹给域里的其他用户的时候,要同时设置Sharing tab 和 Security tab才能行，如下图 1,设置Sharing tab 2,设置Securitytab 上一篇 如何打造成功的数据归档策略 下一篇 linux下挂载（mount）各种文件 顶 0 踩 0 我的同类文章 软件开发杂项 （35） http://blog.csdn.net 猜你在找 查看评论 * 以上用户言论只代表其个人观点，不代表CSDN网站的观点或立场 个人资料 kkdelta 访问： 1180815次 积分： 13702 等级： 积分：13702 排名： 第440名 原创： 257篇 转载： 109篇 译文： 0篇 评论： 180条 文章搜索 文章分类 J2EE (50) 设计模式 (9) 系统方案架构 (9) 多线程 (1) 大数据 (18) Network (18) Spring (25) Hibernate_Mybatis (15) Camel (10) WebService与Messaging (11) Portal_LifeRay (3) ORACLE_Admin (46) Oracle_BackupRecover (10) 系统运维 (15) SQL/PLSQL (15) Unix/Linux (44) Android (5) 移动互联网 (1) WEBUI (31) 性能测试调优 (2) WebServer (5) Web安全 XSS (2) English (5) 随笔 (8) 软件开发杂项 (36) 收藏 (1) 项目管理 (2) 杭州攻略 (2) 文章存档 2015年12月 (6) 2015年10月 (3) 2015年09月 (1) 2015年06月 (1) 2015年05月 (1) 2015年04月 (3) 2015年03月 (1) 2015年01月 (2) 2014年12月 (2) 2014年11月 (3) 2014年10月 (4) 2014年09月 (8) 2014年07月 (1) 2014年06月 (2) 2014年03月 (3) 2014年02月 (9) 2014年01月 (3) 2013年12月 (9) 2013年11月 (10) 2013年10月 (3) 2013年09月 (3) 2013年06月 (1) 2013年05月 (6) 2013年04月 (10) 2013年03月 (3) 2013年02月 (1) 2013年01月 (12) 2012年12月 (1) 2012年11月 (6) 2012年09月 (3) 2012年08月 (13) 2012年07月 (19) 2012年06月 (16) 2012年05月 (5) 2012年04月 (13) 2012年03月 (1) 2012年02月 (26) 2012年01月 (35) 2011年12月 (5) 2011年11月 (3) 2011年10月 (5) 2011年09月 (2) 2011年08月 (4) 2011年07月 (2) 2011年02月 (1) 2011年01月 (3) 2010年12月 (1) 2010年09月 (1) 2010年08月 (2) 2010年07月 (6) 2010年06月 (5) 2010年05月 (9) 2010年04月 (12) 2010年03月 (2) 2010年02月 (1) 2009年10月 (4) 2009年09月 (1) 2009年07月 (1) 2009年05月 (2) 2009年04月 (4) 2009年03月 (33) 2009年02月 (7) 阅读排行 Spring加载resource时classpath*:与classpath:的区别 (59847) Spring AOP中pointcut expression表达式解析 (48909) 从JAVA客户端访问Redis示例(入门) (39486) Apache Camel框架入门示例 (26879) /bin,/sbin,/usr/sbin,/usr/bin 目录之简单区别 (26317) 使用keepalived实现双机热备 (22499) Eclipse安装CXF插件开发java web service 集成Spring (22223) MyBatis映射文件的resultMap如何做表关联 (18511) Oracle中Service Name、Database name、Instance Name的区别 (17542) eclipse里报:An internal error occurred during: "Building workspace". Java heap space） (15579) 评论排行 Eclipse安装CXF插件开发java web service 集成Spring (12) JAVA客户端传递对象数组到Oracle存储过程做大数据量插入 (10) Spring加载resource时classpath*:与classpath:的区别 (9) Apache Camel框架入门示例 (8) Spring AOP中pointcut expression表达式解析 (8) 生成Mybatis的Eclipse插件 (7) 从JAVA客户端访问Redis示例(入门) (7) 使用keepalived实现双机热备 (6) Spring的依赖注入 (5) 用link文件安装Eclipse插件 (5) 推荐文章 *App竞品技术分析 （6）热修复 *架构设计：系统间通信（17）——服务治理与Dubbo 中篇（分析） *一款炫酷Loading动画--加载失败 *图解堆算法、链表、栈与队列（多图预警） *Android中ContentProvider组件详解 *Android平台Camera实时滤镜实现方法探讨(九)--磨皮算法探讨(一) 最新评论 使用Heartbeat实现双机热备 dailihua : 在配置资源文件haresources时，“srv5.localdomain IPaddr::192.... Maven常用到的一些方法 wangdan199112 : 长姿势！ Maven常用到的一些方法 zhanghongjie0302 : 文章写得有些短！ 用JAVA代码实现ARP攻击 baidu_33313748 : 博主你好。方便给我说一下大纲吗？每段是编的什么。万分感谢 Apache Camel框架入门示例 u010955843 : 学习 JS通过prototype实现继承的简单示例: u012466304 : 我觉得把什么是phototype讲述一下就比较好了 HTTP基本认证(Basic Authentication)的JAVA示例 china_huimark : 写得非常好，谢谢 Spring加载resource时classpath*:与classpath:的区别 qq_30384697 : 多谢:解决了实际问题 Squid安装(Windows)入门实例简介 u010353145 : 非常好的教程 Eclipse安装CXF插件开发java web service 集成Spring sinat_31245087 : @kkdelta:感激不尽啊！

Recno:: 13
URL:: http://blog.csdn.net/kongqz/rss/list

ParseText::


Recno:: 14
URL:: http://blog.csdn.net/leftfist/article/details/50059969

ParseText::
单元测试 - 左直拳的马桶_日用桶 - 博客频道 - CSDN.NET 左直拳的马桶_日用桶 我可以把手按在马桶盖上发誓：所有的文章都是我自己屙的 目录视图 摘要视图 订阅 学院APP首次下载，可得50C币！     欢迎来帮助开源“进步”     当讲师？爱学习？投票攒课吧     认识Atlassian Datacenter产品     深圳小伙伴的福利来啦 单元测试 标签： 自动化测试 单元测试 X 2015-11-26 19:48 572人阅读 评论 (2) 收藏 举报 分类： 程序人生 （29） 作者同类文章 X 测试 .NET （209） 作者同类文章 X 版权声明：本文为博主原屙文章，喜欢你就担走。 某从未搞过单元测试，觉得好神秘！ 但测试驱动，如雷贯耳，所谓未写代码，先写测试；博客园又有大神说，所谓的需求分析，应当具体化为测试用例。。。反正，单元测试就是好重要！ http://www.cnblogs.com/freeflying/p/4846618.html http://www.cnblogs.com/freeflying/p/4810647.html 所以一直都想搞一搞。但网上的文章我看不大明白，这两天抓住难得的机会摸索了一下，好像有点眉目了。先记录一下，日后在此基础上再出发。 什么是单元测试？我感觉单元测试就是自动化测试。写一些相关的方法，来调用我们需要测试的方法，跑一遍。测试项目为此提供了便利。 比方说，我想对业务逻辑层的一些方法进行单元测试。首先在VS中右击该方法，选单元测试，建立单元测试项目。系统自动搭建了框架，完成了许多支撑代码。 不过，如何调用目标方法来进行测试，还需要我们自己完成。同时，令我诧异的是，调用目标方法所需要的一些动态库，也要我们自己手动添加！ 单元测试的主要方法是Assert（断言）。比如，Assert.AreEqual(期望值，实际运行值)。如果两个值相符，则显示测试通过；否则红灯。 单元测试可以选定进行测试，也可以全部跑一遍。 还可以调试！方法是选VS菜单栏中的 测试 - 调试，方便得很。 有代码有机八： namespace Services .User .Tests { [TestClass()] public class UserHomeMadeServiceTests { readonly string connString = "。。。。。" ; ISessionFactory sessionFactory ; ISession session ; IUserHomeMadeService service ; [TestInitialize()]//测试环境初始化 public void Init() { sessionFactory = Fluently .Configure () .Database (FluentNHibernate .Cfg .Db .OracleClientConfiguration .Oracle 10. ConnectionString(connString) .ShowSql ()) .ExposeConfiguration (f => f .SetInterceptor (new SqlStatementInterceptor())) .Mappings (m => m .FluentMappings .AddFromAssembly (Assembly .Load ( "这是一个数据库持久层代码文件名称" ))) .BuildSessionFactory () ; session = sessionFactory .OpenSession () ; service = new UserHomeMadeService(new UserHomeMadeRepository(session)) ; } [TestCleanup()]//测试完毕大扫除 public void Cleanup() { session .Disconnect () ; session .Dispose () ; } [TestMethod()]//测试方法 public void SetModelTest() { ITransaction transaction = session .BeginTransaction (IsolationLevel .ReadCommitted ) ; UserHomeMade hm = new UserHomeMade() ; hm .USER _ID = 1 ; hm .HOME _MADE = System .Text .Encoding .GetEncoding ( "GB2312" ) .GetBytes ( "大便干小便黄" ) ; hm .CREATE _DATE = DateTime .Now ; hm .EDIT _DATE = DateTime .Now ; Assert .AreEqual (true, service .SetModel (hm)) ; transaction .Rollback () ; } [TestMethod()] public void GetModelTest() { UserHomeMade hm = service .GetModel ( 1 ) ; string homemade = System .Text .Encoding .GetEncoding ( "GB2312" ) .GetString (hm .HOME _MADE) ; Assert .AreEqual ( "大便干小便黄" , homemade) ; } } } 上一篇 WEB服务器安装oracle jdbc 下一篇 操作系统学习笔记：大容量存储器的结构 顶 0 踩 0 我的同类文章 程序人生 （29） .NET （209） http://blog.csdn.net 猜你在找 查看评论 * 以上用户言论只代表其个人观点，不代表CSDN网站的观点或立场 个人资料 leftfist 访问： 1042240次 积分： 18400 等级： 积分：18400 排名： 第244名 原创： 707篇 转载： 0篇 译文： 0篇 评论： 486条 狡兔三桶 左直拳的马桶_夜用桶 左子行述（我的围脖） 马桶里的倒影（我的摄影） 文章搜索 文章分类 系统架构 (14) 计算机基础 (31) 程序人生 (30) 设计模式 (22) 学习笔记 (54) 软件工程 (12) Web (86) .NET (210) Java (16) JavaScript (96) node.js (23) sql server (122) oracle (6) nosql (4) mongoDB (10) Redis (2) mySql (2) Android (8) PhoneGap (4) WCF (6) ASP.NET MVC (15) EF (6) IIS (17) Linux (9) IM (2) oAuth (2) json (8) XML (3) git (2) 应用 (20) WPF (15) 一片冰心在夜壶 (113) 测试 (1) linq (0) 推荐文章 *App竞品技术分析 （6）热修复 *架构设计：系统间通信（17）——服务治理与Dubbo 中篇（分析） *一款炫酷Loading动画--加载失败 *图解堆算法、链表、栈与队列（多图预警） *Android中ContentProvider组件详解 *Android平台Camera实时滤镜实现方法探讨(九)--磨皮算法探讨(一) 最新评论 node.js应用Redis初步 u012215022 : mark 如何才能成为一名架构师？ hy3225569 : 是啊，前端搞过，后台搞过，没有擅长的，我还是只井底之蛙，学习的道路还很长。 如何才能成为一名架构师？ vipzhxsh : @pwc1996:虽然我也处在这么一个阶段，但我觉得吧，没有人什么都会，只是他们比我们见的多一点，想... 如何才能成为一名架构师？ l1458272482 : @pwc1996:同意，总感觉自己技术高不成底不就 如何才能成为一名架构师？ sinat_29754435 : 从顶层向下学习，底层知识永远学不完 如何才能成为一名架构师？ linyt : 需要公司有这样的职位和相关的工作经验以有项目实践，你才能成长为架构师，我也在努力中。 如何才能成为一名架构师？ cytzrs : 向高人学习了 如何才能成为一名架构师？ zhanghongjie0302 : 10000小时原理！ 如何才能成为一名架构师？ pwc1996 : 我想成为网络工程师，但是也不知道怎么着手，今天学c++，明天研究java，后天又学php，大后天又去... 单元测试 wuye110 : cunit

Recno:: 15
URL:: http://blog.csdn.net/leftfist/article/details/50165677

ParseText::
sql里的in对应linq的写法 及 IQueryable转化为Dictionary - 左直拳的马桶_日用桶 - 博客频道 - CSDN.NET 左直拳的马桶_日用桶 我可以把手按在马桶盖上发誓：所有的文章都是我自己屙的 目录视图 摘要视图 订阅 学院APP首次下载，可得50C币！     欢迎来帮助开源“进步”     当讲师？爱学习？投票攒课吧     认识Atlassian Datacenter产品     深圳小伙伴的福利来啦 sql里的in对应linq的写法 及 IQueryable转化为Dictionary 标签： linq Dictionary 2015-12-04 09:17 678人阅读 评论 (0) 收藏 举报 版权声明：本文为博主原屙文章，喜欢你就担走。 string[] arID = { "0001" , "0002" }; var dict = this .service.GetMyList(m => arID.Contains(m.ID)) // 等同于SQL里的 id in ( '0001' , '0002' ) .Select(m => new { m.ID, m.Name,m.Age }) .ToDictionary(s => s.ID); // 以ID作为key,{ID,Name,Age}作为Value，转化为Dictionary foreach ( var kvp in dict) { string user = "姓名：" + kvp.Value.Name; } ====================== 有同事提示这样也可以： string str=”0001,0002” str.Contains(m.ID) 这样来也一样，亲 上一篇 操作系统学习笔记：大容量存储器的结构 下一篇 如何才能成为一名架构师？ 顶 2 踩 0 猜你在找 查看评论 * 以上用户言论只代表其个人观点，不代表CSDN网站的观点或立场 个人资料 leftfist 访问： 1042239次 积分： 18400 等级： 积分：18400 排名： 第244名 原创： 707篇 转载： 0篇 译文： 0篇 评论： 486条 狡兔三桶 左直拳的马桶_夜用桶 左子行述（我的围脖） 马桶里的倒影（我的摄影） 文章搜索 文章分类 系统架构 (14) 计算机基础 (31) 程序人生 (30) 设计模式 (22) 学习笔记 (54) 软件工程 (12) Web (86) .NET (210) Java (16) JavaScript (96) node.js (23) sql server (122) oracle (6) nosql (4) mongoDB (10) Redis (2) mySql (2) Android (8) PhoneGap (4) WCF (6) ASP.NET MVC (15) EF (6) IIS (17) Linux (9) IM (2) oAuth (2) json (8) XML (3) git (2) 应用 (20) WPF (15) 一片冰心在夜壶 (113) 测试 (1) linq (0) 推荐文章 *App竞品技术分析 （6）热修复 *架构设计：系统间通信（17）——服务治理与Dubbo 中篇（分析） *一款炫酷Loading动画--加载失败 *图解堆算法、链表、栈与队列（多图预警） *Android中ContentProvider组件详解 *Android平台Camera实时滤镜实现方法探讨(九)--磨皮算法探讨(一) 最新评论 node.js应用Redis初步 u012215022 : mark 如何才能成为一名架构师？ hy3225569 : 是啊，前端搞过，后台搞过，没有擅长的，我还是只井底之蛙，学习的道路还很长。 如何才能成为一名架构师？ vipzhxsh : @pwc1996:虽然我也处在这么一个阶段，但我觉得吧，没有人什么都会，只是他们比我们见的多一点，想... 如何才能成为一名架构师？ l1458272482 : @pwc1996:同意，总感觉自己技术高不成底不就 如何才能成为一名架构师？ sinat_29754435 : 从顶层向下学习，底层知识永远学不完 如何才能成为一名架构师？ linyt : 需要公司有这样的职位和相关的工作经验以有项目实践，你才能成长为架构师，我也在努力中。 如何才能成为一名架构师？ cytzrs : 向高人学习了 如何才能成为一名架构师？ zhanghongjie0302 : 10000小时原理！ 如何才能成为一名架构师？ pwc1996 : 我想成为网络工程师，但是也不知道怎么着手，今天学c++，明天研究java，后天又学php，大后天又去... 单元测试 wuye110 : cunit

Recno:: 16
URL:: http://blog.csdn.net/leftfist/article/details/50332047

ParseText::
如何清空文件上传控件里的选定文件（路径） - 左直拳的马桶_日用桶 - 博客频道 - CSDN.NET 左直拳的马桶_日用桶 我可以把手按在马桶盖上发誓：所有的文章都是我自己屙的 目录视图 摘要视图 订阅 学院APP首次下载，可得50C币！     欢迎来帮助开源“进步”     当讲师？爱学习？投票攒课吧     认识Atlassian Datacenter产品     深圳小伙伴的福利来啦 如何清空文件上传控件里的选定文件（路径） 标签： javascript file 上传 2015-12-16 19:33 487人阅读 评论 (0) 收藏 举报 分类： Web （85） 作者同类文章 X JavaScript （95） 作者同类文章 X 版权声明：本文为博主原屙文章，喜欢你就担走。 我又来扯鸡毛蒜皮了。有名言曰人生短得不够扯鸡毛蒜皮，但我的工作就是由无数的鸡毛蒜皮组成，如之奈何？ 今天的鸡毛和蒜皮是：如何清空文件上传控件里的选定文件（路径）？ 场景是酱紫的： 有一个上传控件和一个按钮，其中上传控件隐藏。点击按钮，触发上传控件点击事件，于是弹出文件选择对话框；选好文件后，于是触发了上传控件的onchange事件。在这个事件里，将文件上传。 有点装逼，就是隐藏了上传控件。这可能是出于界面简约的考虑。问题是，同一个文件不能连续上传2次，因为路径不变，没有触发onchange事件。有时会带来不大好的体验。假如客户一个文件上传失败，他再试一次，那么第二次将毫无反应。 改良的思路是在onchange事件里，上传之后，将上传控件的选定内容清空；而每次上传之前，先判断是否已选定文件，避免清空之后再次触发onchange带来的尴尬。 代码如下： function importData () { //判断上传控件的选定是否为空，空则返回 if (document.getElementById( "fileImportData" ).files.length == 0 ) return ; function clearFileInput () { var file = $( "#fileImportData" ); file.after(file.clone().val( "" )); file.remove(); } $( "#formImport" ).ajaxSubmit({ url: "上传文件的action" , type: 'post' , data: {}, success: function (data) { //上传成功 clearFileInput(); //清空 。。。 }, error: function (e) { clearFileInput(); alert(e); } }); } 这段时间搞了不少前端，觉得对前端的认识比以前有所进步。前几天看到有个腾讯的员工写了篇文章，说要想真正搞好前端，应该努力去吃透某个JS框架的底层，或者自己用标准的JS来实现，而不是偏应用（ http://www.cnblogs.com/vajoy/p/5040365.html ）。我觉得他有道理。但是，一来我年纪大了，一味搞前端大家都接受不了；二来可能对当架构师帮助不是很大。如今分工越来越精细，所有技术都掌握是不可能的，有些只需了解，会用就行了，要学会放手。 上一篇 如何才能成为一名架构师？ 下一篇 操作系统学习笔记：I/O输入系统 顶 1 踩 0 我的同类文章 Web （85） JavaScript （95） http://blog.csdn.net 猜你在找 查看评论 * 以上用户言论只代表其个人观点，不代表CSDN网站的观点或立场 个人资料 leftfist 访问： 1042237次 积分： 18400 等级： 积分：18400 排名： 第244名 原创： 707篇 转载： 0篇 译文： 0篇 评论： 486条 狡兔三桶 左直拳的马桶_夜用桶 左子行述（我的围脖） 马桶里的倒影（我的摄影） 文章搜索 文章分类 系统架构 (14) 计算机基础 (31) 程序人生 (30) 设计模式 (22) 学习笔记 (54) 软件工程 (12) Web (86) .NET (210) Java (16) JavaScript (96) node.js (23) sql server (122) oracle (6) nosql (4) mongoDB (10) Redis (2) mySql (2) Android (8) PhoneGap (4) WCF (6) ASP.NET MVC (15) EF (6) IIS (17) Linux (9) IM (2) oAuth (2) json (8) XML (3) git (2) 应用 (20) WPF (15) 一片冰心在夜壶 (113) 测试 (1) linq (0) 推荐文章 *App竞品技术分析 （6）热修复 *架构设计：系统间通信（17）——服务治理与Dubbo 中篇（分析） *一款炫酷Loading动画--加载失败 *图解堆算法、链表、栈与队列（多图预警） *Android中ContentProvider组件详解 *Android平台Camera实时滤镜实现方法探讨(九)--磨皮算法探讨(一) 最新评论 node.js应用Redis初步 u012215022 : mark 如何才能成为一名架构师？ hy3225569 : 是啊，前端搞过，后台搞过，没有擅长的，我还是只井底之蛙，学习的道路还很长。 如何才能成为一名架构师？ vipzhxsh : @pwc1996:虽然我也处在这么一个阶段，但我觉得吧，没有人什么都会，只是他们比我们见的多一点，想... 如何才能成为一名架构师？ l1458272482 : @pwc1996:同意，总感觉自己技术高不成底不就 如何才能成为一名架构师？ sinat_29754435 : 从顶层向下学习，底层知识永远学不完 如何才能成为一名架构师？ linyt : 需要公司有这样的职位和相关的工作经验以有项目实践，你才能成长为架构师，我也在努力中。 如何才能成为一名架构师？ cytzrs : 向高人学习了 如何才能成为一名架构师？ zhanghongjie0302 : 10000小时原理！ 如何才能成为一名架构师？ pwc1996 : 我想成为网络工程师，但是也不知道怎么着手，今天学c++，明天研究java，后天又学php，大后天又去... 单元测试 wuye110 : cunit

Recno:: 17
URL:: http://blog.csdn.net/mchdba/article/details/8647560

ParseText::
MySQL的Replace into 与Insert into ..... on duplicate key update ...真正的不同之处 - MySQL - 博客频道 - CSDN.NET MySQL 做最专业的DBA 目录视图 摘要视图 订阅 学院APP首次下载，可得50C币！     欢迎来帮助开源“进步”     当讲师？爱学习？投票攒课吧     认识Atlassian Datacenter产品     深圳小伙伴的福利来啦 [置顶] MySQL的Replace into 与Insert into ..... on duplicate key update ...真正的不同之处 2013-03-07 17:42 14050人阅读 评论 (5) 收藏 举报 分类： MySQL Basic （56） 作者同类文章 X 版权声明：本文为博主原创文章，未经博主允许不得转载。 今天听同事介绍oracle到mysql的数据migration，他用了Insert into ..... on duplicate key update ...，我当时就想怎么不用Replace呢，于是回来就仔细查了下，它们果然还是有区别的，看下面的例子吧： 1 Replace into ... 1.1 录入原始数据 mysql> use test; Database changed mysql> mysql> CREATE TABLE t1 SELECT 1 AS a, 'c3' AS b, 'c2' AS c; ALTER TABLE t1 CHANGE a a INT PRIMARY KEY AUTO_INCREMENT ; Query OK, 1 row affected (0.03 sec) Records: 1  Duplicates: 0  Warnings: 0   mysql> INSERT INTO t1 SELECT 2,'2', '3'; Query OK, 1 row affected (0.01 sec) Records: 1  Duplicates: 0  Warnings: 0 mysql> insert into t1(b,c) select 'r2','r3'; Query OK, 1 row affected (0.08 sec) Records: 1  Duplicates: 0  Warnings: 0   1.2 开始replace操作 mysql> REPLACE INTO t1(a,b) VALUES(2,'a') ; Query OK, 2 rows affected (0.06 sec) 【】看到这里，replace，看到这里，a=2的记录中c字段是空串了， 所以当与key冲突时，replace覆盖相关字段，其它字段填充默认值，可以理解为删除重复key的记录，新插入一条记录，一个delete原有记录再insert的操作 。   1.3 但是不知道对主键的auto_increment有无影响，接下来测试一下： mysql> insert into t1(b,c) select 'r4','r5'; Query OK, 1 row affected (0.05 sec) Records: 1 Duplicates: 0 Warnings: 0 mysql> select * from t1; +---+----+----+ | a | b | c | +---+----+----+ | 1 | c3 | c2 | | 2 | a | | | 3 | r2 | r3 | | 5 | r4 | r5 | +---+----+----+ 4 rows in set (0.00 sec)   【】从这里可以看出，新的自增不是从4开始，而是从5开始，就表示一个repalce操作，主键中的auto_increment会累加1. 所以总结如下： Replace: 当没有key时，replace相当于普通的insert. 当有key时，可以理解为删除重复key的记录，在保持key不变的情况下，delete原有记录，再insert新的记录，新纪录的值只会录入replace语句中字段的值，其余没有在replace语句中的字段，会自动填充默认值。   2.1 ok，再来看Insert into ..... on duplicate key update， mysql> insert into t1(a,b) select '3','r5' on duplicate key update b='r5'; Query OK, 2 rows affected, 1 warning (0.19 sec) Records: 1 Duplicates: 1 Warnings: 1 mysql> select * from t1; +---+----+----+ | a | b | c | +---+----+----+ | 1 | c3 | c2 | | 2 | a | | | 3 | r5 | r3 | | 5 | r4 | r5 | +---+----+----+ 4 rows in set (0.00 sec)   【】a=5时候，原来的c值还在，这表示当key有时，只执行后面的udate操作语句.   2.2 再检查auto_increment情况。 mysql> insert into t1(a,b) select '3','r5' on duplicate key update b='r5'; Query OK, 2 rows affected, 1 warning (0.19 sec) Records: 1 Duplicates: 1 Warnings: 1 mysql> select * from t1; +---+----+----+ | a | b | c | +---+----+----+ | 1 | c3 | c2 | | 2 | a | | | 3 | r5 | r3 | | 5 | r4 | r5 | +---+----+----+ 4 rows in set (0.00 sec) mysql> insert into t1(b,c) select 'r6','r7'; Query OK, 1 row affected (0.19 sec) Records: 1 Duplicates: 0 Warnings: 0 mysql> select * from t1; +---+----+----+ | a | b | c | +---+----+----+ | 1 | c3 | c2 | | 2 | a | | | 3 | r5 | r3 | | 5 | r4 | r5 | | 7 | r6 | r7 | +---+----+----+ 5 rows in set (0.00 sec) 【】从这里可以看出，新的自增不是从6开始，而是从7开始，就表示一个Insert .. on deplicate udate操作，主键中的auto_increment也跟replace一样累加1 .   2.3 再看下当没有key的时候，insert .. on deplicate update的情况 mysql> insert into t1(a,b,c) select '33','r5','c3' on duplicate key update b='r5'; Query OK, 1 row affected, 1 warning (0.23 sec) Records: 1 Duplicates: 0 Warnings: 1 mysql> select * from t1; +----+----+----+ | a | b | c | +----+----+----+ | 1 | c3 | c2 | | 2 | a | | | 3 | b5 | r3 | | 5 | r4 | r5 | | 7 | r6 | r7 | | 9 | s6 | s7 | | 33 | r5 | c3 | +----+----+----+ 7 rows in set (0.00 sec) 看a=33的记录，ok，全部录入了。   3 总结从上面的测试结果看出，相同之处： （1），没有key的时候，replace与insert .. on deplicate udpate相同。 （2），有key的时候，都保留主键值，并且auto_increment自动+1 不同之处：有key的时候，replace是delete老记录，而录入新的记录，所以原有的所有记录会被清除，这个时候，如果replace语句的字段不全的话，有些原有的比如例子中c字段的值会被自动填充为默认值。       而insert .. deplicate update则只执行update标记之后的sql，从表象上来看相当于一个简单的update语句。       但是实际上，根据我推测，如果是简单的update语句，auto_increment不会+1，应该也是先delete，再insert的操作，只是在insert的过程中保留除update后面字段以外的所有字段的值。     所以两者的区别只有一个， insert .. on deplicate udpate保留了所有字段的旧值，再覆盖然后一起insert进去，而replace没有保留旧值，直接删除再insert新值。  从底层执行效率上来讲，replace要比insert .. on deplicate update效率要高，但是在写replace的时候，字段要写全，防止老的字段数据被删除。   个人倾向与用Replace。   上一篇 CentOS6.3下源码安装MySQL GA 5.6.10 下一篇 MySQL5.1版本的主从复制搭建 顶 23 踩 1 我的同类文章 MySQL Basic （56） http://blog.csdn.net 猜你在找 查看评论 * 以上用户言论只代表其个人观点，不代表CSDN网站的观点或立场 个人资料 mchdba 访问： 964218次 积分： 15632 等级： 积分：15632 排名： 第323名 原创： 434篇 转载： 3篇 译文： 2篇 评论： 523条 我的课程 linux下oracle1... 难度：高级 类型：技术教程 MySQL数据库管理 难度：高级 类型：技术教程 文章搜索 博客专栏 Sqlite 文章：6篇 阅读：15974 Cacti+Nagios监控 文章：14篇 阅读：29678 MySQL管理开发由浅入深 文章：33篇 阅读：118386 技术网址连接 http://dev.mysql.com/doc/ 文章分类 MySQL Basic (57) MySQL Cluster (19) MySQL Replication (12) MySQL Problems (75) MySQL Install (14) MySQL Log (8) MySQL Backup (13) MySQL Transaction (8) MySQL Proc & Fun & Trig (6) MySQL DBA Interview (4) MySQL Developer (15) English (11) Life (34) Windows (7) Perl (0) Linux (51) Girl (2) Oracle (27) oracle problem (16) oracle dg (17) oracle install (9) oracle users (2) oracle dev (4) MongoDB (23) Redis (2) percona-toolkit (5) Zabbix (2) Git Github (11) Tomcat (7) Nagios (12) Cacti (8) Hadoop (6) Sqlite (7) Jira (5) C语言 (4) 悬崖上的救赎 (28) nginx (2) oracle11g (1) 文章存档 2015年12月 (10) 2015年11月 (11) 2015年10月 (9) 2015年09月 (12) 2015年08月 (12) 2015年07月 (11) 2015年06月 (10) 2015年05月 (12) 2015年04月 (7) 2015年03月 (9) 2015年02月 (7) 2015年01月 (10) 2014年12月 (10) 2014年11月 (3) 2014年10月 (10) 2014年09月 (13) 2014年08月 (12) 2014年07月 (10) 2014年06月 (10) 2014年05月 (17) 2014年04月 (9) 2014年03月 (5) 2014年02月 (7) 2014年01月 (2) 2013年12月 (2) 2013年11月 (16) 2013年10月 (29) 2013年09月 (34) 2013年08月 (37) 2013年07月 (14) 2013年06月 (17) 2013年05月 (24) 2013年04月 (15) 2013年03月 (23) 阅读排行 [JIRA] 最新Linux版本 jira6.3.6安装汉化破解以及数据迁移 (16327) MySQL的Replace into 与Insert into ..... on duplicate key update ...真正的不同之处 (14046) MySQL EXPLAIN 命令详解学习 (12605) MySQL DBA 面试题目小结 (11367) MySQL DBA 招聘小结 (10819) 上海居住证续办流程须知 --> 7月新政后居住证制度改革 (9679) MySQL 最新版本5.6.13源码安装过程 (9126) MySQL Cluster初步学习资料整理--安装部署新特性性能测试等 (8903) MySQL 实现树形的遍历（关于多级菜单栏以及多级上下部门的查询问题） (8706) MySQL服务器性能（通过Sysbench测试cpu、io、内存以及mysql服务等） (8495) 评论排行 [JIRA] 最新Linux版本 jira6.3.6安装汉化破解以及数据迁移 (121) MySQL DBA 招聘小结 (53) MySQL Help 答朋友问：5000W记录的Innodb表如何快速的去重复数据 (25) MySQL Cluster初步学习资料整理--安装部署新特性性能测试等 (21) MySQL DBA 面试题目小结 (15) MySQL主库已经存在的基础上搭建从库的过程--> （旧资料整理） (11) [Sqlite]-->嵌入式数据库的安装、建库、建表、更新表结构以及数据导入导出等等详细过程记录 (10) MySQL 实现树形的遍历（关于多级菜单栏以及多级上下部门的查询问题） (8) 各大互联网公司薪水大比拼 (8) MySQL 索引原理解析 (7) 推荐文章 *App竞品技术分析 （6）热修复 *架构设计：系统间通信（17）——服务治理与Dubbo 中篇（分析） *一款炫酷Loading动画--加载失败 *图解堆算法、链表、栈与队列（多图预警） *Android中ContentProvider组件详解 *Android平台Camera实时滤镜实现方法探讨(九)--磨皮算法探讨(一) 最新评论 ORACLE 11G Data Guard 角色转换 mchdba : 注意dataguard启动顺序：启动顺序：先standby ,后primary;关闭顺序：先prim... [JIRA] 最新Linux版本 jira6.3.6安装汉化破解以及数据迁移 james_9527 : @james_9527:顺便给我插件的class。。。。man_chiang@163.com mongodb中批量将时间戳转变通用日期格式 qq1354452957 : OK，到此圆满解决，特别感谢给我启发的网友 Aeolus@普 ，^_^ 菜鸟股市回忆录 mchdba : 2015-12-10 01 总结了下，我与酱油的差异 1，酱油用利润在玩股票，我是用本金在玩股票... [JIRA] 最新Linux版本 jira6.3.6安装汉化破解以及数据迁移 qypengs : 楼主，你好。我安装好jira以后汉化包打上去显示已经有汉化包了，可是页面还是显示英文，不知道有没有解... nginx.conf减肥记 u010927640 : 在实践中的收获就是与众不同。 准备割肉打新去也 mchdba : @jingxia2008:肉已经割了，就等下周打新咯。 准备割肉打新去也 jingxia2008 : 看今天的表现，您还是省省吧 [JIRA] 最新Linux版本 jira6.3.6安装汉化破解以及数据迁移 mchdba : @mikec168:ok，已经转发。 [JIRA] 最新Linux版本 jira6.3.6安装汉化破解以及数据迁移 mikec168 : 插件页面500了 麻烦发我一下class文件 也请麻烦指点一下如何替换文件 谢谢了epok_chua...

Recno:: 18
URL:: http://blog.csdn.net/mchdba/article/details/9856239

ParseText::
利用Mongodb的复制集搭建高可用分片，Replica Sets + Sharding的搭建过程 - MySQL - 博客频道 - CSDN.NET MySQL 做最专业的DBA 目录视图 摘要视图 订阅 学院APP首次下载，可得50C币！     欢迎来帮助开源“进步”     当讲师？爱学习？投票攒课吧     认识Atlassian Datacenter产品     深圳小伙伴的福利来啦 [置顶] 利用Mongodb的复制集搭建高可用分片，Replica Sets + Sharding的搭建过程 2013-08-09 15:35 5029人阅读 评论 (7) 收藏 举报 分类： MongoDB （22） 作者同类文章 X 版权声明：本文为博主原创文章，未经博主允许不得转载。 参考资料 reference:  http://mongodb.blog.51cto.com/1071559/740131   http://docs.mongodb.org/manual/tutorial/deploy-shard-cluster/#sharding-setup-shard-collection 感谢网友 Mr.Sharp ，他给了我很多很有用的建议。 概念梳理 Sharded cluster has the following components: shards, query routers and config servers. Shards A : A shard is a MongoDB instance that holds a subset of a collection’s data. Each shard is either a single mongod instance or a replica set. In production, all shards are replica sets. Config Servers Each : config server (page 10) is a mongod instance that holds metadata about the cluster. The metadata maps chunks to shards. For more information, see Config Servers (page 10). Routing Instances : Each router is a mongos instance that routes the reads and writes from applications to the shards. Applications do not access the shards directly. Sharding is the only solution for some classes of deployments. Use sharded clusters if: 1 your data set approaches or exceeds the storage capacity of a single MongoDB instance. 2 the size of your system’s active working set will soon exceed the capacity of your system’s maximum RAM. 3 a single MongoDB instance cannot meet the demands of your write operations, and all other approaches have not reduced contention.     开始部署搭建 Deploy a Sharded Cluster 1 Start the Config Server Database Instances?  1.1 create data directories for each of the three config server instances  mkdir -p /opt/data/configdb   1.2 Start the three config server instances. Start each by issuing a command using the following syntax:  ignore this ， do it later   1.3 config file  [root@472322 configdb]# vim /etc/mongodb/37018.conf  # This is an example config file for MongoDB  dbpath = /opt/data/configdb2  port = 37018  rest = true  fork = true  logpath = /var/log/mongodb12.log  logappend = true  directoryperdb = true  configsvr = true  [root@472322 configdb]# vim /etc/mongodb/37017.conf  # This is an example config file for MongoDB  dbpath = /opt/data/configdb1  port = 37017  rest = true  fork = true  logpath = /var/log/mongodb12.log  logappend = true  directoryperdb = true  configsvr = true   [root@472322 configdb]# vim /etc/mongodb/37019.conf  # This is an example config file for MongoDB  dbpath = /opt/data/configdb3  port = 37019  rest = true  fork = true  logpath = /var/log/mongodb13.log  logappend = true  directoryperdb = true  configsvr = true  1.4 start mongodb server  /db/mongodb/bin/mongod -f /etc/mongodb/37019.conf  /db/mongodb/bin/mongod -f /etc/mongodb/37018.conf  /db/mongodb/bin/mongod -f /etc/mongodb/37017.conf   2 Start the mongos Instances  The mongos instances are lightweight and do not require data directories. You can run a mongos instance on a system that runs other cluster components,  such as on an application server or a server running a mongod process. By default, a mongos instance runs on port 27017.  /db/mongodb/bin/mongos --configdb 20.10x.91.119:37017,20.10x.91.119:37018,20.10x.91.119:37019  or run " nohup /db/mongodb/bin/mongos --configdb 20.10x.91.119:37017,20.10x.91.119:37018,20.10x.91.119:37019 & "    2.1 start mongos on default port 27017  [root@472322 ~]# nohup /db/mongodb/bin/mongos --configdb 20.10x.91.119:37017,20.10x.91.119:37018,20.10x.91.119:37019 &  Tue Aug  6 07:40:09 /db/mongodb/bin/mongos db version v2.0.1, pdfile version 4.5 starting (--help for usage)  Tue Aug  6 07:40:09 git version: 3a5cf0e2134a830d38d2d1aae7e88cac31bdd684  Tue Aug  6 07:40:09 build info: Linux bs-linux64.10gen.cc 2.6.21.7-2.ec2.v1.2.fc8xen #1 SMP Fri Nov 20 17:48:28 EST 2009 x86_64 BOOST_LIB_VERSION=1_41  Tue Aug  6 07:40:09 SyncClusterConnection connecting to [20.10x.91.119:37017]  Tue Aug  6 07:40:09 SyncClusterConnection connecting to [20.10x.91.119:37018]  Tue Aug  6 07:40:09 SyncClusterConnection connecting to [20.10x.91.119:37019]  Tue Aug  6 07:40:09 [Balancer] about to contact config servers and shards  Tue Aug  6 07:40:09 [websvr] admin web console waiting for connections on port 28017  Tue Aug  6 07:40:09 [Balancer] SyncClusterConnection connecting to [20.10x.91.119:37017]  Tue Aug  6 07:40:09 [mongosMain] waiting for connections on port 27017  Tue Aug  6 07:40:09 [Balancer] SyncClusterConnection connecting to [20.10x.91.119:37018]  Tue Aug  6 07:40:09 [Balancer] SyncClusterConnection connecting to [20.10x.91.119:37019]  Tue Aug  6 07:40:09 [Balancer] config servers and shards contacted successfully  Tue Aug  6 07:40:09 [Balancer] balancer id: 472322.ea.com:27017 started at Aug  6 07:40:09  Tue Aug  6 07:40:09 [Balancer] created new distributed lock for balancer on 20.10x.91.119:37017,20.10x.91.119:37018,20.10x.91.119:37019 ( lock timeout : 900000, ping interval : 30000, process : 0 )  Tue Aug  6 07:40:09 [Balancer] SyncClusterConnection connecting to [20.10x.91.119:37017]  Tue Aug  6 07:40:09 [Balancer] SyncClusterConnection connecting to [20.10x.91.119:37018]  Tue Aug  6 07:40:09 [Balancer] SyncClusterConnection connecting to [20.10x.91.119:37019]  Tue Aug  6 07:40:09 [Balancer] SyncClusterConnection connecting to [20.10x.91.119:37017]  Tue Aug  6 07:40:09 [Balancer] SyncClusterConnection connecting to [20.10x.91.119:37018]  Tue Aug  6 07:40:09 [Balancer] SyncClusterConnection connecting to [20.10x.91.119:37019]  Tue Aug  6 07:40:09 [LockPinger] creating distributed lock ping thread for 20.10x.91.119:37017,20.10x.91.119:37018,20.10x.91.119:37019 and process 472322.ea.com:27017:1375774809:1804289383 (sleeping for 30000ms)  Tue Aug  6 07:40:10 [Balancer] distributed lock 'balancer/472322.ea.com:27017:1375774809:1804289383' acquired, ts : 5200a8598caa3e21e9888bd3  Tue Aug  6 07:40:10 [Balancer] distributed lock 'balancer/472322.ea.com:27017:1375774809:1804289383' unlocked.  Tue Aug  6 07:40:20 [Balancer] distributed lock 'balancer/472322.ea.com:27017:1375774809:1804289383' acquired, ts : 5200a8648caa3e21e9888bd4  Tue Aug  6 07:40:20 [Balancer] distributed lock 'balancer/472322.ea.com:27017:1375774809:1804289383' unlocked.  Tue Aug  6 07:40:30 [Balancer] distributed lock 'balancer/472322.ea.com:27017:1375774809:1804289383' acquired, ts : 5200a86e8caa3e21e9888bd5  Tue Aug  6 07:40:30 [Balancer] distributed lock 'balancer/472322.ea.com:27017:1375774809:1804289383' unlocked.  Tue Aug  6 07:40:40 [Balancer] distributed lock 'balancer/472322.ea.com:27017:1375774809:1804289383' acquired, ts : 5200a8788caa3e21e9888bd6  Tue Aug  6 07:40:40 [Balancer] distributed lock 'balancer/472322.ea.com:27017:1375774809:1804289383' unlocked.  2.2 start others mongos in appointed port 27018,27019  nohup /db/mongodb/bin/mongos --configdb 20.10x.91.119:37017,20.10x.91.119:37018,20.10x.91.119:37019 --port 27018 --chunkSize 1 --logpath /var/log/mongos2.log --fork &  nohup /db/mongodb/bin/mongos --configdb 20.10x.91.119:37017,20.10x.91.119:37018,20.10x.91.119:37019 --port 27019 --chunkSize 1 --logpath /var/log/mongos3.log --fork &   3 [root@472322 ~]# /db/mongodb/bin/mongo --host 20.10x.91.119 --port 27017    the replica sets have not been created, so do it soon.   4 prepare the replica sets  4.1 the first sets  4.1.1 create the data directory  mkdir -p /opt/db/mongodb-data/db37  mkdir -p /opt/db/mongodb-data/db38   mkdir -p /opt/db/mongodb-data/db39     4.1.2 set the config files 27037.conf  [root@472322 mongodb]# vi  27037.conf  dbpath =/opt/db/mongodb-data/db37  port = 27037  rest = true  fork = true  logpath = /var/log/mongodb37.log  logappend = true  replSet = rpl  #diaglog = 3  profile = 3  slowms=50  oplogSize=4000     4.1.3 set the config files 27039.conf  [root@472322 mongodb]#  vi  27039.conf  # This is an example config file for MongoDB  dbpath =/opt/db/mongodb-data/db39  port = 27039  rest = true  fork = true  logpath = /var/log/mongodb39.log  logappend = true  replSet = rpl  #diaglog = 3  profile = 3  slowms=50  oplogSize=4000     4.1.4 set the config files 27038.conf   [root@472322 mongodb]#  vi  27038.conf  # This is an example config file for MongoDB  dbpath =/opt/db/mongodb-data/db38  port = 27038  rest = true  fork = true  logpath = /var/log/mongodb38.log  logappend = true  replSet = rpl  #diaglog = 3  profile = 3  slowms=50  oplogSize=4000     4.1.5 start replica set  config = {_id: 'rpl1', members: [    {_id: 0, host: '127.0.0.1:27027'},    {_id: 1, host: '127.0.0.1:27028'},    {_id: 3, host: '127.0.0.1:27029', arbiterOnly: true}   ]};   > config = {_id: 'rpl1', members: [   ... {_id: 0, host: '127.0.0.1:27027'},   ... {_id: 1, host: '127.0.0.1:27028'},   ... {_id: 3, host: '127.0.0.1:27029', arbiterOnly: true}   ... ]};   {     "_id" : "rpl1",     "members" : [       {         "_id" : 0,         "host" : "127.0.0.1:27027"       },       {         "_id" : 1,         "host" : "127.0.0.1:27028"       },       {         "_id" : 3,         "host" : "127.0.0.1:27029",         "arbiterOnly" : true       }     ]   }    rs.initiate(config);   > rs.initiate(config);   {     "info" : "Config now saved locally.  Should come online in about a minute.",     "ok" : 1   }    rs.status();   PRIMARY> rs.status();   {     "set" : "rpl1",     "date" : ISODate("2013-08-06T09:18:39Z"),     "myState" : 1,     "members" : [       {         "_id" : 0,         "name" : "127.0.0.1:27027",         "health" : 1,         "state" : 1,         "stateStr" : "PRIMARY",         "optime" : {           "t" : 1375780672000,           "i" : 1         },         "optimeDate" : ISODate("2013-08-06T09:17:52Z"),         "self" : true       },       {         "_id" : 1,         "name" : "127.0.0.1:27028",         "health" : 1,         "state" : 2,         "stateStr" : "SECONDARY",         "uptime" : 29,         "optime" : {           "t" : 1375780672000,           "i" : 1         },         "optimeDate" : ISODate("2013-08-06T09:17:52Z"),         "lastHeartbeat" : ISODate("2013-08-06T09:18:38Z"),         "pingMs" : 0       },       {         "_id" : 3,         "name" : "127.0.0.1:27029",         "health" : 1,         "state" : 7,         "stateStr" : "ARBITER",         "uptime" : 31,         "optime" : {           "t" : 0,           "i" : 0         },         "optimeDate" : ISODate("1970-01-01T00:00:00Z"),         "lastHeartbeat" : ISODate("2013-08-06T09:18:38Z"),         "pingMs" : 0       }     ],     "ok" : 1   }    4.2 the second sets  do the same to 4.1 in 27037,27038,27039 ports   config = {_id: 'rpl2', members: [    {_id: 0, host: '127.0.0.1:27037'},    {_id: 1, host: '127.0.0.1:27038'},    {_id: 3, host: '127.0.0.1:27039', arbiterOnly: true}   ]};   rs.initiate(config);   rs.status();   5 Add Shards to the Cluster  A shard can be a standalone mongod or a replica set. In a production environment, each shard should be a replica set.   5.1 From a mongo shell, connect to the mongos instance. Issue a command using the following syntax:  [root@472322 mongodb]# /db/mongodb/bin/mongo --host 20.10x.91.119 --port 27017  MongoDB shell version: 2.0.1  connecting to: 20.10x.91.119:27017/test  mongos>       5.2  add the replica rpl1 into shards  sh.addShard( "rpl1/127.0.0.1:27027" );  mongos> sh.addShard( "rpl1/127.0.0.1:27027" );  command failed: {    "ok" : 0,    "errmsg" : "can't use localhost as a shard since all shards need to communicate. either use all shards and configdbs in localhost or all in actual IPs  host: 127.0.0.1:27027 isLocalHost:1"  }  Tue Aug  6 09:41:16 uncaught exception: error { "$err" : "can't find a shard to put new db on", "code" : 10185 }  mongos>  can't use the localhost or 127.0.0.1, so change to the real ip address of "20.10x.91.119".  mongos> sh.addShard( "rpl1/20.10x.91.119:27027" );  command failed: {    "ok" : 0,    "errmsg" : "in seed list rpl1/20.10x.91.119:27027, host 20.10x.91.119:27027 does not belong to replica set rpl1"  }  Tue Aug  6 09:42:26 uncaught exception: error { "$err" : "can't find a shard to put new db on", "code" : 10185 }  mongos>  sh.addShard( "rpl1/20.10x.91.119:27027,20.10x.91.119:27028,20.10x.91.119:27029" );     so, replica sets config 127.0.0.1, 20.10x.91.119 can't be recognized,it is wrong. i should config it again.    5.2.1 delete all db files, then restart mongodb, then config again     config = {_id: 'rpl1', members: [    {_id: 0, host: '20.10x.91.119:27027'},    {_id: 1, host: '20.10x.91.119:27028'},    {_id: 3, host: '20.10x.91.119:27029', arbiterOnly: true}    ]};   rs.initiate(config);   rs.status();      config = {_id: 'rpl2', members: [    {_id: 0, host: '20.10x.91.119:27037'},    {_id: 1, host: '20.10x.91.119:27038'},    {_id: 3, host: '20.10x.91.119:27039', arbiterOnly: true}    ]};   rs.initiate(config);   rs.status();    5.2.2 add replica sets to shards again, it is ok.  [root@472322 ~]# /db/mongodb/bin/mongo --host 20.10x.91.119 --port 27017  MongoDB shell version: 2.0.1  connecting to: 20.10x.91.119:27017/test  mongos> sh.addShard( "rpl1/20.10x.91.119:27027,20.10x.91.119:27028,20.10x.91.119:27029" );  mongos>   6 Enable Sharding for a Database  Before you can shard a collection, you must enable sharding for the collection’s database.  Enabling sharding for a database does not redistribute data but make it possible to shard the collections in that database.    6.1 1.From a mongo shell, connect to the mongos instance. Issue a command using the following syntax:  sh.enableSharding("<database>")    6.2 Optionally, you can enable sharding for a database using the enableSharding command, which uses the following syntax:  db.runCommand( { enableSharding: <database> } )   7  Convert a Replica Set to a Replicated Sharded Cluster   简介梳理 The procedure, from a high level, is as follows:  7.1.Create or select a 3-member replica set and insert some data into a collection. done  7.2.Start the config databases and create a cluster with a single shard.  done.  7.3.Create a second replica set with three new mongod instances.  done  7.4.Add the second replica set as a shard in the cluster. haven't  7.5.Enable sharding on the desired collection or collections. haven't   开始操作  7.2 Add the second replica set as a shard in the cluster.  sh.addShard( "rpl2/20.10x.91.119:27037,20.10x.91.119:27038,20.10x.91.119:27039" );  it is okay.    7.3  Verify that both shards are properly configured by running the listShards command.  mongos> use admin  switched to db admin  mongos> db.runCommand({listShards:1})  {    "shards" : [      {        "_id" : "rpl1",        "host" : "rpl1/20.10x.91.119:27027,20.10x.91.119:27028,20.10x.91.119:27029"      },      {        "_id" : "rpl2",        "host" : "rpl2/20.10x.91.119:27037,20.10x.91.119:27038,20.10x.91.119:27039"      }    ],    "ok" : 1  }  mongos>    7.4 insert into 1000,000 data to test.tickets,and shared the tickets collections.  mongos> db.runCommand( { enableSharding : "test" } );  { "ok" : 1 }  mongos> use admin  mongos> db.runCommand( { shardCollection : "test.tickets", key : {"number":1} });  {    "proposedKey" : {      "number" : 1    },    "curIndexes" : [      {        "v" : 1,        "key" : {          "_id" : 1        },        "ns" : "test.tickets",        "name" : "_id_"      }    ],    "ok" : 0,    "errmsg" : "please create an index over the sharding key before sharding."  }  mongos>  if enable index to share, must create index first.  db.tickets.ensureIndex({ip:1});  db.runCommand( { shardCollection : "test.tickets", key : {"ip":1} })    mongos> db.runCommand( { shardCollection : "test.tickets", key : {"ip":1} })  { "collectionsharded" : "test.tickets", "ok" : 1 }  mongos>  The collection tickets is now sharded!    7.5 check in mongos  use test;  db.stats();  db.printShardingStatus();  there is no data chunks in rpl2,so sharedCollection is error.      7.6 i decided to add the second shared again, first remove,and then add.  7.6.1 Use the listShards command, as in the following:  db.adminCommand( { listShards: 1 } );  get the share name    7.6.2 Remove Chunks from the Shard  db.runCommand( { removeShard: "rpl2" } );  mongos> use admin  switched to db admin  mongos> db.runCommand( { removeShard: "rpl2" } );  {    "msg" : "draining started successfully",    "state" : "started",    "shard" : "rpl2",    "ok" : 1  }  mongos>    check  db.adminCommand( { listShards: 1 } ); it  is ok. when i insert data for tickets in mongo 27027 of first shard, the data can't be switched to the second shard.   why ? i asked for HYG, he told me that we must insert data in mongos windown,if not ,the data can't be switched,so i will try to do it soon.    7.7 insert data in mongos command window  db.tc2.ensureIndex({xx:1});  db.runCommand( { shardCollection : "test.tc2", key : {"xx":1} })  for( var i = 1; i < 2000000; i++ ) db.tc2.insert({ "xx":i, "fapp" : "84eb9fb556074d6481e31915ac2427f0",  "dne" : "ueeDEhIB6tmP4cfY43NwWvAenzKWx19znmbheAuBl4j39U8uFXS1QGi2GCMHO7L21szgeF6Iquqmnw8kfJbvZUs/11RyxcoRm+otbUJyPPxFkevzv4SrI3kGxczG6Lsd19NBpyskaElCTtVKxwvQyBNgciXYq6cO/8ntV2C6cwQ=",  "eml" : "q5x68h3qyVBqp3ollJrY3XEkXECjPEncXhbJjga+3hYoa4zYNhrNmBN91meL3o7jsBI/N6qe2bb2BOnOJNAnBMDzhNmPqJKG/ZVLfT9jpNkUD/pQ4oJENMv72L2GZoiyym2IFT+oT3N0KFhcv08b9ke9tm2EHTGcBsGg1R40Ah+Y/5z89OI4ERmI/48qjvaw",  "uid" : "sQt92NUPr3CpCVnbpotU2lqRNVfZD6k/9TGW62UT7ExZYF8Dp1cWIVQoYNQVyFRLkxjmCoa8m6DiLiL/fPdG1k7WYGUH4ueXXK2yfVn/AGUk3pQbIuh7nFbqZCrAQtEY7gU0aIGC4sotAE8kghvCa5qWnSX0SWTViAE/esaWORo=",  "agt" : "PHP/eaSSOPlugin",  "sd" : "S15345853557133877",  "pt" : 3795,  "ip" : "211.223.160.34",  "av" : " http://secure.download.dm.origin.com/production/avatar/prod/1/599/40x40.JPEG ",  "nex" : ISODate("2013-01-18T04:00:32.41Z"),  "exy" : ISODate("2013-01-18T01:16:32.015Z"),  "chk" : "sso4648609868740971",  "aid" : "Ciyvab0tregdVsBtboIpeChe4G6uzC1v5_-SIxmvSLLINJClUkXJhNvWkSUnajzi8xsv1DGYm0D3V46LLFI-61TVro9-HrZwyRwyTf9NwYIyentrgAY_qhs8fh7unyfB",  "tid" : "rUqFhONysi0yA==13583853927872",  "date" : ISODate("2012-02-17T01:16:32.787Z"),  "v" : "2.0.0",  "scope" : [],  "rug" : false,  "schk" : true,  "fjs" : false,  "sites" : [{      "name" : "Origin.com",      "id" : "nb09xrt8384147bba27c2f12e112o8k9",      "last" : ISODate("2013-01-17T01:16:32.787Z"),      "_id" : ObjectId("50f750f06a56028661000f20")    }]});     watch the status of sharding, use the command of "db.printShardingStatus();"  mongos> db.printShardingStatus();  --- Sharding Status ---    sharding version: { "_id" : 1, "version" : 3 }    shards:    {  "_id" : "rpl1",  "host" : "rpl1/20.10x.91.119:27027,20.10x.91.119:27028" }    {  "_id" : "rpl2",  "host" : "rpl2/20.10x.91.119:27037,20.10x.91.119:27038" }    databases:    {  "_id" : "admin",  "partitioned" : false,  "primary" : "config" }    {  "_id" : "test",  "partitioned" : true,  "primary" : "rpl1" }      test.tc chunks:          rpl1    1        { "ip" : { $minKey : 1 } } -->> { "ip" : { $maxKey : 1 } } on : rpl1 { "t" : 1000, "i" : 0 }      test.tc2 chunks:          rpl1    62           rpl2    61        too many chunks to print, use verbose if you want to force print      test.tickets chunks:          rpl1    1        { "ip" : { $minKey : 1 } } -->> { "ip" : { $maxKey : 1 } } on : rpl1 { "t" : 1000, "i" : 0 }    {  "_id" : "adin",  "partitioned" : false,  "primary" : "rpl1" }  mongos>    if we want to see the detail of "too many chunks to print, use verbose if you want to force print",we should use the parameter vvvv.  db.printShardingStatus("vvvv");  mongos> db.printShardingStatus("vvvv")  --- Sharding Status ---    sharding version: { "_id" : 1, "version" : 3 }    shards:    {  "_id" : "rpl1",  "host" : "rpl1/20.10x.91.119:27027,20.10x.91.119:27028" }    {  "_id" : "rpl2",  "host" : "rpl2/20.10x.91.119:27037,20.10x.91.119:27038" }    databases:    {  "_id" : "admin",  "partitioned" : false,  "primary" : "config" }    {  "_id" : "test",  "partitioned" : true,  "primary" : "rpl1" }      test.tc chunks:          rpl1    1        { "ip" : { $minKey : 1 } } -->> { "ip" : { $maxKey : 1 } } on : rpl1 { "t" : 1000, "i" : 0 }      test.tc2 chunks:          rpl1    62          rpl2    61        { "xx" : { $minKey : 1 } } -->> { "xx" : 1 } on : rpl1 { "t" : 59000, "i" : 1 }        { "xx" : 1 } -->> { "xx" : 2291 } on : rpl1 { "t" : 2000, "i" : 2 }        { "xx" : 2291 } -->> { "xx" : 4582 } on : rpl1 { "t" : 2000, "i" : 4 }        { "xx" : 4582 } -->> { "xx" : 6377 } on : rpl1 { "t" : 2000, "i" : 6 }        { "xx" : 6377 } -->> { "xx" : 8095 } on : rpl1 { "t" : 2000, "i" : 8 }        { "xx" : 8095 } -->> { "xx" : 9813 } on : rpl1 { "t" : 2000, "i" : 10 }        { "xx" : 9813 } -->> { "xx" : 11919 } on : rpl1 { "t" : 2000, "i" : 12 }        { "xx" : 11919 } -->> { "xx" : 14210 } on : rpl1 { "t" : 2000, "i" : 14 }        { "xx" : 14210 } -->> { "xx" : 18563 } on : rpl1 { "t" : 2000, "i" : 16 }        { "xx" : 18563 } -->> { "xx" : 23146 } on : rpl1 { "t" : 2000, "i" : 18 }        { "xx" : 23146 } -->> { "xx" : 27187 } on : rpl1 { "t" : 2000, "i" : 20 }        { "xx" : 27187 } -->> { "xx" : 31770 } on : rpl1 { "t" : 2000, "i" : 22 }        { "xx" : 31770 } -->> { "xx" : 35246 } on : rpl1 { "t" : 2000, "i" : 24 }        { "xx" : 35246 } -->> { "xx" : 38683 } on : rpl1 { "t" : 2000, "i" : 26 }        { "xx" : 38683 } -->> { "xx" : 42120 } on : rpl1 { "t" : 2000, "i" : 28 }        { "xx" : 42120 } -->> { "xx" : 45557 } on : rpl1 { "t" : 2000, "i" : 30 }        { "xx" : 45557 } -->> { "xx" : 48994 } on : rpl1 { "t" : 2000, "i" : 32 }        { "xx" : 48994 } -->> { "xx" : 53242 } on : rpl1 { "t" : 2000, "i" : 34 }        { "xx" : 53242 } -->> { "xx" : 62409 } on : rpl1 { "t" : 2000, "i" : 36 }        { "xx" : 62409 } -->> { "xx" : 71576 } on : rpl1 { "t" : 2000, "i" : 38 }        { "xx" : 71576 } -->> { "xx" : 80743 } on : rpl1 { "t" : 2000, "i" : 40 }        { "xx" : 80743 } -->> { "xx" : 89910 } on : rpl1 { "t" : 2000, "i" : 42 }        { "xx" : 89910 } -->> { "xx" : 99077 } on : rpl1 { "t" : 2000, "i" : 44 }        { "xx" : 99077 } -->> { "xx" : 119382 } on : rpl1 { "t" : 2000, "i" : 46 }        { "xx" : 119382 } -->> { "xx" : 133133 } on : rpl1 { "t" : 2000, "i" : 48 }        { "xx" : 133133 } -->> { "xx" : 146884 } on : rpl1 { "t" : 2000, "i" : 50 }        { "xx" : 146884 } -->> { "xx" : 160635 } on : rpl1 { "t" : 2000, "i" : 52 }        { "xx" : 160635 } -->> { "xx" : 178457 } on : rpl1 { "t" : 2000, "i" : 54 }        { "xx" : 178457 } -->> { "xx" : 200508 } on : rpl1 { "t" : 2000, "i" : 56 }        { "xx" : 200508 } -->> { "xx" : 214259 } on : rpl1 { "t" : 2000, "i" : 58 }        { "xx" : 214259 } -->> { "xx" : 228010 } on : rpl1 { "t" : 2000, "i" : 60 }        { "xx" : 228010 } -->> { "xx" : 241761 } on : rpl1 { "t" : 2000, "i" : 62 }        { "xx" : 241761 } -->> { "xx" : 255512 } on : rpl1 { "t" : 2000, "i" : 64 }        { "xx" : 255512 } -->> { "xx" : 279630 } on : rpl1 { "t" : 2000, "i" : 66 }        { "xx" : 279630 } -->> { "xx" : 301723 } on : rpl1 { "t" : 2000, "i" : 68 }        { "xx" : 301723 } -->> { "xx" : 317196 } on : rpl1 { "t" : 2000, "i" : 70 }        { "xx" : 317196 } -->> { "xx" : 336533 } on : rpl1 { "t" : 2000, "i" : 72 }        { "xx" : 336533 } -->> { "xx" : 359500 } on : rpl1 { "t" : 2000, "i" : 74 }        { "xx" : 359500 } -->> { "xx" : 385354 } on : rpl1 { "t" : 2000, "i" : 76 }        { "xx" : 385354 } -->> { "xx" : 400837 } on : rpl1 { "t" : 2000, "i" : 78 }        { "xx" : 400837 } -->> { "xx" : 422259 } on : rpl1 { "t" : 2000, "i" : 80 }        { "xx" : 422259 } -->> { "xx" : 444847 } on : rpl1 { "t" : 2000, "i" : 82 }        { "xx" : 444847 } -->> { "xx" : 472084 } on : rpl1 { "t" : 2000, "i" : 84 }        { "xx" : 472084 } -->> { "xx" : 490796 } on : rpl1 { "t" : 2000, "i" : 86 }        { "xx" : 490796 } -->> { "xx" : 509498 } on : rpl1 { "t" : 2000, "i" : 88 }        { "xx" : 509498 } -->> { "xx" : 534670 } on : rpl1 { "t" : 2000, "i" : 90 }        { "xx" : 534670 } -->> { "xx" : 561927 } on : rpl1 { "t" : 2000, "i" : 92 }        { "xx" : 561927 } -->> { "xx" : 586650 } on : rpl1 { "t" : 2000, "i" : 94 }        { "xx" : 586650 } -->> { "xx" : 606316 } on : rpl1 { "t" : 2000, "i" : 96 }        { "xx" : 606316 } -->> { "xx" : 632292 } on : rpl1 { "t" : 2000, "i" : 98 }        { "xx" : 632292 } -->> { "xx" : 650179 } on : rpl1 { "t" : 2000, "i" : 100 }        { "xx" : 650179 } -->> { "xx" : 670483 } on : rpl1 { "t" : 2000, "i" : 102 }        { "xx" : 670483 } -->> { "xx" : 695898 } on : rpl1 { "t" : 2000, "i" : 104 }        { "xx" : 695898 } -->> { "xx" : 719853 } on : rpl1 { "t" : 2000, "i" : 106 }        { "xx" : 719853 } -->> { "xx" : 734751 } on : rpl1 { "t" : 2000, "i" : 108 }        { "xx" : 734751 } -->> { "xx" : 757143 } on : rpl1 { "t" : 2000, "i" : 110 }        { "xx" : 757143 } -->> { "xx" : 773800 } on : rpl1 { "t" : 2000, "i" : 112 }        { "xx" : 773800 } -->> { "xx" : 796919 } on : rpl1 { "t" : 2000, "i" : 114 }        { "xx" : 796919 } -->> { "xx" : 814262 } on : rpl1 { "t" : 2000, "i" : 116 }        { "xx" : 814262 } -->> { "xx" : 837215 } on : rpl1 { "t" : 2000, "i" : 118 }        { "xx" : 837215 } -->> { "xx" : 855766 } on : rpl1 { "t" : 2000, "i" : 120 }        { "xx" : 855766 } -->> { "xx" : 869517 } on : rpl1 { "t" : 2000, "i" : 122 }        { "xx" : 869517 } -->> { "xx" : 883268 } on : rpl2 { "t" : 59000, "i" : 0 }        { "xx" : 883268 } -->> { "xx" : 897019 } on : rpl2 { "t" : 58000, "i" : 0 }        { "xx" : 897019 } -->> { "xx" : 919595 } on : rpl2 { "t" : 57000, "i" : 0 }        { "xx" : 919595 } -->> { "xx" : 946611 } on : rpl2 { "t" : 56000, "i" : 0 }        { "xx" : 946611 } -->> { "xx" : 966850 } on : rpl2 { "t" : 55000, "i" : 0 }        { "xx" : 966850 } -->> { "xx" : 989291 } on : rpl2 { "t" : 54000, "i" : 0 }        { "xx" : 989291 } -->> { "xx" : 1008580 } on : rpl2 { "t" : 53000, "i" : 0 }        { "xx" : 1008580 } -->> { "xx" : 1022331 } on : rpl2 { "t" : 52000, "i" : 0 }        { "xx" : 1022331 } -->> { "xx" : 1036082 } on : rpl2 { "t" : 51000, "i" : 0 }        { "xx" : 1036082 } -->> { "xx" : 1060888 } on : rpl2 { "t" : 50000, "i" : 0 }        { "xx" : 1060888 } -->> { "xx" : 1088121 } on : rpl2 { "t" : 49000, "i" : 0 }        { "xx" : 1088121 } -->> { "xx" : 1101872 } on : rpl2 { "t" : 48000, "i" : 0 }        { "xx" : 1101872 } -->> { "xx" : 1122160 } on : rpl2 { "t" : 47000, "i" : 0 }        { "xx" : 1122160 } -->> { "xx" : 1143537 } on : rpl2 { "t" : 46000, "i" : 0 }        { "xx" : 1143537 } -->> { "xx" : 1168372 } on : rpl2 { "t" : 45000, "i" : 0 }        { "xx" : 1168372 } -->> { "xx" : 1182123 } on : rpl2 { "t" : 44000, "i" : 0 }        { "xx" : 1182123 } -->> { "xx" : 1201952 } on : rpl2 { "t" : 43000, "i" : 0 }        { "xx" : 1201952 } -->> { "xx" : 1219149 } on : rpl2 { "t" : 42000, "i" : 0 }        { "xx" : 1219149 } -->> { "xx" : 1232900 } on : rpl2 { "t" : 41000, "i" : 0 }        { "xx" : 1232900 } -->> { "xx" : 1247184 } on : rpl2 { "t" : 40000, "i" : 0 }        { "xx" : 1247184 } -->> { "xx" : 1270801 } on : rpl2 { "t" : 39000, "i" : 0 }        { "xx" : 1270801 } -->> { "xx" : 1294343 } on : rpl2 { "t" : 38000, "i" : 0 }        { "xx" : 1294343 } -->> { "xx" : 1313250 } on : rpl2 { "t" : 37000, "i" : 0 }        { "xx" : 1313250 } -->> { "xx" : 1336332 } on : rpl2 { "t" : 36000, "i" : 0 }        { "xx" : 1336332 } -->> { "xx" : 1358840 } on : rpl2 { "t" : 35000, "i" : 0 }        { "xx" : 1358840 } -->> { "xx" : 1372591 } on : rpl2 { "t" : 34000, "i" : 0 }        { "xx" : 1372591 } -->> { "xx" : 1386342 } on : rpl2 { "t" : 33000, "i" : 0 }        { "xx" : 1386342 } -->> { "xx" : 1400093 } on : rpl2 { "t" : 32000, "i" : 0 }        { "xx" : 1400093 } -->> { "xx" : 1418372 } on : rpl2 { "t" : 31000, "i" : 0 }        { "xx" : 1418372 } -->> { "xx" : 1440590 } on : rpl2 { "t" : 30000, "i" : 0 }        { "xx" : 1440590 } -->> { "xx" : 1461034 } on : rpl2 { "t" : 29000, "i" : 0 }        { "xx" : 1461034 } -->> { "xx" : 1488305 } on : rpl2 { "t" : 28000, "i" : 0 }        { "xx" : 1488305 } -->> { "xx" : 1510326 } on : rpl2 { "t" : 27000, "i" : 0 }        { "xx" : 1510326 } -->> { "xx" : 1531986 } on : rpl2 { "t" : 26000, "i" : 0 }        { "xx" : 1531986 } -->> { "xx" : 1545737 } on : rpl2 { "t" : 25000, "i" : 0 }        { "xx" : 1545737 } -->> { "xx" : 1559488 } on : rpl2 { "t" : 24000, "i" : 0 }        { "xx" : 1559488 } -->> { "xx" : 1576755 } on : rpl2 { "t" : 23000, "i" : 0 }        { "xx" : 1576755 } -->> { "xx" : 1596977 } on : rpl2 { "t" : 22000, "i" : 0 }        { "xx" : 1596977 } -->> { "xx" : 1619863 } on : rpl2 { "t" : 21000, "i" : 0 }        { "xx" : 1619863 } -->> { "xx" : 1633614 } on : rpl2 { "t" : 20000, "i" : 0 }        { "xx" : 1633614 } -->> { "xx" : 1647365 } on : rpl2 { "t" : 19000, "i" : 0 }        { "xx" : 1647365 } -->> { "xx" : 1668372 } on : rpl2 { "t" : 18000, "i" : 0 }        { "xx" : 1668372 } -->> { "xx" : 1682123 } on : rpl2 { "t" : 17000, "i" : 0 }        { "xx" : 1682123 } -->> { "xx" : 1695874 } on : rpl2 { "t" : 16000, "i" : 0 }        { "xx" : 1695874 } -->> { "xx" : 1711478 } on : rpl2 { "t" : 15000, "i" : 0 }        { "xx" : 1711478 } -->> { "xx" : 1738684 } on : rpl2 { "t" : 14000, "i" : 0 }        { "xx" : 1738684 } -->> { "xx" : 1758083 } on : rpl2 { "t" : 13000, "i" : 0 }        { "xx" : 1758083 } -->> { "xx" : 1773229 } on : rpl2 { "t" : 12000, "i" : 0 }        { "xx" : 1773229 } -->> { "xx" : 1794767 } on : rpl2 { "t" : 11000, "i" : 0 }        { "xx" : 1794767 } -->> { "xx" : 1808518 } on : rpl2 { "t" : 10000, "i" : 0 }        { "xx" : 1808518 } -->> { "xx" : 1834892 } on : rpl2 { "t" : 9000, "i" : 0 }        { "xx" : 1834892 } -->> { "xx" : 1848643 } on : rpl2 { "t" : 8000, "i" : 0 }        { "xx" : 1848643 } -->> { "xx" : 1873297 } on : rpl2 { "t" : 7000, "i" : 0 }        { "xx" : 1873297 } -->> { "xx" : 1887048 } on : rpl2 { "t" : 6000, "i" : 2 }        { "xx" : 1887048 } -->> { "xx" : 1911702 } on : rpl2 { "t" : 6000, "i" : 3 }        { "xx" : 1911702 } -->> { "xx" : 1918372 } on : rpl2 { "t" : 5000, "i" : 0 }        { "xx" : 1918372 } -->> { "xx" : 1932123 } on : rpl2 { "t" : 7000, "i" : 2 }        { "xx" : 1932123 } -->> { "xx" : 1959185 } on : rpl2 { "t" : 7000, "i" : 3 }        { "xx" : 1959185 } -->> { "xx" : 1972936 } on : rpl2 { "t" : 9000, "i" : 2 }        { "xx" : 1972936 } -->> { "xx" : 1999999 } on : rpl2 { "t" : 9000, "i" : 3 }        { "xx" : 1999999 } -->> { "xx" : { $maxKey : 1 } } on : rpl2 { "t" : 2000, "i" : 0 }      test.tickets chunks:          rpl1    1        { "ip" : { $minKey : 1 } } -->> { "ip" : { $maxKey : 1 } } on : rpl1 { "t" : 1000, "i" : 0 }    {  "_id" : "adin",  "partitioned" : false,  "primary" : "rpl1" }  mongos>    7.7.2 vertify if it is a sharding  [root@472322 ~]# /db/mongodb/bin/mongo --port 27027  MongoDB shell version: 2.0.1  connecting to: 127.0.0.1:27027/test  PRIMARY> db.runCommand({ isdbgrid:1 });  {    "errmsg" : "no such cmd: isdbgrid",    "bad cmd" : {      "isdbgrid" : 1    },    "ok" : 0  }  PRIMARY>  there is errmsg info, run it in wrong windows,maybe run it in the mongos window.    [root@472322 ~]# /db/mongodb/bin/mongo --port 27017  MongoDB shell version: 2.0.1  connecting to: 127.0.0.1:27017/test  mongos> db.runCommand({ isdbgrid:1 });  { "isdbgrid" : 1, "hostname" : "472322.ea.com", "ok" : 1 }  mongos>   ok,  "isdbgrid" : 1 means it is a sharding.    7.8 shared for unshared collection  7.8.1 prepared a collection in mongo window.  for( var i = 1; i < 2000000; i++ ) db.tc3.insert({ "xx":i, "fapp" : "84eb9fb556074d6481e31915ac2427f0",  "dne" : "ueeDEhIB6tmP4cfY43NwWvAenzKWx19znmbheAuBl4j39U8uFXS1QGi2GCMHO7L21szgeF6Iquqmnw8kfJbvZUs/11RyxcoRm+otbUJyPPxFkevzv4SrI3kGxczG6Lsd19NBpyskaElCTtVKxwvQyBNgciXYq6cO/8ntV2C6cwQ=",  "eml" : "q5x68h3qyVBqp3ollJrY3XEkXECjPEncXhbJjga+3hYoa4zYNhrNmBN91meL3o7jsBI/N6qe2bb2BOnOJNAnBMDzhNmPqJKG/ZVLfT9jpNkUD/pQ4oJENMv72L2GZoiyym2IFT+oT3N0KFhcv08b9ke9tm2EHTGcBsGg1R40Ah+Y/5z89OI4ERmI/48qjvaw",  "uid" : "sQt92NUPr3CpCVnbpotU2lqRNVfZD6k/9TGW62UT7ExZYF8Dp1cWIVQoYNQVyFRLkxjmCoa8m6DiLiL/fPdG1k7WYGUH4ueXXK2yfVn/AGUk3pQbIuh7nFbqZCrAQtEY7gU0aIGC4sotAE8kghvCa5qWnSX0SWTViAE/esaWORo=",  "agt" : "PHP/eaSSOPlugin",  "sd" : "S15345853557133877",  "pt" : 3795,  "ip" : "211.223.160.34",  "av" : " http://secure.download.dm.origin.com/production/avatar/prod/1/599/40x40.JPEG ",  "nex" : ISODate("2013-01-18T04:00:32.41Z"),  "exy" : ISODate("2013-01-18T01:16:32.015Z"),  "chk" : "sso4648609868740971",  "aid" : "Ciyvab0tregdVsBtboIpeChe4G6uzC1v5_-SIxmvSLLINJClUkXJhNvWkSUnajzi8xsv1DGYm0D3V46LLFI-61TVro9-HrZwyRwyTf9NwYIyentrgAY_qhs8fh7unyfB",  "tid" : "rUqFhONysi0yA==13583853927872",  "date" : ISODate("2012-02-17T01:16:32.787Z"),  "v" : "2.0.0",  "scope" : [],  "rug" : false,  "schk" : true,  "fjs" : false,  "sites" : [{      "name" : "Origin.com",      "id" : "nb09xrt8384147bba27c2f12e112o8k9",      "last" : ISODate("2013-01-17T01:16:32.787Z"),      "_id" : ObjectId("50f750f06a56028661000f20")    }]});  db.tc3.ensureIndex({xx:1});  see the status of sharding  db.tc3.stats();  mongos> db.tc3.stats();  {    "sharded" : false,    "primary" : "rpl1

Recno:: 19
URL:: http://blog.csdn.net/microrain/article/details/12317973

ParseText::
让你的开发变得更加快起来 - 辛佳雨的专栏 - 博客频道 - CSDN.NET 辛佳雨的专栏 我的思想，凭空游弋 目录视图 摘要视图 订阅 学院APP首次下载，可得50C币！     欢迎来帮助开源“进步”     当讲师？爱学习？投票攒课吧     认识Atlassian Datacenter产品     深圳小伙伴的福利来啦 让你的开发变得更加快起来 标签： 开发工具 Sublime Text PhpStorm 代码片断 开发人员 2013-10-05 19:46 1941人阅读 评论 (3) 收藏 举报 分类： php （6） 作者同类文章 X 杂文 （54） 作者同类文章 X 版权声明：本文为博主原创文章，未经博主允许不得转载。 开发人员很多时候是在做一些重复的工作。 针对不同数据表的增删改查都差不多，重复来重去的。很久不写程序了，利用十一假期在家看看书，写写程序。 最近一直很喜欢使用Sublime Text，发现它的代码片断管理功能不错，只要输入事先定义好的短语，大段的代码片段就可以自动填充进来。还可以定义变量。 如PHP代码。可以使用 ${0}的方式定义每一个参数，其它依次类推。如果想在代码片段中保留$符，只要在$前面加上\就可以了。如： \$data 设置步骤如下： 1，选择Tools －》 New Snippet  这样将会创建一个空的代码片段模板。如下： <![CDATA[ <snippet> <content><![CDATA[ Hello, ${1:this} is a ${2:snippet}. ]]></content> <!-- Optional: Set a tabTrigger to define how to trigger the snippet --> <!-- <tabTrigger>hello</tabTrigger> --> <!-- Optional: Set a scope to limit where the snippet will trigger --> <!-- <scope>source.python</scope> --> </snippet> 在[  ] 中间放入你的代码，想替换哪儿个关键词就用${} 来改写，中间的数字为光标的顺序，按TAB键进行切换。 tabTrigger：为在编辑器中输入的关键词，然后按TAB键 scope：为在哪儿类源程序中起作用，当然可以不设置 description：为提示说明信息 写好后，保存。记住一定要保存为 .sublime-snippet 扩展名。如果打开一个已存在的，可以通过Preferences －》Browse Packages 在user目中就可以找到了。请注意，我使用的是MAC的本本，不知道windows系统下在什么位置，没在windows下用过这个软件。 下面是我写的一个小模板： <snippet>     <content><![CDATA[  /** * 删除 * @param string \$${1} 数据记录的标识ID * @param string \$${2:tabelname} 数据表名称 * @return void **/ public function del(){ \$${1} = trim(\$_GET['${1}']); if(empty(\$${1})){ \$this->error('该记录不存在！'); } \$result = M('${2:tabelname}')->where(array('${1}'=>\$${1}))->delete(); \$this->message(\$result,'__URL__/index','删除成功！','删除失败！'); } ]]></content>     <!-- Optional: Set a tabTrigger to define how to trigger the snippet -->     <tabTrigger>tpdel</tabTrigger>     <!-- Optional: Set a scope to limit where the snippet will trigger -->     <!-- <scope>source.python</scope> -->      <description>ThinkPHP － del() 删除一条数据方法</description> </snippet> 用Sublime Text 3 很顺手，可是在写PHP程序时候调试并不方便，写PHP程序还是用PhpStorm好用，我用的是PhpStorm6 。经过了上面的情况，就想在PhpStorm下是不是也能这样做呢。经过研究发现这个开发工具也可以，真是很爽啊。 提示：在编辑器中 command + J 就可以有提示了。在windows下应该ctrl ＋ J 。 使用方式是： 在Preferences里有一个 Live Templates 设置项，那儿里面有不少例子，可以试试啊。模板的编辑方式与上面Sublime Text差不多。只是这儿里不需要用\来转义。 如果想在模板中保留$符，只要输入$$就可以了。还支持设置参数的默认值及输出后自动格式化。 善用开发工具，开发效率会大大的提高。 上一篇 悲催的IT 屌丝 下一篇 PhpStorm 默认快捷键 顶 4 踩 0 我的同类文章 php （6） 杂文 （54） http://blog.csdn.net 猜你在找 查看评论 * 以上用户言论只代表其个人观点，不代表CSDN网站的观点或立场 个人资料 microrain 访问： 813329次 积分： 8644 等级： 积分：8644 排名： 第1131名 原创： 109篇 转载： 43篇 译文： 2篇 评论： 997条 文章搜索 文章分类 e-learning (9) Flex/AS3 (24) FreeMarker (1) java (2) javascript (5) Linux专题 (24) Neusoft (1) php (7) Ruby (2) 云计算 (4) 人物 (1) 代码中国 (4) 心情小记 (13) 杂文 (55) 电子商务 (2) 电子政务 (0) 文章存档 2014年11月 (1) 2013年12月 (2) 2013年11月 (2) 2013年10月 (2) 2013年07月 (1) 2011年08月 (1) 2011年07月 (2) 2011年06月 (1) 2011年02月 (1) 2011年01月 (1) 2010年04月 (1) 2009年05月 (1) 2008年12月 (1) 2008年11月 (1) 2008年10月 (1) 2008年05月 (1) 2008年04月 (1) 2008年03月 (2) 2008年02月 (7) 2008年01月 (24) 2007年12月 (3) 2007年11月 (1) 2007年10月 (2) 2007年09月 (2) 2007年08月 (8) 2007年07月 (3) 2007年06月 (5) 2007年05月 (8) 2007年04月 (5) 2007年03月 (1) 2007年02月 (1) 2007年01月 (2) 2006年12月 (7) 2006年11月 (11) 2006年10月 (6) 2006年09月 (12) 2006年08月 (12) 2006年07月 (1) 2006年06月 (3) 2006年04月 (1) 2005年12月 (1) 2005年11月 (2) 2003年07月 (3) 阅读排行 五笔输入法 快速入门 二小时基本了解五笔 (70243) 我们为什么不选择Linux？ (58395) 最佳开源软件一览 (43596) Linux替代Windows系统软件大比拼 (19681) linux网络电视软件sopcast的安装 (19289) 基于WEB应用开发的java程序员必备工具 (17564) ruby语言只是昙花一现 (16799) CSDN最受欢迎的电子手册推荐 (12730) 未来几年动态语言谁将成为主流 (12727) Flex builder 3　正式版发布（含破解） (11889) 评论排行 我们为什么不选择Linux？ (235) Linux替代Windows系统软件大比拼 (109) 未来几年动态语言谁将成为主流 (70) 五笔输入法 快速入门 二小时基本了解五笔 (61) ruby语言只是昙花一现 (31) linux还需要多久真正走入我们的电脑 (24) 最佳开源软件一览 (23) Flex 3D Engine演示 (21) 国内首家源代码搜索引擎闪亮登场 (21) 放弃也是一种好的选择 (19) 推荐文章 *App竞品技术分析 （6）热修复 *架构设计：系统间通信（17）——服务治理与Dubbo 中篇（分析） *一款炫酷Loading动画--加载失败 *图解堆算法、链表、栈与队列（多图预警） *Android中ContentProvider组件详解 *Android平台Camera实时滤镜实现方法探讨(九)--磨皮算法探讨(一) 最新评论 Linux的王者时代即将到来 BraveLii : 对于个人用户来说会逐渐减少对于客户端操作系统的依赖。不在关注这些问题，所有都将在云端使用。只有云服务... ruby语言只是昙花一现 windows1989 : @microrain:这位当时，估计是个应届生，或者根本就没毕业呢？ 未来几年动态语言谁将成为主流 MrH_HC : 路过，表示Python在2014年成为主流脚本语言之一了。 ruby语言只是昙花一现 microrain : @u012000276:几年后再看回复，还是觉得很好笑！ ruby语言只是昙花一现 microrain : @u012000276:每个人都会有各自的感受而以。这个也只是当时的认知而以。一个语言能不能直正流行... ruby语言只是昙花一现 u012000276 : 不懂就别乱评价行不行？你连ruby都不懂 你有什么资格评价ruby 。你以为你是认为谁？ 有本事 自... PhpStorm 默认快捷键 zhoumengkang : 谢谢啦！！！ 基于WEB应用开发的java程序员必备工具 wangchao0729 : 很好很强大 微软你再狠一些吧，把自己赶出中国 liu765023051 : 没有软件是破解不了的。中国软件业现在从高到低一致盗版，哎，没法说。 悲催的IT 屌丝 acm365 : 以前觉得自己的文笔挺好的，现在看看自己写的有时自己都不愿意看，自己喜欢就去干，加油楼主，关注了 朋友 闫辉 ( RSS ) 龙如俊blog ( RSS ) 周筠@博文视点 ( RSS ) 葛涵涛@CSDN ( RSS ) 陈瑞江@CSDN ( RSS ) 霍泰稳的BLOG ( RSS ) 杨福川 写书/译书都找他 ( RSS ) 网站 代码中国网 ( RSS ) CSDN下载频道

Recno:: 20
URL:: http://blog.csdn.net/microrain/article/details/12319505

ParseText::
PhpStorm 默认快捷键 - 辛佳雨的专栏 - 博客频道 - CSDN.NET 辛佳雨的专栏 我的思想，凭空游弋 目录视图 摘要视图 订阅 学院APP首次下载，可得50C币！     欢迎来帮助开源“进步”     当讲师？爱学习？投票攒课吧     认识Atlassian Datacenter产品     深圳小伙伴的福利来啦 PhpStorm 默认快捷键 标签： 标签 扩展 2013-10-05 20:18 2640人阅读 评论 (2) 收藏 举报 分类： 杂文 （54） 作者同类文章 X ctrl+j            插入活动代码提示 ctrl+alt+t        当前位置插入环绕代码 alt+insert        生成代码菜单 Shift + Enter 新一行 ctrl+q            查看代码注释 ctrl+d            复制当前行 ctrl+y            删除当前行 ctrl+alt+ y      刷新项目缓存Synchronize  或文件夹右键 Synchronize   shift+F6          重命名 ctrl+shift+u      字母大小写转换   ctrl+f            查找 ctrl+r            替换 ctrl+shift+I      查看变量或方法定义源 ctrl+g            跳转行 ctrl+alt+F12      跳转至当前文件在磁盘上的位置 alt+down          查看下一个方法 alt+up            查看上一个方法 ctrl+alt+l        重新格式化代码   ctrl+shift+down   statement向下移动 ctrl+shift+up     statement向上移动 alt+shift+down    line向下移动 alt+shift+up      line向上移动 ctrl+/            行注释 ctrl+shift+/      块注释 Ctrl + Shift + Z：redo Ctrl + Shift + F：区域查找   ctrl+shift+n      打开工程中的文件 ctrl+b            跳到变量申明处 ctrl+[]           匹配 {}[] ctrl+shift+]/[    选中块代码<table>....</table> ctrl+x            剪切行 ctrl+shift+v      复制多个文本   alt+left/right    标签切换 ctrl+p            显示默认参数 ctrl + '-/+': 可以折叠项目中的任何代码块 苹果本本请将 ctrl 换为 command 上一篇 让你的开发变得更加快起来 下一篇 推荐一个git源码托管网站 顶 0 踩 0 我的同类文章 杂文 （54） http://blog.csdn.net 猜你在找 查看评论 * 以上用户言论只代表其个人观点，不代表CSDN网站的观点或立场 个人资料 microrain 访问： 813318次 积分： 8644 等级： 积分：8644 排名： 第1131名 原创： 109篇 转载： 43篇 译文： 2篇 评论： 997条 文章搜索 文章分类 e-learning (9) Flex/AS3 (24) FreeMarker (1) java (2) javascript (5) Linux专题 (24) Neusoft (1) php (7) Ruby (2) 云计算 (4) 人物 (1) 代码中国 (4) 心情小记 (13) 杂文 (55) 电子商务 (2) 电子政务 (0) 文章存档 2014年11月 (1) 2013年12月 (2) 2013年11月 (2) 2013年10月 (2) 2013年07月 (1) 2011年08月 (1) 2011年07月 (2) 2011年06月 (1) 2011年02月 (1) 2011年01月 (1) 2010年04月 (1) 2009年05月 (1) 2008年12月 (1) 2008年11月 (1) 2008年10月 (1) 2008年05月 (1) 2008年04月 (1) 2008年03月 (2) 2008年02月 (7) 2008年01月 (24) 2007年12月 (3) 2007年11月 (1) 2007年10月 (2) 2007年09月 (2) 2007年08月 (8) 2007年07月 (3) 2007年06月 (5) 2007年05月 (8) 2007年04月 (5) 2007年03月 (1) 2007年02月 (1) 2007年01月 (2) 2006年12月 (7) 2006年11月 (11) 2006年10月 (6) 2006年09月 (12) 2006年08月 (12) 2006年07月 (1) 2006年06月 (3) 2006年04月 (1) 2005年12月 (1) 2005年11月 (2) 2003年07月 (3) 阅读排行 五笔输入法 快速入门 二小时基本了解五笔 (70243) 我们为什么不选择Linux？ (58395) 最佳开源软件一览 (43596) Linux替代Windows系统软件大比拼 (19681) linux网络电视软件sopcast的安装 (19289) 基于WEB应用开发的java程序员必备工具 (17564) ruby语言只是昙花一现 (16799) CSDN最受欢迎的电子手册推荐 (12730) 未来几年动态语言谁将成为主流 (12727) Flex builder 3　正式版发布（含破解） (11889) 评论排行 我们为什么不选择Linux？ (235) Linux替代Windows系统软件大比拼 (109) 未来几年动态语言谁将成为主流 (70) 五笔输入法 快速入门 二小时基本了解五笔 (61) ruby语言只是昙花一现 (31) linux还需要多久真正走入我们的电脑 (24) 最佳开源软件一览 (23) Flex 3D Engine演示 (21) 国内首家源代码搜索引擎闪亮登场 (21) 放弃也是一种好的选择 (19) 推荐文章 *App竞品技术分析 （6）热修复 *架构设计：系统间通信（17）——服务治理与Dubbo 中篇（分析） *一款炫酷Loading动画--加载失败 *图解堆算法、链表、栈与队列（多图预警） *Android中ContentProvider组件详解 *Android平台Camera实时滤镜实现方法探讨(九)--磨皮算法探讨(一) 最新评论 Linux的王者时代即将到来 BraveLii : 对于个人用户来说会逐渐减少对于客户端操作系统的依赖。不在关注这些问题，所有都将在云端使用。只有云服务... ruby语言只是昙花一现 windows1989 : @microrain:这位当时，估计是个应届生，或者根本就没毕业呢？ 未来几年动态语言谁将成为主流 MrH_HC : 路过，表示Python在2014年成为主流脚本语言之一了。 ruby语言只是昙花一现 microrain : @u012000276:几年后再看回复，还是觉得很好笑！ ruby语言只是昙花一现 microrain : @u012000276:每个人都会有各自的感受而以。这个也只是当时的认知而以。一个语言能不能直正流行... ruby语言只是昙花一现 u012000276 : 不懂就别乱评价行不行？你连ruby都不懂 你有什么资格评价ruby 。你以为你是认为谁？ 有本事 自... PhpStorm 默认快捷键 zhoumengkang : 谢谢啦！！！ 基于WEB应用开发的java程序员必备工具 wangchao0729 : 很好很强大 微软你再狠一些吧，把自己赶出中国 liu765023051 : 没有软件是破解不了的。中国软件业现在从高到低一致盗版，哎，没法说。 悲催的IT 屌丝 acm365 : 以前觉得自己的文笔挺好的，现在看看自己写的有时自己都不愿意看，自己喜欢就去干，加油楼主，关注了 朋友 闫辉 ( RSS ) 龙如俊blog ( RSS ) 周筠@博文视点 ( RSS ) 葛涵涛@CSDN ( RSS ) 陈瑞江@CSDN ( RSS ) 霍泰稳的BLOG ( RSS ) 杨福川 写书/译书都找他 ( RSS ) 网站 代码中国网 ( RSS ) CSDN下载频道

Recno:: 21
URL:: http://blog.csdn.net/microrain/article/details/14159595

ParseText::
推荐一个git源码托管网站 - 辛佳雨的专栏 - 博客频道 - CSDN.NET 辛佳雨的专栏 我的思想，凭空游弋 目录视图 摘要视图 订阅 学院APP首次下载，可得50C币！     欢迎来帮助开源“进步”     当讲师？爱学习？投票攒课吧     认识Atlassian Datacenter产品     深圳小伙伴的福利来啦 推荐一个git源码托管网站 标签： git 源码 免费 2013-11-05 06:47 1432人阅读 评论 (0) 收藏 举报 分类： 杂文 （54） 作者同类文章 X 版权声明：本文为博主原创文章，未经博主允许不得转载。 做为个人或是小团队创业初期来说，特别是大家都不在一个地方，那么代码版本管理就变得尤为为重要。如果自己搭建svn之类的，费时间不说，还要有一定的投入，成本也不低。放到google等开放的源码管理空间也不安全。当然开源项目除外。经过寻找，发现 http://bitbucket.org/    不错。支持5用户免费，如果推荐给其它人使用，还能再获取到3个免费用户，对于个人或是小团队来说足够用了。 还有它支持中文界面，特别适合中国人使用。就连wiki都可以用git管理起来，在本地编写，与网上同步。大家试试吧。 顶 0 踩 0 我的同类文章 杂文 （54） http://blog.csdn.net 猜你在找 查看评论 * 以上用户言论只代表其个人观点，不代表CSDN网站的观点或立场 个人资料 microrain 访问： 813331次 积分： 8644 等级： 积分：8644 排名： 第1131名 原创： 109篇 转载： 43篇 译文： 2篇 评论： 997条 文章搜索 文章分类 e-learning (9) Flex/AS3 (24) FreeMarker (1) java (2) javascript (5) Linux专题 (24) Neusoft (1) php (7) Ruby (2) 云计算 (4) 人物 (1) 代码中国 (4) 心情小记 (13) 杂文 (55) 电子商务 (2) 电子政务 (0) 阅读排行 五笔输入法 快速入门 二小时基本了解五笔 (70243) 我们为什么不选择Linux？ (58395) 最佳开源软件一览 (43596) Linux替代Windows系统软件大比拼 (19681) linux网络电视软件sopcast的安装 (19289) 基于WEB应用开发的java程序员必备工具 (17564) ruby语言只是昙花一现 (16799) CSDN最受欢迎的电子手册推荐 (12730) 未来几年动态语言谁将成为主流 (12727) Flex builder 3　正式版发布（含破解） (11889) 评论排行 我们为什么不选择Linux？ (235) Linux替代Windows系统软件大比拼 (109) 未来几年动态语言谁将成为主流 (70) 五笔输入法 快速入门 二小时基本了解五笔 (61) ruby语言只是昙花一现 (31) linux还需要多久真正走入我们的电脑 (24) 最佳开源软件一览 (23) Flex 3D Engine演示 (21) 国内首家源代码搜索引擎闪亮登场 (21) 放弃也是一种好的选择 (19) 推荐文章 *App竞品技术分析 （6）热修复 *架构设计：系统间通信（17）——服务治理与Dubbo 中篇（分析） *一款炫酷Loading动画--加载失败 *图解堆算法、链表、栈与队列（多图预警） *Android中ContentProvider组件详解 *Android平台Camera实时滤镜实现方法探讨(九)--磨皮算法探讨(一) 最新评论 Linux的王者时代即将到来 BraveLii : 对于个人用户来说会逐渐减少对于客户端操作系统的依赖。不在关注这些问题，所有都将在云端使用。只有云服务... ruby语言只是昙花一现 windows1989 : @microrain:这位当时，估计是个应届生，或者根本就没毕业呢？ 未来几年动态语言谁将成为主流 MrH_HC : 路过，表示Python在2014年成为主流脚本语言之一了。 ruby语言只是昙花一现 microrain : @u012000276:几年后再看回复，还是觉得很好笑！ ruby语言只是昙花一现 microrain : @u012000276:每个人都会有各自的感受而以。这个也只是当时的认知而以。一个语言能不能直正流行... ruby语言只是昙花一现 u012000276 : 不懂就别乱评价行不行？你连ruby都不懂 你有什么资格评价ruby 。你以为你是认为谁？ 有本事 自... PhpStorm 默认快捷键 zhoumengkang : 谢谢啦！！！ 基于WEB应用开发的java程序员必备工具 wangchao0729 : 很好很强大 微软你再狠一些吧，把自己赶出中国 liu765023051 : 没有软件是破解不了的。中国软件业现在从高到低一致盗版，哎，没法说。 悲催的IT 屌丝 acm365 : 以前觉得自己的文笔挺好的，现在看看自己写的有时自己都不愿意看，自己喜欢就去干，加油楼主，关注了 朋友 闫辉 ( RSS ) 龙如俊blog ( RSS ) 周筠@博文视点 ( RSS ) 葛涵涛@CSDN ( RSS ) 陈瑞江@CSDN ( RSS ) 霍泰稳的BLOG ( RSS ) 杨福川 写书/译书都找他 ( RSS ) 网站 代码中国网 ( RSS ) CSDN下载频道

Recno:: 22
URL:: http://blog.csdn.net/microrain/article/details/15496851

ParseText::
“网淘”新主张 跳蚤市场成风尚 - 辛佳雨的专栏 - 博客频道 - CSDN.NET 辛佳雨的专栏 我的思想，凭空游弋 目录视图 摘要视图 订阅 学院APP首次下载，可得50C币！     欢迎来帮助开源“进步”     当讲师？爱学习？投票攒课吧     认识Atlassian Datacenter产品     深圳小伙伴的福利来啦 “网淘”新主张 跳蚤市场成风尚 标签： 日本 二手 网店 女性 市场 2013-11-12 06:57 1972人阅读 评论 (1) 收藏 举报 分类： 电子商务 （1） 作者同类文章 X 文:高久润 　　小至饰品衣物，大至家具家电，“跳蚤市场”的货物令人眼花缭乱。如今，以网络为媒介的“跳蚤市场”正在引发一场新的购物革命。“便宜，明智，快乐”，只需下载应用软件便可随时随地轻松淘宝。 　　“跳蚤市场”是欧美等西方国家对二手货摊市的别称，然而在琳琅满目的商品中淘到自己想要的宝贝却并非易事。最近在日本年轻女性之间，以网络为中心的新型“跳蚤市场”正在掀起一股时尚热潮，而“便宜，明智，快乐”的淘宝新主张也受到越来越多年轻人的追捧。那么，网络“跳蚤市场”的人气秘诀究竟在哪儿呢？ 　　“还是带点牌子的东西更受欢迎。”一名家住东京的大学女生（22岁）从去年秋天便开始在自己的网店里卖衣服等闲置物品。据她介绍，只要用智能手机下载免费的应用软件“Fril”，不管是谁都可以拥有自己的“小店”。 免费应用软件“Ｆｒｉｌ”的网站主页 　　操作很简单，先用智能手机拍下想卖的衣服或饰品，再标好价格，上传到“小店”里就完成了。若习惯了，几秒钟时间就能搞定。其他用户看到图片后觉得中意，就会给店主发来消息。自去年8月这款软件面世以来，下载次数超过了50万。如果交易成功，金额会先支付到该软件的运营商处，在确认收货之后，钱才会转到卖主手上，采用这样的交易方式是为了防止欺诈行为的发生。 “二手”淘宝新主张 　　网络“跳蚤市场”软件正在年轻女性圈中迅速蔓延。从2006年起经营跳蚤市场的网站“shoppies”平均每天的二手货上架量达7000多件，该网站也于去年12月开始引进了相关应用软件。据业界有关人士介绍:“从去年秋天起已增加了5、6款类似的应用软件。” 　　网络“跳蚤市场”上的交易金额数目较小，大部分在几百到几千日元。这名大学女生透露:“有很多衣服不穿了，扔了又可惜。一些在‘快时尚’（如优衣库，无印良品等）花几千日元买的东西，如果只卖几百日元的话，还是会有比我年轻的女孩来买。” 在“Fril”上开的“小店”。对感兴趣的“小店”可以在登录后进行关注。 　　针对如火如荼的网络二手交易， 以20岁左右“年轻女孩”为对象的时尚杂志《S Cawaii》主编浅见悦子评价说:“经常穿的经典款要好好珍惜，其他没用的就立刻转手——这种服饰理念已逐渐在年轻女性圈中扎根。”即使能灵活把握潮流趋势，但“为了赶时髦而盲目购物的女孩正在急剧减少，虽然也许是因为可以自由支配的钱少了，但不可否认，越来越多的女孩正朝着明智和果断迈进”。 “实体市场”的独特“乐趣” 　　同样以网络为媒介的“实体”跳蚤市场也备受淘宝者的青睐，而其风靡的原因在于跳蚤市场独特的“乐趣”。 　　在15至25岁的年轻女性中颇具人气的博客网站“DECOLOG”自2010年来连续举办了女性限定的“girls跳蚤市场”，地点在东京、大阪等4个会场，每年春秋各一次，共计约有2万5000人次到场。 “girls跳蚤市场”现场。在网上认识的女孩们可以自由交流也是其魅力之一。 　　网站运营公司Mitsubachi Works的社长光山一树在谈到发起跳蚤市场的缘由时表示:“与其说是我们发起的，还不如说是我们推动的。女孩们早已在博客上进行服饰交易，我们只是观察到这一点顺水推舟罢了。” 　　走进博客好友摆的摊位，与博主闲聊之间，就能以合适的价格买到“潮流达人”们用过的衣服，这些衣服往往比较高级时尚。这种跳蚤市场上的小摊位很有人气——只要付1500日元，谁都可以开店，并且通常在开市的一个月前，这些摊位就已被全部预定满了。此外，只要看下博客就能马上知道店家的摊位在会场的什么地方，仅凭这一点就可以充分感受到网络服务的强大优势。 　　那么，以网络为媒介的“实体”跳蚤市场为何会如此走俏呢？ 　　光山社长指出，网络和跳蚤市场本身就具有很高的亲和力。“卖方和买方可以进行双向交易。只要拥有自己的摊位、自己的博客，就会产生一种‘我是主角’的感觉。”他接着说，“我也曾去跳蚤市场上淘过宝。我认为对现在的女孩来说，能在跳蚤市场上感受到‘我是主角’这点比商品更能让她们快乐。” 上一篇 推荐一个git源码托管网站 下一篇 关于创业 顶 0 踩 0 我的同类文章 电子商务 （1） http://blog.csdn.net 猜你在找 查看评论 * 以上用户言论只代表其个人观点，不代表CSDN网站的观点或立场 个人资料 microrain 访问： 813337次 积分： 8644 等级： 积分：8644 排名： 第1131名 原创： 109篇 转载： 43篇 译文： 2篇 评论： 997条 文章搜索 文章分类 e-learning (9) Flex/AS3 (24) FreeMarker (1) java (2) javascript (5) Linux专题 (24) Neusoft (1) php (7) Ruby (2) 云计算 (4) 人物 (1) 代码中国 (4) 心情小记 (13) 杂文 (55) 电子商务 (2) 电子政务 (0) 文章存档 2014年11月 (1) 2013年12月 (2) 2013年11月 (2) 2013年10月 (2) 2013年07月 (1) 2011年08月 (1) 2011年07月 (2) 2011年06月 (1) 2011年02月 (1) 2011年01月 (1) 2010年04月 (1) 2009年05月 (1) 2008年12月 (1) 2008年11月 (1) 2008年10月 (1) 2008年05月 (1) 2008年04月 (1) 2008年03月 (2) 2008年02月 (7) 2008年01月 (24) 2007年12月 (3) 2007年11月 (1) 2007年10月 (2) 2007年09月 (2) 2007年08月 (8) 2007年07月 (3) 2007年06月 (5) 2007年05月 (8) 2007年04月 (5) 2007年03月 (1) 2007年02月 (1) 2007年01月 (2) 2006年12月 (7) 2006年11月 (11) 2006年10月 (6) 2006年09月 (12) 2006年08月 (12) 2006年07月 (1) 2006年06月 (3) 2006年04月 (1) 2005年12月 (1) 2005年11月 (2) 2003年07月 (3) 阅读排行 五笔输入法 快速入门 二小时基本了解五笔 (70243) 我们为什么不选择Linux？ (58395) 最佳开源软件一览 (43596) Linux替代Windows系统软件大比拼 (19681) linux网络电视软件sopcast的安装 (19289) 基于WEB应用开发的java程序员必备工具 (17564) ruby语言只是昙花一现 (16799) CSDN最受欢迎的电子手册推荐 (12730) 未来几年动态语言谁将成为主流 (12727) Flex builder 3　正式版发布（含破解） (11889) 评论排行 我们为什么不选择Linux？ (235) Linux替代Windows系统软件大比拼 (109) 未来几年动态语言谁将成为主流 (70) 五笔输入法 快速入门 二小时基本了解五笔 (61) ruby语言只是昙花一现 (31) linux还需要多久真正走入我们的电脑 (24) 最佳开源软件一览 (23) Flex 3D Engine演示 (21) 国内首家源代码搜索引擎闪亮登场 (21) 放弃也是一种好的选择 (19) 推荐文章 *App竞品技术分析 （6）热修复 *架构设计：系统间通信（17）——服务治理与Dubbo 中篇（分析） *一款炫酷Loading动画--加载失败 *图解堆算法、链表、栈与队列（多图预警） *Android中ContentProvider组件详解 *Android平台Camera实时滤镜实现方法探讨(九)--磨皮算法探讨(一) 最新评论 Linux的王者时代即将到来 BraveLii : 对于个人用户来说会逐渐减少对于客户端操作系统的依赖。不在关注这些问题，所有都将在云端使用。只有云服务... ruby语言只是昙花一现 windows1989 : @microrain:这位当时，估计是个应届生，或者根本就没毕业呢？ 未来几年动态语言谁将成为主流 MrH_HC : 路过，表示Python在2014年成为主流脚本语言之一了。 ruby语言只是昙花一现 microrain : @u012000276:几年后再看回复，还是觉得很好笑！ ruby语言只是昙花一现 microrain : @u012000276:每个人都会有各自的感受而以。这个也只是当时的认知而以。一个语言能不能直正流行... ruby语言只是昙花一现 u012000276 : 不懂就别乱评价行不行？你连ruby都不懂 你有什么资格评价ruby 。你以为你是认为谁？ 有本事 自... PhpStorm 默认快捷键 zhoumengkang : 谢谢啦！！！ 基于WEB应用开发的java程序员必备工具 wangchao0729 : 很好很强大 微软你再狠一些吧，把自己赶出中国 liu765023051 : 没有软件是破解不了的。中国软件业现在从高到低一致盗版，哎，没法说。 悲催的IT 屌丝 acm365 : 以前觉得自己的文笔挺好的，现在看看自己写的有时自己都不愿意看，自己喜欢就去干，加油楼主，关注了 朋友 闫辉 ( RSS ) 龙如俊blog ( RSS ) 周筠@博文视点 ( RSS ) 葛涵涛@CSDN ( RSS ) 陈瑞江@CSDN ( RSS ) 霍泰稳的BLOG ( RSS ) 杨福川 写书/译书都找他 ( RSS ) 网站 代码中国网 ( RSS ) CSDN下载频道

Recno:: 23
URL:: http://blog.csdn.net/microrain/article/details/17066753

ParseText::
关于创业 - 辛佳雨的专栏 - 博客频道 - CSDN.NET 辛佳雨的专栏 我的思想，凭空游弋 目录视图 摘要视图 订阅 学院APP首次下载，可得50C币！     欢迎来帮助开源“进步”     当讲师？爱学习？投票攒课吧     认识Atlassian Datacenter产品     深圳小伙伴的福利来啦 关于创业 2013-12-02 10:08 1294人阅读 评论 (0) 收藏 举报 分类： 心情小记 （12） 作者同类文章 X 版权声明：本文为博主原创文章，未经博主允许不得转载。 我一向认为创业是一种心态不仅仅是一种表现形式。 而拥有这样的心态，其实你每时每刻都在创业中。对自身的要求，看待事物的视角，与别人的合作等，基于创业的心态，一切都将会改变。还需要我们有更加开放的心态，而不是固封自守。需要我们拥有更大的勇气，打破习惯养成的惯性束博。 还有一点更加重要，就是时刻学习的心态，抱着学习的心，去接受新的事物，也许此时的我们无法理解，或是在某种情况下无法接受，只要我们耐心的学习，并能换位思考，其实实际情况往往会超出我们最初的认知。 创业真的很难吗？也难也容易。可能这样说是废话，两者都说了。 有人说成功的原因千条万条，没有完全一样的；而失败的原因可是总会有很多是相同的。我特别赞同这句话。看多了成功与失败的确是如此的。 既然成功无法一一总结，那我们不如多找找他人失败的原因。 我发现“坚持”两字是失败中最为普遍的。是否能坚持住，往往也决定了谁能笑到最后。当然“坚持”两字要能做到也不容易。这与创业过程中的各种实施策略有关。而关于如何坚持的更久一些，例子还是有很多的。那些偏执者往往更容易成功，因为他们偏执的认为某一个目标一定是可以实现的，所以为了自己这个目标努力的去做，坚持者。会被不理解的人骂成傻子，疯子，文明一些的说他们是偏执的。而就这是类人成功的几率反而更大。 创业是累的，也是快乐的。正所谓痛并快乐着。 创业的过程，是充实而幸福的。 每天都激情满满的生活，让每一天都觉得过得很有意义。 上一篇 “网淘”新主张 跳蚤市场成风尚 下一篇 我的WEB开发环境 顶 1 踩 0 我的同类文章 心情小记 （12） http://blog.csdn.net 猜你在找 查看评论 * 以上用户言论只代表其个人观点，不代表CSDN网站的观点或立场 个人资料 microrain 访问： 813325次 积分： 8644 等级： 积分：8644 排名： 第1131名 原创： 109篇 转载： 43篇 译文： 2篇 评论： 997条 文章搜索 文章分类 e-learning (9) Flex/AS3 (24) FreeMarker (1) java (2) javascript (5) Linux专题 (24) Neusoft (1) php (7) Ruby (2) 云计算 (4) 人物 (1) 代码中国 (4) 心情小记 (13) 杂文 (55) 电子商务 (2) 电子政务 (0) 文章存档 2014年11月 (1) 2013年12月 (2) 2013年11月 (2) 2013年10月 (2) 2013年07月 (1) 2011年08月 (1) 2011年07月 (2) 2011年06月 (1) 2011年02月 (1) 2011年01月 (1) 2010年04月 (1) 2009年05月 (1) 2008年12月 (1) 2008年11月 (1) 2008年10月 (1) 2008年05月 (1) 2008年04月 (1) 2008年03月 (2) 2008年02月 (7) 2008年01月 (24) 2007年12月 (3) 2007年11月 (1) 2007年10月 (2) 2007年09月 (2) 2007年08月 (8) 2007年07月 (3) 2007年06月 (5) 2007年05月 (8) 2007年04月 (5) 2007年03月 (1) 2007年02月 (1) 2007年01月 (2) 2006年12月 (7) 2006年11月 (11) 2006年10月 (6) 2006年09月 (12) 2006年08月 (12) 2006年07月 (1) 2006年06月 (3) 2006年04月 (1) 2005年12月 (1) 2005年11月 (2) 2003年07月 (3) 阅读排行 五笔输入法 快速入门 二小时基本了解五笔 (70243) 我们为什么不选择Linux？ (58395) 最佳开源软件一览 (43596) Linux替代Windows系统软件大比拼 (19681) linux网络电视软件sopcast的安装 (19289) 基于WEB应用开发的java程序员必备工具 (17564) ruby语言只是昙花一现 (16799) CSDN最受欢迎的电子手册推荐 (12730) 未来几年动态语言谁将成为主流 (12727) Flex builder 3　正式版发布（含破解） (11889) 评论排行 我们为什么不选择Linux？ (235) Linux替代Windows系统软件大比拼 (109) 未来几年动态语言谁将成为主流 (70) 五笔输入法 快速入门 二小时基本了解五笔 (61) ruby语言只是昙花一现 (31) linux还需要多久真正走入我们的电脑 (24) 最佳开源软件一览 (23) Flex 3D Engine演示 (21) 国内首家源代码搜索引擎闪亮登场 (21) 放弃也是一种好的选择 (19) 推荐文章 *App竞品技术分析 （6）热修复 *架构设计：系统间通信（17）——服务治理与Dubbo 中篇（分析） *一款炫酷Loading动画--加载失败 *图解堆算法、链表、栈与队列（多图预警） *Android中ContentProvider组件详解 *Android平台Camera实时滤镜实现方法探讨(九)--磨皮算法探讨(一) 最新评论 Linux的王者时代即将到来 BraveLii : 对于个人用户来说会逐渐减少对于客户端操作系统的依赖。不在关注这些问题，所有都将在云端使用。只有云服务... ruby语言只是昙花一现 windows1989 : @microrain:这位当时，估计是个应届生，或者根本就没毕业呢？ 未来几年动态语言谁将成为主流 MrH_HC : 路过，表示Python在2014年成为主流脚本语言之一了。 ruby语言只是昙花一现 microrain : @u012000276:几年后再看回复，还是觉得很好笑！ ruby语言只是昙花一现 microrain : @u012000276:每个人都会有各自的感受而以。这个也只是当时的认知而以。一个语言能不能直正流行... ruby语言只是昙花一现 u012000276 : 不懂就别乱评价行不行？你连ruby都不懂 你有什么资格评价ruby 。你以为你是认为谁？ 有本事 自... PhpStorm 默认快捷键 zhoumengkang : 谢谢啦！！！ 基于WEB应用开发的java程序员必备工具 wangchao0729 : 很好很强大 微软你再狠一些吧，把自己赶出中国 liu765023051 : 没有软件是破解不了的。中国软件业现在从高到低一致盗版，哎，没法说。 悲催的IT 屌丝 acm365 : 以前觉得自己的文笔挺好的，现在看看自己写的有时自己都不愿意看，自己喜欢就去干，加油楼主，关注了 朋友 闫辉 ( RSS ) 龙如俊blog ( RSS ) 周筠@博文视点 ( RSS ) 葛涵涛@CSDN ( RSS ) 陈瑞江@CSDN ( RSS ) 霍泰稳的BLOG ( RSS ) 杨福川 写书/译书都找他 ( RSS ) 网站 代码中国网 ( RSS ) CSDN下载频道

Recno:: 24
URL:: http://blog.csdn.net/microrain/article/details/17184495

ParseText::
我的WEB开发环境 - 辛佳雨的专栏 - 博客频道 - CSDN.NET 辛佳雨的专栏 我的思想，凭空游弋 目录视图 摘要视图 订阅 学院APP首次下载，可得50C币！     欢迎来帮助开源“进步”     当讲师？爱学习？投票攒课吧     认识Atlassian Datacenter产品     深圳小伙伴的福利来啦 我的WEB开发环境 标签： PhpStorm Sublime Text thinkphp 2013-12-07 10:04 2774人阅读 评论 (0) 收藏 举报 分类： 杂文 （54） 作者同类文章 X 版权声明：本文为博主原创文章，未经博主允许不得转载。 好工具将事半功倍，选择一组适合自己的开发工具构建开发环境，对于一个开发者或是一个团队来说太重要了。 对于PHP的喜欢由来已久，这期间用过很多的开发工具，从最初使用记事本到UltraEdit、editplus再到一些集成开发工具主流的应该差不多都使用过。 用的比较多有 Eclipse ，后来有一段时间用PHPED也不错，再后来用 NetBeans ，而现在的我一直使用PhpStorm及Sublime Text.。 采用什么工具与操作系统环境也有关系。 因为现在用的是苹果的本本，所以对于开发工具跨平台方面有一定要求（主要也是为与团队其它成员保持工具统一） 在苹果本本下Sublime text表现的非常的好，但是在开发PHP方面的断点调试比较麻烦，经过比较后，最后采用了PhpStorm，之后惊喜的发现PhpStorm在使用习惯方面与Sublime Text有很多相同的地方。习惯的延续性很自然过渡，真是开心。特别是代码片段管理方面，真是没有多大区别，我在以前的博客中也提过，怎么在这两种工具下进行代码片段的管理。 好吧，再说的详细一些，我现在的web开发组合： 操作系统： OS X 开发工具： PhpStorm（偶尔也会用Sublime Text 轻量级修改的时候用，主要是快） 服务端环境： MAMP PRO js脚本调试： Firefox下的firebug （有的时候也会用一下chrome浏览器的一些组件） 应用方面： PHP框架：ThinkPHP js框架：SeaJS+Jquery（采用SeaJS进行javascript的管理，大量采用jquery组件） CSS框架：Bootstrap3 对于开发框架的选择也是要看应用场景与需要的。建议采用流行的，支持文档足够多，长期有延续发展的，可以深入去理解与研究的。当然能力足够写自己的框架也行，目前来看也没有太多的必要，更多的时候我们是考虑如何实现业务，而不是为了技术而技术。 代码版本管理： 采用的是GIT方式。（PhpStorm对于版本控制的支持非常的好与灵活，支持多种版本管理方式。） 个人开发采用 bitbucket 的免费服务，当前只限5人。对于小团队来说足够用了。公司内使用可以单独搭建GIT服务器。 当然这些都是要跟据各自喜好，自行搭配。我选择的原则是构建快速、简单易行、操作友好、便于扩展。 上一篇 关于创业 下一篇 懒与馋的平衡：餐饮O2O市场广阔，发展不易 顶 1 踩 1 我的同类文章 杂文 （54） http://blog.csdn.net 猜你在找 查看评论 * 以上用户言论只代表其个人观点，不代表CSDN网站的观点或立场 个人资料 microrain 访问： 813320次 积分： 8644 等级： 积分：8644 排名： 第1131名 原创： 109篇 转载： 43篇 译文： 2篇 评论： 997条 文章搜索 文章分类 e-learning (9) Flex/AS3 (24) FreeMarker (1) java (2) javascript (5) Linux专题 (24) Neusoft (1) php (7) Ruby (2) 云计算 (4) 人物 (1) 代码中国 (4) 心情小记 (13) 杂文 (55) 电子商务 (2) 电子政务 (0) 文章存档 2014年11月 (1) 2013年12月 (2) 2013年11月 (2) 2013年10月 (2) 2013年07月 (1) 2011年08月 (1) 2011年07月 (2) 2011年06月 (1) 2011年02月 (1) 2011年01月 (1) 2010年04月 (1) 2009年05月 (1) 2008年12月 (1) 2008年11月 (1) 2008年10月 (1) 2008年05月 (1) 2008年04月 (1) 2008年03月 (2) 2008年02月 (7) 2008年01月 (24) 2007年12月 (3) 2007年11月 (1) 2007年10月 (2) 2007年09月 (2) 2007年08月 (8) 2007年07月 (3) 2007年06月 (5) 2007年05月 (8) 2007年04月 (5) 2007年03月 (1) 2007年02月 (1) 2007年01月 (2) 2006年12月 (7) 2006年11月 (11) 2006年10月 (6) 2006年09月 (12) 2006年08月 (12) 2006年07月 (1) 2006年06月 (3) 2006年04月 (1) 2005年12月 (1) 2005年11月 (2) 2003年07月 (3) 阅读排行 五笔输入法 快速入门 二小时基本了解五笔 (70243) 我们为什么不选择Linux？ (58395) 最佳开源软件一览 (43596) Linux替代Windows系统软件大比拼 (19681) linux网络电视软件sopcast的安装 (19289) 基于WEB应用开发的java程序员必备工具 (17564) ruby语言只是昙花一现 (16799) CSDN最受欢迎的电子手册推荐 (12730) 未来几年动态语言谁将成为主流 (12727) Flex builder 3　正式版发布（含破解） (11889) 评论排行 我们为什么不选择Linux？ (235) Linux替代Windows系统软件大比拼 (109) 未来几年动态语言谁将成为主流 (70) 五笔输入法 快速入门 二小时基本了解五笔 (61) ruby语言只是昙花一现 (31) linux还需要多久真正走入我们的电脑 (24) 最佳开源软件一览 (23) Flex 3D Engine演示 (21) 国内首家源代码搜索引擎闪亮登场 (21) 放弃也是一种好的选择 (19) 推荐文章 *App竞品技术分析 （6）热修复 *架构设计：系统间通信（17）——服务治理与Dubbo 中篇（分析） *一款炫酷Loading动画--加载失败 *图解堆算法、链表、栈与队列（多图预警） *Android中ContentProvider组件详解 *Android平台Camera实时滤镜实现方法探讨(九)--磨皮算法探讨(一) 最新评论 Linux的王者时代即将到来 BraveLii : 对于个人用户来说会逐渐减少对于客户端操作系统的依赖。不在关注这些问题，所有都将在云端使用。只有云服务... ruby语言只是昙花一现 windows1989 : @microrain:这位当时，估计是个应届生，或者根本就没毕业呢？ 未来几年动态语言谁将成为主流 MrH_HC : 路过，表示Python在2014年成为主流脚本语言之一了。 ruby语言只是昙花一现 microrain : @u012000276:几年后再看回复，还是觉得很好笑！ ruby语言只是昙花一现 microrain : @u012000276:每个人都会有各自的感受而以。这个也只是当时的认知而以。一个语言能不能直正流行... ruby语言只是昙花一现 u012000276 : 不懂就别乱评价行不行？你连ruby都不懂 你有什么资格评价ruby 。你以为你是认为谁？ 有本事 自... PhpStorm 默认快捷键 zhoumengkang : 谢谢啦！！！ 基于WEB应用开发的java程序员必备工具 wangchao0729 : 很好很强大 微软你再狠一些吧，把自己赶出中国 liu765023051 : 没有软件是破解不了的。中国软件业现在从高到低一致盗版，哎，没法说。 悲催的IT 屌丝 acm365 : 以前觉得自己的文笔挺好的，现在看看自己写的有时自己都不愿意看，自己喜欢就去干，加油楼主，关注了 朋友 闫辉 ( RSS ) 龙如俊blog ( RSS ) 周筠@博文视点 ( RSS ) 葛涵涛@CSDN ( RSS ) 陈瑞江@CSDN ( RSS ) 霍泰稳的BLOG ( RSS ) 杨福川 写书/译书都找他 ( RSS ) 网站 代码中国网 ( RSS ) CSDN下载频道

Recno:: 25
URL:: http://blog.csdn.net/microrain/article/details/2474248

ParseText::
为生还者庆幸，为往生者祈祷 - 辛佳雨的专栏 - 博客频道 - CSDN.NET 辛佳雨的专栏 我的思想，凭空游弋 目录视图 摘要视图 订阅 学院APP首次下载，可得50C币！     欢迎来帮助开源“进步”     当讲师？爱学习？投票攒课吧     认识Atlassian Datacenter产品     深圳小伙伴的福利来啦 为生还者庆幸，为往生者祈祷 2008-05-23 17:04 8117人阅读 评论 (1) 收藏 举报 版权声明：本文为博主原创文章，未经博主允许不得转载。 很久没有写博客了，最近一直没有心情写。 很早前与朋友说过，写博，是需要心情的。不用心写的博，只是给大众看的。而用心写的，主要是为了自己。 　　 　　5.12的灾难，让所有华夏子孙都为之悲伤，为之流泪。心情坏到了急点。 　　当听到一个又一个人被救出来的消息，想哭，为他们能生还而激动、庆幸。 　　当听到更多的人永远再也不能醒来，想哭，为生命的脆弱而叹息、为逝者祈祷。 　　一个又一个感人肺腑的事迹发生在灾区，让所有人看到最可爱的人，可爱之处。 　　还有总理有些苍老与悲伤的面容，让所有人看到，并为之动容。 　　很多人都在说：总理，您休息一下吧。 　　记得那天看到群里的网友进行场情况文字直播，一句“老爷子跌到了”，泪水夺眶而出。 　　我们敬爱的总理啊。从周总理逝世后，我想温总理应该是第二个能这样受百姓爱戴的总理吧。 　　 　　过去了这么久了，心情终于平静了一些。 　　面对这样的一场天灾，在思考，自己活着的真正意义。 　　人为什么活着？　这个被很多人问过的问题。最近又开始不断的问自己。。。 上一篇 看电影881有感 下一篇 微软你再狠一些吧，把自己赶出中国 顶 0 踩 0 猜你在找 查看评论 * 以上用户言论只代表其个人观点，不代表CSDN网站的观点或立场 个人资料 microrain 访问： 813328次 积分： 8644 等级： 积分：8644 排名： 第1131名 原创： 109篇 转载： 43篇 译文： 2篇 评论： 997条 文章搜索 文章分类 e-learning (9) Flex/AS3 (24) FreeMarker (1) java (2) javascript (5) Linux专题 (24) Neusoft (1) php (7) Ruby (2) 云计算 (4) 人物 (1) 代码中国 (4) 心情小记 (13) 杂文 (55) 电子商务 (2) 电子政务 (0) 文章存档 2014年11月 (1) 2013年12月 (2) 2013年11月 (2) 2013年10月 (2) 2013年07月 (1) 2011年08月 (1) 2011年07月 (2) 2011年06月 (1) 2011年02月 (1) 2011年01月 (1) 2010年04月 (1) 2009年05月 (1) 2008年12月 (1) 2008年11月 (1) 2008年10月 (1) 2008年05月 (1) 2008年04月 (1) 2008年03月 (2) 2008年02月 (7) 2008年01月 (24) 2007年12月 (3) 2007年11月 (1) 2007年10月 (2) 2007年09月 (2) 2007年08月 (8) 2007年07月 (3) 2007年06月 (5) 2007年05月 (8) 2007年04月 (5) 2007年03月 (1) 2007年02月 (1) 2007年01月 (2) 2006年12月 (7) 2006年11月 (11) 2006年10月 (6) 2006年09月 (12) 2006年08月 (12) 2006年07月 (1) 2006年06月 (3) 2006年04月 (1) 2005年12月 (1) 2005年11月 (2) 2003年07月 (3) 阅读排行 五笔输入法 快速入门 二小时基本了解五笔 (70243) 我们为什么不选择Linux？ (58395) 最佳开源软件一览 (43596) Linux替代Windows系统软件大比拼 (19681) linux网络电视软件sopcast的安装 (19289) 基于WEB应用开发的java程序员必备工具 (17564) ruby语言只是昙花一现 (16799) CSDN最受欢迎的电子手册推荐 (12730) 未来几年动态语言谁将成为主流 (12727) Flex builder 3　正式版发布（含破解） (11889) 评论排行 我们为什么不选择Linux？ (235) Linux替代Windows系统软件大比拼 (109) 未来几年动态语言谁将成为主流 (70) 五笔输入法 快速入门 二小时基本了解五笔 (61) ruby语言只是昙花一现 (31) linux还需要多久真正走入我们的电脑 (24) 最佳开源软件一览 (23) Flex 3D Engine演示 (21) 国内首家源代码搜索引擎闪亮登场 (21) 放弃也是一种好的选择 (19) 推荐文章 *App竞品技术分析 （6）热修复 *架构设计：系统间通信（17）——服务治理与Dubbo 中篇（分析） *一款炫酷Loading动画--加载失败 *图解堆算法、链表、栈与队列（多图预警） *Android中ContentProvider组件详解 *Android平台Camera实时滤镜实现方法探讨(九)--磨皮算法探讨(一) 最新评论 Linux的王者时代即将到来 BraveLii : 对于个人用户来说会逐渐减少对于客户端操作系统的依赖。不在关注这些问题，所有都将在云端使用。只有云服务... ruby语言只是昙花一现 windows1989 : @microrain:这位当时，估计是个应届生，或者根本就没毕业呢？ 未来几年动态语言谁将成为主流 MrH_HC : 路过，表示Python在2014年成为主流脚本语言之一了。 ruby语言只是昙花一现 microrain : @u012000276:几年后再看回复，还是觉得很好笑！ ruby语言只是昙花一现 microrain : @u012000276:每个人都会有各自的感受而以。这个也只是当时的认知而以。一个语言能不能直正流行... ruby语言只是昙花一现 u012000276 : 不懂就别乱评价行不行？你连ruby都不懂 你有什么资格评价ruby 。你以为你是认为谁？ 有本事 自... PhpStorm 默认快捷键 zhoumengkang : 谢谢啦！！！ 基于WEB应用开发的java程序员必备工具 wangchao0729 : 很好很强大 微软你再狠一些吧，把自己赶出中国 liu765023051 : 没有软件是破解不了的。中国软件业现在从高到低一致盗版，哎，没法说。 悲催的IT 屌丝 acm365 : 以前觉得自己的文笔挺好的，现在看看自己写的有时自己都不愿意看，自己喜欢就去干，加油楼主，关注了 朋友 闫辉 ( RSS ) 龙如俊blog ( RSS ) 周筠@博文视点 ( RSS ) 葛涵涛@CSDN ( RSS ) 陈瑞江@CSDN ( RSS ) 霍泰稳的BLOG ( RSS ) 杨福川 写书/译书都找他 ( RSS ) 网站 代码中国网 ( RSS ) CSDN下载频道

Recno:: 26
URL:: http://blog.csdn.net/microrain/article/details/3089852

ParseText::
微软你再狠一些吧，把自己赶出中国 - 辛佳雨的专栏 - 博客频道 - CSDN.NET 辛佳雨的专栏 我的思想，凭空游弋 目录视图 摘要视图 订阅 学院APP首次下载，可得50C币！     欢迎来帮助开源“进步”     当讲师？爱学习？投票攒课吧     认识Atlassian Datacenter产品     深圳小伙伴的福利来啦 微软你再狠一些吧，把自己赶出中国 标签： 微软 windows linux office xp 产品 2008-10-17 09:33 10161人阅读 评论 (17) 收藏 举报 分类： 杂文 （54） 作者同类文章 X 版权声明：本文为博主原创文章，未经博主允许不得转载。 　　这几天一个新闻轰动了国内计算机用户，微软要史无前例的对中国盗版用户进行严厉打击。很多人都开始慌张，担心会不会导致系统无法使用。有的人开始在网上谩骂微软无耻。而这个时候我的心情确很矛盾。身为软件行业的丛业者，我支持打击盗版的行为。虽然我也在用盗版的软件。不可否认这正如有些人所说，软件实在是太贵了，消费不起。这是矛盾的，我们这些普通的用户觉得软件太贵，软件提供商觉得卖的太便宜，赚的太少。都与利益有关。所以现在微软这样打击盗版行为，也就没有什么不对的。而这个事情对于中国来说不见得是一件坏事。 　　不可否认的是盗版软件对中国IT行业的发展起到了推动作用，促使中国IT市场迅速的形成与繁荣起来。然而其危害也越来越严重，也惯坏了我们，使用任何软件首先想的是有没有盗版可用。很多人的劳动成果就这样被掠夺了，付出与收获不成正比，导至很多IT从业人员只能称自己为IT民工。 大家试想一下，如果中国这么大的用户群体能正版化，中国的软件行业将是另外一番场景了。很多软件企业乃至独立开发者都将会有很好的收入，会投入更多研发出更好的产品提供给我用户，价格也会更为低廉。中国的IT业也将成为世界上最繁荣的。 　　有人说，微软此举是想让中国人都换成vista系统。要盗就盗vista吧，这可能是他们想要的。vista自从上市以来，在盗版市场都无法占一席之地，这应该让他们很懊恼。此次微软打击的是Windows XP专业版及Office的盗版用户，告诉大家，该结束Windows XP时代了，虽然我们不情愿，但是他们的确要这样做。一场猎人与狐狸的大戏又要轰轰烈烈的上演了。Linux阵营的斗士们可以借机加大linux系统的推广，国产的办公软件也可以借机好好推广一番了。wps2007、永中2009等国产办公系统，都推出了个人免费版本。大家可以尝试着使用一下，也是很好的选择。 　　希望微软公司再狠点，一做到底，绝点，干脆自己把自己从中国的市场赶出去。呵呵，要不，就将价格降到国人可以接受的程度。或者也推出个人免费版本。 上一篇 为生还者庆幸，为往生者祈祷 下一篇 推荐一个开源的LMS系统ILIAS 顶 0 踩 0 我的同类文章 杂文 （54） http://blog.csdn.net 猜你在找 查看评论 * 以上用户言论只代表其个人观点，不代表CSDN网站的观点或立场 个人资料 microrain 访问： 813327次 积分： 8644 等级： 积分：8644 排名： 第1131名 原创： 109篇 转载： 43篇 译文： 2篇 评论： 997条 文章搜索 文章分类 e-learning (9) Flex/AS3 (24) FreeMarker (1) java (2) javascript (5) Linux专题 (24) Neusoft (1) php (7) Ruby (2) 云计算 (4) 人物 (1) 代码中国 (4) 心情小记 (13) 杂文 (55) 电子商务 (2) 电子政务 (0) 文章存档 2014年11月 (1) 2013年12月 (2) 2013年11月 (2) 2013年10月 (2) 2013年07月 (1) 2011年08月 (1) 2011年07月 (2) 2011年06月 (1) 2011年02月 (1) 2011年01月 (1) 2010年04月 (1) 2009年05月 (1) 2008年12月 (1) 2008年11月 (1) 2008年10月 (1) 2008年05月 (1) 2008年04月 (1) 2008年03月 (2) 2008年02月 (7) 2008年01月 (24) 2007年12月 (3) 2007年11月 (1) 2007年10月 (2) 2007年09月 (2) 2007年08月 (8) 2007年07月 (3) 2007年06月 (5) 2007年05月 (8) 2007年04月 (5) 2007年03月 (1) 2007年02月 (1) 2007年01月 (2) 2006年12月 (7) 2006年11月 (11) 2006年10月 (6) 2006年09月 (12) 2006年08月 (12) 2006年07月 (1) 2006年06月 (3) 2006年04月 (1) 2005年12月 (1) 2005年11月 (2) 2003年07月 (3) 阅读排行 五笔输入法 快速入门 二小时基本了解五笔 (70243) 我们为什么不选择Linux？ (58395) 最佳开源软件一览 (43596) Linux替代Windows系统软件大比拼 (19681) linux网络电视软件sopcast的安装 (19289) 基于WEB应用开发的java程序员必备工具 (17564) ruby语言只是昙花一现 (16799) CSDN最受欢迎的电子手册推荐 (12730) 未来几年动态语言谁将成为主流 (12727) Flex builder 3　正式版发布（含破解） (11889) 评论排行 我们为什么不选择Linux？ (235) Linux替代Windows系统软件大比拼 (109) 未来几年动态语言谁将成为主流 (70) 五笔输入法 快速入门 二小时基本了解五笔 (61) ruby语言只是昙花一现 (31) linux还需要多久真正走入我们的电脑 (24) 最佳开源软件一览 (23) Flex 3D Engine演示 (21) 国内首家源代码搜索引擎闪亮登场 (21) 放弃也是一种好的选择 (19) 推荐文章 *App竞品技术分析 （6）热修复 *架构设计：系统间通信（17）——服务治理与Dubbo 中篇（分析） *一款炫酷Loading动画--加载失败 *图解堆算法、链表、栈与队列（多图预警） *Android中ContentProvider组件详解 *Android平台Camera实时滤镜实现方法探讨(九)--磨皮算法探讨(一) 最新评论 Linux的王者时代即将到来 BraveLii : 对于个人用户来说会逐渐减少对于客户端操作系统的依赖。不在关注这些问题，所有都将在云端使用。只有云服务... ruby语言只是昙花一现 windows1989 : @microrain:这位当时，估计是个应届生，或者根本就没毕业呢？ 未来几年动态语言谁将成为主流 MrH_HC : 路过，表示Python在2014年成为主流脚本语言之一了。 ruby语言只是昙花一现 microrain : @u012000276:几年后再看回复，还是觉得很好笑！ ruby语言只是昙花一现 microrain : @u012000276:每个人都会有各自的感受而以。这个也只是当时的认知而以。一个语言能不能直正流行... ruby语言只是昙花一现 u012000276 : 不懂就别乱评价行不行？你连ruby都不懂 你有什么资格评价ruby 。你以为你是认为谁？ 有本事 自... PhpStorm 默认快捷键 zhoumengkang : 谢谢啦！！！ 基于WEB应用开发的java程序员必备工具 wangchao0729 : 很好很强大 微软你再狠一些吧，把自己赶出中国 liu765023051 : 没有软件是破解不了的。中国软件业现在从高到低一致盗版，哎，没法说。 悲催的IT 屌丝 acm365 : 以前觉得自己的文笔挺好的，现在看看自己写的有时自己都不愿意看，自己喜欢就去干，加油楼主，关注了 朋友 闫辉 ( RSS ) 龙如俊blog ( RSS ) 周筠@博文视点 ( RSS ) 葛涵涛@CSDN ( RSS ) 陈瑞江@CSDN ( RSS ) 霍泰稳的BLOG ( RSS ) 杨福川 写书/译书都找他 ( RSS ) 网站 代码中国网 ( RSS ) CSDN下载频道

Recno:: 27
URL:: http://blog.csdn.net/microrain/article/details/3265332

ParseText::
推荐一个开源的LMS系统ILIAS - 辛佳雨的专栏 - 博客频道 - CSDN.NET 辛佳雨的专栏 我的思想，凭空游弋 目录视图 摘要视图 订阅 学院APP首次下载，可得50C币！     欢迎来帮助开源“进步”     当讲师？爱学习？投票攒课吧     认识Atlassian Datacenter产品     深圳小伙伴的福利来啦 推荐一个开源的LMS系统ILIAS 标签： soap service 聊天 语言 测试 产品 2008-11-10 09:46 11692人阅读 评论 (3) 收藏 举报 分类： e-learning （8） 作者同类文章 X 版权声明：本文为博主原创文章，未经博主允许不得转载。 ILIAS是我见过有可能是最好的开源学习管理系统。随着新版本的发布，其功能也越来越完善，越来越强大。 　　当前国内主流的LMS产品提供商在课件标准支持方面都仅仅停留在支持SCORM1.2标准上。而ILIAS系统支持的课件SCORM标准已到2004版。目前ILIAS支持LOM, SCORM 1.2, SCORM 2004, IMS-QTI, AICC等标准的课件。ILIAS的SCORM的支持能力已经通过SCORM1.2的三级认证、SCORM2004的第三版认证。 　　该系统主要提供了个人桌面管理、课程管理、群且管理、内容管理、学习进度管理、测试与评估、调查、聊天室、论坛、课程练习等。采用Web Service方式对外提供了多种系统功能的接口。统一认证接口方面也很强大，包括LDAP, Shibboleth, CAS, Radius, SOAP等。 　　目前国内已有多个版本的基于ILIAS的汉化修改版本。不过还是建议大家采用原版系统，系统支持多语言，已有中文资源文件。 　　网址：http://www.ilias.de 上一篇 微软你再狠一些吧，把自己赶出中国 下一篇 快速撑握五笔输入法的末笔识别 顶 0 踩 0 我的同类文章 e-learning （8） http://blog.csdn.net 猜你在找 查看评论 * 以上用户言论只代表其个人观点，不代表CSDN网站的观点或立场 个人资料 microrain 访问： 813335次 积分： 8644 等级： 积分：8644 排名： 第1131名 原创： 109篇 转载： 43篇 译文： 2篇 评论： 997条 文章搜索 文章分类 e-learning (9) Flex/AS3 (24) FreeMarker (1) java (2) javascript (5) Linux专题 (24) Neusoft (1) php (7) Ruby (2) 云计算 (4) 人物 (1) 代码中国 (4) 心情小记 (13) 杂文 (55) 电子商务 (2) 电子政务 (0) 文章存档 2014年11月 (1) 2013年12月 (2) 2013年11月 (2) 2013年10月 (2) 2013年07月 (1) 2011年08月 (1) 2011年07月 (2) 2011年06月 (1) 2011年02月 (1) 2011年01月 (1) 2010年04月 (1) 2009年05月 (1) 2008年12月 (1) 2008年11月 (1) 2008年10月 (1) 2008年05月 (1) 2008年04月 (1) 2008年03月 (2) 2008年02月 (7) 2008年01月 (24) 2007年12月 (3) 2007年11月 (1) 2007年10月 (2) 2007年09月 (2) 2007年08月 (8) 2007年07月 (3) 2007年06月 (5) 2007年05月 (8) 2007年04月 (5) 2007年03月 (1) 2007年02月 (1) 2007年01月 (2) 2006年12月 (7) 2006年11月 (11) 2006年10月 (6) 2006年09月 (12) 2006年08月 (12) 2006年07月 (1) 2006年06月 (3) 2006年04月 (1) 2005年12月 (1) 2005年11月 (2) 2003年07月 (3) 阅读排行 五笔输入法 快速入门 二小时基本了解五笔 (70243) 我们为什么不选择Linux？ (58395) 最佳开源软件一览 (43596) Linux替代Windows系统软件大比拼 (19681) linux网络电视软件sopcast的安装 (19289) 基于WEB应用开发的java程序员必备工具 (17564) ruby语言只是昙花一现 (16799) CSDN最受欢迎的电子手册推荐 (12730) 未来几年动态语言谁将成为主流 (12727) Flex builder 3　正式版发布（含破解） (11889) 评论排行 我们为什么不选择Linux？ (235) Linux替代Windows系统软件大比拼 (109) 未来几年动态语言谁将成为主流 (70) 五笔输入法 快速入门 二小时基本了解五笔 (61) ruby语言只是昙花一现 (31) linux还需要多久真正走入我们的电脑 (24) 最佳开源软件一览 (23) Flex 3D Engine演示 (21) 国内首家源代码搜索引擎闪亮登场 (21) 放弃也是一种好的选择 (19) 推荐文章 *App竞品技术分析 （6）热修复 *架构设计：系统间通信（17）——服务治理与Dubbo 中篇（分析） *一款炫酷Loading动画--加载失败 *图解堆算法、链表、栈与队列（多图预警） *Android中ContentProvider组件详解 *Android平台Camera实时滤镜实现方法探讨(九)--磨皮算法探讨(一) 最新评论 Linux的王者时代即将到来 BraveLii : 对于个人用户来说会逐渐减少对于客户端操作系统的依赖。不在关注这些问题，所有都将在云端使用。只有云服务... ruby语言只是昙花一现 windows1989 : @microrain:这位当时，估计是个应届生，或者根本就没毕业呢？ 未来几年动态语言谁将成为主流 MrH_HC : 路过，表示Python在2014年成为主流脚本语言之一了。 ruby语言只是昙花一现 microrain : @u012000276:几年后再看回复，还是觉得很好笑！ ruby语言只是昙花一现 microrain : @u012000276:每个人都会有各自的感受而以。这个也只是当时的认知而以。一个语言能不能直正流行... ruby语言只是昙花一现 u012000276 : 不懂就别乱评价行不行？你连ruby都不懂 你有什么资格评价ruby 。你以为你是认为谁？ 有本事 自... PhpStorm 默认快捷键 zhoumengkang : 谢谢啦！！！ 基于WEB应用开发的java程序员必备工具 wangchao0729 : 很好很强大 微软你再狠一些吧，把自己赶出中国 liu765023051 : 没有软件是破解不了的。中国软件业现在从高到低一致盗版，哎，没法说。 悲催的IT 屌丝 acm365 : 以前觉得自己的文笔挺好的，现在看看自己写的有时自己都不愿意看，自己喜欢就去干，加油楼主，关注了 朋友 闫辉 ( RSS ) 龙如俊blog ( RSS ) 周筠@博文视点 ( RSS ) 葛涵涛@CSDN ( RSS ) 陈瑞江@CSDN ( RSS ) 霍泰稳的BLOG ( RSS ) 杨福川 写书/译书都找他 ( RSS ) 网站 代码中国网 ( RSS ) CSDN下载频道

Recno:: 28
URL:: http://blog.csdn.net/microrain/article/details/3620272

ParseText::
快速撑握五笔输入法的末笔识别 - 辛佳雨的专栏 - 博客频道 - CSDN.NET 辛佳雨的专栏 我的思想，凭空游弋 目录视图 摘要视图 订阅 学院APP首次下载，可得50C币！     欢迎来帮助开源“进步”     当讲师？爱学习？投票攒课吧     认识Atlassian Datacenter产品     深圳小伙伴的福利来啦 快速撑握五笔输入法的末笔识别 标签： 输入法 c 2008-12-27 08:59 8595人阅读 评论 (1) 收藏 举报 分类： 杂文 （54） 作者同类文章 X 版权声明：本文为博主原创文章，未经博主允许不得转载。     最近一些朋友在留言中提到学习五笔时遇到的一些困难，特别是末笔识别方面比较困惑。在这里向大家介绍一下末笔识的方法。其实规则很简单，只要大家用心体会一下，很容易撑握。     我们知道五笔输入法是跟据汉字的五种基本笔画组成： 横“一”、竖“丨”、撇“丿”、捺（点）“丶”、折“乚”。 这五种基本笔画在键盘上的分布是： 横起笔——G、F、D、S、A，称为第1区。 竖起笔——H、J、K、L、M，称为第2区。 撇起笔——T、R、E、W、Q，称为第3区。 点起笔——Y、U、I、O、P，称为第4区。 折起笔——N、B、V、C、X，称为第5区。 笔画在键盘上的分布是基本的常识，要牢记的。末笔识别码的确认，要结合字型结构。 在五笔中字型结构分为三种。   三种字型结构： 左右型——把、件、研…… 上下型——卡、舀、竟…… 杂合型——末、串、叉…… 三种字型结构在每一个区中，从第一个字母键开始，依次是左右型（用数字代码1表示）、上下型（用数字代码2表示）、杂合型（用数字代码3表示）。三种字型结构的方式，就把字的末笔识别限制在每个笔画区的前三个键中。如下表： 横一区，G（左右）、F（上下）、D（杂合） 竖二区，H（左右）、J（上下）、K（杂合） 撇三区，T（左右）、R（上下）、E（杂合） 捺四区，Y（左右）、U（上下）、I（杂合） 折五区，N（左右）、B（上下）、V（杂合）   我们知道了上面这些知识，再来对字进行末笔识就很容易了。五笔的末笔识别码确认方法很简单，就是： 字最后一笔的笔画区位代码＋字型结构代码 。   应用举例： 打 字根：扌、丁 编码：RSH 最后一笔是：丨 最后一笔是在坚区，该字是左右结构的。左右结构的编码是1，那么这个字的末笔识别码就是坚键位区第一个键“ H ” 卡 字根：上、 卜 编码：HHU 最后一笔是：丶 最后一笔是在捺区，该字是上下结构的。上下结构的编码是2，那么这个字的末笔识别码就是捺区第二个键“  U ” 叉 字根：又、丶 编码：CYI 最后一笔是：丶 最后一笔是在捺区，该字型结构是杂合型，杂合型的编码为3，那么这个字就是捺区的第三个键“ I ” 通过上面的讲解，我想大家应该很容易撑握五笔输入法的末笔识别了。   上一篇 推荐一个开源的LMS系统ILIAS 下一篇 装在U盘里的个人电脑 顶 0 踩 0 我的同类文章 杂文 （54） http://blog.csdn.net 猜你在找 查看评论 * 以上用户言论只代表其个人观点，不代表CSDN网站的观点或立场 个人资料 microrain 访问： 813325次 积分： 8644 等级： 积分：8644 排名： 第1131名 原创： 109篇 转载： 43篇 译文： 2篇 评论： 997条 文章搜索 文章分类 e-learning (9) Flex/AS3 (24) FreeMarker (1) java (2) javascript (5) Linux专题 (24) Neusoft (1) php (7) Ruby (2) 云计算 (4) 人物 (1) 代码中国 (4) 心情小记 (13) 杂文 (55) 电子商务 (2) 电子政务 (0) 文章存档 2014年11月 (1) 2013年12月 (2) 2013年11月 (2) 2013年10月 (2) 2013年07月 (1) 2011年08月 (1) 2011年07月 (2) 2011年06月 (1) 2011年02月 (1) 2011年01月 (1) 2010年04月 (1) 2009年05月 (1) 2008年12月 (1) 2008年11月 (1) 2008年10月 (1) 2008年05月 (1) 2008年04月 (1) 2008年03月 (2) 2008年02月 (7) 2008年01月 (24) 2007年12月 (3) 2007年11月 (1) 2007年10月 (2) 2007年09月 (2) 2007年08月 (8) 2007年07月 (3) 2007年06月 (5) 2007年05月 (8) 2007年04月 (5) 2007年03月 (1) 2007年02月 (1) 2007年01月 (2) 2006年12月 (7) 2006年11月 (11) 2006年10月 (6) 2006年09月 (12) 2006年08月 (12) 2006年07月 (1) 2006年06月 (3) 2006年04月 (1) 2005年12月 (1) 2005年11月 (2) 2003年07月 (3) 阅读排行 五笔输入法 快速入门 二小时基本了解五笔 (70243) 我们为什么不选择Linux？ (58395) 最佳开源软件一览 (43596) Linux替代Windows系统软件大比拼 (19681) linux网络电视软件sopcast的安装 (19289) 基于WEB应用开发的java程序员必备工具 (17564) ruby语言只是昙花一现 (16799) CSDN最受欢迎的电子手册推荐 (12730) 未来几年动态语言谁将成为主流 (12727) Flex builder 3　正式版发布（含破解） (11889) 评论排行 我们为什么不选择Linux？ (235) Linux替代Windows系统软件大比拼 (109) 未来几年动态语言谁将成为主流 (70) 五笔输入法 快速入门 二小时基本了解五笔 (61) ruby语言只是昙花一现 (31) linux还需要多久真正走入我们的电脑 (24) 最佳开源软件一览 (23) Flex 3D Engine演示 (21) 国内首家源代码搜索引擎闪亮登场 (21) 放弃也是一种好的选择 (19) 推荐文章 *App竞品技术分析 （6）热修复 *架构设计：系统间通信（17）——服务治理与Dubbo 中篇（分析） *一款炫酷Loading动画--加载失败 *图解堆算法、链表、栈与队列（多图预警） *Android中ContentProvider组件详解 *Android平台Camera实时滤镜实现方法探讨(九)--磨皮算法探讨(一) 最新评论 Linux的王者时代即将到来 BraveLii : 对于个人用户来说会逐渐减少对于客户端操作系统的依赖。不在关注这些问题，所有都将在云端使用。只有云服务... ruby语言只是昙花一现 windows1989 : @microrain:这位当时，估计是个应届生，或者根本就没毕业呢？ 未来几年动态语言谁将成为主流 MrH_HC : 路过，表示Python在2014年成为主流脚本语言之一了。 ruby语言只是昙花一现 microrain : @u012000276:几年后再看回复，还是觉得很好笑！ ruby语言只是昙花一现 microrain : @u012000276:每个人都会有各自的感受而以。这个也只是当时的认知而以。一个语言能不能直正流行... ruby语言只是昙花一现 u012000276 : 不懂就别乱评价行不行？你连ruby都不懂 你有什么资格评价ruby 。你以为你是认为谁？ 有本事 自... PhpStorm 默认快捷键 zhoumengkang : 谢谢啦！！！ 基于WEB应用开发的java程序员必备工具 wangchao0729 : 很好很强大 微软你再狠一些吧，把自己赶出中国 liu765023051 : 没有软件是破解不了的。中国软件业现在从高到低一致盗版，哎，没法说。 悲催的IT 屌丝 acm365 : 以前觉得自己的文笔挺好的，现在看看自己写的有时自己都不愿意看，自己喜欢就去干，加油楼主，关注了 朋友 闫辉 ( RSS ) 龙如俊blog ( RSS ) 周筠@博文视点 ( RSS ) 葛涵涛@CSDN ( RSS ) 陈瑞江@CSDN ( RSS ) 霍泰稳的BLOG ( RSS ) 杨福川 写书/译书都找他 ( RSS ) 网站 代码中国网 ( RSS ) CSDN下载频道

Recno:: 29
URL:: http://blog.csdn.net/microrain/article/details/40888639

ParseText::
懒与馋的平衡：餐饮O2O市场广阔，发展不易 - 辛佳雨的专栏 - 博客频道 - CSDN.NET 辛佳雨的专栏 我的思想，凭空游弋 目录视图 摘要视图 订阅 学院APP首次下载，可得50C币！     欢迎来帮助开源“进步”     当讲师？爱学习？投票攒课吧     认识Atlassian Datacenter产品     深圳小伙伴的福利来啦 懒与馋的平衡：餐饮O2O市场广阔，发展不易 标签： 社区 东软 O2O 2014-11-07 09:58 1133人阅读 评论 (0) 收藏 举报 分类： 电子商务 （1） 作者同类文章 X 杂文 （54） 作者同类文章 X 版权声明：本文为博主原创文章，未经博主允许不得转载。 餐饮行业是众多行业中O2O起步较早的，如今方兴未艾的团购网站中最先涉足的领域就有餐饮版块，长时间的合作推广，许多餐饮商家已经从中尝到甜头，可以说餐饮行业市场基础培育的比较好，所以餐饮O2O 已经是大势所趋，线上线下也在加速融合。 一、餐饮O2O现阶段发展瓶颈 然而事物发展必然有矛盾相伴，餐饮O2O现阶段涌现的一些问题同样令人担忧。 1、餐饮企业的质量参差不齐 有道是病从口入，餐饮行业第一大问题就是如何实现对餐饮质量的监控。前不久，中国国内最大的餐饮O2O平台之一“饿了么”曝出涉嫌违规操作，与其合作的杭州某餐饮店系黑心作坊，卫生极差。事件一出，不禁让人倒吸一口凉气。从这件事的表象也可见第三方平台为了争抢用户不择手段拼商户的事实。 2、无法实现快速送达 借鉴美国几家餐饮平台的成功经验，短时间送达是决定平台成败的关键。餐饮平台EATClub专门为公司人士提供午餐配送服务，保证多样性的同时以准时送达获得用户好感。（已完成A轮500万美元融资）。另外Sprig 、Spoonrocket、Blue Apron等发展迅速的餐饮O2O公司亦将送餐时间严格控制在15-30分钟之间。然而快速送达实现起来，问题重重，首先是配送人员资金投入，究竟是平台支付还是商家支付，一旦订单量不足谁来承担亏空的人员开支。另外在配送过程中必然遭遇订餐高峰期、交通阻塞、订餐范围分散等种种不确定因素。 3、餐饮企业与平台存在矛盾 既然餐饮平台受到自身局限，很少能提供配送服务，那么一些力不从心的平台就将配送工作扔给商户。线下商户送餐给线上客户，产品中夹带订餐宣传单希望将用户转移到电话订餐，以此减少对餐饮平台的支出，餐饮商户借力O2O平台却想甩开平台，这样的合作且对立关系一直存在。 二、沈阳本地餐饮O2O合作发展情况 尽管有以上这些问题涌现也不能阻止餐饮行业O2O扩张的脚步。中国电子商务研究中心(100EC.CN)监测数据显示，2013年中国餐饮行业O2O在线用户规模将突破1亿，达到1.39亿，预计到2015年，中国餐饮行业O2O市场规模将达到1200亿左右。 就沈阳一地来看，已经有“社区001”、“街坊四邻”、“住这儿”等多家以社区服务为目标的平台开始战略布局。“社区001”以北京为根基，已经布局包括沈阳在内的6个大中型城市。由于千城千面，在落地沈阳上，“社区001”显得小心而谨慎仅在铁西区做试点活动，定位在线购物并无意向合作餐饮。“住这儿“是万科物业推出的一款服务平台，提供的餐饮仅仅局限于单个社区的周边商户，用户可以评价商户质量，尚无进一步的订餐、送餐服务。“叮咚小区”“小区无忧”等平台尚未完善在沈阳本地的服务。值得关注的是，长久以来隐匿于IT解决方案与服务的、国内首家软件上市公司东软集团，也开始涉足社区与生活服务类O2O，并于今年年初推出的一站式生活服务平台“街坊四邻“。看似成语般亲民的名字背后似乎隐秘着平台的定位——生活、小区、邻居。笔者关注街坊四邻平台一段时间后，感知其已经开启的餐饮合作计划，同时在合作对象的选择上，“街坊四邻”表现的尤为谨慎。就沈阳一地的推广来看，首批意向合作商家中选择了“家食乐”这类较为成熟的餐饮企业。 为什么要选择成熟餐饮企业，在了解餐饮行业O2O种种现状后不难发现，成熟餐饮企业更有利于服务平台第一轮的推广。首先在餐饮卫生上能够让用户吃下一颗定心丸。拿稍具规模的餐饮企业“家食乐”为例，其实体店均匀分布于沈阳市几大重要区域，一来能够保证覆盖范围，二来能够提供用户到店体验。另外，已经提供成熟外卖订餐服务的餐饮机构会配有专职送餐人员，可以保证用户下单后餐品准时送达，而对于“街坊四邻“这样初出平台来说，经营平台形象更为重要，盈利尚在其次，双方各取所长，能够达成长远合作。 三、未来的蛋糕如何制作与分享 餐饮行业将会是O2O市场一块丰厚的蛋糕，如何去享用这块甜点，除了规避已知问题外，O2O平台和餐饮商家也应该将目光放在用户的潜在需求，帮助客户开发自身需要。 沈阳市场上涌现众多独立餐厅、私人厨房亦是良好的合作对象。这些餐饮服务提供者，大部分走O2O营销模式，局限性在于他们依附的平台只有微信。类似于“街坊四邻“这样的生活服务平台恰好为他们的生存开辟新的领域。而且，这些餐饮各具特色如“渔鲜生”主打生鱼片；“Miss C”是浑南区域较为知名的甜品品牌。这些特色餐饮也有利于提升平台品牌形象。 在时间范围上，似乎很少有人注意到餐饮行业的“午夜经济”。也许是北方的生活环境不如南方昼长，寒冷的气候让人对夜生活望而却步，但是不论如何，你我都曾有夜深了却想大快朵颐的念头。夜猫族越来越多的今天，午夜餐饮会有属于自己的市场空间。如：“hot girl”的外卖时间直到凌晨12:00。午夜经济“不如商圈的”午市经济“火爆，但是对于尽进行信息发布的餐饮平台来讲，可以很好的满足一部分人的需求。 今后更多的餐饮模式必将涌现，根据消费者消费习惯的改变餐饮行业以及O2O平台都面临着改变。或许，今后如“街坊四邻“这样服务全面的平台结合自身生鲜业务线提供食材服务，客户订购原料以及菜谱，商家配比后配送也不是不可能的事情。 上一篇 我的WEB开发环境 顶 1 踩 0 我的同类文章 电子商务 （1） 杂文 （54） http://blog.csdn.net 猜你在找 查看评论 * 以上用户言论只代表其个人观点，不代表CSDN网站的观点或立场 个人资料 microrain 访问： 813334次 积分： 8644 等级： 积分：8644 排名： 第1131名 原创： 109篇 转载： 43篇 译文： 2篇 评论： 997条 文章搜索 文章分类 e-learning (9) Flex/AS3 (24) FreeMarker (1) java (2) javascript (5) Linux专题 (24) Neusoft (1) php (7) Ruby (2) 云计算 (4) 人物 (1) 代码中国 (4) 心情小记 (13) 杂文 (55) 电子商务 (2) 电子政务 (0) 文章存档 2014年11月 (1) 2013年12月 (2) 2013年11月 (2) 2013年10月 (2) 2013年07月 (1) 2011年08月 (1) 2011年07月 (2) 2011年06月 (1) 2011年02月 (1) 2011年01月 (1) 2010年04月 (1) 2009年05月 (1) 2008年12月 (1) 2008年11月 (1) 2008年10月 (1) 2008年05月 (1) 2008年04月 (1) 2008年03月 (2) 2008年02月 (7) 2008年01月 (24) 2007年12月 (3) 2007年11月 (1) 2007年10月 (2) 2007年09月 (2) 2007年08月 (8) 2007年07月 (3) 2007年06月 (5) 2007年05月 (8) 2007年04月 (5) 2007年03月 (1) 2007年02月 (1) 2007年01月 (2) 2006年12月 (7) 2006年11月 (11) 2006年10月 (6) 2006年09月 (12) 2006年08月 (12) 2006年07月 (1) 2006年06月 (3) 2006年04月 (1) 2005年12月 (1) 2005年11月 (2) 2003年07月 (3) 阅读排行 五笔输入法 快速入门 二小时基本了解五笔 (70243) 我们为什么不选择Linux？ (58395) 最佳开源软件一览 (43596) Linux替代Windows系统软件大比拼 (19681) linux网络电视软件sopcast的安装 (19289) 基于WEB应用开发的java程序员必备工具 (17564) ruby语言只是昙花一现 (16799) CSDN最受欢迎的电子手册推荐 (12730) 未来几年动态语言谁将成为主流 (12727) Flex builder 3　正式版发布（含破解） (11889) 评论排行 我们为什么不选择Linux？ (235) Linux替代Windows系统软件大比拼 (109) 未来几年动态语言谁将成为主流 (70) 五笔输入法 快速入门 二小时基本了解五笔 (61) ruby语言只是昙花一现 (31) linux还需要多久真正走入我们的电脑 (24) 最佳开源软件一览 (23) Flex 3D Engine演示 (21) 国内首家源代码搜索引擎闪亮登场 (21) 放弃也是一种好的选择 (19) 推荐文章 *App竞品技术分析 （6）热修复 *架构设计：系统间通信（17）——服务治理与Dubbo 中篇（分析） *一款炫酷Loading动画--加载失败 *图解堆算法、链表、栈与队列（多图预警） *Android中ContentProvider组件详解 *Android平台Camera实时滤镜实现方法探讨(九)--磨皮算法探讨(一) 最新评论 Linux的王者时代即将到来 BraveLii : 对于个人用户来说会逐渐减少对于客户端操作系统的依赖。不在关注这些问题，所有都将在云端使用。只有云服务... ruby语言只是昙花一现 windows1989 : @microrain:这位当时，估计是个应届生，或者根本就没毕业呢？ 未来几年动态语言谁将成为主流 MrH_HC : 路过，表示Python在2014年成为主流脚本语言之一了。 ruby语言只是昙花一现 microrain : @u012000276:几年后再看回复，还是觉得很好笑！ ruby语言只是昙花一现 microrain : @u012000276:每个人都会有各自的感受而以。这个也只是当时的认知而以。一个语言能不能直正流行... ruby语言只是昙花一现 u012000276 : 不懂就别乱评价行不行？你连ruby都不懂 你有什么资格评价ruby 。你以为你是认为谁？ 有本事 自... PhpStorm 默认快捷键 zhoumengkang : 谢谢啦！！！ 基于WEB应用开发的java程序员必备工具 wangchao0729 : 很好很强大 微软你再狠一些吧，把自己赶出中国 liu765023051 : 没有软件是破解不了的。中国软件业现在从高到低一致盗版，哎，没法说。 悲催的IT 屌丝 acm365 : 以前觉得自己的文笔挺好的，现在看看自己写的有时自己都不愿意看，自己喜欢就去干，加油楼主，关注了 朋友 闫辉 ( RSS ) 龙如俊blog ( RSS ) 周筠@博文视点 ( RSS ) 葛涵涛@CSDN ( RSS ) 陈瑞江@CSDN ( RSS ) 霍泰稳的BLOG ( RSS ) 杨福川 写书/译书都找他 ( RSS ) 网站 代码中国网 ( RSS ) CSDN下载频道

Recno:: 30
URL:: http://blog.csdn.net/microrain/article/details/4197410

ParseText::
装在U盘里的个人电脑 - 辛佳雨的专栏 - 博客频道 - CSDN.NET 辛佳雨的专栏 我的思想，凭空游弋 目录视图 摘要视图 订阅 学院APP首次下载，可得50C币！     欢迎来帮助开源“进步”     当讲师？爱学习？投票攒课吧     认识Atlassian Datacenter产品     深圳小伙伴的福利来啦 装在U盘里的个人电脑 标签： 虚拟机 vmware ubuntu windows linux 磁盘 2009-05-18 12:40 2929人阅读 评论 (8) 收藏 举报 分类： Linux专题 （23） 作者同类文章 X 版权声明：本文为博主原创文章，未经博主允许不得转载。 虽然有U盘版的 Ubuntu安装的方式。但是我还是自己弄了一个。 用linux还是windows自己选择。这样一来，就可以把环境带着走，只要有一台电脑随时都可以用。   特别是去网吧，很实用。方法很单：   采用虚拟机的方式。 在U盘中放一个VMware的绿色版的软件。 将在设置好的操作系统的虚拟机文件也放到U盘中。注意你的虚拟机设置的占用磁盘大小参数，不要超过U盘，要留出一定量就可以了。   我的是4G的U盘。安装的时候，操作系统的虚拟机占用设置的是3G空间。     上一篇 快速撑握五笔输入法的末笔识别 下一篇 期待第二届云计算大会 顶 0 踩 0 我的同类文章 Linux专题 （23） http://blog.csdn.net 猜你在找 查看评论 * 以上用户言论只代表其个人观点，不代表CSDN网站的观点或立场 个人资料 microrain 访问： 813324次 积分： 8644 等级： 积分：8644 排名： 第1131名 原创： 109篇 转载： 43篇 译文： 2篇 评论： 997条 文章搜索 文章分类 e-learning (9) Flex/AS3 (24) FreeMarker (1) java (2) javascript (5) Linux专题 (24) Neusoft (1) php (7) Ruby (2) 云计算 (4) 人物 (1) 代码中国 (4) 心情小记 (13) 杂文 (55) 电子商务 (2) 电子政务 (0) 文章存档 2014年11月 (1) 2013年12月 (2) 2013年11月 (2) 2013年10月 (2) 2013年07月 (1) 2011年08月 (1) 2011年07月 (2) 2011年06月 (1) 2011年02月 (1) 2011年01月 (1) 2010年04月 (1) 2009年05月 (1) 2008年12月 (1) 2008年11月 (1) 2008年10月 (1) 2008年05月 (1) 2008年04月 (1) 2008年03月 (2) 2008年02月 (7) 2008年01月 (24) 2007年12月 (3) 2007年11月 (1) 2007年10月 (2) 2007年09月 (2) 2007年08月 (8) 2007年07月 (3) 2007年06月 (5) 2007年05月 (8) 2007年04月 (5) 2007年03月 (1) 2007年02月 (1) 2007年01月 (2) 2006年12月 (7) 2006年11月 (11) 2006年10月 (6) 2006年09月 (12) 2006年08月 (12) 2006年07月 (1) 2006年06月 (3) 2006年04月 (1) 2005年12月 (1) 2005年11月 (2) 2003年07月 (3) 阅读排行 五笔输入法 快速入门 二小时基本了解五笔 (70243) 我们为什么不选择Linux？ (58395) 最佳开源软件一览 (43596) Linux替代Windows系统软件大比拼 (19681) linux网络电视软件sopcast的安装 (19289) 基于WEB应用开发的java程序员必备工具 (17564) ruby语言只是昙花一现 (16799) CSDN最受欢迎的电子手册推荐 (12730) 未来几年动态语言谁将成为主流 (12727) Flex builder 3　正式版发布（含破解） (11889) 评论排行 我们为什么不选择Linux？ (235) Linux替代Windows系统软件大比拼 (109) 未来几年动态语言谁将成为主流 (70) 五笔输入法 快速入门 二小时基本了解五笔 (61) ruby语言只是昙花一现 (31) linux还需要多久真正走入我们的电脑 (24) 最佳开源软件一览 (23) Flex 3D Engine演示 (21) 国内首家源代码搜索引擎闪亮登场 (21) 放弃也是一种好的选择 (19) 推荐文章 *App竞品技术分析 （6）热修复 *架构设计：系统间通信（17）——服务治理与Dubbo 中篇（分析） *一款炫酷Loading动画--加载失败 *图解堆算法、链表、栈与队列（多图预警） *Android中ContentProvider组件详解 *Android平台Camera实时滤镜实现方法探讨(九)--磨皮算法探讨(一) 最新评论 Linux的王者时代即将到来 BraveLii : 对于个人用户来说会逐渐减少对于客户端操作系统的依赖。不在关注这些问题，所有都将在云端使用。只有云服务... ruby语言只是昙花一现 windows1989 : @microrain:这位当时，估计是个应届生，或者根本就没毕业呢？ 未来几年动态语言谁将成为主流 MrH_HC : 路过，表示Python在2014年成为主流脚本语言之一了。 ruby语言只是昙花一现 microrain : @u012000276:几年后再看回复，还是觉得很好笑！ ruby语言只是昙花一现 microrain : @u012000276:每个人都会有各自的感受而以。这个也只是当时的认知而以。一个语言能不能直正流行... ruby语言只是昙花一现 u012000276 : 不懂就别乱评价行不行？你连ruby都不懂 你有什么资格评价ruby 。你以为你是认为谁？ 有本事 自... PhpStorm 默认快捷键 zhoumengkang : 谢谢啦！！！ 基于WEB应用开发的java程序员必备工具 wangchao0729 : 很好很强大 微软你再狠一些吧，把自己赶出中国 liu765023051 : 没有软件是破解不了的。中国软件业现在从高到低一致盗版，哎，没法说。 悲催的IT 屌丝 acm365 : 以前觉得自己的文笔挺好的，现在看看自己写的有时自己都不愿意看，自己喜欢就去干，加油楼主，关注了 朋友 闫辉 ( RSS ) 龙如俊blog ( RSS ) 周筠@博文视点 ( RSS ) 葛涵涛@CSDN ( RSS ) 陈瑞江@CSDN ( RSS ) 霍泰稳的BLOG ( RSS ) 杨福川 写书/译书都找他 ( RSS ) 网站 代码中国网 ( RSS ) CSDN下载频道

Recno:: 31
URL:: http://blog.csdn.net/microrain/article/details/5532476

ParseText::
期待第二届云计算大会 - 辛佳雨的专栏 - 博客频道 - CSDN.NET 辛佳雨的专栏 我的思想，凭空游弋 目录视图 摘要视图 订阅 学院APP首次下载，可得50C币！     欢迎来帮助开源“进步”     当讲师？爱学习？投票攒课吧     认识Atlassian Datacenter产品     深圳小伙伴的福利来啦 期待第二届云计算大会 标签： 云计算 vmware ibm dell 微软 虚拟化 2010-04-27 09:31 2563人阅读 评论 (7) 收藏 举报 分类： 杂文 （54） 作者同类文章 X 版权声明：本文为博主原创文章，未经博主允许不得转载。       听闻又要举办云计算大会了，我对此很是期待，特别是看到很多业内专家名字出现在即将出席的名单上，想必将给我们带来很多意想不到的惊喜。       云计算，尽管所包含的技术不是什么先锐技术，但是由于时代的需要，众多技术再一次的重新组合为业内提供了一种全新的商业模式——就如当初ajax开始火起来一样，这是一种认识与模式的改变，这种改变将影响到服务提供商、企业客户及最终用户。云计算涉及的理念与技术环节很多，不同的公司、不同的人都有着不同的认知与定义，这也是我非常期待此次云计算大会的一个主要原因，希望去了解大家对于云计算方面的探索，并在此行中认识一些相关专家。       通过举办方的网站（ http://www.ciecloud.org/calendar ）可以看出此次会议的日程安排得很是紧凑，真怕到时候顾此失彼啊！      关注以下几个议题，希望到时候能有不菲的收获。  议题一：云计算发展方向与技术趋势      该议题由微软的张亚勤主讲，希望从张先生那里一览微软在云计算方面的研究结果，并进一步了解微软未来在这个方向的所做的投入。从微软放出第一个开源的saas应用框架到听说微软在悄悄的研究新一代操作系统，可想而知，这只业内大鳄势必会推出引领时代的产品。   议题二：从虚拟化到云计算      该议题由VMware的Raghu Raghuram主讲，此人是VMware服务器业务的副总裁。我想很多人都知道，当前搞云计算的都离不开虚拟化技术，而VMware是业内公认的最好解决方案提供商。而深入的理解VMware的发展策略，会使我们在虚拟化方面的选择有很大的帮助。（呵，希望VMware方面能降低一些licence费用，真是好贵啊！）   议题三：通往云计算的切实之路——通过开放架构最小化总体拥有成本（TCO）      这个议题由DELL公司全球云计算最高主管主讲。听说全球最大的五家云计算服务商有三家公司是采用Dell的底层云计算解决方案的，也不知道是否属实，似乎听说微软就是与Dell合作的，管他呢，先去听听再说！既然DELL敢放出这样的话，就应该确实有一些好东西。我想这次DELL一定会大讲特讲他们在这个方面的研究，让大家都采购他们的硬件设备。讲吧讲吧，如果真好，采购又何妨?   议题四：中国云计算调查报告      这个议题由Allan Alter埃森哲高性能研究员主讲。虽然我们很多人对于当前国内出现的调查报告信任度有限，但是有这样一个报告总比没有要好。所以，还是需要去关注一下，至少可以看看人家总结的内容项都有哪些。有人帮你整理一些资料总是好的，要鼓励他们啊，支持一下！   议题五：云计算及物联网在智慧城市中的应用      这个是由IBM大中华区云计算中心项目总监主讲的。IBM一直在推他们的蓝云，我也看过一些关于蓝云的资料，感觉IBM在云计算理论研究上面下了不少功夫。近年来，IBM开始鼓吹他们的新概念——“智慧地球”：物联化，互联化和智能化。其野心真是可见一斑！可喜的是，不久前工业和信息化部部长李毅中在一次报告会中提出“警惕IBM智慧地球陷阱”的言论。估计这下IBM的智慧地球在中国实施将会有一定的难度，这种事没有政府的支持是基本没戏的。不过话说回来，智慧地球的理念的确不错，想必IBM会在这次大会上详细说明他们在这方面的研究及策划，期待中。    此外，我还有一些比较关注的议题，比如与存储、安全、分布等有关的技术议题。    希望本次大会能给我带来对云计算方面崭新的认识，  希望届时能认识更多的牛人朋友，  更希望借此机会看望一下好久不见的老朋友们！   上一篇 装在U盘里的个人电脑 下一篇 将ipad发挥到极致 顶 0 踩 0 我的同类文章 杂文 （54） http://blog.csdn.net 猜你在找 查看评论 * 以上用户言论只代表其个人观点，不代表CSDN网站的观点或立场 个人资料 microrain 访问： 813319次 积分： 8644 等级： 积分：8644 排名： 第1131名 原创： 109篇 转载： 43篇 译文： 2篇 评论： 997条 文章搜索 文章分类 e-learning (9) Flex/AS3 (24) FreeMarker (1) java (2) javascript (5) Linux专题 (24) Neusoft (1) php (7) Ruby (2) 云计算 (4) 人物 (1) 代码中国 (4) 心情小记 (13) 杂文 (55) 电子商务 (2) 电子政务 (0) 文章存档 2014年11月 (1) 2013年12月 (2) 2013年11月 (2) 2013年10月 (2) 2013年07月 (1) 2011年08月 (1) 2011年07月 (2) 2011年06月 (1) 2011年02月 (1) 2011年01月 (1) 2010年04月 (1) 2009年05月 (1) 2008年12月 (1) 2008年11月 (1) 2008年10月 (1) 2008年05月 (1) 2008年04月 (1) 2008年03月 (2) 2008年02月 (7) 2008年01月 (24) 2007年12月 (3) 2007年11月 (1) 2007年10月 (2) 2007年09月 (2) 2007年08月 (8) 2007年07月 (3) 2007年06月 (5) 2007年05月 (8) 2007年04月 (5) 2007年03月 (1) 2007年02月 (1) 2007年01月 (2) 2006年12月 (7) 2006年11月 (11) 2006年10月 (6) 2006年09月 (12) 2006年08月 (12) 2006年07月 (1) 2006年06月 (3) 2006年04月 (1) 2005年12月 (1) 2005年11月 (2) 2003年07月 (3) 阅读排行 五笔输入法 快速入门 二小时基本了解五笔 (70243) 我们为什么不选择Linux？ (58395) 最佳开源软件一览 (43596) Linux替代Windows系统软件大比拼 (19681) linux网络电视软件sopcast的安装 (19289) 基于WEB应用开发的java程序员必备工具 (17564) ruby语言只是昙花一现 (16799) CSDN最受欢迎的电子手册推荐 (12730) 未来几年动态语言谁将成为主流 (12727) Flex builder 3　正式版发布（含破解） (11889) 评论排行 我们为什么不选择Linux？ (235) Linux替代Windows系统软件大比拼 (109) 未来几年动态语言谁将成为主流 (70) 五笔输入法 快速入门 二小时基本了解五笔 (61) ruby语言只是昙花一现 (31) linux还需要多久真正走入我们的电脑 (24) 最佳开源软件一览 (23) Flex 3D Engine演示 (21) 国内首家源代码搜索引擎闪亮登场 (21) 放弃也是一种好的选择 (19) 推荐文章 *App竞品技术分析 （6）热修复 *架构设计：系统间通信（17）——服务治理与Dubbo 中篇（分析） *一款炫酷Loading动画--加载失败 *图解堆算法、链表、栈与队列（多图预警） *Android中ContentProvider组件详解 *Android平台Camera实时滤镜实现方法探讨(九)--磨皮算法探讨(一) 最新评论 Linux的王者时代即将到来 BraveLii : 对于个人用户来说会逐渐减少对于客户端操作系统的依赖。不在关注这些问题，所有都将在云端使用。只有云服务... ruby语言只是昙花一现 windows1989 : @microrain:这位当时，估计是个应届生，或者根本就没毕业呢？ 未来几年动态语言谁将成为主流 MrH_HC : 路过，表示Python在2014年成为主流脚本语言之一了。 ruby语言只是昙花一现 microrain : @u012000276:几年后再看回复，还是觉得很好笑！ ruby语言只是昙花一现 microrain : @u012000276:每个人都会有各自的感受而以。这个也只是当时的认知而以。一个语言能不能直正流行... ruby语言只是昙花一现 u012000276 : 不懂就别乱评价行不行？你连ruby都不懂 你有什么资格评价ruby 。你以为你是认为谁？ 有本事 自... PhpStorm 默认快捷键 zhoumengkang : 谢谢啦！！！ 基于WEB应用开发的java程序员必备工具 wangchao0729 : 很好很强大 微软你再狠一些吧，把自己赶出中国 liu765023051 : 没有软件是破解不了的。中国软件业现在从高到低一致盗版，哎，没法说。 悲催的IT 屌丝 acm365 : 以前觉得自己的文笔挺好的，现在看看自己写的有时自己都不愿意看，自己喜欢就去干，加油楼主，关注了 朋友 闫辉 ( RSS ) 龙如俊blog ( RSS ) 周筠@博文视点 ( RSS ) 葛涵涛@CSDN ( RSS ) 陈瑞江@CSDN ( RSS ) 霍泰稳的BLOG ( RSS ) 杨福川 写书/译书都找他 ( RSS ) 网站 代码中国网 ( RSS ) CSDN下载频道

Recno:: 32
URL:: http://blog.csdn.net/microrain/article/details/6143588

ParseText::
将ipad发挥到极致 - 辛佳雨的专栏 - 博客频道 - CSDN.NET 辛佳雨的专栏 我的思想，凭空游弋 目录视图 摘要视图 订阅 学院APP首次下载，可得50C币！     欢迎来帮助开源“进步”     当讲师？爱学习？投票攒课吧     认识Atlassian Datacenter产品     深圳小伙伴的福利来啦 将ipad发挥到极致 标签： ipad 游戏 windows 日历 输入法 工作 2011-01-16 00:55 3894人阅读 评论 (0) 收藏 举报 分类： 杂文 （54） 作者同类文章 X 版权声明：本文为博主原创文章，未经博主允许不得转载。 很久没写博文了。由于工作忙，不愿意非要写一些什么。最近入手了期待以久的ipad，真是又爱又恨啊。爱的是它总能给我太多太多的惊喜，恨的是什么都需要花钱。   买它的时候，身边的朋友就说它没什么用，玩玩游戏还行。经过一段时间网上的考察，也觉得如朋友所说，好像的确没有多大用处。最大的问题太封闭了，可用的接口实在是太少了。有那么一段时间，将注意力集中在android系统的平板电脑上。锁定了两款，一是万利达的T2，另一个是东芝的AS100。找遍三好街终于看到了T2的真机，总的来说感觉还不错。如果没用过苹果的，我相信朋友一定会喜欢上它。但是与苹果比起来真不是差的一点半点。用起来感觉反应速度有一些卡。而AS100在三好街找了多家店也没有看到真机，借出差的机会去了一趟中关村还是没看到，所有经销商都说需要定货，真是不能理解，在网吹的那么好，怎么实体店连一台样机都不放呢。看来也一定有它自身的问题。   纠结来纠结去，还是最终选择了苹果。 我对玩游戏的事，兴趣一般。我主要希望用它来完成几件事。 一、办公方面 主要解决移动办公的需要。因为工作需要，要经常出差与客户进行沟通，为客户讲一些PPT。每次出差基本上是这些事，总背个本本觉得烦了。再有这一路上本本的续航能力实在是太弱了。而苹果ipad经过亲身体验，有十个小时还要多，基本上是可以随便玩都可以玩一天的，真是爽啊。 办公方面我主要到了几个软件： Keynote： 用来进行PPT演示； DocsToGo： 进行各种文档查看； Mindo： 用来进行思维导图编辑与展示； Kokuban： 用来进行手写交流用。这是一个模拟黑板的程序，投到投影上，就像一个真实的大黑板，写写画画的很酷。 有道词典： 这个就不用说了，一看名字就知道了，网易英汉词典，很实用。 浏览器、邮箱、日历、通讯录： 这几个目前在用ipad默认安装的程序，感觉还不错。特别是日历，实在是太酷了，就像桌子上真实的大台历。所有这些都可以与windows系统的outlook进行通步。 金山快盘： 这个不错，使用起来很方便，速度也很快。有什么用大家自己去体会吧。   二、娱乐方面 对于游戏不是很感冒，不过ipad中的一些游戏，直接用手触摸玩的那种体验真是不错。对于搞UI设计的人我想会有很多启发，听与看都不如自己亲自去体会一下。我机器里保留的主要植物大战僵尸、PinShuffle（保龄球及沙湖球）、长城接龙、Talking Tom、Virtuoso、NFS Shift有限的几个游戏。   三、电子书方面 下了很多电子杂志及书籍。这个不一一说说了。搞IT的，推荐大家下载台湾出版的“数位时代”很不错。     接下来说一说影响我们使用的一些问题。   1，接投影仪的问题 用ipad接投影需要单独采购一个VGA接口线，花了我200多米。默认情况下，ipad好像只有用Keynote播放PPT的时候投影屏幕上才会显示内容。如果想把ipad当前屏幕上的内容全部显示在投影上需要单独安装一个软件才可以。这个软件叫Display Out，安装了它就可以了。有的童鞋安装后没有找到设置页，请重新安装一次就可以了。在ipad设置里就会看到Display Out的设置项。（呵，越狱的朋友，要小心啊，这个安装完需要重启的。现在4.2.1还不能完美越狱，如果自己还不会弄的就要小心了。） 2，外接键盘的问题 当然也需要接口了，USB接口，哎，又花了我200多米。这个还好，是两个接口，一个是USB，一个是SD。 有了这两个接口，可做的事就很多了。 经过测试我接普通的USB口的键盘可用。只是个别按键与windows下不同。比如切换输入法，要用win键+空格键才可以。 3，文件管理的问题 我通过两个软件进行的管理。在win系统上安装了DiskAid、ifunbox，有了这两个管理ipad的文件就容易得多了。     呵，今天把ipad做为笔记本延伸的第二屏幕实验成功。用的是iDisplay 1.2这个软件。很多朋友估计与我一样，就是下载不到PC端的服务软件。给大家一个提示，去迅雷里搜索一下吧。会找到一个连接，可能下的时候，有的时候不能下，不要灰心，让它一直下好了，一定是能下载的。       以上所为，在越狱的ipad上进行。只要啃努力，实现起来还是很容易的。   上一篇 期待第二届云计算大会 下一篇 IPAD成功完美越狱 顶 0 踩 0 我的同类文章 杂文 （54） http://blog.csdn.net 猜你在找 查看评论 * 以上用户言论只代表其个人观点，不代表CSDN网站的观点或立场 个人资料 microrain 访问： 813333次 积分： 8644 等级： 积分：8644 排名： 第1131名 原创： 109篇 转载： 43篇 译文： 2篇 评论： 997条 文章搜索 文章分类 e-learning (9) Flex/AS3 (24) FreeMarker (1) java (2) javascript (5) Linux专题 (24) Neusoft (1) php (7) Ruby (2) 云计算 (4) 人物 (1) 代码中国 (4) 心情小记 (13) 杂文 (55) 电子商务 (2) 电子政务 (0) 文章存档 2014年11月 (1) 2013年12月 (2) 2013年11月 (2) 2013年10月 (2) 2013年07月 (1) 2011年08月 (1) 2011年07月 (2) 2011年06月 (1) 2011年02月 (1) 2011年01月 (1) 2010年04月 (1) 2009年05月 (1) 2008年12月 (1) 2008年11月 (1) 2008年10月 (1) 2008年05月 (1) 2008年04月 (1) 2008年03月 (2) 2008年02月 (7) 2008年01月 (24) 2007年12月 (3) 2007年11月 (1) 2007年10月 (2) 2007年09月 (2) 2007年08月 (8) 2007年07月 (3) 2007年06月 (5) 2007年05月 (8) 2007年04月 (5) 2007年03月 (1) 2007年02月 (1) 2007年01月 (2) 2006年12月 (7) 2006年11月 (11) 2006年10月 (6) 2006年09月 (12) 2006年08月 (12) 2006年07月 (1) 2006年06月 (3) 2006年04月 (1) 2005年12月 (1) 2005年11月 (2) 2003年07月 (3) 阅读排行 五笔输入法 快速入门 二小时基本了解五笔 (70243) 我们为什么不选择Linux？ (58395) 最佳开源软件一览 (43596) Linux替代Windows系统软件大比拼 (19681) linux网络电视软件sopcast的安装 (19289) 基于WEB应用开发的java程序员必备工具 (17564) ruby语言只是昙花一现 (16799) CSDN最受欢迎的电子手册推荐 (12730) 未来几年动态语言谁将成为主流 (12727) Flex builder 3　正式版发布（含破解） (11889) 评论排行 我们为什么不选择Linux？ (235) Linux替代Windows系统软件大比拼 (109) 未来几年动态语言谁将成为主流 (70) 五笔输入法 快速入门 二小时基本了解五笔 (61) ruby语言只是昙花一现 (31) linux还需要多久真正走入我们的电脑 (24) 最佳开源软件一览 (23) Flex 3D Engine演示 (21) 国内首家源代码搜索引擎闪亮登场 (21) 放弃也是一种好的选择 (19) 推荐文章 *App竞品技术分析 （6）热修复 *架构设计：系统间通信（17）——服务治理与Dubbo 中篇（分析） *一款炫酷Loading动画--加载失败 *图解堆算法、链表、栈与队列（多图预警） *Android中ContentProvider组件详解 *Android平台Camera实时滤镜实现方法探讨(九)--磨皮算法探讨(一) 最新评论 Linux的王者时代即将到来 BraveLii : 对于个人用户来说会逐渐减少对于客户端操作系统的依赖。不在关注这些问题，所有都将在云端使用。只有云服务... ruby语言只是昙花一现 windows1989 : @microrain:这位当时，估计是个应届生，或者根本就没毕业呢？ 未来几年动态语言谁将成为主流 MrH_HC : 路过，表示Python在2014年成为主流脚本语言之一了。 ruby语言只是昙花一现 microrain : @u012000276:几年后再看回复，还是觉得很好笑！ ruby语言只是昙花一现 microrain : @u012000276:每个人都会有各自的感受而以。这个也只是当时的认知而以。一个语言能不能直正流行... ruby语言只是昙花一现 u012000276 : 不懂就别乱评价行不行？你连ruby都不懂 你有什么资格评价ruby 。你以为你是认为谁？ 有本事 自... PhpStorm 默认快捷键 zhoumengkang : 谢谢啦！！！ 基于WEB应用开发的java程序员必备工具 wangchao0729 : 很好很强大 微软你再狠一些吧，把自己赶出中国 liu765023051 : 没有软件是破解不了的。中国软件业现在从高到低一致盗版，哎，没法说。 悲催的IT 屌丝 acm365 : 以前觉得自己的文笔挺好的，现在看看自己写的有时自己都不愿意看，自己喜欢就去干，加油楼主，关注了 朋友 闫辉 ( RSS ) 龙如俊blog ( RSS ) 周筠@博文视点 ( RSS ) 葛涵涛@CSDN ( RSS ) 陈瑞江@CSDN ( RSS ) 霍泰稳的BLOG ( RSS ) 杨福川 写书/译书都找他 ( RSS ) 网站 代码中国网 ( RSS ) CSDN下载频道

Recno:: 33
URL:: http://blog.csdn.net/microrain/article/details/6173947

ParseText::
IPAD成功完美越狱 - 辛佳雨的专栏 - 博客频道 - CSDN.NET 辛佳雨的专栏 我的思想，凭空游弋 目录视图 摘要视图 订阅 学院APP首次下载，可得50C币！     欢迎来帮助开源“进步”     当讲师？爱学习？投票攒课吧     认识Atlassian Datacenter产品     深圳小伙伴的福利来啦 IPAD成功完美越狱 标签： ipad 2011-02-07 18:41 2117人阅读 评论 (0) 收藏 举报 版权声明：本文为博主原创文章，未经博主允许不得转载。 在非完美越狱的基础上不需要关机就可以直接越狱成功。 相当的简单容易。   详细的操作方式请参见 http://bbs.weiphone.com/read-htm-tid-1607306-page-1.html   上一篇 将ipad发挥到极致 下一篇 让“云计算推动中小企业发展”不只是口号 顶 0 踩 0 猜你在找 查看评论 * 以上用户言论只代表其个人观点，不代表CSDN网站的观点或立场 个人资料 microrain 访问： 813323次 积分： 8644 等级： 积分：8644 排名： 第1131名 原创： 109篇 转载： 43篇 译文： 2篇 评论： 997条 文章搜索 文章分类 e-learning (9) Flex/AS3 (24) FreeMarker (1) java (2) javascript (5) Linux专题 (24) Neusoft (1) php (7) Ruby (2) 云计算 (4) 人物 (1) 代码中国 (4) 心情小记 (13) 杂文 (55) 电子商务 (2) 电子政务 (0) 文章存档 2014年11月 (1) 2013年12月 (2) 2013年11月 (2) 2013年10月 (2) 2013年07月 (1) 2011年08月 (1) 2011年07月 (2) 2011年06月 (1) 2011年02月 (1) 2011年01月 (1) 2010年04月 (1) 2009年05月 (1) 2008年12月 (1) 2008年11月 (1) 2008年10月 (1) 2008年05月 (1) 2008年04月 (1) 2008年03月 (2) 2008年02月 (7) 2008年01月 (24) 2007年12月 (3) 2007年11月 (1) 2007年10月 (2) 2007年09月 (2) 2007年08月 (8) 2007年07月 (3) 2007年06月 (5) 2007年05月 (8) 2007年04月 (5) 2007年03月 (1) 2007年02月 (1) 2007年01月 (2) 2006年12月 (7) 2006年11月 (11) 2006年10月 (6) 2006年09月 (12) 2006年08月 (12) 2006年07月 (1) 2006年06月 (3) 2006年04月 (1) 2005年12月 (1) 2005年11月 (2) 2003年07月 (3) 阅读排行 五笔输入法 快速入门 二小时基本了解五笔 (70243) 我们为什么不选择Linux？ (58395) 最佳开源软件一览 (43596) Linux替代Windows系统软件大比拼 (19681) linux网络电视软件sopcast的安装 (19289) 基于WEB应用开发的java程序员必备工具 (17564) ruby语言只是昙花一现 (16799) CSDN最受欢迎的电子手册推荐 (12730) 未来几年动态语言谁将成为主流 (12727) Flex builder 3　正式版发布（含破解） (11889) 评论排行 我们为什么不选择Linux？ (235) Linux替代Windows系统软件大比拼 (109) 未来几年动态语言谁将成为主流 (70) 五笔输入法 快速入门 二小时基本了解五笔 (61) ruby语言只是昙花一现 (31) linux还需要多久真正走入我们的电脑 (24) 最佳开源软件一览 (23) Flex 3D Engine演示 (21) 国内首家源代码搜索引擎闪亮登场 (21) 放弃也是一种好的选择 (19) 推荐文章 *App竞品技术分析 （6）热修复 *架构设计：系统间通信（17）——服务治理与Dubbo 中篇（分析） *一款炫酷Loading动画--加载失败 *图解堆算法、链表、栈与队列（多图预警） *Android中ContentProvider组件详解 *Android平台Camera实时滤镜实现方法探讨(九)--磨皮算法探讨(一) 最新评论 Linux的王者时代即将到来 BraveLii : 对于个人用户来说会逐渐减少对于客户端操作系统的依赖。不在关注这些问题，所有都将在云端使用。只有云服务... ruby语言只是昙花一现 windows1989 : @microrain:这位当时，估计是个应届生，或者根本就没毕业呢？ 未来几年动态语言谁将成为主流 MrH_HC : 路过，表示Python在2014年成为主流脚本语言之一了。 ruby语言只是昙花一现 microrain : @u012000276:几年后再看回复，还是觉得很好笑！ ruby语言只是昙花一现 microrain : @u012000276:每个人都会有各自的感受而以。这个也只是当时的认知而以。一个语言能不能直正流行... ruby语言只是昙花一现 u012000276 : 不懂就别乱评价行不行？你连ruby都不懂 你有什么资格评价ruby 。你以为你是认为谁？ 有本事 自... PhpStorm 默认快捷键 zhoumengkang : 谢谢啦！！！ 基于WEB应用开发的java程序员必备工具 wangchao0729 : 很好很强大 微软你再狠一些吧，把自己赶出中国 liu765023051 : 没有软件是破解不了的。中国软件业现在从高到低一致盗版，哎，没法说。 悲催的IT 屌丝 acm365 : 以前觉得自己的文笔挺好的，现在看看自己写的有时自己都不愿意看，自己喜欢就去干，加油楼主，关注了 朋友 闫辉 ( RSS ) 龙如俊blog ( RSS ) 周筠@博文视点 ( RSS ) 葛涵涛@CSDN ( RSS ) 陈瑞江@CSDN ( RSS ) 霍泰稳的BLOG ( RSS ) 杨福川 写书/译书都找他 ( RSS ) 网站 代码中国网 ( RSS ) CSDN下载频道

Recno:: 34
URL:: http://blog.csdn.net/microrain/article/details/6572666

ParseText::
让“云计算推动中小企业发展”不只是口号 - 辛佳雨的专栏 - 博客频道 - CSDN.NET 辛佳雨的专栏 我的思想，凭空游弋 目录视图 摘要视图 订阅 学院APP首次下载，可得50C币！     欢迎来帮助开源“进步”     当讲师？爱学习？投票攒课吧     认识Atlassian Datacenter产品     深圳小伙伴的福利来啦 让“云计算推动中小企业发展”不只是口号 标签： 云计算 ibm 产品 数据中心 扩展 网络 2011-06-28 14:49 2901人阅读 评论 (5) 收藏 举报 分类： 杂文 （54） 作者同类文章 X 云计算 （3） 作者同类文章 X 版权声明：本文为博主原创文章，未经博主允许不得转载。 自云计算概念提出以来，很多国内外大公司纷纷祭出云计算大旗欲在这个方向大展拳脚。国外公司如微软、 IBM 、 Intel 、 SAP 、 HP 、 Google 等；国内公司如东软、中软、用友等传统软件公司都发布了自己的云计算策略。还有数不清的小公司与其呼应摇旗呐喊，这个市场如火如荼的发展着。 对于云计算的理解各有不同，但有一点是大家所公认的，就是服务产品化。不管基础设施还是软件产品都将基于服务形态提供给最终客户。采用云计算服务的企业将通过网络以按需、易扩展的方式获得所需资源及服务。这种服务可以是 IT 和软件、互联网相关，也可是其他服务。云计算的核心思想，是将大量用网络连接的计算资源统一管理和调度，构成一个计算资源池向用户按需服务。提供资源的网络被称为“云”。“云”中的资源在使用者看来是可以无限扩展的，并且可以随时获取，按需使用，随时扩展，按使用付费。 【云计算如何推动中小企业信息化建设？】 从云计算特点来看最适合的企业用户就是中小企业。中小企业采用云计算服务将减少企业不必要的基础软硬件投入及降低信息化建设初期投入的风险。然而中小企业对于云计算模式还多处于观望状态。主要是因为各大服务商云计算的解决方案不尽相同，云计算相关技术还没有完全成熟，步入实用阶段还需要很长一段时间，中小企业面对云计算服务时总会有种飘忽的感觉，不得要领。 中小企业对于云计算的顾虑主要集中在信息安全、服务连续性、数据的保护和所有权，以及云计算服务的匹配度等问题。正如同企业担心落跑的服务提供商一样，企业同样担心云计算服务出现故障，一旦云服务出现故障，那么企业的业务连续性以及数据的安全就无从谈起了，而这和数据中心停电所带来的后果一样，甚至比这个更麻烦。信息安全、服务连续性、数据的保护和所有权其实并不是中小企业采用云计算服务的真正障碍，这些问题主要是用户心理问题，随着时间的变化，企业对于云计算服务认识的提升将逐渐消除。最为核心的问题是服务与中小企业需求的匹配度的问题。中小企业的情况更为复杂，由于管理上的不规范及人为的随意性导致很难寻找到与其理想匹配的服务。当然这里面也存在很大一部分人太理想化，希望云计算来解决企业信息过程中的全部问题，而往往忽视自身管理上的规范化。企业实施信息化建设的同时也将意味着管理流程的变化，而管理流程的变化又是最为复杂与困难的。要想让云计算服务能更好的服务于企业，那么企业本身需要进行改变，不管是企业管理者的思想还是管理模式上都要追求改变，才有可能真正感受到云计算服务为我们企业带来的收益效果。 对于中小企业而言信息化建设过程可以全线基于云计算服务来进行。当然这对于中小企业管理者来说也是一个不小的挑战，不管是企业的信息规划，还是企业运用能力都将面临很多实际困难。如果单单依靠中小企业自身的能力是远远不够的，需要有能力辅助并愿意与其共同成长的长期伙伴，才能促进中小企业基于云计算模式进行信息化建设。 【中小企业要如何选择云服务？】 分析一下在国内云计算喊的特别响的几家公司其实不难发现其主要目的所在。如 IBM 公司满世界推销它的“智慧地球”理念。就是为了让各多的公司采用 IBM 的软硬件产品及服务，这将让一个区域与 IBM 公司进行捆绑。与其说捆绑，还不如说将被 IBM 绑架。不管这个理念的实施能否最终成功，初期总是需要采购他们的咨询服务、硬件设备与支持等服务，这才是他们最直接的利益点。像 IBM 这样以服务器为主要产品的还有 HP 、 DEL 等服务器厂商，云计算无疑又给这些硬件厂商提供了一次向全社会输送新产品的时机。所有这些都只是更有利于这个方向未来的发展。然而时下对于中小企业来说还远远不够，他们还无暇顾及到中小企业本身对于云计算的真正需求。从这些公司在云计算市场的投入来看，更多的还是在为未来布局。就算这些公司也高喊着为中小企业提供服务，主要集中在建立一些试验性小规模的数据中心或是在不同城市进行的市场宣传活动。当然也会把传统的应用产品通过虚拟化手段提供给中小企业使用。请注意，我说的是使用。能不能用好要看企业自身的应用能力。这些国际企业还不能为中小企业提供贴身辅助服务。我们都知道中小企业 IT 能力是很弱的，之所以要采用云计算服务更主要的是希望将这部分包裹抛给服务商。而服务商如果只是提供可用的服务，而没有与中小企业互动或是很少互动的话，可以想像这样的服务能否用好。当然会有一些工具类的云服务大家可以用的很好，如在线杀毒、在线存储等。而与企业管理相关的云服务就很难推进。中小企业采用云计算相关的服务，只能是在硬性投入方面可以节约成本，而在培训、咨询、规划方面是无法节约的。如果不愿意在这方面进行投入，任何基于云计算的管理类云服务都是很难取得成效的。 总之，面向中小企业的云计算服务建设是一个长期性的，需要服务商提供长远的紧密配合及共赢的服务。同时对服务提供商而言，不但提升了中小企业信息化程度，为企业创造更多价值，也获取了应得利益、扩大了社会效益。希望我们广大的中小企业以及各种云算计服务提供商们都沉下心来，共同努力，将云服务做实，让每一块云都能下雨。让“云计算推动中小企业发展”不只是口号。 上一篇 IPAD成功完美越狱 下一篇 盘点六大开源云计算平台 顶 2 踩 0 我的同类文章 杂文 （54） 云计算 （3） http://blog.csdn.net 猜你在找 查看评论 * 以上用户言论只代表其个人观点，不代表CSDN网站的观点或立场 个人资料 microrain 访问： 813322次 积分： 8644 等级： 积分：8644 排名： 第1131名 原创： 109篇 转载： 43篇 译文： 2篇 评论： 997条 文章搜索 文章分类 e-learning (9) Flex/AS3 (24) FreeMarker (1) java (2) javascript (5) Linux专题 (24) Neusoft (1) php (7) Ruby (2) 云计算 (4) 人物 (1) 代码中国 (4) 心情小记 (13) 杂文 (55) 电子商务 (2) 电子政务 (0) 文章存档 2014年11月 (1) 2013年12月 (2) 2013年11月 (2) 2013年10月 (2) 2013年07月 (1) 2011年08月 (1) 2011年07月 (2) 2011年06月 (1) 2011年02月 (1) 2011年01月 (1) 2010年04月 (1) 2009年05月 (1) 2008年12月 (1) 2008年11月 (1) 2008年10月 (1) 2008年05月 (1) 2008年04月 (1) 2008年03月 (2) 2008年02月 (7) 2008年01月 (24) 2007年12月 (3) 2007年11月 (1) 2007年10月 (2) 2007年09月 (2) 2007年08月 (8) 2007年07月 (3) 2007年06月 (5) 2007年05月 (8) 2007年04月 (5) 2007年03月 (1) 2007年02月 (1) 2007年01月 (2) 2006年12月 (7) 2006年11月 (11) 2006年10月 (6) 2006年09月 (12) 2006年08月 (12) 2006年07月 (1) 2006年06月 (3) 2006年04月 (1) 2005年12月 (1) 2005年11月 (2) 2003年07月 (3) 阅读排行 五笔输入法 快速入门 二小时基本了解五笔 (70243) 我们为什么不选择Linux？ (58395) 最佳开源软件一览 (43596) Linux替代Windows系统软件大比拼 (19681) linux网络电视软件sopcast的安装 (19289) 基于WEB应用开发的java程序员必备工具 (17564) ruby语言只是昙花一现 (16799) CSDN最受欢迎的电子手册推荐 (12730) 未来几年动态语言谁将成为主流 (12727) Flex builder 3　正式版发布（含破解） (11889) 评论排行 我们为什么不选择Linux？ (235) Linux替代Windows系统软件大比拼 (109) 未来几年动态语言谁将成为主流 (70) 五笔输入法 快速入门 二小时基本了解五笔 (61) ruby语言只是昙花一现 (31) linux还需要多久真正走入我们的电脑 (24) 最佳开源软件一览 (23) Flex 3D Engine演示 (21) 国内首家源代码搜索引擎闪亮登场 (21) 放弃也是一种好的选择 (19) 推荐文章 *App竞品技术分析 （6）热修复 *架构设计：系统间通信（17）——服务治理与Dubbo 中篇（分析） *一款炫酷Loading动画--加载失败 *图解堆算法、链表、栈与队列（多图预警） *Android中ContentProvider组件详解 *Android平台Camera实时滤镜实现方法探讨(九)--磨皮算法探讨(一) 最新评论 Linux的王者时代即将到来 BraveLii : 对于个人用户来说会逐渐减少对于客户端操作系统的依赖。不在关注这些问题，所有都将在云端使用。只有云服务...

Recno:: 35
URL:: http://blog.csdn.net/microrain/article/details/6581311

ParseText::
盘点六大开源云计算平台 - 辛佳雨的专栏 - 博客频道 - CSDN.NET 辛佳雨的专栏 我的思想，凭空游弋 目录视图 摘要视图 订阅 学院APP首次下载，可得50C币！     欢迎来帮助开源“进步”     当讲师？爱学习？投票攒课吧     认识Atlassian Datacenter产品     深圳小伙伴的福利来啦 盘点六大开源云计算平台 标签： 云计算 平台 mongodb 存储 扩展 xen 2011-07-03 06:35 1790人阅读 评论 (2) 收藏 举报 分类： 云计算 （3） 作者同类文章 X 开源技术目前已经运用到云计算的每一个地方，在Hypervisor层面，KVM、Xen都是很优秀的虚拟化底层引擎，在管理接口方面，Libvirt是一个被广泛使用的组件，而Eucalyptus、OpenCloud、Convirt、Nebula等都是很不错的云计算框架和管理软件。目前的OpenStack开源云框架也受到了大多数主流厂商的支持和追捧。 　　云计算的最终目的是实现灵活、自由的资源分配和使用，包括在云计算的建设方面，也需要灵活、自由、开放的建设方法，这和开源技术所遵从的自由和透明的思想是一致的。开源技术给云计算带来的是更加开放和灵活的构建方法，而不会给云计算带来锁定（lock-in）。 　　开源技术在云计算中的主要作用有2个： 　　云计算开放标准的制定例如Libvirt API、DeltaCloud API，EC2 API等等，这些标准为云计算的模块化提供了依据。 　　云计算项目 KVM、Xen、Eucalyptus、OpenCloud、Convirt、Nebula等不同云计算层次的开源项目，能够让用户更加快速地接触、部署云计算。 　　 Enomalism 　　Enomalism弹性计算平台。Enomaly's Elastic Computing Platform（ECP）是一个可编程的虚拟云架构，ECP平台可以简化在云架构中发布应用的操作。云计算平台是一个EC2风格的IaaS。Enomalism 是一个开放源代码项目，它提供了一个功能类似于EC2的云计算框架。Enomalism基于Linux，同时支持Xen和Kernel Virtual Machine（KVM）。与其他纯IaaS解决方案不同的是，Enomalism提供了一个基于 TurboGears Web应用程序框架和Python的软件栈。 　　 Eucalyptus 　　Eucalyptus由Santa Barbara大学建立，是主要实现云计算环境的弹性需求的软件，通过其在集群或者服务器组上的部署，并且使用常见的Linux工具和基本的基于web的服务。使用FreeBSD License，意味着可以直接使用在商业软件应用中，当前支持的商业服务只是亚马逊的EC2，今后会增加多种客户端接口。该系统使用和维护十分方便，使用SOAP安全的内部通信，且把可伸缩型作为主要的设计目标，具有简单易用，扩展方便的特点。这个软件层的工具可以用来通过配置服务器集群来实现私有云，并且其接口也是与公有云相兼容，可以满足私有云与公有云混合构建扩展的云计算环境。 　　 MongoDB 　　MongoDB是一个基于分布式文件存储的数据库，旨在为WEB应用提供可扩展的高性能数据存储解决方案。它是一个高性能的面向文件的开源数据存储项目。可以通过网络访问，并且由C++语言编写。主要包含的功能特性有易存储对象类型的数据，查询支持，复制和故障恢复支持，高效的二进制数据存储，自动处理碎片提高云层次上的扩展性。高性能，可扩展，适当的功能是这个项目的主要设计目标。MongoDB服务端可运行在Linux、Windows或OS X平台，支持32位和64位应用，默认端口为27017。推荐运行在64位平台，因为MongoDB在32位模式运行时支持的最大文件尺寸为2GB。 　　 10Gen 　　10gen的开源项目是MongoDB，主要功能是解决website的操作性数据存储，session对象的存储，数据缓存，高效率的实时计数（比如统计PV，UV），并支持Ruby，Python，Java，C++,php等众多的页面语言。通过10gen，可以使用Python以及JavaScript.和Ruby编程语言开发应用程序。该平台还使用沙盒概念隔离应用程序，并且使用它们自己的应用服务器的许多计算机（当然，是在Linux上构建）提供一个可靠的环境。MongoDB主要特征是存储数据非常方便，不再是传统的Object-Relational Mapping的模式，高性能，可以存储大对象数据，比如视频等，可以自动复制和Failover。 　　 NimBus 　　NimBus开源云计算平台，其网格中间件Globus的作品从最早的Virtual Workspace演化而来，提供与EC2类似的功能和接口。Eucalyptus、Enomaly、Nimbus、OpenNebula等开源云计算平台的搭建方案也层出不穷。动态语言编写的代码不仅被部署在云端实现业务应用，在云基础设施的搭建环节，也出现了不少动态语言实现的云项目。开源技术同云计算相同的“开放、自由”思想，基于完全开放、统一、标准的接口、众多的开源项目可以让云服务企业灵活选择不同的项目来实现自己的云计算环境，同时，开源技术也让他们能够低成本快速实现云计算部署。 　　 Abiquo 　　Abiquo公司开源产品。Abiquo公司帮助用户建立，管理以及扩展复杂的计算架构。具体开源云计算产品有三类，三种产品分别是abiCloud,abiNtense和abiData。这三种产品都可以用来架构和开发公有私有混合云，以及云应用等基础设施。abiCloud是开源云管理软件，可以创建管理资源并且可以按需扩展。abiNtense是一个类似于Grid的架构，用来减少大量高性能计算的执行时间。abiData由Hadoop，hBase，Pig开发而来，是一个信息管理系统，可以用来搭建分析大量数据的应用。是低成本的云存储解决方案，为开源社区，以及众多的云计算相关项目提供了较多的贡献。 上一篇 让“云计算推动中小企业发展”不只是口号 下一篇 Linux的王者时代即将到来 顶 0 踩 0 我的同类文章 云计算 （3） http://blog.csdn.net 猜你在找 查看评论 * 以上用户言论只代表其个人观点，不代表CSDN网站的观点或立场 个人资料 microrain 访问： 813326次 积分： 8644 等级： 积分：8644 排名： 第1131名 原创： 109篇 转载： 43篇 译文： 2篇 评论： 997条 文章搜索 文章分类 e-learning (9) Flex/AS3 (24) FreeMarker (1) java (2) javascript (5) Linux专题 (24) Neusoft (1) php (7) Ruby (2) 云计算 (4) 人物 (1) 代码中国 (4) 心情小记 (13) 杂文 (55) 电子商务 (2) 电子政务 (0) 文章存档 2014年11月 (1) 2013年12月 (2) 2013年11月 (2) 2013年10月 (2) 2013年07月 (1) 2011年08月 (1) 2011年07月 (2) 2011年06月 (1) 2011年02月 (1) 2011年01月 (1) 2010年04月 (1) 2009年05月 (1) 2008年12月 (1) 2008年11月 (1) 2008年10月 (1) 2008年05月 (1) 2008年04月 (1) 2008年03月 (2) 2008年02月 (7) 2008年01月 (24) 2007年12月 (3) 2007年11月 (1) 2007年10月 (2) 2007年09月 (2) 2007年08月 (8) 2007年07月 (3) 2007年06月 (5) 2007年05月 (8) 2007年04月 (5) 2007年03月 (1) 2007年02月 (1) 2007年01月 (2) 2006年12月 (7) 2006年11月 (11) 2006年10月 (6) 2006年09月 (12) 2006年08月 (12) 2006年07月 (1) 2006年06月 (3) 2006年04月 (1) 2005年12月 (1) 2005年11月 (2) 2003年07月 (3) 阅读排行 五笔输入法 快速入门 二小时基本了解五笔 (70243) 我们为什么不选择Linux？ (58395) 最佳开源软件一览 (43596) Linux替代Windows系统软件大比拼 (19681) linux网络电视软件sopcast的安装 (19289) 基于WEB应用开发的java程序员必备工具 (17564) ruby语言只是昙花一现 (16799) CSDN最受欢迎的电子手册推荐 (12730) 未来几年动态语言谁将成为主流 (12727) Flex builder 3　正式版发布（含破解） (11889) 评论排行 我们为什么不选择Linux？ (235) Linux替代Windows系统软件大比拼 (109) 未来几年动态语言谁将成为主流 (70) 五笔输入法 快速入门 二小时基本了解五笔 (61) ruby语言只是昙花一现 (31) linux还需要多久真正走入我们的电脑 (24) 最佳开源软件一览 (23) Flex 3D Engine演示 (21) 国内首家源代码搜索引擎闪亮登场 (21) 放弃也是一种好的选择 (19) 推荐文章 *App竞品技术分析 （6）热修复 *架构设计：系统间通信（17）——服务治理与Dubbo 中篇（分析） *一款炫酷Loading动画--加载失败 *图解堆算法、链表、栈与队列（多图预警） *Android中ContentProvider组件详解 *Android平台Camera实时滤镜实现方法探讨(九)--磨皮算法探讨(一) 最新评论 Linux的王者时代即将到来 BraveLii : 对于个人用户来说会逐渐减少对于客户端操作系统的依赖。不在关注这些问题，所有都将在云端使用。只有云服务... ruby语言只是昙花一现 windows1989 : @microrain:这位当时，估计是个应届生，或者根本就没毕业呢？ 未来几年动态语言谁将成为主流 MrH_HC : 路过，表示Python在2014年成为主流脚本语言之一了。 ruby语言只是昙花一现 microrain : @u012000276:几年后再看回复，还是觉得很好笑！ ruby语言只是昙花一现 microrain : @u012000276:每个人都会有各自的感受而以。这个也只是当时的认知而以。一个语言能不能直正流行... ruby语言只是昙花一现 u012000276 : 不懂就别乱评价行不行？你连ruby都不懂 你有什么资格评价ruby 。你以为你是认为谁？ 有本事 自... PhpStorm 默认快捷键 zhoumengkang : 谢谢啦！！！ 基于WEB应用开发的java程序员必备工具 wangchao0729 : 很好很强大 微软你再狠一些吧，把自己赶出中国 liu765023051 : 没有软件是破解不了的。中国软件业现在从高到低一致盗版，哎，没法说。 悲催的IT 屌丝 acm365 : 以前觉得自己的文笔挺好的，现在看看自己写的有时自己都不愿意看，自己喜欢就去干，加油楼主，关注了 朋友 闫辉 ( RSS ) 龙如俊blog ( RSS ) 周筠@博文视点 ( RSS ) 葛涵涛@CSDN ( RSS ) 陈瑞江@CSDN ( RSS ) 霍泰稳的BLOG ( RSS ) 杨福川 写书/译书都找他 ( RSS ) 网站 代码中国网 ( RSS ) CSDN下载频道

Recno:: 36
URL:: http://blog.csdn.net/microrain/article/details/6592991

ParseText::
Linux的王者时代即将到来 - 辛佳雨的专栏 - 博客频道 - CSDN.NET 辛佳雨的专栏 我的思想，凭空游弋 目录视图 摘要视图 订阅 学院APP首次下载，可得50C币！     欢迎来帮助开源“进步”     当讲师？爱学习？投票攒课吧     认识Atlassian Datacenter产品     深圳小伙伴的福利来啦 Linux的王者时代即将到来 标签： linux 云计算 手机操作系统 windows android unix 2011-07-08 16:10 1980人阅读 评论 (7) 收藏 举报 分类： Linux专题 （23） 作者同类文章 X 云计算 （3） 作者同类文章 X 版权声明：本文为博主原创文章，未经博主允许不得转载。         随着云计算市场的发展，各大公司的推动，这一方向也越来越清晰。构建云环境也开始被更多的主流公司所接受。也是当前所公认的最为有效的资源利用方式之一。而在这儿一过程，linux主导地位越来越明显，特别是免费版的Linux。当我们构建数百台甚至上千台服务器的时候，操作系统的成本将是我们更大的考虑。而windows就不具备这样的优势。当然有些人可以说windows可以大面积降价才应对，你觉得可能吗？         那为什么云计算的发展将成就Linux的霸主之位呢。我们来看看以下几方面的发展： 1，目前主流的云环境底层系统都是基于Linux进行开发的，在对云环境的计算能力、带宽、存储、安全和可靠性等方面的支持相当成熟。 2，最近几年移动终端焦点苹果公司，不管是苹果笔记本，还是其手持设备iphone或是Ipad，它们所有的操作系统都是基于Unix内核发展而来的，当然我们同样知道Linux也是基于Unix发展而来。 3， Android系统的崛起，再一次证明Linux系统的可发展与持续性。通过移动设备对大众的影响，也必促进其它Linux版的普及。Android系统早已挤进手机操作系统的前三甲。手机用户的发展远远超过了PC用户的发展。 4，以往操作系统之间的较量主要表现在易用性、硬件支持、应用软件支持、企业支持等多个方面，而在云时代这些问题都将迎刃而解。对于个人用户来说会逐渐减少对于客户端操作系统的依赖。不在关注这些问题，所有都将在云端使用。只有云服务提供商才需要更加关注操作系统易用及硬件、软件支持的问题。         云计算的迅猛发展，Linux 开源开发也在超出以往更快的速度发展。随着各大公司在云计算领域进行更多的投资，Linux在其各个环节中的地位就更加显而易见。相信Linux的王者时代即将到来！ 上一篇 盘点六大开源云计算平台 下一篇 云计算机时代共享软件新战场 顶 8 踩 0 我的同类文章 Linux专题 （23） 云计算 （3） http://blog.csdn.net 猜你在找 查看评论 * 以上用户言论只代表其个人观点，不代表CSDN网站的观点或立场 个人资料 microrain 访问： 813335次 积分： 8644 等级： 积分：8644 排名： 第1131名 原创： 109篇 转载： 43篇 译文： 2篇 评论： 997条 文章搜索 文章分类 e-learning (9) Flex/AS3 (24) FreeMarker (1) java (2) javascript (5) Linux专题 (24) Neusoft (1) php (7) Ruby (2) 云计算 (4) 人物 (1) 代码中国 (4) 心情小记 (13) 杂文 (55) 电子商务 (2) 电子政务 (0) 文章存档 2014年11月 (1) 2013年12月 (2) 2013年11月 (2) 2013年10月 (2) 2013年07月 (1) 2011年08月 (1) 2011年07月 (2) 2011年06月 (1) 2011年02月 (1) 2011年01月 (1) 2010年04月 (1) 2009年05月 (1) 2008年12月 (1) 2008年11月 (1) 2008年10月 (1) 2008年05月 (1) 2008年04月 (1) 2008年03月 (2) 2008年02月 (7) 2008年01月 (24) 2007年12月 (3) 2007年11月 (1) 2007年10月 (2) 2007年09月 (2) 2007年08月 (8) 2007年07月 (3) 2007年06月 (5) 2007年05月 (8) 2007年04月 (5) 2007年03月 (1) 2007年02月 (1) 2007年01月 (2) 2006年12月 (7) 2006年11月 (11) 2006年10月 (6) 2006年09月 (12) 2006年08月 (12) 2006年07月 (1) 2006年06月 (3) 2006年04月 (1) 2005年12月 (1) 2005年11月 (2) 2003年07月 (3) 阅读排行 五笔输入法 快速入门 二小时基本了解五笔 (70243) 我们为什么不选择Linux？ (58395) 最佳开源软件一览 (43596) Linux替代Windows系统软件大比拼 (19681) linux网络电视软件sopcast的安装 (19289) 基于WEB应用开发的java程序员必备工具 (17564) ruby语言只是昙花一现 (16799) CSDN最受欢迎的电子手册推荐 (12730) 未来几年动态语言谁将成为主流 (12727) Flex builder 3　正式版发布（含破解） (11889) 评论排行 我们为什么不选择Linux？ (235) Linux替代Windows系统软件大比拼 (109) 未来几年动态语言谁将成为主流 (70) 五笔输入法 快速入门 二小时基本了解五笔 (61) ruby语言只是昙花一现 (31) linux还需要多久真正走入我们的电脑 (24) 最佳开源软件一览 (23) Flex 3D Engine演示 (21) 国内首家源代码搜索引擎闪亮登场 (21) 放弃也是一种好的选择 (19) 推荐文章 *App竞品技术分析 （6）热修复 *架构设计：系统间通信（17）——服务治理与Dubbo 中篇（分析） *一款炫酷Loading动画--加载失败 *图解堆算法、链表、栈与队列（多图预警） *Android中ContentProvider组件详解 *Android平台Camera实时滤镜实现方法探讨(九)--磨皮算法探讨(一) 最新评论 Linux的王者时代即将到来 BraveLii : 对于个人用户来说会逐渐减少对于客户端操作系统的依赖。不在关注这些问题，所有都将在云端使用。只有云服务... ruby语言只是昙花一现 windows1989 : @microrain:这位当时，估计是个应届生，或者根本就没毕业呢？ 未来几年动态语言谁将成为主流 MrH_HC : 路过，表示Python在2014年成为主流脚本语言之一了。 ruby语言只是昙花一现 microrain : @u012000276:几年后再看回复，还是觉得很好笑！ ruby语言只是昙花一现 microrain : @u012000276:每个人都会有各自的感受而以。这个也只是当时的认知而以。一个语言能不能直正流行... ruby语言只是昙花一现 u012000276 : 不懂就别乱评价行不行？你连ruby都不懂 你有什么资格评价ruby 。你以为你是认为谁？ 有本事 自... PhpStorm 默认快捷键 zhoumengkang : 谢谢啦！！！ 基于WEB应用开发的java程序员必备工具 wangchao0729 : 很好很强大 微软你再狠一些吧，把自己赶出中国 liu765023051 : 没有软件是破解不了的。中国软件业现在从高到低一致盗版，哎，没法说。 悲催的IT 屌丝 acm365 : 以前觉得自己的文笔挺好的，现在看看自己写的有时自己都不愿意看，自己喜欢就去干，加油楼主，关注了 朋友 闫辉 ( RSS ) 龙如俊blog ( RSS ) 周筠@博文视点 ( RSS ) 葛涵涛@CSDN ( RSS ) 陈瑞江@CSDN ( RSS ) 霍泰稳的BLOG ( RSS ) 杨福川 写书/译书都找他 ( RSS ) 网站 代码中国网 ( RSS ) CSDN下载频道

Recno:: 37
URL:: http://blog.csdn.net/microrain/article/details/6716793

ParseText::
云计算机时代共享软件新战场 - 辛佳雨的专栏 - 博客频道 - CSDN.NET 辛佳雨的专栏 我的思想，凭空游弋 目录视图 摘要视图 订阅 学院APP首次下载，可得50C币！     欢迎来帮助开源“进步”     当讲师？爱学习？投票攒课吧     认识Atlassian Datacenter产品     深圳小伙伴的福利来啦 云计算机时代共享软件新战场 标签： 云计算 平台 产品 iaas 存储 saas 2011-08-24 23:40 2271人阅读 评论 (0) 收藏 举报 分类： 云计算 （3） 作者同类文章 X 杂文 （54） 作者同类文章 X 版权声明：本文为博主原创文章，未经博主允许不得转载。   2011年8月6日CSDN举办的踏上共享软件新掘金路------沈阳站，在这个会上的演讲。感谢速记人员，帮我记录这么多内容。        各位下午好，很高兴与大家一起在这样一个机会交流。在这里我主要跟大家想分享一下共享软件在云计算时代新的发展途径。主要想交流四个部分，第一个我们一起去理解一下云计算。云计算大家应该也有一些了解。云计算的现状是怎么样，我想大家多少都会有一个共同的认识，至少在我所接触的客户中都有这样一个认识，云很漂浮，只看到云在漂没有看到云在下雨，并且特别多的人都在想这个雨从哪里下。那么对于我们这些搞技术的人来讲，我们更多关注的是这个云要怎么来实现，包括后台的技术、价格的设计、包括在整个设计中所涉及的问题怎样去解决等等。整个云计算在市场的呼声比较大，但是真正我们能看到的成功案例又非常的少，可能我们很多时候去讲一个云的成功案例时更多的会提一下邮件的服务，网游等等这样的案例，但实际上这样的案例我个人认为把云模式套在了传统的SP服务的头上。虽然不是现在的现状不是很理想，但是并不代表这不是一个很好的方向。实际来讲，各大公司也在深入的投入，包括我们国家在这个方向上的付出可以看出这个方向是一个必然发展的趋势。我们也知道为什么都非常关注这个云计算。大家都有这样一个期望，有一天我们的电脑只要插入在互连网络上，很多东西可以不去关注它，可以去实现的。比如说我们的存储，对于像我们个人来讲一些备份等等不再去拿一个很大的移动硬盘去做一个自己的资料储备等等。当然互联网能为我们去解决我们所担心的安全性以及其他所顾虑的问题，我想在座各位包括我在内也都愿意去使用一个这样的服务。         在整个云计算目前现状，整个云的产品基本划分了三个阶段，从SaaS、IaaS到PaaS等等，包括做企业来说在实施做云计算的时候大概也分了三个部分，公有云、私有云、混合云。实质上，从我们做技术本身来讲，所有云我们就可以从传统的来看成一个项目，那么混合云在实施私有云的过程中更多的是采用了一些公有云的服务，来完成一个项目的解决方案。在企业做很长时间的人对私有云会有些了解。SaaS服务大家可能也会有些了解，比如说存储、邮件等等这一类的服务。单看云计算，整个云计算涉及到的一些技术，虽然我们一直在提云计算不仅仅是一个技术，更多的是一个创新的商业模式。实际上有一个关键的基础点，包括虚拟化、网格计算、分布计算、还有集群等等包括一些IaaS的实现，但是就算是这样，各个厂商在向所有的企业宣传云计算，还是有很多人经常问我到底什么是云计算，并且这个问题是久问不衰。实际上来讲，云计算不仅仅是技术，更多的是创新的业务模式。如果符合特性我们就可以叫它是云计算服务。一、是按需自助。二、是按量付费。三、即装即用。符合这样的特性我们就可以把这种服务叫做云计算。 从现在发展来看云计算，我们更希望它可以创造更多的云端企业。我们可以把我们很多传统的SI所要做的很多事情全部放在云端里，由云计算的服务商来为我们提供这样的服务。主要体现在节能方面，包括我们可以降低一些IT的投入，包括在人员方面的投入，包括在一些其他管理方面的投资等等。这样来讲我们的企业更关注的是它核心的业务如何去发展。在国内的云计算发展的历程，我想了解的人应该非常的清楚，实际上我们真真正正云计算开始活起来是在去年，我想今年或者以后这个云计算会更热，按照现在的发展趋势我觉得会在2015年之后就会有一个冲出云阶段的过程。         在我们国家云上的产业链已经非常的大。比如说传统的软件商、运营商还有其他的一些服务商，都在这个方向上做一些努力。比如说像电信，因为它本身有网络和硬件的基础，所以更大的程度集中在IS的层面上去。比如说像传统软件商，因为它在行业的解决方案中都有很大的畸零，它会把很多行业上的软件进行一种云散化，然后提供给它的用户，以更低廉、更好的方式去提供给客户。同时像一些咨询的公司，不管从企业IT云的规划上还是使用上都在做一些咨询的服务，同时像外包商也会基于这种产品来提供一些外包服务，包括我们有一些用户也在逐渐的会去使用云的产品。就像我刚才讲的邮件服务，特别是存储，大家都会使用的新浪微薄，微薄上就有很多云的存储，这些都是我们正在使用的一些云的产品。         根据2010云计算发展趋势的报告中，我们可以看到被大部分企业所关注云计算的份额是非常大的，并且这个区域也在逐渐的变大。我们可以看到我国云计算市场潜力非常巨大。从2010年我们估算的是119.47亿，到2011年158.03亿，到2012年会达到212.87亿，那么总的增长有30%左右。云计算的产业在国内各个城市纷纷有很多的云基地，云计划、云服务联盟等一系列的。这一系列可以看出在全国各地开始开发。这一切所有带来的商机会有很多，包括我们大家开发共享软件的同事，并且所有这些服务多者是上千万元或者是更多的几个亿，并且我们国家在国内很多城市设立了五家云计算的城市。目前在国内很多有名气的公司也在云计算方面正在做出努力。比如说我们大家比较熟悉的800APP、XTools等等这些传统的软件公司。还有我们经常会用到的在线视频的会议，邮箱服务，包括很多产品的竞销存储都已经在进行网络的散化，为大家提供这样一个服务。国外我们也都知道的像Google、微软、IBM等等都在努力的去推动云的模式。我们东软其实在这方面也在做努力，并且也做了几年的努力，去年我们推出了一个企伴网，主要想把东软在行业方面的产品进行云的散化，并且提供给我们的客户。实际我们与大众的企业一样把我们在行业整个20年的产品积累进行了一个云化，并且把它放在一个很好的平台上，为广大的企业客户进行服务。         软件的新机会。我们大家经常用的手机，大家也看到这个PPT上被咬烂的苹果，我们既爱又恨的公司。手机是一个我们目前最火的一个渠道。在国内像机锋网、巴士商店、安智市场等12个在线的应用商店，同时也包括华为、中兴以及其他国内手机厂商以及运营商都在做在线应用平台的一个过程。对于我们做共享软件开发的团队来讲这也是我们非常大的一个战场。在整个这个方面主要提供的是游戏、娱乐、新闻、还有商务项目的系统比较多。特别是游戏和娱乐方面，在这里我也呼吁一下大家可以关注一下企业管理方面的，随着企业对云模式的认可，希望在这里发现我们共享软件提供者提供一些与管理软件有关的服务。比如说在沈阳卖的比较好的像小蜜蜂财务软件等等。         国内我们也开发了很多开放的平台。我们可以把我们的产品相对的标准化以后，根据他们提供的公开的API窗口，公开的放在上面，也可以免除我们销售的困难。比如说我们销售的腾讯平台。包括像九城无限社区平台、盛大麻球平台，还有今年刚刚发布的Google+平台，还有百度的开发平台、新浪、人人网、淘宝网等等都有这样的平台，我想无论在什么方面应用完全可以放在这些平台上去为我们提供更多的销售渠道。拿盛大麻球平台来讲，我们可以看到它所提供一些公开API的东西，比如说广告，我们大家都知道我们共享软件收费的其中有一个重要的模式就是共享软件所附带的广告来进行收费，那么完全放在这个平台以后，其实完全可以用它的API来去做嵌入到我们的应用来，然后去跟进行一个广告的分成，包括一些其他的东西比如说货币、在线更新、社交的一些功能等等，像这一类都无须我们共享软件的开发者去开发，我们只需要把我们的注意力放在我们要完成的核心的功能上对于我们来讲可以节省很多的时间。另外的例子像淘宝平台，它也分拆它的公司，逐渐向三个方向发展，比如说它独立的网站，社区的电子商务化，还有就是它的工具海。实际来讲对于我们共享软件来讲有很多的商机，我们大家目的买任何一个商品基本上所要查询的一个网站就是淘宝，面对这样一个已经具有在线购买习性的用户群体平台，对于我们的软件能够放在上面去对我们的销售是有很好的帮助的，同时我们是为这一类的人群包括网商提供他们所需要的软件是一个很好的嵌入点。当然除了我刚才提出的淘宝以外其实国内也有很多这样的平台也值得我们去参与的。在这样一个开放平台下，我们以往的技术门槛还有这种渠道还、行业门槛就会变的很低，更多的是需要我们的创意，包括我们能在这些平台上进行一些推广，同时也包括我们能进行挖掘来促进我们的推广。我们作为当前在这样一个条件下的开发者更应该关注的是什么呢？我想有三个方面：第一、比如说刚才淘宝来讲，我们想在淘宝上发挥共享软件的时候，我们更重要的是数据挖掘方面，在这方面应该由更多的深入研究，为我们的购买用户提供此类的工具，包括在腾讯的平台上我们对数据成分的研究其实对我们新的共享开发者是一个比较深的层面。还有一个是对接口层的了解，特别是对标准化的锄地，这也是对我们在开发新的共享软件时更应该关注的。另外一个在展现层面上我们软件人员更加应该关注的是像苹果的应用，很多人选择它是因为它够炫、够酷，所以我们要在这方面应该更加关注，同时包括我们对各个平台的接触，与这些平台的统一性都是要这个层面上去做的。另外我们基于这样一个平台下，我们更多关注的是接口的开发。不管是如何去接触这个平台还是如何将这个这个平台进行去授权，包括对这种服务的管理、控制等等，也包括我们应用基于这种在线服务的话提供分布式计算的这种编成控制等等，所有这些信息我们要知道是来源一个平台的，比如说我们这个平台基于腾讯开发时，我们不用去关注这个用户在哪，因为有人帮我们把这样的用户聚集在这里，我们只需要说跟它有一个很好的互动和宣传，我们的应用就应该有一个所需要的用户群体。当然在这里对于接口相关的协议我们要有更多的了解，比如说REST、GET POST这些请求到底是基于什么样的模式，可能是要与我们传统的接法要有一些区别。         更简化的应用。我们把很多东西仍给了整个平台方。比如说缓存处理、系统配置、相关的认证、数据池、计算池、统计、日至分析等等不需要我们自己去开发，我们应该更多的关注于我们核心所要去做创意价格的地方，更好的与平台去融合。当然我们说我们在开发这类应用，如果你的接口做的足够好其实你完全可以在不同平台进行多方面的接触，比如说我们大家可以看到的像“疯狂的小鸟”这些应用，我们不仅在苹果的系统上可以看到，在Android上也可以看到在其他的系统上我们都能看到，这说明这种移植是非常好的。         在整个这样一个环境下，其实我认为技术不是特别重要，最重要的是一种思想的转换。从我个人理解有三点：一个是资源复用。既然我们整个的网络资源是这么好，我们所用云的模式下的资源这么好，包括存储、云计算等等，有很多人帮我们去做，为什么我们不能站在巨人的肩膀上去做这件事情呢。第二个是我们把这些事情仍给平台方去提供，钱大家一起来攥，我们更精专于我们的业务点上，去实现能力功能上。另外一个就是开放的心态。以往来讲，像刚才吴女士也讲，你们放软件时也要放一个测试版和一个正式版的，也就是说应该让大家用起来更喜欢去用，对于我们来讲才是真正的王者。谢谢大家，很高兴与大家分享我的演讲。 上一篇 Linux的王者时代即将到来 下一篇 悲催的IT 屌丝 顶 0 踩 0 我的同类文章 云计算 （3） 杂文 （54） http://blog.csdn.net 猜你在找 查看评论 * 以上用户言论只代表其个人观点，不代表CSDN网站的观点或立场 个人资料 microrain 访问： 813330次 积分： 8644 等级： 积分：8644 排名： 第1131名 原创： 109篇 转载： 43篇 译文： 2篇 评论： 997条 文章搜索 文章分类 e-learning (9) Flex/AS3 (24) FreeMarker (1) java (2) javascript (5) Linux专题 (24) Neusoft (1) php (7) Ruby (2) 云计算 (4) 人物 (1) 代码中国 (4) 心情小记 (13) 杂文 (55) 电子商务 (2) 电子政务 (0) 文章存档 2014年11月 (1) 2013年12月 (2) 2013年11月 (2) 2013年10月 (2) 2013年07月 (1) 2011年08月 (1) 2011年07月 (2) 2011年06月 (1) 2011年02月 (1) 2011年01月 (1) 2010年04月 (1) 2009年05月 (1) 2008年12月 (1) 2008年11月 (1) 2008年10月 (1) 2008年05月 (1) 2008年04月 (1) 2008年03月 (2) 2008年02月 (7) 2008年01月 (24) 2007年12月 (3) 2007年11月 (1) 2007年10月 (2) 2007年09月 (2) 2007年08月 (8) 2007年07月 (3) 2007年06月 (5) 2007年05月 (8) 2007年04月 (5) 2007年03月 (1) 2007年02月 (1) 2007年01月 (2) 2006年12月 (7) 2006年11月 (11) 2006年10月 (6) 2006年09月 (12) 2006年08月 (12) 2006年07月 (1) 2006年06月 (3) 2006年04月 (1) 2005年12月 (1) 2005年11月 (2) 2003年07月 (3) 阅读排行 五笔输入法 快速入门 二小时基本了解五笔 (70243) 我们为什么不选择Linux？ (58395) 最佳开源软件一览 (43596) Linux替代Windows系统软件大比拼 (19681) linux网络电视软件sopcast的安装 (19289) 基于WEB应用开发的java程序员必备工具 (17564) ruby语言只是昙花一现 (16799) CSDN最受欢迎的电子手册推荐 (12730) 未来几年动态语言谁将成为主流 (12727) Flex builder 3　正式版发布（含破解） (11889) 评论排行 我们为什么不选择Linux？ (235) Linux替代Windows系统软件大比拼 (109) 未来几年动态语言谁将成为主流 (70) 五笔输入法 快速入门 二小时基本了解五笔 (61) ruby语言只是昙花一现 (31) linux还需要多久真正走入我们的电脑 (24) 最佳开源软件一览 (23) Flex 3D Engine演示 (21) 国内首家源代码搜索引擎闪亮登场 (21) 放弃也是一种好的选择 (19) 推荐文章 *App竞品技术分析 （6）热修复 *架构设计：系统间通信（17）——服务治理与Dubbo 中篇（分析） *一款炫酷Loading动画--加载失败 *图解堆算法、链表、栈与队列（多图预警） *Android中ContentProvider组件详解 *Android平台Camera实时滤镜实现方法探讨(九)--磨皮算法探讨(一) 最新评论 Linux的王者时代即将到来 BraveLii : 对于个人用户来说会逐渐减少对于客户端操作系统的依赖。不在关注这些问题，所有都将在云端使用。只有云服务... ruby语言只是昙花一现 windows1989 : @microrain:这位当时，估计是个应届生，或者根本就没毕业呢？ 未来几年动态语言谁将成为主流 MrH_HC : 路过，表示Python在2014年成为主流脚本语言之一了。 ruby语言只是昙花一现 microrain : @u012000276:几年后再看回复，还是觉得很好笑！ ruby语言只是昙花一现 microrain : @u012000276:每个人都会有各自的感受而以。这个也只是当时的认知而以。一个语言能不能直正流行... ruby语言只是昙花一现 u012000276 : 不懂就别乱评价行不行？你连ruby都不懂 你有什么资格评价ruby 。你以为你是认为谁？ 有本事 自... PhpStorm 默认快捷键 zhoumengkang : 谢谢啦！！！ 基于WEB应用开发的java程序员必备工具 wangchao0729 : 很好很强大 微软你再狠一些吧，把自己赶出中国 liu765023051 : 没有软件是破解不了的。中国软件业现在从高到低一致盗版，哎，没法说。 悲催的IT 屌丝 acm365 : 以前觉得自己的文笔挺好的，现在看看自己写的有时自己都不愿意看，自己喜欢就去干，加油楼主，关注了 朋友 闫辉 ( RSS ) 龙如俊blog ( RSS ) 周筠@博文视点 ( RSS ) 葛涵涛@CSDN ( RSS ) 陈瑞江@CSDN ( RSS ) 霍泰稳的BLOG ( RSS ) 杨福川 写书/译书都找他 ( RSS ) 网站 代码中国网 ( RSS ) CSDN下载频道

Recno:: 38
URL:: http://blog.csdn.net/microrain/article/details/9404161

ParseText::
悲催的IT 屌丝 - 辛佳雨的专栏 - 博客频道 - CSDN.NET 辛佳雨的专栏 我的思想，凭空游弋 目录视图 摘要视图 订阅 学院APP首次下载，可得50C币！     欢迎来帮助开源“进步”     当讲师？爱学习？投票攒课吧     认识Atlassian Datacenter产品     深圳小伙伴的福利来啦 悲催的IT 屌丝 2013-07-22 07:50 2681人阅读 评论 (11) 收藏 举报 分类： 杂文 （54） 作者同类文章 X 版权声明：本文为博主原创文章，未经博主允许不得转载。 突然发现好久没有在这儿里写博客了。 忙，统一的，不变的借口。哈哈。 这一两年来，越来越觉得IT的业从业者的悲催。称之为屌丝一点也不为过。 现如之的项目越来越难打了，也越来越难做了。 一个项目要运作很久，有的都可以长到几年。再短的也得半年，单子的额度也许并不大。但是我们面对的客户都很NB。 有人说，这是卖方市场。可是不想一想，如果违背了客观规律，能有好的结果吗。 信息化类的项目，是综合知识的产物，是集多人的智慧才可以更好的完成的。需要投入大量的人力、物力的，这些都是成本。如果一个信息化类的项目，总体投入，都无法解决掉基本的成本。可想而知，这样的信息化项目最终的结果是什么样的。这也是为什么我们天朝，年年进行信息化建设，收效甚微的主要原因。 一个私心太重的时代，处处都有私，处处都有不可告知的门道。如果你看不清，理不顺，一切就会困难重重。也许是我太悲观，但是只要经历的人都会感受到。 现在很多项目在没有正式投标之前就知道了是谁家中标。真是挺悲催的。有时候我就在想，为什么有一些人可以这么胆大呢。选择好的供应商无可厚非，但是总得要为这个事做到更为目标吧。可是。。。。呵呵。 用户模糊的需求、监理带着某种目的的参和、各种说不清道不明的妖怪偶尔出来做做乱，一个项目的实施这样会把一群单纯的IT屌丝变得社会化了。其实我们只想好好做做技术，只想把项目搞好，只想让我们的付出变得更为有价值。 可是我们的价值在哪儿？更多的是换来不被尊重，价值的贬低。 上一篇 云计算机时代共享软件新战场 下一篇 让你的开发变得更加快起来 顶 0 踩 0 我的同类文章 杂文 （54） http://blog.csdn.net 猜你在找 查看评论 * 以上用户言论只代表其个人观点，不代表CSDN网站的观点或立场 个人资料 microrain 访问： 813321次 积分： 8644 等级： 积分：8644 排名： 第1131名 原创： 109篇 转载： 43篇 译文： 2篇 评论： 997条 文章搜索 文章分类 e-learning (9) Flex/AS3 (24) FreeMarker (1) java (2) javascript (5) Linux专题 (24) Neusoft (1) php (7) Ruby (2) 云计算 (4) 人物 (1) 代码中国 (4) 心情小记 (13) 杂文 (55) 电子商务 (2) 电子政务 (0) 文章存档 2014年11月 (1) 2013年12月 (2) 2013年11月 (2) 2013年10月 (2) 2013年07月 (1) 2011年08月 (1) 2011年07月 (2) 2011年06月 (1) 2011年02月 (1) 2011年01月 (1) 2010年04月 (1) 2009年05月 (1) 2008年12月 (1) 2008年11月 (1) 2008年10月 (1) 2008年05月 (1) 2008年04月 (1) 2008年03月 (2) 2008年02月 (7) 2008年01月 (24) 2007年12月 (3) 2007年11月 (1) 2007年10月 (2) 2007年09月 (2) 2007年08月 (8) 2007年07月 (3) 2007年06月 (5) 2007年05月 (8) 2007年04月 (5) 2007年03月 (1) 2007年02月 (1) 2007年01月 (2) 2006年12月 (7) 2006年11月 (11) 2006年10月 (6) 2006年09月 (12) 2006年08月 (12) 2006年07月 (1) 2006年06月 (3) 2006年04月 (1) 2005年12月 (1) 2005年11月 (2) 2003年07月 (3) 阅读排行 五笔输入法 快速入门 二小时基本了解五笔 (70243) 我们为什么不选择Linux？ (58395) 最佳开源软件一览 (43596) Linux替代Windows系统软件大比拼 (19681) linux网络电视软件sopcast的安装 (19289) 基于WEB应用开发的java程序员必备工具 (17564) ruby语言只是昙花一现 (16799) CSDN最受欢迎的电子手册推荐 (12730) 未来几年动态语言谁将成为主流 (12727) Flex builder 3　正式版发布（含破解） (11889) 评论排行 我们为什么不选择Linux？ (235) Linux替代Windows系统软件大比拼 (109) 未来几年动态语言谁将成为主流 (70) 五笔输入法 快速入门 二小时基本了解五笔 (61) ruby语言只是昙花一现 (31) linux还需要多久真正走入我们的电脑 (24) 最佳开源软件一览 (23) Flex 3D Engine演示 (21) 国内首家源代码搜索引擎闪亮登场 (21) 放弃也是一种好的选择 (19) 推荐文章 *App竞品技术分析 （6）热修复 *架构设计：系统间通信（17）——服务治理与Dubbo 中篇（分析） *一款炫酷Loading动画--加载失败 *图解堆算法、链表、栈与队列（多图预警） *Android中ContentProvider组件详解 *Android平台Camera实时滤镜实现方法探讨(九)--磨皮算法探讨(一) 最新评论 Linux的王者时代即将到来 BraveLii : 对于个人用户来说会逐渐减少对于客户端操作系统的依赖。不在关注这些问题，所有都将在云端使用。只有云服务... ruby语言只是昙花一现 windows1989 : @microrain:这位当时，估计是个应届生，或者根本就没毕业呢？ 未来几年动态语言谁将成为主流 MrH_HC : 路过，表示Python在2014年成为主流脚本语言之一了。 ruby语言只是昙花一现 microrain : @u012000276:几年后再看回复，还是觉得很好笑！ ruby语言只是昙花一现 microrain : @u012000276:每个人都会有各自的感受而以。这个也只是当时的认知而以。一个语言能不能直正流行... ruby语言只是昙花一现 u012000276 : 不懂就别乱评价行不行？你连ruby都不懂 你有什么资格评价ruby 。你以为你是认为谁？ 有本事 自... PhpStorm 默认快捷键 zhoumengkang : 谢谢啦！！！ 基于WEB应用开发的java程序员必备工具 wangchao0729 : 很好很强大 微软你再狠一些吧，把自己赶出中国 liu765023051 : 没有软件是破解不了的。中国软件业现在从高到低一致盗版，哎，没法说。 悲催的IT 屌丝 acm365 : 以前觉得自己的文笔挺好的，现在看看自己写的有时自己都不愿意看，自己喜欢就去干，加油楼主，关注了 朋友 闫辉 ( RSS ) 龙如俊blog ( RSS ) 周筠@博文视点 ( RSS ) 葛涵涛@CSDN ( RSS ) 陈瑞江@CSDN ( RSS ) 霍泰稳的BLOG ( RSS ) 杨福川 写书/译书都找他 ( RSS ) 网站 代码中国网 ( RSS ) CSDN下载频道

Recno:: 39
URL:: http://blog.csdn.net/nsrainbow/article/details/49032337

ParseText::
Redis 集群教程 - 我可以接受失败，但我不能接受放弃。--迈克尔 乔丹 - 博客频道 - CSDN.NET 我可以接受失败，但我不能接受放弃。--迈克尔 乔丹 目录视图 摘要视图 订阅 学院APP首次下载，可得50C币！     欢迎来帮助开源“进步”     当讲师？爱学习？投票攒课吧     认识Atlassian Datacenter产品     深圳小伙伴的福利来啦 Redis 集群教程 2015-10-18 10:14 870人阅读 评论 (0) 收藏 举报 分类： 数据库 （20） 作者同类文章 X 翻译自官方文档  Redis cluster tutorial Redis 集群教程 该文档是一篇关于redis集群的教程。该教程并不会让你去理解复杂分布式系统概念，只会告诉你如何安装、测试和操作一个集群。在这个过程中该文档只会从用户角度去描述系统的行为，并不会详细的探究 Redis集群手册 中的内容。 该教程会努力的从最终用户的视角出发， 来介绍Redis集群的可用性和一致性这些特性。不过请放心，我们会用浅显易懂的方式来介绍这一切。 注意：该教程需要Redis 的版本高于或者等于 3.0 虽然我们不强制要求你去阅读手册，但是如果你打算部署一个正式的Redis集群（比如生产环境用的redis集群），建议你阅读更正式的手册。 不过最好还是从这篇文档开始玩redis，等你玩了一段时间redis之后再去阅读手册 Redis 集群101 Redis 集群提供了一个运行redis实例的方式，该方式下数据会被 自动的在多个reids节点中分享 。 在分区的时候 ，Redis 集群还提供了 一定程度的可用性， 即在实际应用中，当几个节点挂掉或者无法通讯的时候，系统还可以持续运行。不过当大面积的节点出问题的时候集群还是会停止（比如当主要的master挂掉了的时候） 那么在实际应用中，Redis集群可以做到什么？ 自动切分数据集到多个节点上 的能力 当部分节点宕机或无法通讯的情况下 仍可继续处理命令 Redis 集群 TCP 端口 每一个redis集群的节点需要开通两个TCP端口。一个是用于客户端的Redis TCP，如6379。另一个由客户端加10000所得，如16379，用于Redis集群总线连接。 这是一个用户 节点对节点的 二进制协议通讯通道。集群总线是用来处理节点的失效检测，配置更新，灾备授权等事情。客户端应该连接redis普通命令端口（即之前提到的6370）而绝对不要去直接连接集群总线端口。不过还是要保证这两个端口在防火墙里面打开，否则redis集群内的节点无法互相通信。 集群总线端口总是比命令端口高10000。 注意：为了让redis集群运作正常，你需要在每个节点上： 把客户端用来连接redis的普通客户端通讯端口（一般是6379）对所有客户端和其他节点开放（别的节点也会用这个端口来迁移数据） 所有节点之间的集群总线端口（客户端口加上10000所得）必须互相开通 如果你没有同时打开这两个端口，集群就无法正常工作了 集群总线使用了一种不同的二进制协议，供节点和节点之间交换信息用。该协议可以让节点和节点之间以更小的流量和和更短的时间来交换信息。 Redis 集群数据分片 Redis集群用的不是基于哈希值的分片方式，用的是另一种不同的分片方式。在该分片方式下所有键在概念上都是我们称之为 哈希槽 的一部分。Redis集群有16384个哈希槽。当需要在 Redis 集群中放置一个 key-value 时，redis 先对 key 使用 crc16 算法算出一个结果，然后把结果对 16384 求余数，这样每个 key 都会对应一个编号在 0-16383 之间的哈希槽，redis 会根据节点数量大致均等的将哈希槽映射到不同的节点。 Redis集群中的每个节点都存放了一些哈希槽。所以举例来说，比如你有3个节点： 节点A 保存了从 0 到 5500 的哈希槽 节点B 保存了从 5501 到 11000的哈希槽 节点C 保存了从 11001 到 16384 的哈希槽 这么做让集群增加或者减少节点变得很简单。比如我要增加一个节点D，我只需要从节点ABC移动一部分哈希槽到D。如果我要从节点中去除节点A，我只需要把节点A上的哈希槽移动到节点B或者C。当节点A的哈希槽被全部移走了之后，我就可以将它从节点中完全去除。 因为把哈希槽从一个节点移动到另外一个节点并不需要停止集群， 所以增加、删除节点或者在各节点间调整哈希槽的占有率的时候是不用停止集群的。Redis集群支持在一条命令里面对同一个哈希槽的多个键同时操作（或者在一个事务中，或者在一个lua脚本执行过程中）。用户可以通过哈希标签强制的把多个键放到一个哈希槽里面。在Redis集群手册中可以查到哈希标签的相关说明, 不过归纳成一句话就是：当有在key里面写上段包含在{...}中的文字的时候，之后大括号{...}中的文字会被计算成哈希键。比如有两个key一个名叫 this{foo}key 另一个名叫 another{foo}key ，这两个key会被归纳到同一个哈希槽里面。这样这两个key就可以在一个命令中同时进行操作了。 Redis 集群主从模型 了在部分节点失败或者无法通信的情况下集群仍然可用，Redis 集群采用了一种 主从模型。在该模型下每一个哈希槽都会被从master端复制N份到slave节点。在我们的例子中有三个节点分别是ABC，如果节点B挂掉了，集群就无法继续工作，因为从5501到11000的哈希槽就没了。 不过如果当集群被创建的时候（迟些时候也可以）我们给每一个master节点增加一个slave从节点。模型变成这样：集群中有三个节点A，B，C，以及他们各自的从节点 A1，B1，C1，当节点B挂掉的时候，系统还可以正常运行。 节点B1是用来做为节点B的镜像的。当节点B挂掉了，集群会选举B1作为新的master节点，并继续运行下去。 不过要注意当节点B和节点B1都挂掉的时候，redis集群还是无法继续运行。 Redis 集群一致性保证 Redis 集群并不能保证数据的 强一致性 。在实际应用中这意味着在特定的情况下，就算Redis 集群告知客户端已经收到了写请求，这个写请求仍然有可能丢失。Redis集群之所以会丢失写请求的首要原因是：它采用了异步的复制机制。在写的时候会经历以下的步骤: 你的客户端发送了一个写请求给master B 节点 master B 节点回复了一个OK给你的客户端。 master B 节点把这个写请求传播到它的 slave B1, B2, B3 节点上去。 正如你所见， B节点并不会等到B1，B2，B3节点都回复它之后才回复OK给客户端。因为这样会造成redis集群过高的延迟度。所以如果你的客户端正在写些什么东西，节点B又告知你的客户端它收到了写请求，但是在它把这个写请求发送给它的slave节点们之前，节点B挂了，那么其中一个slave节点（假设它还没收到写请求）被选举为master那么你这个写请求就永久的丢失了。 很多数据库被配置成每秒刷新一次数据到磁盘，他们都会发生非常类似的事情。所以你可以根据以往使用传统数据库（这些数据库都不是基于分布式的）的经验很容易的推导出这种场景。同样的你也可以强制让数据库每次都等到写入了磁盘才回复客户端，这样就可以保证一致性，但是这往往导致了系统的性能急剧下降。同样的如果你把Reids集群设计成同步复制机制也会造成性能低下。 从根本上说这是一种用一致性来换取性能的交易。 当非常有必要的时候，Redis集群也支持同步写入。它通过实现WAIT命令来实现。这样一来基本不会丢失写操作。但是请注意就算你使用了同步复制，Redis集群也不能达到强一致性，因为：总是会遇到某些更复杂的错误场景，在这些场景下slave节点在被选举为master的时候还没收到写请求。 还有一个需要注意的会丢失数据的情况。当进行一次网络网络分裂的时候某个客户端被分配到一个拥有很少节点的区域中的情况。 就拿我们的6节点例子（master是ABC，slave是A1，B1，C1），此时有一个客户端，我们称之为Z1。当网络分裂后，有可能有这种情况：现在有2方，一方是 A,C,A1，B1，C1，另一方是B和Z1。Z1依然可以写入B，而且B也会接受来自Z1的写请求。如果这次网络分裂在很短的时间内被修复， 集群依然会保持正常运行。 然而如果浙西网络分裂持续了较长时间，长到足够B1在多数方被选举为master。那么Z1发送给B的写请求都会丢失。 注意， 在网络分裂出现期间， 客户端 Z1 可以向主节点 B 发送写命令的最大时间是有限制的， 这一时间限制称为节点超时时间（node timeout）， 是 Redis 集群的一个重要的配置选项： 对于大多数一方来说， 如果一个主节点未能在节点超时时间所设定的时限内重新联系上集群， 那么集群会将这个主节点视为下线， 并使用从节点来代替这个主节点继续工作。 对于少数一方， 如果一个主节点未能在节点超时时间所设定的时限内重新联系上集群， 那么它将停止处理写命令， 并向客户端报告错误。 Redis 集群配置参数 我们来做一个redis集群的部署例子。在继续后面的步骤之前我先介绍一下配置在redis.conf文件中的Redis集群参数。有些参数很容易懂，有些你必须接着读以下的内容才会懂。 cluster-enabled <yes/no> : 该项如果设置成yes，该实例支持redis集群。否则该实例会像往常一样以独立模式启动。 cluster-config-file <filename>:  必须注意到尽管该项是可选的，这并不是一个用户可以编辑的配置文件，这是redis集群节点自动生成的配置文件，每次一旦配置有修改它都通过该配置文件来持久化配置（基本上都是状态），这样在下次启动的时候可以重新读取这些配置。该文件中列出了该集群中的其他节点的状态，持久化变量等信息。 当节点收到一些信息的时候该文件就会被冲重写。 cluster-node-timeout <milliseconds> : redis集群节点的最大超时时间。响应超过这个时间的话该节点会被认为是挂掉了。如果一个master节点超过一定的时候无法访问，它会被它的slave取代。 该参数在redis集群配置中很重要。很明显，当节点无法访问大部分master节点超过一定时间后，它会停止接受查询请求。 cluster-slave-validity-factor <factor> :如果将该项设置为0，不管slave节点和master节点间失联多久都会一直尝试failover（设为正数，失联大于一定时间（factor*节点TimeOut），不再进行FailOver）。比如，如果节点的timeout设置为5秒，该项设置为10，如果master跟slave之间失联超过50秒，slave不会去failover它的master（意思是不会去把master设置为挂起状态，并取代它）。注意：任意非0数值都有可能导致当master挂掉又没有slave去failover它，这样redis集群不可用。在这种情况下只有原来那个master重新回到集群中才能让集群恢复工作。 cluster-migration-barrier <count> : 一个master可以拥有的最小slave数量。该项的作用是，当一个master没有任何slave的时候，某些有富余slave的master节点，可以自动的分一个slave给它。具体参见 手册 中的replica migration章节 cluster-require-full-coverage <yes/no> : 如果该项设置为yes（默认就是yes） 当一定比例的键空间没有被覆盖到（就是某一部分的哈希槽没了，有可能是暂时挂了）集群就停止处理任何查询炒作。如果该项设置为no，那么就算请求中只有一部分的键可以被查到，一样可以查询（但是有可能会查不全） 创建并使用 Redis 集群 注意: 手动部署一个redis集群前学习这些操作很重要。但是如果你只是想最快速的搭建一个集群，你可以跳过这节和下一节直接看 用create-cluster脚本搭建redis集群 。创建集群之前首要的一件事情是我们需要有一些运行在 集群模式 下的空节点。集群是不能在普通redis实例上创建的。我们必须让节点运行在集群模式下才能开启一些集群的特性和使用集群的命令。 以下是集群的最小配置文件: port 7000 cluster-enabled yes cluster-config-file nodes.conf cluster-node-timeout 5000 appendonly yes 文件中的 cluster-enabled 选项用于开实例的集群模式， 而 cluster-conf-file 选项则设定了保存节点配置文件的路径， 默认值为 nodes.conf.节点配置文件无须人为修改， 它由 Redis 集群在启动时创建， 并在有需要时自动进行更新。 要让集群正常运作至少需要三个主节点，不过在刚开始试用集群功能时， 强烈建议使用六个节点： 其中三个为主节点， 而其余三个则是各个主节点的从节点。 首先， 让我们进入一个新目录， 并创建六个以端口号为名字的子目录， 稍后我们在将每个目录中运行一个 Redis 实例： 命令如下: mkdir cluster-test cd cluster-test mkdir 7000 7001 7002 7003 7004 7005 在文件夹 7000 至 7005 中， 各创建一个 redis.conf 文件， 文件的内容可以使用上面的示例配置文件， 但记得将配置中的端口号从 7000 改为与文件夹名字相同的号码。 从 Redis Github 页面 的 unstable 分支中取出最新的 Redis 源码 ， 编译出可执行文件 redis-server ， 并将文件复制到 cluster-test 文件夹， 然后使用类似以下命令， 在每个标签页中打开一个实例： cd 7000 ../redis-server ./redis.conf 你可以从实例打印的日志中看出来， 因为 nodes.conf 文件不存在， 所以每个节点都为它自身指定了一个新的 ID ： [82462] 26 Nov 11:56:55.329 * No cluster configuration found, I'm 97a3a64667477371c4479320d683e4c8db5858b1 实例会一直使用同一个 ID ， 从而在集群中保持一个唯一（unique）的名字。每个节点通过这个名字来记忆其他节点，我们把这个字符串称之为 Node ID 创建一个集群 现在我们已经有了六个正在运行中的 Redis 实例， 接下来我们需要使用这些实例来创建集群， 并为每个节点编写配置文件。 通过使用 Redis 集群命令行工具 redis-trib ， 编写节点配置文件的工作可以非常容易地完成： redis-trib 位于 Redis 源码的 src 文件夹中， 它是一个 Ruby 程序， 这个程序通过向实例发送特殊命令来完成创建新集群， 检查集群， 或者对集群进行重新分片（reshared）等工作。 ./redis-trib.rb create --replicas 1 127.0.0.1:7000 127.0.0.1:7001 \ 127.0.0.1:7002 127.0.0.1:7003 127.0.0.1:7004 127.0.0.1:7005 这个命令在这里用于创建一个新的集群, 选项--replicas 1 表示我们希望为集群中的每个主节点创建一个从节点。 之后跟着的其他参数则是这个集群实例的地址列表,3个master3个slave redis-trib 会打印出一份预想中的配置给你看， 如果你觉得没问题的话， 就可以输入 yes ， redis-trib 就会将这份配置应用到集群当中,让各个节点开始互相通讯,最后可以得到如下信息： [OK] All 16384 slots covered 这表示集群中的 16384 个槽都有至少一个主节点在处理， 集群运作正常。 用create-cluster脚本搭建redis集群 如果你不想像上面提到的那样手动配置每个节点，这里提供了一个更简单的系统（但是你不会学习到那么多的选项）。只需要去查看下redis发布版本中的utils/create-cluster 文件夹。里面有一个叫 create-cluster 的脚本。该脚本可以通过以下命令启动一个含有6个节点（3master 和 3slave）的集群： create-cluster start create-cluster create 在第2步，redis-trib utility 需要你接受集群方案的时候记得回答yes。 你现在可以跟集群交互了。第一个节点会默认监听300001。如果你想停集群用以下命令： create-cluster stop 让我们开始玩集群吧 现阶段redis集群有一个问题，那就是缺乏客户端库。 以下是我知道的客户端实现： redis-rb-cluster 是我写的一个ruby客户端实现(这边指的是作者@antirez) 。这个库对原生的 redis-rb 进行了一个简单的封装，用最小代码量实现了高效的对集群的操作。 redis-py-cluster ：这个客户端用python对redis-rb-cluster进行了转接。支持大部分 redis-py 的功能。 Predis ： 这个库最近很活跃，更新很快。基于PHP Jedis ：最流行的java客户端，最近也支持redis集群了。你可以在项目的README里面的集群段落看到相关介绍。 StackExchange.Redis ： C# 的客户端 thunk-redis ：nodejs和io.js 的客户端 Redis库的不稳定分支里面的 redis-cli 工具也提供了非常基本的集群支持。具体使用的方式是用 -c 来启动该工具可以切换到集群模式。 测试 Redis 集群最简单的方法莫过于使用上面提到的任意一种客户端或者直接使用 redis-cli 命令行工具。以下例子演示了怎样使用命令行工具进行测试: $ redis-cli -c -p 7000 redis 127.0.0.1:7000> set foo bar -> Redirected to slot [12182] located at 127.0.0.1:7002 OK redis 127.0.0.1:7002> set hello world -> Redirected to slot [866] located at 127.0.0.1:7000 OK redis 127.0.0.1:7000> get foo -> Redirected to slot [12182] located at 127.0.0.1:7002 "bar" redis 127.0.0.1:7000> get hello -> Redirected to slot [866] located at 127.0.0.1:7000 "world" 注意 : 如果你用之前提到的简易脚本来创建你的集群，你的集群中的节点可能会监听不同的端口。这些端口默认是从30001开始递增。 redis-cli 的集群功能只提供了非常基本的功能，所以他总是假定：客户端知道数据在哪个节点之上，并准确的连接数据所在的节点。但是一个实际使用的客户端应该应该要缓存哈希槽和节点之间的映射关系，通过这个映射关系来引导客户单连接指定的节点。该映射关系只有集群配置改变的时候才刷新。比如在一次failover之后或者系统管理员通过增加或者删除节点来改变集群的分布之后，该映射关系才刷新。 用 redis-rb-cluster 来写一个例子app 在展示如何使用redis集群做失效备援或者重新分片之前。我们需要建立一些例子工程，或者至少理解一个简单的redis集群客户端跟集群交互的一些基本语法。 通过这种方式我们可以运行一个例子，在运行例子的同时我们尝试让一些节点挂掉或者启动一个重新分片过程，以此来观察redis集群如何响应真实情况下的突发情况的。 如果不写点什么到集群里面去没法看出什么门道。 本节将通过两个示例应用来展示 redis-rb-cluster 的基本用法， 以下是本节的第一个示例应用， 它是一个名为 example.rb 的文件， 包含在redis-rb-cluster 项目里面 1 require './cluster' 2 3 startup_nodes = [ 4 {:host => "127.0.0.1", :port => 7000}, 5 {:host => "127.0.0.1", :port => 7001} 6 ] 7 rc = RedisCluster.new(startup_nodes,32,:timeout => 0.1) 8 9 last = false 10 11 while not last 12 begin 13 last = rc.get("__last__") 14 last = 0 if !last 15 rescue => e 16 puts "error #{e.to_s}" 17 sleep 1 18 end 19 end 20 21 ((last.to_i+1)..1000000000).each{|x| 22 begin 23 rc.set("foo#{x}",x) 24 puts rc.get("foo#{x}") 25 rc.set("__last__",x) 26 rescue => e 27 puts "error #{e.to_s}" 28 end 29 sleep 0.1 30 } 这个应用所做的工作非常简单： 它不断地以 foo<number> 为键， number 为值， 使用 SET 命令向数据库设置键值对： SET foo0 0 SET foo1 1 SET foo2 2 以此类推 代码中的每个集群操作都使用一个 begin 和 rescue 代码块（block）包裹着， 因为我们希望在代码出错时， 将错误打印到终端上面， 而不希望应用因为异常（exception）而退出。 代码的 第七行 是代码中第一个有趣的地方， 它创建了一个 Redis 集群对象， 其中创建对象所使用的参数及其意义如下：第一个参数是记录了启动节点的 startup_nodes 列表， 列表中包含了两个集群节点的地址。第二个参数指定了对于集群中的各个不同的节点， Redis 集群对象可以获得的最大连接数 ，第三个参数 timeout 指定了一个命令在执行多久之后， 才会被看作是执行失败。 启动的节点列表不需要包含集群的所有节点。但这些地址中至少要有一个是有效的： 一旦 redis-rb-cluster 成功连接上集群中的某个节点时， 集群节点列表就会被自动更新， 任何真正的的集群客户端都应该这样做。 现在， 程序创建的 Redis 集群对象实例被保存到 rc 变量里面， 我们可以将这个对象当作普通 Redis 对象实例来使用。 从 第11行到第19行 发生了以下事情:我们先尝试阅读计数器中的值， 如果计数器不存在的话， 我们才将计数器初始化为 0 ： 通过将计数值保存到 Redis 的计数器里面， 我们可以在示例重启之后， 仍然继续之前的执行过程， 而不必每次重启之后都从 foo0 开始重新设置键值对。为了让程序在集群下线的情况下， 仍然不断地尝试读取计数器的值， 我们将读取操作包含在了一个 while 循环里面， 一般的应用程序并不需要如此小心。 21至30行 是程序的主循环， 这个循环负责设置键值对， 并在设置出错时打印错误信息。程序在主循环的末尾添加了一个 sleep 调用， 让写操作的执行速度变慢， 帮助执行示例的人更容易看清程序的输出。执行 example.rb 程序将产生以下输出： ruby ./example.rb 1 2 3 4 5 6 7 8 9 ^C (我把程序给停了) 这个程序并不是十分有趣， 稍后我们就会看到一个更有趣的集群应用示例， 不过在此之前， 让我们先使用这个示例来演示集群的重新分片操作。 集群重新分片 现在我们可以来尝试集群重新分片了。做分片的时候请保持集群运行，这样如果分片对程序有什么影响你就可以观察的到了。你也可以考虑将 example.rb 中的 sleep 调用删掉， 从而让重新分片操作在近乎真实的写负载下执行。 重分片意思就是把一些哈希槽从一些节点移动到另一些节点中取。正如我们集群创建的时候那样做的，重新分片也可以使用redis-trib 工具来做。 ./redis-trib.rb reshard 127.0.0.1:7000 你只需要指定一个节点就可以了，redis-trib 会自动找到其他的节点。目前 redis-trib 的重新分片只能通过管理功能实现，比如你不能做到从这个节点自动的移动5%的哈希槽到其他节点去（虽然这个功能正在实现中）。所以由这引出了几个问题，首要的一个就是你究竟想做一次多大范围的分片？ 你想移动多少哈希槽 (从 1 到 16384)? 我们尝试将1000个槽重新分片， 如果 example.rb 程序一直运行着的话， 现在 1000 个槽里面应该有不少键了。 除了移动的哈希槽数量之外， redis-trib 还需要知道重新分片的目标， 也即是， 负责接收这 1000 个哈希槽的节点。我会使用第一个master节点： 127.0.0.1:70000 。 但是我需要在实例中指定Node ID。用redis-trib可以输出节点列表。但是我也可以通过以下命令找到节点ID： $ redis-cli -p 7000 cluster nodes | grep myself 97a3a64667477371c4479320d683e4c8db5858b1 :0 myself,master - 0 0 0 connected 0-5460 ok，现在我知道我的目标是节点的ID是97a3a64667477371c4479320d683e4c8db5858b1。 现在需要指定从哪写节点来移动keys到目标。我输入的是all ，这样就会从其他每个master上取一些哈希槽。最后确认后你将会看到每个redis-trib移动的槽的信息，每个key的移动的信息也会打印出来。在重新分片的过程中，你的例子程序是不会受到影响的,你可以停止或者重新启动多次。 在重新分片结束后你可以通过如下命令检查集群状态 ./redis-trib.rb check 127.0.0.1:7000 所有的节点都会被该操作覆盖到。不过此时127.0.0.1:7000这个节点会拥有更多的哈希槽，大概会有6461个。 将重新分片操作做成一个脚本 重新分片操作可以做成自动的，这样我们就不用在交互模式下手动的输入一个个参数了。可以通过以下的命令行去实现： ./redis-trib.rb reshard <host>:<port> --from <node-id> --to <node-id> --slots --yes 如果您经常重分片，那么可以用这个脚本来实现分片自动化。不过当前没有办法让 redis-trib 自动检测集群的键分配，由此来智能判断是否需要重新分片。该功能未来会加入。 一个更有趣的示例应用 我们在前面使用的示例程序 example.rb 并不是十分有趣， 因为它只是不断地对集群进行写入， 但并不检查写入结果是否正确。 比如说， 集群可能会错误地将 example.rb 发送的所有 SET 命令都改成了 SET foo 42 ， 但因为 example.rb 并不检查写入后的值， 所以它不会意识到集群实际上写入的值是错误的。 因为这个原因， redis-rb-cluster 项目包含了一个名为 consistency-test.rb 的示例应用， 这个应用比起 example.rb 有趣得多： 它创建了多个计数器（默认为 1000 个）， 并通过发送 INCR 命令来增加这些计数器的值。 在增加计数器值的同时， consistency-test.rb 还执行以下操作： 每次使用 INCR 命令更新一个计数器时， 应用会记录下计数器执行 INCR 命令之后应该有的值。 举个例子， 如果计数器的起始值为 0 ， 而这次是程序第 50 次向它发送 INCR 命令， 那么计数器的值应该是 50 。 在每次发送 INCR 命令之前， 程序会随机从集群中读取一个计数器的值， 并将它与自己记录的值进行对比， 看两个值是否相同。 换句话说， 这个程序是一个一致性检查器（consistency checker）： 如果集群在执行 INCR 命令的过程中， 丢失了某条 INCR 命令， 又或者多执行了某条客户端没有确认到的 INCR 命令， 那么检查器将察觉到这一点 —— 在前一种情况中， consistency-test.rb 记录的计数器值将比集群记录的计数器值要大； 而在后一种情况中， consistency-test.rb 记录的计数器值将比集群记录的计数器值要小。 运行 consistency-test 程序将产生类似以下的输出： $ ruby consistency-test.rb 925 R (0 err) | 925 W (0 err) | 5030 R (0 err) | 5030 W (0 err) | 9261 R (0 err) | 9261 W (0 err) | 13517 R (0 err) | 13517 W (0 err) | 17780 R (0 err) | 17780 W (0 err) | 22025 R (0 err) | 22025 W (0 err) | 25818 R (0 err) | 25818 W (0 err) | 每行输出都打印了程序执行的读取次数和写入次数， 以及执行操作的过程中因为集群不可用而产生的错误数。 如果程序察觉了不一致的情况出现， 它将在输出行的末尾显式不一致的详细情况。 比如说， 如果我们在 consistency-test.rb 运行的过程中， 手动修改某个计数器的值，那么 consistency-test.rb 将向我们报告不一致情况： $ redis 127.0.0.1:7000> set key_217 0 OK (in the other tab I see...) 94774 R (0 err) | 94774 W (0 err) | 98821 R (0 err) | 98821 W (0 err) | 102886 R (0 err) | 102886 W (0 err) | 114 lost | 107046 R (0 err) | 107046 W (0 err) | 114 lost | 在我们修改计数器值的时候， 计数器的正确值是 114 （执行了 114 次 INCR 命令）， 因为我们将计数器的值设成了 0 ， 所以 consistency-test.rb 会向我们报告说丢失了 114 个 INCR 命令。 因为这个示例程序具有一致性检查功能， 所以我们用它来测试 Redis 集群的故障转移操作。 失效备援(failover)测试 注意：在执行本节操作的过程中， 请一直运行 consistency-test 程序。为了触发失效备援，我们要做的最简单的事情（这也是在一个分布式系统中最简单的一种故障）就是把一个redis进程搞挂，在我们的例子中就是一个master节点进程。 我们可以定义一个集群，并通过以下命令让其崩溃： $ redis-cli -p 7000 cluster nodes | grep master 3e3a6cb0d9a9a87168e266b0a0b24026c0aae3f0 127.0.0.1:7001 master - 0 1385482984082 0 connected 5960-10921 2938205e12de373867bf38f1ca29d31d0ddb3e46 127.0.0.1:7002 master - 0 1385482983582 0 connected 11423-16383 97a3a64667477371c4479320d683e4c8db5858b1 :0 myself,master - 0 0 0 connected 0-5959 10922-11422 ok，现在7000，7001和7002 是master节点了。让我们用 DEBUG SEGFAULT 命令搞挂7002 节点: $ redis-cli -p 7002 debug segfault Error: Server closed the connection 现在我们可以来观察下 consistency test 的输出。 18849 R (0 err) | 18849 W (0 err) | 23151 R (0 err) | 23151 W (0 err) | 27302 R (0 err) | 27302 W (0 err) | ... many error warnings here ... 29659 R (578 err) | 29660 W (577 err) | 33749 R (578 err) | 33750 W (577 err) | 37918 R (578 err) | 37919 W (577 err) | 42077 R (578 err) | 42078 W (577 err) | 你可以看到在失效备援的时候系统拒绝了578个读请求和577个写请求，但是数据库中没有引发任何一个的不一致问题。这可能跟教程刚开始部分所说的不同。在教程刚开始的时候我们说到redis 集群之所以在失效备援的时候会丢失写请求是因为它使用的是异步复制机制。我在教程开始的时候没有提到这点：其实丢失写请求的情况是很少发生的。因为把请求的响应返回给客户端和发送复制命令给slave这两件事情几乎是同时发生的。所以丢失数据的时间窗口非常小。然而非常难发生并不意味这不可能发生。所以这并没有改变redis集群无法实现强一致性的事实。 我们现在可以查看失效备援之后集群的布局（注意我同时重启了崩溃的实例，这样可以把这个节点作为slave重新加入到系统中）: $ redis-cli -p 7000 cluster nodes 3fc783611028b1707fd65345e763befb36454d73 127.0.0.1:7004 slave 3e3a6cb0d9a9a87168e266b0a0b24026c0aae3f0 0 1385503418521 0 connected a211e242fc6b22a9427fed61285e85892fa04e08 127.0.0.1:7003 slave 97a3a64667477371c4479320d683e4c8db5858b1 0 1385503419023 0 connected 97a3a64667477371c4479320d683e4c8db5858b1 :0 myself,master - 0 0 0 connected 0-5959 10922-11422 3c3a0c74aae0b56170ccb03a76b60cfe7dc1912e 127.0.0.1:7005 master - 0 1385503419023 3 connected 11423-16383 3e3a6cb0d9a9a87168e266b0a0b24026c0aae3f0 127.0.0.1:7001 master - 0 1385503417005 0 connected 5960-10921 2938205e12de373867bf38f1ca29d31d0ddb3e46 127.0.0.1:7002 slave 3c3a0c74aae0b56170ccb03a76b60cfe7dc1912e 0 1385503418016 3 connected 现在 7000， 7001 和 7005 是master节点。7002之前是master节点，现在是7005的一个slave节点。 CLUSTER NODES 命令的结果可能看起来很复杂，但是它实际上是很简单的，并且是一下token的组合: 节点 ID ip:port flags ：例如 master 、 slave 、 myself 、fail 如果节点是一个从节点的话， 那么跟在 flags 之后的将是主节点的节点 ID 集群最近一次向节点发送 PING 命令之后， 过去了多长时间还没接到回复。 节点最近一次返回 PONG 回复的时间。 节点的配置纪元（configuration epoch）：详细信息请参考 Redis 集群规范 。 本节点的网络连接情况：例如 connected 。 节点目前包含的槽：例如 127.0.0.1:7001 目前包含号码为 5960 至 10921 的哈希槽。 手动失效备援 有时候就算master不是真的出问题了，也需要强制引发一次失效备援。比如为了升级Redis中的一个master节点，又想尽量减小对系统可用性的影响，我们就可以用失效备援来把这个master节点转换为slave节点。 redis集群可以用 CLUSTER FAILOVER 命令来进行手动失效备援。这个命令必须要在你想切换的目标 slave 上执行。 手动失效备援比master实际出错引发的失效备援更安全。因为手动失效备援是在系统正常运行并且新的master节点持续不断的接收来自master的复制请求的情况下将客户端的连接从原来的master移动到新的master之上的，这样可以保证在切换的过程中不丢失数据。 以下是你做失效备援的时候slave产生的日志： # Manual failover user request accepted. # Received replication offset for paused master manual failover: 347540 # All master replication stream processed, manual failover can start. # Start of election delayed for 0 milliseconds (rank #0, offset 347540). # Starting a failover election for epoch 7545. # Failover election won: I'm the new master. 基本上之前客户端连接的那个master已经被我们用失效备援停止了。与此同时，master节点发送跟slave之间的复制位移量（就是现在还差多少没有复制）。slave会停止下来等待复制位移量被消除。当达到复制位移量的时候才开始失效备援，然后旧master被告知要进行配置切换。当客户端从旧master解锁的时候他们已经重定向到新master节点了。 添加新节点 添加一个新节点其实就是以下过程：添加一个空白节点，移动一些数据到这个节点里面或者告诉它作为一个现有节点的备份节点，即一个slave节点。 本节将对以上两种情况进行介绍，首先介绍主节点的添加方法： 2种情况第一个步骤都是 添加一个空白节点 。 照启动其他节点的配置（我们已经照这个配置启动了7000到7005这6个节点了）来启动一个监听7006的节点其实很简单，唯一不一样的就是端口号.以下是启动端口号为 7006 的新节点的详细步骤: 在终端里创建一个新的标签页。 进入 cluster-test 文件夹。 创建并进入 7006 文件夹。 将 redis.conf 文件复制到 7006 文件夹里面，然后将配置中的端口号选项改为 7006 。 使用命令 ../../redis-server redis.conf 启动节点。 如果一切正常， 那么节点应该会正确地启动. 现在我们像平时一样使用 redis-trib  来添加一个节点到集群中 ./redis-trib.rb add-node 127.0.0.1:7006 127.0.0.1:7000 正如你所见我使用 add-node 命令的时候第1个参数用来指定新节点的地址，第2个参数可以随便使用集群中的任何一个节点。 在实际情况下 redis-trib 其实没有帮我们做很多事情，它只是发送了一个 CLUSTER MEET 信息给节点，这件事情手动也可以完成。 然而redis-trib 还在操作之前检查了集群的状态，所以就算你知道redis-trib 是如何工作的你也最好使用redis-trib来执行这些操作。 通过 cluster nodes 命令， 我们可以确认新节点 127.0.0.1:7006 已经被添加到集群里面了 redis 127.0.0.1:7006> cluster nodes 3e3a6cb0d9a9a87168e266b0a0b24026c0aae3f0 127.0.0.1:7001 master - 0 1385543178575 0 connected 5960-10921 3fc783611028b1707fd65345e763befb36454d73 127.0.0.1:7004 slave 3e3a6cb0d9a9a87168e266b0a0b24026c0aae3f0 0 1385543179583 0 connected f093c80dde814da99c5cf72a7dd01590792b783b :0 myself,master - 0 0 0 connected 2938205e12de373867bf38f1ca29d31d0ddb3e46 127.0.0.1:7002 slave 3c3a0c74aae0b56170ccb03a76b60cfe7dc1912e 0 1385543178072 3 connected a211e242fc6b22a9427fed61285e85892fa04e08 127.0.0.1:7003 slave 97a3a64667477371c4479320d683e4c8db5858b1 0 1385543178575 0 connected 97a3a64667477371c4479320d683e4c8db5858b1 127.0.0.1:7000 master - 0 1385543179080 0 connected 0-5959 10922-11422 3c3a0c74aae0b56170ccb03a76b60cfe7dc1912e 127.0.0.1:7005 master - 0 1385543177568 3 connected 11423-16383 新节点现在已经连接上了集群， 成为集群的一份子， 并且可以对客户端的命令请求进行转向了， 但是和其他主节点相比， 新节点还有两点区别 新节点没有包含任何数据， 因为它没有包含任何哈希桶。 尽管新节点没有包含任何哈希桶， 但它仍然是一个主节点， 所以在集群需要将某个从节点升级为新的主节点时， 这个新节点不会被选中。 现在可以用redis-trib 的重新分片功能移动一些哈希槽到这个节点了。因为使用 redis-trib 移动哈希桶的方法在前面已经介绍过， 所以这里就不再重复介绍了。 添加一个slave节点 通过2步操作可以添加一个新的slave。 第一步是再次使用 redis-trib ，不过这回要带上 --slave 选项，如下： ./redis-trib.rb add-node --slave 127.0.0.1:7006 127.0.0.1:7000 注意到这条命令跟我们之前添加master的命令非常像。我们并不用具体指定要添加slave到哪个master。这样redis-trib 会在有比较少slave的master节点中随机的找一个master来挂载slave节点。 不过你也可以精确的指定你要挂载这个slave及诶单到哪个master上： ./redis-trib.rb add-node --slave --master-id 3c3a0c74aae0b56170ccb03a76b60cfe7dc1912e 127.0.0.1:7006 127.0.0.1:7000 这就是我们添加一个slave到指定master的方法。 一个更手动添加slave到指定master的方式是：添加一个空节点然后通过 CLUSTER REPLICATE 命令来将其转化为一个slave节点。这个方法也同样适用于当一个节点已经是slave节点的时候你想将它转换为另一个master的slave。 比如我现在想给127.0.0.1:7005节点添加一个复制节点（就是slave），该节点现在的哈希槽范围是 11423-16383，Node ID 是 3c3a0c74aae0b56170ccb03a76b60cfe7dc1912e。我所要做的只不过是连上新节点（在此之前该节点已经被作为空master节点添加到集群里面了）并执行以下命令： redis 127.0.0.1:7006> cluster replicate 3c3a0c74aae0b56170ccb03a76b60cfe7dc1912e 这样就搞定了。现在我们有了一个新的复制节点，该节点复制了上面我们提到的哈希槽，并且集群中的其他节点都被通知到了（配置改变后需要几秒钟的时间来同步通知到其他节点）。我们可以用以下命令来确认一下情况是否正如我们所说： $ redis-cli -p 7000 cluster nodes | grep slave | grep 3c3a0c74aae0b56170ccb03a76b60cfe7dc1912e f093c80dde814da99c5cf72a7dd01590792b783b 127.0.0.1:7006 slave 3c3a0c74aae0b56170ccb03a76b60cfe7dc1912e 0 1385543617702 3 connected 2938205e12de373867bf38f1ca29d31d0ddb3e46 127.0.0.1:7002 slave 3c3a0c74aae0b56170ccb03a76b60cfe7dc1912e 0 1385543617198 3 connected 节点 3c3a0c... 现在拥有了两个slave节点，分别是 7002 （之前就有的） 和 7006 （我们现在加上去的）。 移除一个节点 通过 redis-trib 提供的 del-node 命令可以移除一个slave节点: ./redis-trib del-node 127.0.0.1:7000 `<node-id>` 可以用集群中随便一个节点作为第1个参数。第2个参数是你要移除的节点ID. 你也可以用这条命令来移除master节点，但是 在移除master节点之前必须确保它是空的 。如果你要移除的master节点不是空的，你需要先用重新分片命令来把数据移到其他的节点。另外一个移除master节点的方法是先进行一次手动的失效备援，等它的slave被选举为新的master，并且它被作为一个新的slave被重新加到集群中来之后再移除它。很明显，如果你是想要减少集群中的master数量，这种做法没什么用。在这种情况下你还是需要用重新分片来移除数据后再移除它。 复制迁移 虽然在redis集群中通过以下命令是可以将一个slave节点重新配置为另外一个master的slave： CLUSTER REPLICATE <master-node-id> 然而有时候你不想找系统管理员来帮忙，又想自动的将一个复制节点从一个master下移动到另外一个master下。 这种情况下的复制节点的自动重配置被称为复制迁移。复制迁移可以提升系统的可靠性。 注意： 你可以从 Redis集群手册 中读到复制迁移的细节。但是在这篇教程里面我们只介绍大概的思路和究竟你可以从中得到什么好处。 在某种情况下，你想让集群的复制节点从一个master迁移到另一个master的原因可能是：集群的抗崩溃能力总是跟集群中master 拥有的平均slave数量成正比。 比如，如果一个集群中每个master只有一个slave，当master和slave都挂掉的时候这个集群就崩溃了。因为此时有一些哈希槽无法找到了。虽然网络分裂会把一堆节点从集群中孤立出来（这样你一下就会知道集群出问题了），但是其他的更常见的硬件或者软件的问题并不会在多台机器上同时发生，所以很可能在你的这个集群（平均每个master只有一个slave）有一个slave在早上4点挂掉，然后他的master在随后的早上6点挂掉。这样依然会导致集群崩溃。 我们可以通过给每个master都再多加一个slave节点来改进系统的可靠性，但是这样很昂贵。复制迁移允许只给某些master增加slave。比方说你的集群有20个节点，10个master，每个master都有1个slave。然后你增加3个slave到集群中并把他们分配给某几个master节点，这样某些master就会拥有多于1个slave。 当某个master失去了slave的时候，复制迁移可以将slave节点从拥有富余slave的master旗下迁移给没有slave的master。所以当你的slave在早上4点挂掉的时候，另一个slave会被迁移过来取代它的位置，这样当master节点在早上5点挂掉的时候，依然有一个slave可以被选举为master，集群依然可以正常运行。 所以简而言之你应该了解关于复制迁移的哪些方面？ 集群在迁移的时候会尝试去迁移拥有最多slave数量的master旗下的slave。 想利用复制迁移特性来增加系统的可用性，你只需要增加一些slave节点给单个master（哪个master节点并不重要）。 复制迁移是由配置项cluster-migration-barrier控制的： 你可以从Redis集群提供的默认配置文件 redis.conf 样例中了解到更多关于复制迁移的知识。 在Redis集群中升级节点 升级一个slave节点非常简单，因为你只需要停止节点，升级它，然后启动节点就好了。如果此时这个slave有客户端在连接也没关系，在这个slave停止的时候客户端会被重定向到别的slave去。 升级一个master就有点复杂了，推荐使用以下步骤升级master： 使用 CLUSTER FAILOVER 命令来使用手动失效备援，这样来把master切换为slave 等待master切换为slave完成 就像你升级普通slave一样升级它 如果你希望刚刚升级好的节点再次作为master在集群中运行，那就再触发一次手动失效备援让这个及节点重新成为master 照这些步骤你就可以一个一个的升级集群中的节点了。 迁移到redis集群 希望迁移到redis集群的用户可能只有一个master节点。他也可能正在使用一个现有的分片设置，该分片设置中的key已经被切分到N个节点去，这些节点是使用客户端自己实现的或者redis代理实现的一些分片算法。 在这些情况下迁移到redis集群都是很容易的，然而最终要的是如果应用使用了多key操作。以下是三种不同的情况： 不使用多key操作或者事务操作或者Lua脚本(涉及到多key)。对key的访问都是独立的。 使用多key操作，事务或者lua脚本(涉及到多key)，但是只作用于相同的哈希槽，即这些key都有一个{...}包裹起来的部分相同。比如以下的多key操作都是在同一个哈希标签下的：SUNION {user:1000}.foo {user:1000}.bar. 使用了多key操作，事务或者lua脚本(涉及到多key)，操作的key并没有相同的哈希标签。 Redis集群无法处理第3种情况：如果不想用多key操作就要修改一下应用，或者只在相同哈希槽的情况下使用 第一种和第二种情况是适用的，所以我们重点关注前两种情况。这两种情况是采用同一个方法解决的： 假设你已经有一些数据了，这些数据本分割到N个节点上，并且如果没有数据分片的话这个N=1。你可以采用以下步骤将你的数据迁移到redis集群上： 停止你的客户端。目前redis集群还没有动态迁移功能。 通过BGREWRITEAOF 命令生成一个AOF(append only file)文件。并等待该AOF文件生成完毕 把AOF文件命名为 aof-1 到 aof-N 。此时你可以停止你的旧实例 (在实际情况下一般会用相同的机器来跑新集群) 建一个有N个master节点但没有slave节点的集群。你可以吃些添加slave。确保你所有的节点都使用AOF。 停止所有节点把它们的aof文件替换成之前保存的aof文件，aof-1对应第1节点，aof-n对应第n个节点。 重启你的redis集群。 用 redis-trib 命令修复集群,让key可以被迁移过来 最后，用 redis-trib 来检查你的集群是否迁移成功。 重启客户端。 还有另外一种方法来把外部数据导入到redis集群里面，就是用 redis-trib import 命令。该命令可以把所有key从一个运行中的实例迁移到redis集群中（这些key会被从源实例中删除）。不过请注意如果源实例用的是2.8版本该操作可能会很慢，因为2.8版本还没有实现迁移连接的缓存，所以你可能需要升级源实例到3.x之后重启你的实例，之后再迁移。 上一篇 《HBase权威指南》读书笔记2 下一篇 《HBase权威指南》读书笔记3 顶 0 踩 0 我的同类文章 数据库 （20） http://blog.csdn.net 猜你在找 查看评论 * 以上用户言论只代表其个人观点，不代表CSDN网站的观点或立场

Recno:: 40
URL:: http://blog.csdn.net/nsrainbow/article/details/49175025

ParseText::
《HBase权威指南》读书笔记2 - 我可以接受失败，但我不能接受放弃。--迈克尔 乔丹 - 博客频道 - CSDN.NET 我可以接受失败，但我不能接受放弃。--迈克尔 乔丹 目录视图 摘要视图 订阅 学院APP首次下载，可得50C币！     欢迎来帮助开源“进步”     当讲师？爱学习？投票攒课吧     认识Atlassian Datacenter产品     深圳小伙伴的福利来啦 《HBase权威指南》读书笔记2 2015-10-16 16:45 566人阅读 评论 (0) 收藏 举报 分类： hadoop （16） 作者同类文章 X 版权声明：本文为博主原创文章，未经博主允许不得转载。 2.1快速启动指南 hbase-site.xml 里面的 hbase.rootdir 记得要修改否则默认是在 /tmp/hbase-${user.name} 下，如果服务器重启数据就有可能会丢失 2.2.1硬件 至少需要64位系统，至少要分配大于4G的内存给HBASE，所以机器要24G cpu要2个4核 slave硬盘要使用JBOD，master用RAID0+1 或者 RAID 1+0 ，但是磁盘要使用带RAID固件的磁盘，这样一旦硬件出错，RAID固件马上失效，这样datanode可以快速知道 磁盘用6~12 个1~2T的磁盘 以下是 拥有800TB 存储空间的集群中每个java进程的典型内存配置 进程 堆 描述 NameNode 8G 每100TB的数据或者是每100万个文件大约会占用NameNode 1G的内存 SecondaryNameNode 8G 在内存中重做主NameNode的EditLog，因此配置需要与NameNode一样 JobTracker 2G 适度 HBase Master 4G 轻量级负载，适度 DataNode 1G 适度 TaskTracker 1G 适度 HBase RegionServer 12G 大部分可用内存，同时为操作系统（缓冲区缓存）和任务进程留下足够的空间 Task Attempts 1G 剩余内存除以允许的任务最大的单机进程数 ZooKeeper 1G 适度 推荐配置：master机器要运行NameNode, SecondaryNameNode, JobTracker 和 HBaseMaster 推荐24G 内存， slave 要运行 DataNode, TaskTracker, 和 HBase RegionServer 推荐24G以上 节点类型 推荐 master 24G slave 24G以上 磁盘 节点类型 推荐 master 4X1T SATA, RAID 0+1 (也可以用2T) slave 6X1T SATA, JBOD 网络 节点类型 推荐 master 万兆以太网， 双PSU, 1U 或者2U slave 万兆以太网， 单PSU, 1U 或者2U 文件系统 使用ext3要注意以下几点优化 挂载文件系统的时候设置noatime属性来禁止记录文件访问时间戳以减少内核的管理开销 使用ext4时需要注意 关闭延迟分配（delayed allocation）采用延迟分配数据会保留在内存中，该特性增加了服务器崩溃的时候丢失数据的概率 如果出现Too Many open files错误就要增加Linux系统的文件打开数设置为超过10000 在HBase的日志第一行就打印了ulimit 信息 还需要调整 /etc/sysctl.conf 调整 fs.file-max的值 DataNode 处理线程数 DataNode 会设置服务时可处理的文件数上限，叫 xcievers <property> <name>dfs.datanode.max.xcievers</name> <value>4096</value> </property> 否则容易出现以下问题 SWAP swap在服务器上已经逐渐的被禁止了，因为一旦使用了swap会导致机器性能低下，甚至连ssh都连不上。如果使用了swap就容易出现 租约换效 。 服务器如果在交换过程中被唤醒，master认为region已经死了，region却不知道，并再次向master汇报信息，这时region会收到master的YouAreDeadException异常，并认为自己需要进入死亡状态，并自杀（称为 朱丽叶暂停） 可以通过 vm.swappiness=5 可以设置成0，以减少交换区的使用频率 Amazon S3 Amazon S3 支持Hadoop 的 两种模式 raw/native 和 block 分布式模式 conf/hbase-env.sh 中设置 HBASE_MANAGES_ZK 为 true，可以将zookeeper作为HBase的一部分启动（默认就是true） HBase读取哪份Hadoop集群配置是由 hbase-env.sh 中 HADOOP_CONF_DIR 决定的，并且记得把 HADOOP_CONF_DIR 加到 HBASE_CLASSPATH 中 HBase 配置文件的参数可以覆盖 HDFS 配置文件中的参数 客户端配置 客户端通过读取 hbase-site.xml 中的hbase.zookeeper.quorum参数来连接region server 上一篇 《HBase权威指南》读书笔记1 下一篇 Redis 集群教程 顶 0 踩 0 我的同类文章 hadoop （16） http://blog.csdn.net 猜你在找 查看评论 * 以上用户言论只代表其个人观点，不代表CSDN网站的观点或立场 个人资料 nsrainbow 访问： 423238次 积分： 6047 等级： 积分：6047 排名： 第2161名 原创： 177篇 转载： 81篇 译文： 4篇 评论： 97条 文章搜索 文章分类 css (12) FLEX (14) javascript (34) java技术 (65) PHP (31) 其他 (19) 数据库 (21) 服务器 (15) 进销存知识 (1) android (2) 并发架构 (1) hadoop (17) Alex的Hadoop菜鸟教程 (22) 文章存档 2015年12月 (2) 2015年11月 (3) 2015年10月 (13) 2015年09月 (3) 2015年07月 (1) 2015年03月 (3) 2015年02月 (5) 2015年01月 (4) 2014年12月 (5) 2014年11月 (4) 2014年10月 (2) 2014年09月 (9) 2014年08月 (3) 2014年07月 (9) 2014年06月 (10) 2014年05月 (9) 2014年04月 (1) 2014年03月 (1) 2014年01月 (2) 2013年12月 (1) 2013年11月 (5) 2013年10月 (8) 2013年09月 (3) 2013年08月 (7) 2013年07月 (4) 2013年06月 (9) 2013年05月 (11) 2013年04月 (1) 2013年02月 (1) 2013年01月 (1) 2012年12月 (6) 2012年11月 (1) 2012年09月 (1) 2012年06月 (1) 2012年03月 (4) 2012年02月 (1) 2011年12月 (1) 2011年10月 (1) 2011年09月 (5) 2011年08月 (13) 2011年06月 (1) 2010年10月 (2) 2009年11月 (1) 2009年05月 (1) 2009年04月 (1) 2009年02月 (1) 2008年08月 (5) 2008年07月 (6) 2008年06月 (4) 2008年05月 (15) 2008年04月 (28) 2008年03月 (18) 2008年02月 (3) 2008年01月 (5) 阅读排行 史上最简! PHP调试环境搭建-Zend Debugger安装 (35396) 推荐一个很好的 HttpClient 入门教程 (15433) 如何彻底删除node.js以及node.js安装教程(基于Centos其他linux版本可以类推 ) (14588) php 小数整理,向上取整,向下去整,四舍五入,丢弃小数部分,保留整数部分 (13254) flex中dictionary跟Object的区别与遍历 (8361) git for windows （又名 msysgit）如何记住用户名和密码 (7668) eclipse 自动换行wordwrap 插件 (6217) shiro 与 redis 结合的解决方案 shiro-redis (6187) Alex 的 Hadoop 菜鸟教程: 第19课 华丽的控制台 HUE 安装以及使用教程 (6057) sun.net.ftp.FtpClient 中文目录乱码问题解决 (5608) 评论排行 史上最简! PHP调试环境搭建-Zend Debugger安装 (10) sun.net.ftp.FtpClient 中文目录乱码问题解决 (8) 推荐一个很好的 HttpClient 入门教程 (6) shiro 与 redis 结合的解决方案 shiro-redis (6) Alex 的 Hadoop 菜鸟教程: 第4课 Hadoop 安装教程 - HA方式 (2台服务器) (6) Ext form 提交乱码问题解决经过 (5) Shiro的 rememberMe 功能使用指导(为什么rememberMe设置了没作用？) (5) 使用filter完成的漂亮的CSS渐变特效——blendtrans (4) 史上最简! 解决Optimizer与Debugger兼容性问题 (3) 精简出最小 jre (3) 推荐文章 *App竞品技术分析 （6）热修复 *架构设计：系统间通信（17）——服务治理与Dubbo 中篇（分析） *一款炫酷Loading动画--加载失败 *图解堆算法、链表、栈与队列（多图预警） *Android中ContentProvider组件详解 *Android平台Camera实时滤镜实现方法探讨(九)--磨皮算法探讨(一) 最新评论 Shiro的 rememberMe 功能使用指导(为什么rememberMe设置了没作用？) m421154133 : 谢谢前辈赐教 Shiro的 rememberMe 功能使用指导(为什么rememberMe设置了没作用？) LZ645596034 : 真是纠结·· git egit 如何 revert ZHOUCHAOQIANG : 为何这个插件，revert commit的时候，报failed Alex 的 Hadoop 菜鸟教程: 第10课 Hive 安装和使用教程 tbanhui : 大神：hive这样安装出来的好像不是集群啊，为啥在host1上建的表，在host2上的hive看不到... Alex 的 Hadoop 菜鸟教程: 第10课 Hive 安装和使用教程 tbanhui : 这里hive难道只是在host1上安装、使用？ Alex 的 Hadoop 菜鸟教程: 第10课 Hive 安装和使用教程 tbanhui : 这里hive难道只在集群中host1上安装？ Alex 的 Hadoop 菜鸟教程: 第4课 Hadoop 安装教程 - HA方式 (2台服务器) tbanhui : @tbanhui:jps的详细堆栈：8262 -- process information unav... Alex 的 Hadoop 菜鸟教程: 第4课 Hadoop 安装教程 - HA方式 (2台服务器) tbanhui : 老师、大神：最后看到2个datanode了，其它各个方面看来也正常。但jps输出是下面这样，按现在网... Alex 的 Hadoop 菜鸟教程: 第6课 Hbase 安装教程 tbanhui : 请问作者：最后hbase界面截图那里，既然之前配置了2个region server，为什么这个截图上... Alex 的 Hadoop 菜鸟教程: 第4课 Hadoop 安装教程 - HA方式 (2台服务器) tbanhui : @tbanhui:其他个方面看起来都没有问题，就是datanode这里有问题，请作者看到后说明下，谢...

Recno:: 41
URL:: http://blog.csdn.net/nsrainbow/article/details/49283731

ParseText::
《HBase权威指南》读书笔记3 - 我可以接受失败，但我不能接受放弃。--迈克尔 乔丹 - 博客频道 - CSDN.NET 我可以接受失败，但我不能接受放弃。--迈克尔 乔丹 目录视图 摘要视图 订阅 学院APP首次下载，可得50C币！     欢迎来帮助开源“进步”     当讲师？爱学习？投票攒课吧     认识Atlassian Datacenter产品     深圳小伙伴的福利来啦 《HBase权威指南》读书笔记3 2015-10-21 01:19 599人阅读 评论 (1) 收藏 举报 分类： hadoop （16） 作者同类文章 X 版权声明：本文为博主原创文章，未经博主允许不得转载。 第3章 客户端API：基础知识 所有修改都保证了行级别的原子性： 要么读到最新的修改，要么等待系统允许写入改行修改 用户要尽量使用批处理(batch)更新来减少单独操作同一行数据的次数 写操作中设计的列的数目并不会影响该行数据的原子性，行原子性会同时保护到所有列 创建HTable实例（ 指的是在java中新建该类 ），每个实例都要扫描.META. 表，以检查该表是否存在，推荐用户只创建一次HTable实例，而且是每个线程创建一个 如果用户需要多个HTable实例，建议使用HTablePool类（ 类似连接池 ） CRUD 还可以通过 KeyValue 来添加Put: Put add(KeyValue kv) getFamilyMap() 可以遍历Put实例中每一个可用的KeyValue实例 用 has(family, qualifier) 来检查是否存在特定的单元格，而不需要遍历整个集合 Put.getRow() 可以获取rowkey Put.heapSize() 可以计算当前Put实例所需的堆大小，既包含其中的数据，也包含内部数据结构所需的空间 KeyValue KeyValue提供了一些比较器（可能 可以进行服务器端排序？ ），列出可能用到的几种： KeyComparator   比较 getKey() KVComparator   RowComparator   比较 getRow() 客户端的写缓冲区 客户端有一个写缓冲区(默认大小2M)，收集一堆put，然后一次发给服务器 通过 table.setAutoFlush(false) 来激活缓冲区（只有在写非常频繁的情况下会用到） hbase-site.xml 中的 hbase.client.write.buffer来调整大小 以下情况会激发缓冲区的刷写 激活写缓冲区之后要手动调用 flushCommits()  缓冲区满了的时候也会自动调用flushCommits()方法 table.close()也会触发刷写 注意：如果只存储大单元格，缓冲区的作用就不大，因为大部分时间是传输时间而不是开关socket的时间 Put列表 可以传入一个列表的 Put void Put(List<Put> puts) 不过如果同时插入多个put，当其中某个出错的时候，前面几个会被正常插入，往后的put就都不会插入 而且客户端也不能保证服务器端的写入顺序 GET get.exist(Get get) 方法，在需要检查一个比较大的列的时候能节省网络传输 Result getRowBefore 可以获取某个行之前的行 批量处理操作 put，get， delete 列表其实都是通过 batch() 方法实现的 直接使用batch(List<Action> actions, Object[] results, ... ) 可以同时传入3种实例中的任意一种 batch并不使用写缓冲区 注意：不可以把对同一行的put和delete放在一个批量处理里面，因为批量处理的顺序不可控 两种批量查询的区别 用batch(List<Row> actions, Object[] results)批量查 和 Object[] batch(List<Row> actions) 的区别是  batch(List<Row> actions, Object[] results)可以返回部分结果 Object[] batch(List<Row> actions) 一旦出错，一条都没有 行锁 尽量不要使用行锁，如果必须使用，请一定节约占用锁的时间 扫描 通过 hbase-site.xml 中的 hbase.regionserver.lease.period 设定 ResultScanner 的租约 由于每次next()都要发一次请求，所以扫描器也有缓存，叫scanner caching ，默认是关闭的 通过 setBatch(5) 可以每次 next() 返回5列，注意是 列！ 各种特性 HRegionLocation getRegionLocation(row) Map<HRegionInfo, HServerAddress> getRegionInfo() 这些方法可以获取某一行数据的具体位置，或者所在的region信息 上一篇 Redis 集群教程 下一篇 《HBase权威指南》读书笔记4 顶 0 踩 0 我的同类文章 hadoop （16） http://blog.csdn.net 猜你在找 查看评论 * 以上用户言论只代表其个人观点，不代表CSDN网站的观点或立场 个人资料 nsrainbow 访问： 423242次 积分： 6047 等级： 积分：6047 排名： 第2161名 原创： 177篇 转载： 81篇 译文： 4篇 评论： 97条 文章搜索 文章分类 css (12) FLEX (14) javascript (34) java技术 (65) PHP (31) 其他 (19) 数据库 (21) 服务器 (15) 进销存知识 (1) android (2) 并发架构 (1) hadoop (17) Alex的Hadoop菜鸟教程 (22) 文章存档 2015年12月 (2) 2015年11月 (3) 2015年10月 (13) 2015年09月 (3) 2015年07月 (1) 2015年03月 (3) 2015年02月 (5) 2015年01月 (4) 2014年12月 (5) 2014年11月 (4) 2014年10月 (2) 2014年09月 (9) 2014年08月 (3) 2014年07月 (9) 2014年06月 (10) 2014年05月 (9) 2014年04月 (1) 2014年03月 (1) 2014年01月 (2) 2013年12月 (1) 2013年11月 (5) 2013年10月 (8) 2013年09月 (3) 2013年08月 (7) 2013年07月 (4) 2013年06月 (9) 2013年05月 (11) 2013年04月 (1) 2013年02月 (1) 2013年01月 (1) 2012年12月 (6) 2012年11月 (1) 2012年09月 (1) 2012年06月 (1) 2012年03月 (4) 2012年02月 (1) 2011年12月 (1) 2011年10月 (1) 2011年09月 (5) 2011年08月 (13) 2011年06月 (1) 2010年10月 (2) 2009年11月 (1) 2009年05月 (1) 2009年04月 (1) 2009年02月 (1) 2008年08月 (5) 2008年07月 (6) 2008年06月 (4) 2008年05月 (15) 2008年04月 (28) 2008年03月 (18) 2008年02月 (3) 2008年01月 (5) 阅读排行 史上最简! PHP调试环境搭建-Zend Debugger安装 (35396) 推荐一个很好的 HttpClient 入门教程 (15433) 如何彻底删除node.js以及node.js安装教程(基于Centos其他linux版本可以类推 ) (14588) php 小数整理,向上取整,向下去整,四舍五入,丢弃小数部分,保留整数部分 (13254) flex中dictionary跟Object的区别与遍历 (8361) git for windows （又名 msysgit）如何记住用户名和密码 (7668) eclipse 自动换行wordwrap 插件 (6217) shiro 与 redis 结合的解决方案 shiro-redis (6187) Alex 的 Hadoop 菜鸟教程: 第19课 华丽的控制台 HUE 安装以及使用教程 (6057) sun.net.ftp.FtpClient 中文目录乱码问题解决 (5608) 评论排行 史上最简! PHP调试环境搭建-Zend Debugger安装 (10) sun.net.ftp.FtpClient 中文目录乱码问题解决 (8) 推荐一个很好的 HttpClient 入门教程 (6) shiro 与 redis 结合的解决方案 shiro-redis (6) Alex 的 Hadoop 菜鸟教程: 第4课 Hadoop 安装教程 - HA方式 (2台服务器) (6) Ext form 提交乱码问题解决经过 (5) Shiro的 rememberMe 功能使用指导(为什么rememberMe设置了没作用？) (5) 使用filter完成的漂亮的CSS渐变特效——blendtrans (4) 史上最简! 解决Optimizer与Debugger兼容性问题 (3) 精简出最小 jre (3) 推荐文章 *App竞品技术分析 （6）热修复 *架构设计：系统间通信（17）——服务治理与Dubbo 中篇（分析） *一款炫酷Loading动画--加载失败 *图解堆算法、链表、栈与队列（多图预警） *Android中ContentProvider组件详解 *Android平台Camera实时滤镜实现方法探讨(九)--磨皮算法探讨(一) 最新评论 Shiro的 rememberMe 功能使用指导(为什么rememberMe设置了没作用？) m421154133 : 谢谢前辈赐教 Shiro的 rememberMe 功能使用指导(为什么rememberMe设置了没作用？) LZ645596034 : 真是纠结·· git egit 如何 revert ZHOUCHAOQIANG : 为何这个插件，revert commit的时候，报failed Alex 的 Hadoop 菜鸟教程: 第10课 Hive 安装和使用教程 tbanhui : 大神：hive这样安装出来的好像不是集群啊，为啥在host1上建的表，在host2上的hive看不到... Alex 的 Hadoop 菜鸟教程: 第10课 Hive 安装和使用教程 tbanhui : 这里hive难道只是在host1上安装、使用？ Alex 的 Hadoop 菜鸟教程: 第10课 Hive 安装和使用教程 tbanhui : 这里hive难道只在集群中host1上安装？ Alex 的 Hadoop 菜鸟教程: 第4课 Hadoop 安装教程 - HA方式 (2台服务器) tbanhui : @tbanhui:jps的详细堆栈：8262 -- process information unav... Alex 的 Hadoop 菜鸟教程: 第4课 Hadoop 安装教程 - HA方式 (2台服务器) tbanhui : 老师、大神：最后看到2个datanode了，其它各个方面看来也正常。但jps输出是下面这样，按现在网... Alex 的 Hadoop 菜鸟教程: 第6课 Hbase 安装教程 tbanhui : 请问作者：最后hbase界面截图那里，既然之前配置了2个region server，为什么这个截图上... Alex 的 Hadoop 菜鸟教程: 第4课 Hadoop 安装教程 - HA方式 (2台服务器) tbanhui : @tbanhui:其他个方面看起来都没有问题，就是datanode这里有问题，请作者看到后说明下，谢...

Recno:: 42
URL:: http://blog.csdn.net/nsrainbow/article/details/49332811

ParseText::
《HBase权威指南》读书笔记4 - 我可以接受失败，但我不能接受放弃。--迈克尔 乔丹 - 博客频道 - CSDN.NET 我可以接受失败，但我不能接受放弃。--迈克尔 乔丹 目录视图 摘要视图 订阅 学院APP首次下载，可得50C币！     欢迎来帮助开源“进步”     当讲师？爱学习？投票攒课吧     认识Atlassian Datacenter产品     深圳小伙伴的福利来啦 《HBase权威指南》读书笔记4 2015-10-22 22:50 674人阅读 评论 (0) 收藏 举报 分类： hadoop （16） 作者同类文章 X 版权声明：本文为博主原创文章，未经博主允许不得转载。 第四章 客户端API:高级特性 4.1过滤器 所有过滤器都在服务器端生效，叫 谓词下推（predicate push down） 继承自compareFilter的Filter比较特殊，多了一个 compare() 方法 HBase内置比较器comparator 比较器 描述 BinaryComparator 使用Bytes.compareTo() 比较当前值与阀值 BinaryPrefixComparator 与上面的相似，使用Bytes.compareTo()进行匹配，但是是从左端开始前缀匹配 NullComparator 不做匹配，只判断当前值是不是Null BitComparator 通过BitwiseOp类提供的按位与(AND)、或(OR)、异或(XOR)操作执行位数级比较 RegexStringComparator 根据正则表达式匹配 SubstringComparator 通过contains()操作匹配字符串 后面的三种比较器 BitComparator, RegexStringComparator, SubstringComparator 只能与 EQUAL, NOT_EQUAL 运算符搭配使用。因为这些比较器匹配完只返回0或者1 行过滤器(row filter) 行过滤器用于过滤行键(rowkey) 思考：可以用行过滤器来做一个简易的查询客户端（类似HUE） 单列值过滤器(SingleColumnValueFilter) 指定某列对其进行值比较（使用频率最高的filter） setFilterIfMissing(true)可以将不存在该列的行过滤掉，否则如果该列不存在也被放到查询结果中了 单列排除过滤器(SingleColumnValueExcludeFilter) 继承自 SingleColumnValueFilter 唯一的区别是查询结果不包含查询列 前缀过滤器(PrefixFilter) 所有与前缀匹配的行都会返回到客户端，可以看做是某种特殊的行过滤器，但是速度更快 分页过滤器(PageFilter) 可以设定pagesize，但是由于是分布式系统，所以可能返回的比需要的多。 客户端代码记录本次扫描的最后一行，下次获取记录的时候可以把这个行设定为本次扫描的起始行，并同时保留相同的过滤器属性，然后依次迭代。（记住最后一行这个动作要自己实现，具体可见实例代码，在此就不贴上来了） 技巧：因为起始行会被包含在本次扫描中，这样会造成，改行不仅在上次循环中出现，在本次循环中也要出现，所以起始行要加一个0，这样这行就不会出现在本次扫描中 首次行键过滤器（FirstKeyOnlyFilter） 只比较一行中的第一列，看起来没什么用，不过可以做 行数统计用 FilterList 可以组合多个Filter 操作 描述 MUST_PASS_ALL 全部通过才返回 MUST_PASS_ONE 只要有一个通过就返回 而且过滤器执行的顺序就是你传入list的顺序 自定义过滤器 可以实现Filter接口或者继承 FilterBase 计数器 计数器其实也是一个列，只是通过 incr 和 get_incr  可以存入数值型和获取成数值型显示，否则都是二进制，无法实现+1递增 单计数器自增 table.incrementColumnValue() 多计数器自增 Increment i = new Increment(); i.addColumn(....); 协处理器 协处理器就是一个小型的MapReduce框架，增加在服务端的计算功能，让返回的结果集更小 用户需要自己编写java类并打包成jar来实现协处理器 与过滤器不同的是，协处理器可以被动态加载 HBase的授权认证和审查就是基于协处理器的 协处理器分为两大类 observer 和 endpoint observer 跟触发器类似：回调函数（hook）在某些特定的事件被触发的时候执行 协处理器提供了以下接口 RegionObserver 处理数据修改事件 MasterObserver 管理DDL级的操作 WALObserver 提供控制WAL的钩子函数 endpoint 类似存储过程。endpoint 跟 observer 可以结合使用 所有协处理器都可以被链接起来使用 Coprocessor接口 所有协处理器的共同接口。 有两个枚举类 Priority 和 State Coprocessor.Priority 值 说明 SYSTEM 高优先级 USER 定义其他的协处理器，按顺序执行 协处理器有一个序号，用来定义同一优先级的时候的执行顺序，不过总体来说意义不大 CoprocessorEnviroment用来在协处理器的生命周期中保持其状态，提供了一些有用的方法 getHBaseVersion getVersion 获取Coprocessor接口的版本 getInstance() 返回加载的协处理器实例 getPriority() getLoadSequence() 获取序号 getTable( tableName) 返回HTable实例 协处理器应该用getTable方法获取HTable类，这样更安全，因为这个方法会加一些默认的安全措施，比如，协处理器不可以对一行数据加锁 Coprecessor.State 值 说明 UNINSTALLED 最初的状态，没有环境，也没有初始化 INSTALLED 实例装载了它的环境参数 STARTING 即将要开始工作，start()方法即将被调用 ACTIVE 一旦start()方法被调用，当前状态就是active STOPPING stop()方法被调用之前的状态 STOPPED 一旦stop()方法将控制权交给框架，状态为stopped CoprocessorHost 类，维护所有协处理器和他们专用的环境 当region被打开的时候，协处理器会被加载 注意：用户不能指定那张表或者哪个region会被加载 如果用表描述符中加载就可以指定表格 HTablePool 相当于传统数据库的连接池，可以不断的复用这个实例 使用HTablePool来获取HTable 实例 Configuration conf = HBaseConfiguration.create(); HTablePool pool = new HTablePool(conf,5); HTableInterface[] tables = new HTableInterface[10]; for(int n = 0; n<10; n++){ tables[n] = pool.getTable("testtable"); } 如果用户要显示的使用某个连接 Configuration newConfig = new Configuration(originalConf); HConnection connection = HConnectionManager.getConnection(newConfig); //.......to something HConnectionManager.deleteConnection(newConfig, true); 上一篇 《HBase权威指南》读书笔记3 下一篇 《HBase权威指南》读书笔记5:第五章 客户端API: 管理功能 顶 0 踩 0 我的同类文章 hadoop （16） http://blog.csdn.net 猜你在找 查看评论 * 以上用户言论只代表其个人观点，不代表CSDN网站的观点或立场 个人资料 nsrainbow 访问： 423232次 积分： 6047 等级： 积分：6047 排名： 第2161名 原创： 177篇 转载： 81篇 译文： 4篇 评论： 97条 文章搜索 文章分类 css (12) FLEX (14) javascript (34) java技术 (65) PHP (31) 其他 (19) 数据库 (21) 服务器 (15) 进销存知识 (1) android (2) 并发架构 (1) hadoop (17) Alex的Hadoop菜鸟教程 (22) 文章存档 2015年12月 (2) 2015年11月 (3) 2015年10月 (13) 2015年09月 (3) 2015年07月 (1) 2015年03月 (3) 2015年02月 (5) 2015年01月 (4) 2014年12月 (5) 2014年11月 (4) 2014年10月 (2) 2014年09月 (9) 2014年08月 (3) 2014年07月 (9) 2014年06月 (10) 2014年05月 (9) 2014年04月 (1) 2014年03月 (1) 2014年01月 (2) 2013年12月 (1) 2013年11月 (5) 2013年10月 (8) 2013年09月 (3) 2013年08月 (7) 2013年07月 (4) 2013年06月 (9) 2013年05月 (11) 2013年04月 (1) 2013年02月 (1) 2013年01月 (1) 2012年12月 (6) 2012年11月 (1) 2012年09月 (1) 2012年06月 (1) 2012年03月 (4) 2012年02月 (1) 2011年12月 (1) 2011年10月 (1) 2011年09月 (5) 2011年08月 (13) 2011年06月 (1) 2010年10月 (2) 2009年11月 (1) 2009年05月 (1) 2009年04月 (1) 2009年02月 (1) 2008年08月 (5) 2008年07月 (6) 2008年06月 (4) 2008年05月 (15) 2008年04月 (28) 2008年03月 (18) 2008年02月 (3) 2008年01月 (5) 阅读排行 史上最简! PHP调试环境搭建-Zend Debugger安装 (35396) 推荐一个很好的 HttpClient 入门教程 (15433) 如何彻底删除node.js以及node.js安装教程(基于Centos其他linux版本可以类推 ) (14588) php 小数整理,向上取整,向下去整,四舍五入,丢弃小数部分,保留整数部分 (13254) flex中dictionary跟Object的区别与遍历 (8361) git for windows （又名 msysgit）如何记住用户名和密码 (7668) eclipse 自动换行wordwrap 插件 (6217) shiro 与 redis 结合的解决方案 shiro-redis (6187) Alex 的 Hadoop 菜鸟教程: 第19课 华丽的控制台 HUE 安装以及使用教程 (6057) sun.net.ftp.FtpClient 中文目录乱码问题解决 (5608) 评论排行 史上最简! PHP调试环境搭建-Zend Debugger安装 (10) sun.net.ftp.FtpClient 中文目录乱码问题解决 (8) 推荐一个很好的 HttpClient 入门教程 (6) shiro 与 redis 结合的解决方案 shiro-redis (6) Alex 的 Hadoop 菜鸟教程: 第4课 Hadoop 安装教程 - HA方式 (2台服务器) (6) Ext form 提交乱码问题解决经过 (5) Shiro的 rememberMe 功能使用指导(为什么rememberMe设置了没作用？) (5) 使用filter完成的漂亮的CSS渐变特效——blendtrans (4) 史上最简! 解决Optimizer与Debugger兼容性问题 (3) 精简出最小 jre (3) 推荐文章 *App竞品技术分析 （6）热修复 *架构设计：系统间通信（17）——服务治理与Dubbo 中篇（分析） *一款炫酷Loading动画--加载失败 *图解堆算法、链表、栈与队列（多图预警） *Android中ContentProvider组件详解 *Android平台Camera实时滤镜实现方法探讨(九)--磨皮算法探讨(一) 最新评论 Shiro的 rememberMe 功能使用指导(为什么rememberMe设置了没作用？) m421154133 : 谢谢前辈赐教 Shiro的 rememberMe 功能使用指导(为什么rememberMe设置了没作用？) LZ645596034 : 真是纠结·· git egit 如何 revert ZHOUCHAOQIANG : 为何这个插件，revert commit的时候，报failed Alex 的 Hadoop 菜鸟教程: 第10课 Hive 安装和使用教程 tbanhui : 大神：hive这样安装出来的好像不是集群啊，为啥在host1上建的表，在host2上的hive看不到... Alex 的 Hadoop 菜鸟教程: 第10课 Hive 安装和使用教程 tbanhui : 这里hive难道只是在host1上安装、使用？ Alex 的 Hadoop 菜鸟教程: 第10课 Hive 安装和使用教程 tbanhui : 这里hive难道只在集群中host1上安装？ Alex 的 Hadoop 菜鸟教程: 第4课 Hadoop 安装教程 - HA方式 (2台服务器) tbanhui : @tbanhui:jps的详细堆栈：8262 -- process information unav... Alex 的 Hadoop 菜鸟教程: 第4课 Hadoop 安装教程 - HA方式 (2台服务器) tbanhui : 老师、大神：最后看到2个datanode了，其它各个方面看来也正常。但jps输出是下面这样，按现在网... Alex 的 Hadoop 菜鸟教程: 第6课 Hbase 安装教程 tbanhui : 请问作者：最后hbase界面截图那里，既然之前配置了2个region server，为什么这个截图上... Alex 的 Hadoop 菜鸟教程: 第4课 Hadoop 安装教程 - HA方式 (2台服务器) tbanhui : @tbanhui:其他个方面看起来都没有问题，就是datanode这里有问题，请作者看到后说明下，谢...

Recno:: 43
URL:: http://blog.csdn.net/nsrainbow/article/details/49340235

ParseText::
《HBase权威指南》读书笔记5:第五章 客户端API: 管理功能 - 我可以接受失败，但我不能接受放弃。--迈克尔 乔丹 - 博客频道 - CSDN.NET 我可以接受失败，但我不能接受放弃。--迈克尔 乔丹 目录视图 摘要视图 订阅 学院APP首次下载，可得50C币！     欢迎来帮助开源“进步”     当讲师？爱学习？投票攒课吧     认识Atlassian Datacenter产品     深圳小伙伴的福利来啦 《HBase权威指南》读书笔记5:第五章 客户端API: 管理功能 标签： hadoop hbase 2015-10-23 00:11 770人阅读 评论 (0) 收藏 举报 分类： hadoop （16） 作者同类文章 X 版权声明：本文为博主原创文章，未经博主允许不得转载。 类似传统数据库中的DDL 和 DML 模式定义 表 表描述符 HTableDescriptor Writable 和无参数的构造函数 大部分类都有一个无参数的构造函数，这些类都实现了Hadoop 的 Writable接口。 任意不相交系统间的远程通信： 例如客户端与服务端或者服务端之间彼此通信，都使用了Hadoop RPC框架。框架中需要远程方法的参数都实现 Writable接口，进而能够序列化对象并进行传输。writable接口有两个实现方法 void write(DataOutput out) void readFields(Datainput in) 数据接收服务器先读取元数据信息，并创建类的无参数实例，然后调用readFields方法将字节流中的信息读取到对应对象的字段中。 所以如果用户开发并扩展了HBase的基础实现，例如，过滤器和协处理器，则必须 在RPC两端都必须可用 实现writable接口 拥有无参数的构造函数 没有任何参数的构造函数仅仅是为了反序列化，并且不应该被直接使用 列族 HTableDescriptor 虽然名字叫 HTable但是其实是针对列族的 压缩 HBase支持插件式的压缩算法，这个功能允许用户选择合适的压缩算法 支持的压缩算法 算法 描述 NONE 不压缩（默认） GZ 使用Java提供的或者本地库的 GZIP LZO 启用LZO压缩，需要安装LZO的类库  SNAPPY 启用SNAPPY压缩，需要独立安装 压缩类型是 Compression.Algorithm枚举 压缩分为 一般压缩 和 合并压缩 块大小 默认为64KB 列族的块，或者说HFile的块不同HDFS层面的块。HDFS中的块默认是64MB, HBase中的HFile的块大小默认是64KB in-memory 默认为false。如果为true，则块数据会以较高优先级被加载到内存中 ，除非堆压力大，这个时候才会强制从内存卸载这部分数据 这个参数非常适合数据量小的列族，例如，保存登录账号和密码的用户表 布隆过滤器 是HBase中的高级功能，能够减少特定访问模式下的查询时间，但是由于这种模式增加了内存和存储的负担，这个模式默认为关闭。 复制范围 复制（replication）提供了跨集群的同步的功能。replication scope默认为0，意味着是关闭的。setScope(1)可以开启该功能 HBaseAdmin HBaseAdmin实例的生命周期不宜太长。 getMaster() 可以获取HMasterInterface 接口的RPC代理实例。除非用户确定自身的调用时安全的，否则不要显式调用 getMaster。 另一种高级建表的方式是 伴随建表操作进行预分区 createTableAsync 是异步建表命令 关于异步命令：其实大多数命令都是异步的，同步的命令也只是对异步模式的封装，增加了不断检查这个任务是否已经完成的循环操作，例如 createTable 方法其实包装了 createTableAsync 集群管理 checkHBaseAvailable(conf) 可以验证客户端能否与远程HBase集群进行通信 flush(tableNameOrRegionName) 可以在memstore 达到 memstore flush size 之前显示的让数据flush到磁盘上 compact   让表或者region合并 majorCompact  会迭代这张表的所有region，并顺序调用合并操作 split 可以提供 splitPoint 进行制定键的拆分 assign  和 unassign 可以控制region的上线和下线 move 可以移动region balanceSwitch 可以控制是否开启负载均衡算法 balancer 主动运行负载均衡 shutdown stopMaster stopRegionServer 可以关闭集群，master，某个region server 上一篇 《HBase权威指南》读书笔记4 下一篇 《HBase权威指南》读书笔记6:第六章 可用客户端 顶 0 踩 0 我的同类文章 hadoop （16） http://blog.csdn.net 猜你在找 查看评论 * 以上用户言论只代表其个人观点，不代表CSDN网站的观点或立场 个人资料 nsrainbow 访问： 423247次 积分： 6048 等级： 积分：6048 排名： 第2161名 原创： 177篇 转载： 81篇 译文： 4篇 评论： 97条 文章搜索 文章分类 css (12) FLEX (14) javascript (34) java技术 (65) PHP (31) 其他 (19) 数据库 (21) 服务器 (15) 进销存知识 (1) android (2) 并发架构 (1) hadoop (17) Alex的Hadoop菜鸟教程 (22) 文章存档 2015年12月 (2) 2015年11月 (3) 2015年10月 (13) 2015年09月 (3) 2015年07月 (1) 2015年03月 (3) 2015年02月 (5) 2015年01月 (4) 2014年12月 (5) 2014年11月 (4) 2014年10月 (2) 2014年09月 (9) 2014年08月 (3) 2014年07月 (9) 2014年06月 (10) 2014年05月 (9) 2014年04月 (1) 2014年03月 (1) 2014年01月 (2) 2013年12月 (1) 2013年11月 (5) 2013年10月 (8) 2013年09月 (3) 2013年08月 (7) 2013年07月 (4) 2013年06月 (9) 2013年05月 (11) 2013年04月 (1) 2013年02月 (1) 2013年01月 (1) 2012年12月 (6) 2012年11月 (1) 2012年09月 (1) 2012年06月 (1) 2012年03月 (4) 2012年02月 (1) 2011年12月 (1) 2011年10月 (1) 2011年09月 (5) 2011年08月 (13) 2011年06月 (1) 2010年10月 (2) 2009年11月 (1) 2009年05月 (1) 2009年04月 (1) 2009年02月 (1) 2008年08月 (5) 2008年07月 (6) 2008年06月 (4) 2008年05月 (15) 2008年04月 (28) 2008年03月 (18) 2008年02月 (3) 2008年01月 (5) 阅读排行 史上最简! PHP调试环境搭建-Zend Debugger安装 (35396) 推荐一个很好的 HttpClient 入门教程 (15433) 如何彻底删除node.js以及node.js安装教程(基于Centos其他linux版本可以类推 ) (14588) php 小数整理,向上取整,向下去整,四舍五入,丢弃小数部分,保留整数部分 (13254) flex中dictionary跟Object的区别与遍历 (8361) git for windows （又名 msysgit）如何记住用户名和密码 (7668) eclipse 自动换行wordwrap 插件 (6217) shiro 与 redis 结合的解决方案 shiro-redis (6187) Alex 的 Hadoop 菜鸟教程: 第19课 华丽的控制台 HUE 安装以及使用教程 (6057) sun.net.ftp.FtpClient 中文目录乱码问题解决 (5608) 评论排行 史上最简! PHP调试环境搭建-Zend Debugger安装 (10) sun.net.ftp.FtpClient 中文目录乱码问题解决 (8) 推荐一个很好的 HttpClient 入门教程 (6) shiro 与 redis 结合的解决方案 shiro-redis (6) Alex 的 Hadoop 菜鸟教程: 第4课 Hadoop 安装教程 - HA方式 (2台服务器) (6) Ext form 提交乱码问题解决经过 (5) Shiro的 rememberMe 功能使用指导(为什么rememberMe设置了没作用？) (5) 使用filter完成的漂亮的CSS渐变特效——blendtrans (4) 史上最简! 解决Optimizer与Debugger兼容性问题 (3) 精简出最小 jre (3) 推荐文章 *App竞品技术分析 （6）热修复 *架构设计：系统间通信（17）——服务治理与Dubbo 中篇（分析） *一款炫酷Loading动画--加载失败 *图解堆算法、链表、栈与队列（多图预警） *Android中ContentProvider组件详解 *Android平台Camera实时滤镜实现方法探讨(九)--磨皮算法探讨(一) 最新评论 Shiro的 rememberMe 功能使用指导(为什么rememberMe设置了没作用？) m421154133 : 谢谢前辈赐教 Shiro的 rememberMe 功能使用指导(为什么rememberMe设置了没作用？) LZ645596034 : 真是纠结·· git egit 如何 revert ZHOUCHAOQIANG : 为何这个插件，revert commit的时候，报failed Alex 的 Hadoop 菜鸟教程: 第10课 Hive 安装和使用教程 tbanhui : 大神：hive这样安装出来的好像不是集群啊，为啥在host1上建的表，在host2上的hive看不到... Alex 的 Hadoop 菜鸟教程: 第10课 Hive 安装和使用教程 tbanhui : 这里hive难道只是在host1上安装、使用？ Alex 的 Hadoop 菜鸟教程: 第10课 Hive 安装和使用教程 tbanhui : 这里hive难道只在集群中host1上安装？ Alex 的 Hadoop 菜鸟教程: 第4课 Hadoop 安装教程 - HA方式 (2台服务器) tbanhui : @tbanhui:jps的详细堆栈：8262 -- process information unav... Alex 的 Hadoop 菜鸟教程: 第4课 Hadoop 安装教程 - HA方式 (2台服务器) tbanhui : 老师、大神：最后看到2个datanode了，其它各个方面看来也正常。但jps输出是下面这样，按现在网... Alex 的 Hadoop 菜鸟教程: 第6课 Hbase 安装教程 tbanhui : 请问作者：最后hbase界面截图那里，既然之前配置了2个region server，为什么这个截图上... Alex 的 Hadoop 菜鸟教程: 第4课 Hadoop 安装教程 - HA方式 (2台服务器) tbanhui : @tbanhui:其他个方面看起来都没有问题，就是datanode这里有问题，请作者看到后说明下，谢...

Recno:: 44
URL:: http://blog.csdn.net/nsrainbow/article/details/49341433

ParseText::
《HBase权威指南》读书笔记6:第六章 可用客户端 - 我可以接受失败，但我不能接受放弃。--迈克尔 乔丹 - 博客频道 - CSDN.NET 我可以接受失败，但我不能接受放弃。--迈克尔 乔丹 目录视图 摘要视图 订阅 学院APP首次下载，可得50C币！     欢迎来帮助开源“进步”     当讲师？爱学习？投票攒课吧     认识Atlassian Datacenter产品     深圳小伙伴的福利来啦 《HBase权威指南》读书笔记6:第六章 可用客户端 标签： hbase hadoop 2015-10-23 00:41 805人阅读 评论 (0) 收藏 举报 分类： hadoop （16） 作者同类文章 X 版权声明：本文为博主原创文章，未经博主允许不得转载。 REST, Thrift, 和 Avro REST 和 SOAP都会带来巨大的网络开销，于是很多公司开发自己的RPC层 google  开发了 Protocol Buffer 不过由于最初的实现并没有发布 facebook 开发了一套类似的叫 Thrift Hadoop 开发了Apache Avro 其他客户端 JRuby : Hbase shell HBql: 在HBase 基础上提供了SQL语法访问 HBase-DSL PyHBase 批处理客户端 MapReduce : 面向PB级别的数据 Hive Pig Cascading Shell hbase shell可以进入调试模式，可以通过启动参数或者直接执行 debug命令来切换状态 由于Hbase shell 基于Ruby ， 所以可以在 home目录建立 .irbc 文件，这样shell启动的时候会自动读取，就会开启命令行历史记录和自动补全 基于web的UI master: 60010 region: 60030 Regions in Transition 处于打开，关闭和拆分中的region都会出现在这一队列中，操作完成后，将region从这个列表中移除 zookeeper页面 通过表的zookeeper页面可以展示在配置文件系统中的根目录 LogLevel 可以设置或者获取类的日志级别，比如输入 org.apache.hadoop.hbase 后点击 Get Log Level 上一篇 《HBase权威指南》读书笔记5:第五章 客户端API: 管理功能 下一篇 《HBase权威指南》读书笔记7:第七章 与MapReduce 集成 顶 0 踩 0 我的同类文章 hadoop （16） http://blog.csdn.net 猜你在找 查看评论 * 以上用户言论只代表其个人观点，不代表CSDN网站的观点或立场 个人资料 nsrainbow 访问： 423243次 积分： 6048 等级： 积分：6048 排名： 第2161名 原创： 177篇 转载： 81篇 译文： 4篇 评论： 97条 文章搜索 文章分类 css (12) FLEX (14) javascript (34) java技术 (65) PHP (31) 其他 (19) 数据库 (21) 服务器 (15) 进销存知识 (1) android (2) 并发架构 (1) hadoop (17) Alex的Hadoop菜鸟教程 (22) 文章存档 2015年12月 (2) 2015年11月 (3) 2015年10月 (13) 2015年09月 (3) 2015年07月 (1) 2015年03月 (3) 2015年02月 (5) 2015年01月 (4) 2014年12月 (5) 2014年11月 (4) 2014年10月 (2) 2014年09月 (9) 2014年08月 (3) 2014年07月 (9) 2014年06月 (10) 2014年05月 (9) 2014年04月 (1) 2014年03月 (1) 2014年01月 (2) 2013年12月 (1) 2013年11月 (5) 2013年10月 (8) 2013年09月 (3) 2013年08月 (7) 2013年07月 (4) 2013年06月 (9) 2013年05月 (11) 2013年04月 (1) 2013年02月 (1) 2013年01月 (1) 2012年12月 (6) 2012年11月 (1) 2012年09月 (1) 2012年06月 (1) 2012年03月 (4) 2012年02月 (1) 2011年12月 (1) 2011年10月 (1) 2011年09月 (5) 2011年08月 (13) 2011年06月 (1) 2010年10月 (2) 2009年11月 (1) 2009年05月 (1) 2009年04月 (1) 2009年02月 (1) 2008年08月 (5) 2008年07月 (6) 2008年06月 (4) 2008年05月 (15) 2008年04月 (28) 2008年03月 (18) 2008年02月 (3) 2008年01月 (5) 阅读排行 史上最简! PHP调试环境搭建-Zend Debugger安装 (35396) 推荐一个很好的 HttpClient 入门教程 (15433) 如何彻底删除node.js以及node.js安装教程(基于Centos其他linux版本可以类推 ) (14588) php 小数整理,向上取整,向下去整,四舍五入,丢弃小数部分,保留整数部分 (13254) flex中dictionary跟Object的区别与遍历 (8361) git for windows （又名 msysgit）如何记住用户名和密码 (7668) eclipse 自动换行wordwrap 插件 (6217) shiro 与 redis 结合的解决方案 shiro-redis (6187) Alex 的 Hadoop 菜鸟教程: 第19课 华丽的控制台 HUE 安装以及使用教程 (6057) sun.net.ftp.FtpClient 中文目录乱码问题解决 (5608) 评论排行 史上最简! PHP调试环境搭建-Zend Debugger安装 (10) sun.net.ftp.FtpClient 中文目录乱码问题解决 (8) 推荐一个很好的 HttpClient 入门教程 (6) shiro 与 redis 结合的解决方案 shiro-redis (6) Alex 的 Hadoop 菜鸟教程: 第4课 Hadoop 安装教程 - HA方式 (2台服务器) (6) Ext form 提交乱码问题解决经过 (5) Shiro的 rememberMe 功能使用指导(为什么rememberMe设置了没作用？) (5) 使用filter完成的漂亮的CSS渐变特效——blendtrans (4) 史上最简! 解决Optimizer与Debugger兼容性问题 (3) 精简出最小 jre (3) 推荐文章 *App竞品技术分析 （6）热修复 *架构设计：系统间通信（17）——服务治理与Dubbo 中篇（分析） *一款炫酷Loading动画--加载失败 *图解堆算法、链表、栈与队列（多图预警） *Android中ContentProvider组件详解 *Android平台Camera实时滤镜实现方法探讨(九)--磨皮算法探讨(一) 最新评论 Shiro的 rememberMe 功能使用指导(为什么rememberMe设置了没作用？) m421154133 : 谢谢前辈赐教 Shiro的 rememberMe 功能使用指导(为什么rememberMe设置了没作用？) LZ645596034 : 真是纠结·· git egit 如何 revert ZHOUCHAOQIANG : 为何这个插件，revert commit的时候，报failed Alex 的 Hadoop 菜鸟教程: 第10课 Hive 安装和使用教程 tbanhui : 大神：hive这样安装出来的好像不是集群啊，为啥在host1上建的表，在host2上的hive看不到... Alex 的 Hadoop 菜鸟教程: 第10课 Hive 安装和使用教程 tbanhui : 这里hive难道只是在host1上安装、使用？ Alex 的 Hadoop 菜鸟教程: 第10课 Hive 安装和使用教程 tbanhui : 这里hive难道只在集群中host1上安装？ Alex 的 Hadoop 菜鸟教程: 第4课 Hadoop 安装教程 - HA方式 (2台服务器) tbanhui : @tbanhui:jps的详细堆栈：8262 -- process information unav... Alex 的 Hadoop 菜鸟教程: 第4课 Hadoop 安装教程 - HA方式 (2台服务器) tbanhui : 老师、大神：最后看到2个datanode了，其它各个方面看来也正常。但jps输出是下面这样，按现在网... Alex 的 Hadoop 菜鸟教程: 第6课 Hbase 安装教程 tbanhui : 请问作者：最后hbase界面截图那里，既然之前配置了2个region server，为什么这个截图上... Alex 的 Hadoop 菜鸟教程: 第4课 Hadoop 安装教程 - HA方式 (2台服务器) tbanhui : @tbanhui:其他个方面看起来都没有问题，就是datanode这里有问题，请作者看到后说明下，谢...

Recno:: 45
URL:: http://blog.csdn.net/nsrainbow/article/details/49342039

ParseText::
《HBase权威指南》读书笔记7:第七章 与MapReduce 集成 - 我可以接受失败，但我不能接受放弃。--迈克尔 乔丹 - 博客频道 - CSDN.NET 我可以接受失败，但我不能接受放弃。--迈克尔 乔丹 目录视图 摘要视图 订阅 学院APP首次下载，可得50C币！     欢迎来帮助开源“进步”     当讲师？爱学习？投票攒课吧     认识Atlassian Datacenter产品     深圳小伙伴的福利来啦 《HBase权威指南》读书笔记7:第七章 与MapReduce 集成 2015-10-23 16:24 543人阅读 评论 (0) 收藏 举报 分类： hadoop （16） 作者同类文章 X 版权声明：本文为博主原创文章，未经博主允许不得转载。 框架 MapReduce 被设计成在可扩展方式下解决超过TB级数据处理过程中的问题。应当有一种方法可以建立一个性能随机器数增加而线性提升的系统，这就是mapreduce努力做到的。 InputFormat 负责两件事情 拆分输入数据 返回一个RecordReader实例，这个实例定义了键值对象的类，并提供了next()方法来遍历输入的数据 HBase提供了一组专用的实现：TableInputFormatBase  有一个实现的子类叫 TableInputFormat 是一个轻量级的实现 Mapper 处理RecordReader 。 HBase提供了 TableMapper。将键的类型强制转换为一个 ImmutableBytesWritable ，同时将值的类型强制转换为 Result 类型。返回一个TableRecordReader Reducer 得到Mapper类的输出后，进行 shuffle 和 sort 处理 OutputFormat 最后阶段由 OutputFormat 处理，作用是持久化到不同位置。比如持久化到HBase可以用TableOutputFormat类 支撑类 如果在HDFS中启用了 机架感知 ，副本会被发送到较远的机架，否则是负载较轻的节点上 表拆分 对于HBase来说，TableInputFormat 是基于用户提供的scan获取所需要的表信息，并且按照region来划分边界，由于他不能直接地预测到可选过滤器的执行结果。所以它简单的使用起止键来确定region。拆分块的数目与起止键之间的region数目相等。如果没有设定起止键，则所有region都被包含在其中。 作业启动时，框架会按拆分的数目调用createRecordReader(), 并返回与当前块对应的TableRecordReader实例。换句话说，每个TableRecordRead实例处理一个对应的region，读取并遍历一个region的所有行 在HBase上执行MapReduce 准备 用maven打一个胖jar（包含所有需要的jar） 数据流向 定义一个ImportFromFile 类把数据读到HBase里面 数据源 做一个 AnalyzeMapper extends TableMapper  类来解析数据 数据源与数据流向 一个MapReduce作业中的源和目标可以都是HBase的表，而且还有可能同时使用HBase作为输入和输出。做一个 ParseMapper extends TableMapper 来解析每行数据为若干列 自定义处理 顶 0 踩 0 我的同类文章 hadoop （16） http://blog.csdn.net 猜你在找 查看评论 * 以上用户言论只代表其个人观点，不代表CSDN网站的观点或立场 个人资料 nsrainbow 访问： 423243次 积分： 6048 等级： 积分：6048 排名： 第2161名 原创： 177篇 转载： 81篇 译文： 4篇 评论： 97条 文章搜索 文章分类 css (12) FLEX (14) javascript (34) java技术 (65) PHP (31) 其他 (19) 数据库 (21) 服务器 (15) 进销存知识 (1) android (2) 并发架构 (1) hadoop (17) Alex的Hadoop菜鸟教程 (22) 文章存档 2015年12月 (2) 2015年11月 (3) 2015年10月 (13) 2015年09月 (3) 2015年07月 (1) 2015年03月 (3) 2015年02月 (5) 2015年01月 (4) 2014年12月 (5) 2014年11月 (4) 2014年10月 (2) 2014年09月 (9) 2014年08月 (3) 2014年07月 (9) 2014年06月 (10) 2014年05月 (9) 2014年04月 (1) 2014年03月 (1) 2014年01月 (2) 2013年12月 (1) 2013年11月 (5) 2013年10月 (8) 2013年09月 (3) 2013年08月 (7) 2013年07月 (4) 2013年06月 (9) 2013年05月 (11) 2013年04月 (1) 2013年02月 (1) 2013年01月 (1) 2012年12月 (6) 2012年11月 (1) 2012年09月 (1) 2012年06月 (1) 2012年03月 (4) 2012年02月 (1) 2011年12月 (1) 2011年10月 (1) 2011年09月 (5) 2011年08月 (13) 2011年06月 (1) 2010年10月 (2) 2009年11月 (1) 2009年05月 (1) 2009年04月 (1) 2009年02月 (1) 2008年08月 (5) 2008年07月 (6) 2008年06月 (4) 2008年05月 (15) 2008年04月 (28) 2008年03月 (18) 2008年02月 (3) 2008年01月 (5) 阅读排行 史上最简! PHP调试环境搭建-Zend Debugger安装 (35396) 推荐一个很好的 HttpClient 入门教程 (15433) 如何彻底删除node.js以及node.js安装教程(基于Centos其他linux版本可以类推 ) (14588) php 小数整理,向上取整,向下去整,四舍五入,丢弃小数部分,保留整数部分 (13254) flex中dictionary跟Object的区别与遍历 (8361) git for windows （又名 msysgit）如何记住用户名和密码 (7668) eclipse 自动换行wordwrap 插件 (6217) shiro 与 redis 结合的解决方案 shiro-redis (6187) Alex 的 Hadoop 菜鸟教程: 第19课 华丽的控制台 HUE 安装以及使用教程 (6057) sun.net.ftp.FtpClient 中文目录乱码问题解决 (5608) 评论排行 史上最简! PHP调试环境搭建-Zend Debugger安装 (10) sun.net.ftp.FtpClient 中文目录乱码问题解决 (8) 推荐一个很好的 HttpClient 入门教程 (6) shiro 与 redis 结合的解决方案 shiro-redis (6) Alex 的 Hadoop 菜鸟教程: 第4课 Hadoop 安装教程 - HA方式 (2台服务器) (6) Ext form 提交乱码问题解决经过 (5) Shiro的 rememberMe 功能使用指导(为什么rememberMe设置了没作用？) (5) 使用filter完成的漂亮的CSS渐变特效——blendtrans (4) 史上最简! 解决Optimizer与Debugger兼容性问题 (3) 精简出最小 jre (3) 推荐文章 *App竞品技术分析 （6）热修复 *架构设计：系统间通信（17）——服务治理与Dubbo 中篇（分析） *一款炫酷Loading动画--加载失败 *图解堆算法、链表、栈与队列（多图预警） *Android中ContentProvider组件详解 *Android平台Camera实时滤镜实现方法探讨(九)--磨皮算法探讨(一) 最新评论 Shiro的 rememberMe 功能使用指导(为什么rememberMe设置了没作用？) m421154133 : 谢谢前辈赐教 Shiro的 rememberMe 功能使用指导(为什么rememberMe设置了没作用？) LZ645596034 : 真是纠结·· git egit 如何 revert ZHOUCHAOQIANG : 为何这个插件，revert commit的时候，报failed Alex 的 Hadoop 菜鸟教程: 第10课 Hive 安装和使用教程 tbanhui : 大神：hive这样安装出来的好像不是集群啊，为啥在host1上建的表，在host2上的hive看不到... Alex 的 Hadoop 菜鸟教程: 第10课 Hive 安装和使用教程 tbanhui : 这里hive难道只是在host1上安装、使用？ Alex 的 Hadoop 菜鸟教程: 第10课 Hive 安装和使用教程 tbanhui : 这里hive难道只在集群中host1上安装？ Alex 的 Hadoop 菜鸟教程: 第4课 Hadoop 安装教程 - HA方式 (2台服务器) tbanhui : @tbanhui:jps的详细堆栈：8262 -- process information unav... Alex 的 Hadoop 菜鸟教程: 第4课 Hadoop 安装教程 - HA方式 (2台服务器) tbanhui : 老师、大神：最后看到2个datanode了，其它各个方面看来也正常。但jps输出是下面这样，按现在网... Alex 的 Hadoop 菜鸟教程: 第6课 Hbase 安装教程 tbanhui : 请问作者：最后hbase界面截图那里，既然之前配置了2个region server，为什么这个截图上... Alex 的 Hadoop 菜鸟教程: 第4课 Hadoop 安装教程 - HA方式 (2台服务器) tbanhui : @tbanhui:其他个方面看起来都没有问题，就是datanode这里有问题，请作者看到后说明下，谢...

Recno:: 46
URL:: http://blog.csdn.net/nsrainbow/article/details/49363053

ParseText::
《HBase权威指南》读书笔记8:第八章 架构 - 我可以接受失败，但我不能接受放弃。--迈克尔 乔丹 - 博客频道 - CSDN.NET 我可以接受失败，但我不能接受放弃。--迈克尔 乔丹 目录视图 摘要视图 订阅 学院APP首次下载，可得50C币！     欢迎来帮助开源“进步”     当讲师？爱学习？投票攒课吧     认识Atlassian Datacenter产品     深圳小伙伴的福利来啦 《HBase权威指南》读书笔记8:第八章 架构 标签： hbase hadoop 2015-10-26 00:48 832人阅读 评论 (2) 收藏 举报 分类： hadoop （16） 作者同类文章 X 版权声明：本文为博主原创文章，未经博主允许不得转载。 8.1 数据查找和传输 B+树：B+树比B树的改进为叶子节点也是顺序排放的 LSM(log-structured merge-tree)树 存储 系统概述 HBase主要处理两种文件： WAL (Write-Ahead Log)预写日志   和   实际的数据文件 基本流程 客户端联zookeeper查找行健 通过zookeeper获取含有 -ROOT- 的 region服务器名来完成的 通过含有 -ROOT- 的region服务器可以查询到含有 .META. 表中对应的region服务器名，其中包含请求的行键信息。这两处的主要内容都被缓存下来，并且都只查询一次 最终，通过查询 .META. 服务器来获取客户端的行键数据所在的region的服务器名 HregionServer HRegionServer负责打开region，并创建对应的HRegion实例，当HRegion被打开后，它会为每个表的HColumnFamily创建一个Store实例 每个Store实例包含一个或多个StoreFile实例，他们是实际数据文件HFile的轻量级封装 每个store还有其对应的一个memstore 一个HRegionServer分享一个HLog实例 写路径 写请求到的路径： WAL(HDFS) memstore HFile 网上有一幅特别好的图，虽然不是权威手册里面的，所以加到这篇文章里面。从图上可以明显看出 WAL是在hdfs上的 文件 WAL被存储在HDFS 里面 /hbase 目录下的 .log　文件夹里面 由于WAL文件刚刚被创建所以显示大小是0。这是因为在hdfs里面用append来写入此文件，只有等到文件达到一个完整的块时，文件对用户才是可见的。 WAL 文件会等到 hbase.regionserver.logroll.period （默认是60分钟）时间之后被滚动，紧接着它的下一个新日志文件大小又从0开始了 滚动之后旧日志被放到 .oldlogs 下，并等到 hbase.master.logcleaner.ttl (默认是10分钟) 后被删除。检测间隔是 hbase.master.cleaner.interval 属性设置的。 表级文件 在HBase中，每张表都有自己的目录，位于HBase根目录下。每张表目录包括一个名为 .tableinfo 的顶层文件 该文件对应序列化后的HTableDescription Region级文件 .regioninfo 对应HRegionInfo实例 hbck  就是用 .regioninfo 来检查并生成元数据表中丢失的条目 region 如果超过了配置的最大值 hbase.hregion.max.filesize，会拆分，并创建一个 splits 目录 合并 当文件的数量达到阀值，会触发合并操作。该过程会持续到这些文件中最大的一个超过最大存储大小，然后触发一次region  split 合并分为 minor 和  major  minor 合并负责重写最后生成的几个文件到一个更大的文件中 minor 合并负责重写最后生成的几个文件到一个更大的文件中，具体合并几个文件靠 hbase.hstore.compaction.min 定义 minor 合并可以处理的最大文件数量默认为10，用户可通过 hbase.hstore.compaction.max 定义 major 合并把所有文件压缩成一个单独的文件 合并的触发： CompactionChecker 类实现，它以一个固定的周期触发检查，这个周期由 hbase.server.thread.wakefrequency 参数控制（乘以 hbase.server.thread.wakefrequency.multiplier，设为 1000 ，这样它的执行频率不会像其他基于线程的任务这么频繁） 除非使用 majorCompact() ，否则服务器将首先检查上次运行到现在是否达到 hbase.hregion.majorcompaction (默认为24小时)指定的时限。 如果没有到 major 合并的执行周期，系统会选择 minor 合并执行 WAL HLog类 实现了WAL的类叫做HLog WAL是可选的，如果用户在执行一个离线的大批量导入数据的MapReduce作业的时候可以获得额外的性能，但是需要注意导入的时候有可能数据丢失（强烈建议不要关闭） HLog被这台机器上的所有region共享 HLogKey类 WAL使用的是 Hadoop  的 SequenceFile。这种文件格式按照 key value存储数据，HLogKey 类作为key存储了，数据的归属，region和表名，写入时间，集群ID LogSyncer类 管道写与多路写 sync()实现的是管道写，当写入的时候修改被发送到第一个datanode，处理完成后在被发送到下一个datanode，直到3个datanode都已经确认了写操作，客户端才被允许继续进行 多路写是写入同时被发送到3台主机上，当所有主机确认了写操作之后，客户端才可以继续 区别： 管道写延迟很高，但是可以更好的利用带宽。多路写有比较低的延迟，因为客户端只需要等待最慢的Datanode确认。 延迟日志刷写 deferred log flush ，默认是false，如果为true，修改会先被缓存在region服务器中，然后服务器上有一个 logSyncer类，每隔1秒来写入一次数据（hbase.regionserver.optionallogflushinterval 设定） LogRoller 当日志出现  2011-06-15 01:45:33,323 INFO org.apache.hadoop.hbase.region server.HLog: Too many hlogs: logs=130,maxlog=96;forcing flush of 8 region(s):..... 是因为需要保留的日志文件数超过了设置的最大日志文件数，但是仍有一些数据么有被更新。服务器会进入到一个特殊的模式来强制刷写内容中的更新数据，以减少需要保存的日志量。 其他控制日志滚动的参数有  hbase.regionserver.hlog.blocksize(设置为文件系统默认的块大小或者 fs.local.block.size 默认为32M) hbase.regionserver.logroll.multiplier (设为0.95) 表示当日志达到块大小的95%就会滚动日志 回放 单日志 使用单日志的原因是减少磁盘寻址，提高性能，但是会为恢复带来麻烦，要先日志拆分 日志拆分 两种日志需要被回放的情况： 集群启动时 服务失效时 数据恢复 region启动的时候会先检查 recovered.edits 目录是否存在，如果存在就开始读取并恢复数据。 当序列ID小于硬盘上的序列ID就会被忽略 读路径 其实Get的内部实现也是Scan Region生命周期 region的所有可能状态 状态 描述 Offline region下线 Pending Open 打开region的请求已经发送到了服务器 Opening 服务器开始打开region Open region已经打开，可以使用 Pending Close 关闭region的请求已经被发送到了服务端 Closing 正在关 Closed 已关 Splitting 服务器开始拆分region Split region 已经被切分了 zookeeper zookeeper 中存储的信息 /hbase/hbaseid ：可以使用 get /hbase/hbaseid 查看，其他命令类似，包含clusterID /hbase/master   包含服务器名 /hbase/replication   包含副本信息 /hbase/root-region-server   包含 -ROOT- region 所在region服务器的机器名，这个经常在 region 定位中使用 /hbase/rs   这个znode是作为所有region服务器的根节点，集群用来跟踪服务器异常，每个znode都是临时节点，并且node名是region服务器的名称 /hbase/shutdown  这个节点用来跟踪集群状态信息，包括集群启动的时间，以及当集群被关闭时的空状态 /hbase/splitlog   协调日志拆分相关的的父节点 /hbase/table   当表被禁用，信息会被添加到这个znode下。表名是新建的的node名，内容是 DISABLED  上一篇 《HBase权威指南》读书笔记7:第七章 与MapReduce 集成 下一篇 《HBase权威指南》读书笔记9:第九章 高级用法 顶 1 踩 0 我的同类文章 hadoop （16） http://blog.csdn.net 猜你在找 查看评论 * 以上用户言论只代表其个人观点，不代表CSDN网站的观点或立场 个人资料 nsrainbow 访问： 423230次 积分： 6047 等级： 积分：6047 排名： 第2161名 原创： 177篇 转载： 81篇 译文： 4篇 评论： 97条 文章搜索 文章分类 css (12) FLEX (14) javascript (34) java技术 (65) PHP (31) 其他 (19) 数据库 (21) 服务器 (15) 进销存知识 (1) android (2) 并发架构 (1) hadoop (17) Alex的Hadoop菜鸟教程 (22) 文章存档 2015年12月 (2) 2015年11月 (3) 2015年10月 (13) 2015年09月 (3) 2015年07月 (1) 2015年03月 (3) 2015年02月 (5) 2015年01月 (4) 2014年12月 (5) 2014年11月 (4) 2014年10月 (2) 2014年09月 (9) 2014年08月 (3) 2014年07月 (9) 2014年06月 (10) 2014年05月 (9) 2014年04月 (1) 2014年03月 (1) 2014年01月 (2) 2013年12月 (1) 2013年11月 (5) 2013年10月 (8) 2013年09月 (3) 2013年08月 (7) 2013年07月 (4) 2013年06月 (9) 2013年05月 (11) 2013年04月 (1) 2013年02月 (1) 2013年01月 (1) 2012年12月 (6) 2012年11月 (1) 2012年09月 (1) 2012年06月 (1) 2012年03月 (4) 2012年02月 (1) 2011年12月 (1) 2011年10月 (1) 2011年09月 (5) 2011年08月 (13) 2011年06月 (1) 2010年10月 (2) 2009年11月 (1) 2009年05月 (1) 2009年04月 (1) 2009年02月 (1) 2008年08月 (5) 2008年07月 (6) 2008年06月 (4) 2008年05月 (15) 2008年04月 (28) 2008年03月 (18) 2008年02月 (3) 2008年01月 (5) 阅读排行 史上最简! PHP调试环境搭建-Zend Debugger安装 (35396) 推荐一个很好的 HttpClient 入门教程 (15433) 如何彻底删除node.js以及node.js安装教程(基于Centos其他linux版本可以类推 ) (14588) php 小数整理,向上取整,向下去整,四舍五入,丢弃小数部分,保留整数部分 (13254) flex中dictionary跟Object的区别与遍历 (8361) git for windows （又名 msysgit）如何记住用户名和密码 (7668) eclipse 自动换行wordwrap 插件 (6217) shiro 与 redis 结合的解决方案 shiro-redis (6187) Alex 的 Hadoop 菜鸟教程: 第19课 华丽的控制台 HUE 安装以及使用教程 (6057) sun.net.ftp.FtpClient 中文目录乱码问题解决 (5608) 评论排行 史上最简! PHP调试环境搭建-Zend Debugger安装 (10) sun.net.ftp.FtpClient 中文目录乱码问题解决 (8) 推荐一个很好的 HttpClient 入门教程 (6) shiro 与 redis 结合的解决方案 shiro-redis (6) Alex 的 Hadoop 菜鸟教程: 第4课 Hadoop 安装教程 - HA方式 (2台服务器) (6) Ext form 提交乱码问题解决经过 (5) Shiro的 rememberMe 功能使用指导(为什么rememberMe设置了没作用？) (5) 使用filter完成的漂亮的CSS渐变特效——blendtrans (4) 史上最简! 解决Optimizer与Debugger兼容性问题 (3) 精简出最小 jre (3) 推荐文章 *App竞品技术分析 （6）热修复 *架构设计：系统间通信（17）——服务治理与Dubbo 中篇（分析） *一款炫酷Loading动画--加载失败 *图解堆算法、链表、栈与队列（多图预警） *Android中ContentProvider组件详解 *Android平台Camera实时滤镜实现方法探讨(九)--磨皮算法探讨(一) 最新评论 Shiro的 rememberMe 功能使用指导(为什么rememberMe设置了没作用？) m421154133 : 谢谢前辈赐教 Shiro的 rememberMe 功能使用指导(为什么rememberMe设置了没作用？) LZ645596034 : 真是纠结·· git egit 如何 revert ZHOUCHAOQIANG : 为何这个插件，revert commit的时候，报failed Alex 的 Hadoop 菜鸟教程: 第10课 Hive 安装和使用教程 tbanhui : 大神：hive这样安装出来的好像不是集群啊，为啥在host1上建的表，在host2上的hive看不到... Alex 的 Hadoop 菜鸟教程: 第10课 Hive 安装和使用教程 tbanhui : 这里hive难道只是在host1上安装、使用？ Alex 的 Hadoop 菜鸟教程: 第10课 Hive 安装和使用教程 tbanhui : 这里hive难道只在集群中host1上安装？ Alex 的 Hadoop 菜鸟教程: 第4课 Hadoop 安装教程 - HA方式 (2台服务器) tbanhui : @tbanhui:jps的详细堆栈：8262 -- process information unav... Alex 的 Hadoop 菜鸟教程: 第4课 Hadoop 安装教程 - HA方式 (2台服务器) tbanhui : 老师、大神：最后看到2个datanode了，其它各个方面看来也正常。但jps输出是下面这样，按现在网... Alex 的 Hadoop 菜鸟教程: 第6课 Hbase 安装教程 tbanhui : 请问作者：最后hbase界面截图那里，既然之前配置了2个region server，为什么这个截图上... Alex 的 Hadoop 菜鸟教程: 第4课 Hadoop 安装教程 - HA方式 (2台服务器) tbanhui : @tbanhui:其他个方面看起来都没有问题，就是datanode这里有问题，请作者看到后说明下，谢...

Recno:: 47
URL:: http://blog.csdn.net/nsrainbow/article/details/49471415

ParseText::
《HBase权威指南》读书笔记9:第九章 高级用法 - 我可以接受失败，但我不能接受放弃。--迈克尔 乔丹 - 博客频道 - CSDN.NET 我可以接受失败，但我不能接受放弃。--迈克尔 乔丹 目录视图 摘要视图 订阅 学院APP首次下载，可得50C币！     欢迎来帮助开源“进步”     当讲师？爱学习？投票攒课吧     认识Atlassian Datacenter产品     深圳小伙伴的福利来啦 《HBase权威指南》读书笔记9:第九章 高级用法 标签： hbase 2015-10-28 17:38 555人阅读 评论 (1) 收藏 举报 分类： hadoop （16） 作者同类文章 X 版权声明：本文为博主原创文章，未经博主允许不得转载。 行键设计 高表与宽表 高表：表中列少行多 宽表：表中列多行少 Hbase只能按行分片，因此高表更有优势。 把需要检索的条件尽量放到行键rowkey里面去 宽表适合需要行级原子性的需求 辅助索引 由客户端管理索引：缺点比优点更多 带索引的事务型Hbase: ITHbase  (个人认为要远离在原本就不成熟的HBase上的更不成熟的封装) 带索引的Hbase: IHbase (个人认为要远离在原本就不成熟的HBase上的更不成熟的封装) 协处理器： 用钩子维护索引 搜索集成 用HBase存储数据，用MapReduce任务建立索引，索引使用Lucene 或者 Solr。并且Lucene的后台存储用HBase BuildTableIndex类可以扫描整个表，并建立Lucene索引，存储在HDFS上 HBasene: 直接在HBase内部建立搜索索引 布隆过滤器 布隆过滤器可以减少 I/O操作的层面，但是消耗很大的性能，默认不要用 上一篇 《HBase权威指南》读书笔记8:第八章 架构 下一篇 《HBase权威指南》读书笔记10:第十章 集群监控 顶 0 踩 0 我的同类文章 hadoop （16） http://blog.csdn.net 猜你在找 查看评论 * 以上用户言论只代表其个人观点，不代表CSDN网站的观点或立场 个人资料 nsrainbow 访问： 423232次 积分： 6047 等级： 积分：6047 排名： 第2161名 原创： 177篇 转载： 81篇 译文： 4篇 评论： 97条 文章搜索 文章分类 css (12) FLEX (14) javascript (34) java技术 (65) PHP (31) 其他 (19) 数据库 (21) 服务器 (15) 进销存知识 (1) android (2) 并发架构 (1) hadoop (17) Alex的Hadoop菜鸟教程 (22) 文章存档 2015年12月 (2) 2015年11月 (3) 2015年10月 (13) 2015年09月 (3) 2015年07月 (1) 2015年03月 (3) 2015年02月 (5) 2015年01月 (4) 2014年12月 (5) 2014年11月 (4) 2014年10月 (2) 2014年09月 (9) 2014年08月 (3) 2014年07月 (9) 2014年06月 (10) 2014年05月 (9) 2014年04月 (1) 2014年03月 (1) 2014年01月 (2) 2013年12月 (1) 2013年11月 (5) 2013年10月 (8) 2013年09月 (3) 2013年08月 (7) 2013年07月 (4) 2013年06月 (9) 2013年05月 (11) 2013年04月 (1) 2013年02月 (1) 2013年01月 (1) 2012年12月 (6) 2012年11月 (1) 2012年09月 (1) 2012年06月 (1) 2012年03月 (4) 2012年02月 (1) 2011年12月 (1) 2011年10月 (1) 2011年09月 (5) 2011年08月 (13) 2011年06月 (1) 2010年10月 (2) 2009年11月 (1) 2009年05月 (1) 2009年04月 (1) 2009年02月 (1) 2008年08月 (5) 2008年07月 (6) 2008年06月 (4) 2008年05月 (15) 2008年04月 (28) 2008年03月 (18) 2008年02月 (3) 2008年01月 (5) 阅读排行 史上最简! PHP调试环境搭建-Zend Debugger安装 (35396) 推荐一个很好的 HttpClient 入门教程 (15433) 如何彻底删除node.js以及node.js安装教程(基于Centos其他linux版本可以类推 ) (14588) php 小数整理,向上取整,向下去整,四舍五入,丢弃小数部分,保留整数部分 (13254) flex中dictionary跟Object的区别与遍历 (8361) git for windows （又名 msysgit）如何记住用户名和密码 (7668) eclipse 自动换行wordwrap 插件 (6217) shiro 与 redis 结合的解决方案 shiro-redis (6187) Alex 的 Hadoop 菜鸟教程: 第19课 华丽的控制台 HUE 安装以及使用教程 (6057) sun.net.ftp.FtpClient 中文目录乱码问题解决 (5608) 评论排行 史上最简! PHP调试环境搭建-Zend Debugger安装 (10) sun.net.ftp.FtpClient 中文目录乱码问题解决 (8) 推荐一个很好的 HttpClient 入门教程 (6) shiro 与 redis 结合的解决方案 shiro-redis (6) Alex 的 Hadoop 菜鸟教程: 第4课 Hadoop 安装教程 - HA方式 (2台服务器) (6) Ext form 提交乱码问题解决经过 (5) Shiro的 rememberMe 功能使用指导(为什么rememberMe设置了没作用？) (5) 使用filter完成的漂亮的CSS渐变特效——blendtrans (4) 史上最简! 解决Optimizer与Debugger兼容性问题 (3) 精简出最小 jre (3) 推荐文章 *App竞品技术分析 （6）热修复 *架构设计：系统间通信（17）——服务治理与Dubbo 中篇（分析） *一款炫酷Loading动画--加载失败 *图解堆算法、链表、栈与队列（多图预警） *Android中ContentProvider组件详解 *Android平台Camera实时滤镜实现方法探讨(九)--磨皮算法探讨(一) 最新评论 Shiro的 rememberMe 功能使用指导(为什么rememberMe设置了没作用？) m421154133 : 谢谢前辈赐教 Shiro的 rememberMe 功能使用指导(为什么rememberMe设置了没作用？) LZ645596034 : 真是纠结·· git egit 如何 revert ZHOUCHAOQIANG : 为何这个插件，revert commit的时候，报failed Alex 的 Hadoop 菜鸟教程: 第10课 Hive 安装和使用教程 tbanhui : 大神：hive这样安装出来的好像不是集群啊，为啥在host1上建的表，在host2上的hive看不到... Alex 的 Hadoop 菜鸟教程: 第10课 Hive 安装和使用教程 tbanhui : 这里hive难道只是在host1上安装、使用？ Alex 的 Hadoop 菜鸟教程: 第10课 Hive 安装和使用教程 tbanhui : 这里hive难道只在集群中host1上安装？ Alex 的 Hadoop 菜鸟教程: 第4课 Hadoop 安装教程 - HA方式 (2台服务器) tbanhui : @tbanhui:jps的详细堆栈：8262 -- process information unav... Alex 的 Hadoop 菜鸟教程: 第4课 Hadoop 安装教程 - HA方式 (2台服务器) tbanhui : 老师、大神：最后看到2个datanode了，其它各个方面看来也正常。但jps输出是下面这样，按现在网... Alex 的 Hadoop 菜鸟教程: 第6课 Hbase 安装教程 tbanhui : 请问作者：最后hbase界面截图那里，既然之前配置了2个region server，为什么这个截图上... Alex 的 Hadoop 菜鸟教程: 第4课 Hadoop 安装教程 - HA方式 (2台服务器) tbanhui : @tbanhui:其他个方面看起来都没有问题，就是datanode这里有问题，请作者看到后说明下，谢...

Recno:: 48
URL:: http://blog.csdn.net/nsrainbow/article/details/49493647

ParseText::
《HBase权威指南》读书笔记10:第十章 集群监控 - 我可以接受失败，但我不能接受放弃。--迈克尔 乔丹 - 博客频道 - CSDN.NET 我可以接受失败，但我不能接受放弃。--迈克尔 乔丹 目录视图 摘要视图 订阅 学院APP首次下载，可得50C币！     欢迎来帮助开源“进步”     当讲师？爱学习？投票攒课吧     认识Atlassian Datacenter产品     深圳小伙伴的福利来啦 《HBase权威指南》读书笔记10:第十章 集群监控 标签： hbase hadoop 2015-10-31 23:25 716人阅读 评论 (0) 收藏 举报 分类： hadoop （16） 作者同类文章 X 版权声明：本文为博主原创文章，未经博主允许不得转载。 监控框架 HBase使用Hadoop的监控框架，基于MetricsContext接口来处理监控数据点的生成。 可以用的实现列表 GangliaContext 用来推送到 Ganglia(似乎HBase对 ganglia的支持非常好)  FileContext 把监控指标写入到磁盘上一个文件里面 TimeStampingFileContext 同上，但是为每个监控指标增加一个时间戳前缀 CompositeContext 可以同时指定多个上下文，比如可以同时存在 gangliaContext 和 FileContext NullContext 就是关闭监控 NullContextWithUpdateThread  不生成任何监控指标，但是启动聚合统计线程。这种上下文在通过JMX检索监控指标时使用 附上：Ganglia 的介绍（ 适用于上几千台机器，如果没有就没有必要 ） Ganglia的强大在于：ganglia服务端能够通过一台客户端收集到同一个网段的所有客户端的数据，ganglia集群服务端能够通过一台服务端收集到它下属的所有客户端数据。这个体系设计表示一台服务器能够通过不同的分层能够管理上万台机器。这个功能是其他mrtg,nagios,cacti所不能比拟 完整的监控指标： <context-name>.<record-name>.<metric-name> 监控指标有以下几种类型 整形值(IV) 长整形值(LV) 速率(R) 一个代表速率的浮点值，可以是每秒操作数或者信息数。提供一个递增方法来追踪操作次数 字符串（S） 时间变化整形（TVI） 时间变化长整形(TVL) 时间变化率（TVR） 持续时间变化率(PTVR) master监控指标 cluster requests (R) 集群请求总数，累加所有region服务器统计的值 split time (PTVR) 重启后拆分WAL的时间 split size(PTVR) 拆分WAL的大小 region 监控指标 块缓存监控指标 block cache 就是块缓存，用来保存底层HFile从HDFS读取的存储块。 count(LV) 当前缓存中保存的块数目 size (LV) 占用的java堆空间大小 free (LV) 堆为缓存保留的可用空间 evicted (LV) 当前堆受限时将被移除的块数目 hit (LV) 缓存命中数 和 miss(LV) 缓存失效数 和 hit radio (LV) 命中率。所有的读操作都会尝试使用缓存，使用 setCacheBlocks() 仅影响块的保留策略 合并监控 compaction size (PTVR) 需要合并的文件总大小 和 compaction time (PTVR) 操作花费时间。注意只有当合并完成之后，这些值才会报告 [重要指标] compaction queue size (IV) 监测一个region服务器有多少个文件当前正在排队等待合并。 这个值很重要，通常这个数值很小，在0到十几之间，当遇到IO问题的时候，会发现这个数值上升的很快，如果使用major合并也会导致该数字快速上升，此种情况是正常的 memstore 监控指标 memstore size MB(IV) 表示服务器上所有memstore总共占用堆的大小，即所有在线region的memstore总和 [重要指标] flush quene size (IV) 是指将要被刷写的region数量。如果IO出现问题，刷写队列大小会显著的上升 flush size 和 flush time 分别表示被刷写到磁盘上的 memstore 大小和本次刷写所占用的时间。并指只有完成后才看的到。 存储监控指标 store files 所有存储文件的数量 stores 服务器上所有region的存储文件的数目 store file index MB 所有存储文件的块索引和元数据索引的总和大小 IO监控指标 fs read latency 读延迟 fs write latency 写延迟 [重要指标] fs sync latency WAL同步到文件系统的延迟，该指标可以提供底层IO性能的相关信息 其他指标 read request count 读总操作  write request count 写总操作 request (R) 是自上次轮询之后目前每秒的请求数， regions 是目前region服务器在线的region数目 RPC监控指标 RPC Processing Time 服务器端执行 RPC 消耗的时间，统计所有RPC调用的时间，并取平均值 [重要指标] RPC Queue Time 因为RPC需要使用排队系统，可能造成操作系统到达时间和操作实际执行时间的延迟，即排队时间。可以反应服务器的负载 JVM监控指标 gc count 垃圾回收的次数  gc time 是上次轮询至今累计的垃圾回收占用时间 gc时间如果太久，并超过 zookeeper.session.timeout 配置的时间都会被任务是错误。由此会导致 朱丽叶暂停 Nagios 用JMXToolKit可以配合Nagios做监控。 思考：不过我觉得用metrics返回的json数据格式就可以直接让Nagios读取了，而且更透明更简单 上一篇 《HBase权威指南》读书笔记9:第九章 高级用法 下一篇 《HBase权威指南》读书笔记11:第十一章 性能优化 顶 1 踩 0 我的同类文章 hadoop （16） http://blog.csdn.net 猜你在找 查看评论 * 以上用户言论只代表其个人观点，不代表CSDN网站的观点或立场 个人资料 nsrainbow 访问： 423237次 积分： 6047 等级： 积分：6047 排名： 第2161名 原创： 177篇 转载： 81篇 译文： 4篇 评论： 97条 文章搜索 文章分类 css (12) FLEX (14) javascript (34) java技术 (65) PHP (31) 其他 (19) 数据库 (21) 服务器 (15) 进销存知识 (1) android (2) 并发架构 (1) hadoop (17) Alex的Hadoop菜鸟教程 (22) 文章存档 2015年12月 (2) 2015年11月 (3) 2015年10月 (13) 2015年09月 (3) 2015年07月 (1) 2015年03月 (3) 2015年02月 (5) 2015年01月 (4) 2014年12月 (5) 2014年11月 (4) 2014年10月 (2) 2014年09月 (9) 2014年08月 (3) 2014年07月 (9) 2014年06月 (10) 2014年05月 (9) 2014年04月 (1) 2014年03月 (1) 2014年01月 (2) 2013年12月 (1) 2013年11月 (5) 2013年10月 (8) 2013年09月 (3) 2013年08月 (7) 2013年07月 (4) 2013年06月 (9) 2013年05月 (11) 2013年04月 (1) 2013年02月 (1) 2013年01月 (1) 2012年12月 (6) 2012年11月 (1) 2012年09月 (1) 2012年06月 (1) 2012年03月 (4) 2012年02月 (1) 2011年12月 (1) 2011年10月 (1) 2011年09月 (5) 2011年08月 (13) 2011年06月 (1) 2010年10月 (2) 2009年11月 (1) 2009年05月 (1) 2009年04月 (1) 2009年02月 (1) 2008年08月 (5) 2008年07月 (6) 2008年06月 (4) 2008年05月 (15) 2008年04月 (28) 2008年03月 (18) 2008年02月 (3) 2008年01月 (5) 阅读排行 史上最简! PHP调试环境搭建-Zend Debugger安装 (35396) 推荐一个很好的 HttpClient 入门教程 (15433) 如何彻底删除node.js以及node.js安装教程(基于Centos其他linux版本可以类推 ) (14588) php 小数整理,向上取整,向下去整,四舍五入,丢弃小数部分,保留整数部分 (13254) flex中dictionary跟Object的区别与遍历 (8361) git for windows （又名 msysgit）如何记住用户名和密码 (7668) eclipse 自动换行wordwrap 插件 (6217) shiro 与 redis 结合的解决方案 shiro-redis (6187) Alex 的 Hadoop 菜鸟教程: 第19课 华丽的控制台 HUE 安装以及使用教程 (6057) sun.net.ftp.FtpClient 中文目录乱码问题解决 (5608) 评论排行 史上最简! PHP调试环境搭建-Zend Debugger安装 (10) sun.net.ftp.FtpClient 中文目录乱码问题解决 (8) 推荐一个很好的 HttpClient 入门教程 (6) shiro 与 redis 结合的解决方案 shiro-redis (6) Alex 的 Hadoop 菜鸟教程: 第4课 Hadoop 安装教程 - HA方式 (2台服务器) (6) Ext form 提交乱码问题解决经过 (5) Shiro的 rememberMe 功能使用指导(为什么rememberMe设置了没作用？) (5) 使用filter完成的漂亮的CSS渐变特效——blendtrans (4) 史上最简! 解决Optimizer与Debugger兼容性问题 (3) 精简出最小 jre (3) 推荐文章 *App竞品技术分析 （6）热修复 *架构设计：系统间通信（17）——服务治理与Dubbo 中篇（分析） *一款炫酷Loading动画--加载失败 *图解堆算法、链表、栈与队列（多图预警） *Android中ContentProvider组件详解 *Android平台Camera实时滤镜实现方法探讨(九)--磨皮算法探讨(一) 最新评论 Shiro的 rememberMe 功能使用指导(为什么rememberMe设置了没作用？) m421154133 : 谢谢前辈赐教 Shiro的 rememberMe 功能使用指导(为什么rememberMe设置了没作用？) LZ645596034 : 真是纠结·· git egit 如何 revert ZHOUCHAOQIANG : 为何这个插件，revert commit的时候，报failed Alex 的 Hadoop 菜鸟教程: 第10课 Hive 安装和使用教程 tbanhui : 大神：hive这样安装出来的好像不是集群啊，为啥在host1上建的表，在host2上的hive看不到... Alex 的 Hadoop 菜鸟教程: 第10课 Hive 安装和使用教程 tbanhui : 这里hive难道只是在host1上安装、使用？ Alex 的 Hadoop 菜鸟教程: 第10课 Hive 安装和使用教程 tbanhui : 这里hive难道只在集群中host1上安装？ Alex 的 Hadoop 菜鸟教程: 第4课 Hadoop 安装教程 - HA方式 (2台服务器) tbanhui : @tbanhui:jps的详细堆栈：8262 -- process information unav... Alex 的 Hadoop 菜鸟教程: 第4课 Hadoop 安装教程 - HA方式 (2台服务器) tbanhui : 老师、大神：最后看到2个datanode了，其它各个方面看来也正常。但jps输出是下面这样，按现在网... Alex 的 Hadoop 菜鸟教程: 第6课 Hbase 安装教程 tbanhui : 请问作者：最后hbase界面截图那里，既然之前配置了2个region server，为什么这个截图上... Alex 的 Hadoop 菜鸟教程: 第4课 Hadoop 安装教程 - HA方式 (2台服务器) tbanhui : @tbanhui:其他个方面看起来都没有问题，就是datanode这里有问题，请作者看到后说明下，谢...

Recno:: 49
URL:: http://blog.csdn.net/nsrainbow/article/details/49624849

ParseText::
《HBase权威指南》读书笔记11:第十一章 性能优化 - 我可以接受失败，但我不能接受放弃。--迈克尔 乔丹 - 博客频道 - CSDN.NET 我可以接受失败，但我不能接受放弃。--迈克尔 乔丹 目录视图 摘要视图 订阅 学院APP首次下载，可得50C币！     欢迎来帮助开源“进步”     当讲师？爱学习？投票攒课吧     认识Atlassian Datacenter产品     深圳小伙伴的福利来啦 《HBase权威指南》读书笔记11:第十一章 性能优化 标签： hbase hadoop 2015-11-05 23:46 772人阅读 评论 (0) 收藏 举报 分类： hadoop （16） 作者同类文章 X 版权声明：本文为博主原创文章，未经博主允许不得转载。 垃圾回收优化 master基本不会遇到垃圾回收的问题。 由于memstore的刷写机制是不连续的，所以java虚拟机的堆内存会出现孔洞。 快速刷写到磁盘的数据会被划分到新生代，这种空间会被优先回收 数据停留的时间太长，会被划分到老生代甚至终生代。而且老生代和终生代一般占据了好几个G，而新生代一般就几百M而已 新生代空间 由此得出新生代的空间一般的分配如下 -XX:MaxNewSize=128m -XX:NewSize=128m 可以缩写为 -Xmn128m 设定好之后观察是否合理 如果不合理你会发现服务器的CPU使用量急剧上升，因为新生代的回收很占CPU 新生代的设定如果调大，会带来的好处：则生存期较长的对象不会过快的划分为老生代。 如果太大，回收会产生较长时间停顿 gc日志 如果JRE中孔洞太多，空间不够的时候，就需要压缩堆内存碎片，如果压缩内存碎片失败会出现失败日志。所以要通过以下参数开启jvm的gc日志 -verbose:gc -XX:+PrintGCDetails -XX:+PrintGCTimeStamps -Xloggc:$HBASE_HOME/logs/gc-${hostname}-hbase.log 日志中会出现 "concurrent mode failure" 或者 "promotion failed" 信息 注意 ：不过这个日志不会自动滚动，会越来越大你的手动用linux的每日滚动去做手动清理 回收策略 垃圾回收策略是可以切换的，建议用以下策略 -XX:+UseParNewGC and -XX:+UseConcMarkSweepGC 第一个选项是设置年轻代用 Parallel New Collector 回收策略：停止jvm去清空年轻代。因为年轻代很小，所以这个过程很快，一般不到一秒，所以这个暂停是可以接受的 CMS策略 但是老生代不能用这个策略，因为老生代很大，暂停会很久，如果大于zk的会话超时，就会引起朱丽叶暂停问题。所以老生代用 并行标记回收器(Concurrent Mark-Sweep Collector, CMS)来缓解。这种策略尽量异步实现垃圾回收，但是cpu占用率高。不过如果回收失败的话，还是会让jvm暂停来进行内存整理。 使用了CMS策略有一个额外的参数设定什么时候开始进行并发标记 -XX:CMSInitiatingOccupancyFraction=70 这个值设定了一个百分比。 70%是一个比较好的值，因为 它比region的堆占用率60%略大（20%块缓存+40%memstore） 这样在堆空间被占完之前就开始并行回收 不会太小而导致回收频繁进行 优化原则 块缓存+memstore 不能 大于 100% 要留空间给其他操作，所以 块缓存+memstore = 60% 比较合理 本地memstore分配缓冲区(MSLAB) MSLAB=Memstore-Local Allocation Buffers  本地memstore分配缓冲区 jvm孔洞（碎片）如果太多会触发 stop-the-world 垃圾回收，就是把整个jvm停掉回收垃圾。 所以MSLAB致力于减少碎片。方法是： 每次分配固定大小的对象，当这些对象被回收的时候，会留下固定大小的孔洞，之后如果新对象的大小也相同就可以直接用这些孔洞了，就不会引发 promotion fail，就不会触发 stop-the-world 过程 MSLAB默认是开启的，如果没有就设置 hbase.hregion.memstore.mslab.enabled来开启 hbase.hregion.memstore.mslab.chunksize 可以设定之前所说的固定大小孔洞的大小，默认是2MB。如果你存储的东西都很大，那就调大这个值 如果你要存的东西大于存储缓冲区的上边界 hbase.hregion.memstore.mslab.max.allocation 默认值是256K。任何大于该值的单元格不会使用mslab特性，而是直接向jvm申请空间。 MSLAB的代价是空间的浪费，就算你没用到缓冲区的最后一个字节，缓冲区依然是那么大。所以你必须权衡利弊（ 我个人建议是浪费就浪费，总比引起jvm暂停好 ） 使用缓冲区需要额外的内存复制工作，所以会比直接使用KeyValue实例要慢一点 压缩 推荐使用snappy 。不过要在一开始就使用，中间切换不好搞 优化拆分和合并 管理拆分 拆分/合并风暴 当用户的region大小以恒定的速度保持增长时，region拆分会在同一时间发生，因为同时需要压缩region中的存储文件，这个过程会重写拆分后的region，这将会引起IO上升。 建议 ：关闭自动拆分，然后手动调用split和major_compact 命令 如何关闭自动拆分？ 将 hbase.hregion.max.filesize 调的非常大，但是不要大过 Long.MAX_VALUE （即 9223372036854775807），建议为100G 手动运行还有一个好处，可以在不同时间段不同的region上执行，分散压力。 用户可以做成cron的job定时执行这些操作 手动拆分可以避免：当你做troubleshooting 的时候自动拆分有可能会把你正在看的region拆掉，这样就不好了 region热点 注意不要用类似时间戳这样的递增的东西做主键，防止出现region热点 预拆分region 在建立表的时候通过 SPLITS 属性可以直接定义各个region的范围，进行region的预拆分 负载均衡 master有一个内置的均衡器。默认情况下，均衡器每五分钟运行一次，这是通过 hbase.balancer.period 属性设置的。它会尝试均匀分配region到所有region服务器。启动均衡器，均衡器首先会确定一个region分配计划，该计划用于描述region如何移动。然后通过迭代调用管理API中的 unassign() 方法开始移动region。 均衡器有一个可以限制自身运行时间的上限，通过 hbase.balancer.max.balancing 属性来配置，默认设置为均衡器运行时间间隔周期的一半，即两分半钟。 合并region 用 hbase org.apache.hadoop.hbase.util.Merge testtable 可以合并多个region 删除大量数据的时候，可以合并region，让region不会那么多 客户端API：最佳实践 禁止自动刷写 如果有大量的写入操作时，使用setAutoFlush(false) ，否则 Put 实例会被逐个传送到region服务器。禁止了自动刷写就可以等到写缓冲区被填满的时候一次性批量的发送。 你可以可以使用 flushCommits() 方法显式刷写数据 用 HTable 的 close 方法也会隐式的调用刷写 使用扫描缓存 如果HBase被作为一个MapReduce 作业的输入源，就可以用 setCache() 设置一个比1大的多的数值，可以开启扫描缓存。这样可以一次从region取多条（比如500条）到客户端来处理。 不过传输数据的开销和内存开销都会增大。所以不是越大越好 限定扫描范围 当Scan被用来处理大量行时（比如作为MapReduce输入源时）最好只设定指定的列，如果用addFamily() 会把整个family的所有列都加载进来。（ 其实就是跟传统SQL建议大家不要 SELECT * 一回事 ） 关闭ResultScanner 一定要记得及时关闭 ResultScanner ( 其实跟传统数据库要记得关闭连接一回事 ) 在finally 里面关闭 ResultScanner 块缓存用法 Scan可以通过设置 setCacheBlocks() 来设置使用region服务器中的块缓存。 如果在MapReduce中，这个应该被设置成false 如果某些行被频繁访问，这个应该被设置成true 优化获取行键的方式 如果你只是进行某些简单的行统计之类不需要获取所有列的操作，记得在 FilterList中添加 FirstKeyFilter 或者 KeyOnlyFilter ，这样就可以只返回第一个KeyValue行键，极大的减少了网络传输 关闭Put上的WAL Put 的 writeToWAL(false) 可以关闭WAL，可以大幅提高吞吐量，但是副作用就是region如果出问题就会丢失数据。 其实如果数据是在集群间分布均匀后，其实关闭日志不会提升多少性能 所以最好不要关闭WAL。要是真的要提高吞吐量的话就用 批量导入 (bulk load) 技术。这个在 12.2.3 中会进行介绍 配置 减少ZooKeeper超时的发生 默认的region和zk之间的超时时间是3分钟。推荐设置为1分钟，这样可以更快的发现这一个故障 默认时间那么长是为了避免大数据到导入时出问题，如果没有大数据的导入情况就可以把超时设置短一点 12.5.3中“稳定性问题”会介绍一个方法来检测这种停顿 个人认为没有太大必要，要挂就是一直挂，快那么2分钟也没什么用 增加处理线程 hbase.regionserver.handler.count 定义了响应外部用户访问数据表请求的线程数，默认是10，有点偏小。这是为了防止用户在客户端高并发使用较大的缓冲区的情况下服务器端过载。 但是当单次请求开销较小时，可以设定的高一点 设置太高，会对region的内存造成压力，甚至会导致 OutOfMemoryError。而且可用内存过低的话又会触发垃圾回收，造成全面暂停 增加堆大小 在 hbase-env.sh 中 调整 HBASE_HEAPSIZE ，增大为8G 不过最好用 HBASE_REGIONSERVER_OPTS 而不是 HBASE_HEAPSIZE 可以单独调大region的堆大小，master不需要太大的堆大小，1G就够用了 启用数据压缩 推荐snappy，如果没有snappy就用LZO压缩 增加region大小 更大的region可以减少region数量 少region可以让集群运行更平稳 如果一个region变热点就手动拆分它 默认的region是256M，可以配置成1G或者更大 region太大的话高负载下的合并会停顿很长时间 通过 hbase.hregion.max.filesize 设置region的大小 调整块缓存大小 默认块缓存是20%（即0.2） 通过 perf.hfile.block.cache.size 属性可以设置这个百分比 如果根据10.2.3节提到的 evicted(LV) 参数发现有许多块被换出。这样就需要增加块缓存大小来容纳更多的块 如果用户负载基本都是读请求，也可以增加块缓存 块缓存+memstore上限不能超过100%。默认他们的和是60%，只有当用户确认 有必要 并且 不会造成副作用 时才调整 调整memstore限制 通过 hbase.regionserver.global.memstore.upperLimit  设置上限。默认是0.4 hbase.regionserver.global.memstore.lowerLimit 设置下限。默认是0.35 把上下限设置的接近一点来避免过度刷写 如果主要处理读请求，可以考虑同时减少memstore的上下限来增加块缓存的空间。 如果刷写的数据量很小，比如只有5MB，就可以增加存储限制来降低IO操作 增加阻塞是存储文件数目 hbase.hstore.blockingStoreFiles 设置，决定了当存储文件的数据达到阀值时，所有更新操作（put，delete）等会被阻塞。然后执行合并操作。默认值是7 如果文件数一直很高，就不要提高该配置项，因为这样只会延迟问题的发生，而不能避免 增加阻塞倍率 hbase.hregion.memstore.block.multiplier 的默认值为2 。当memstore达到属性 multiplier  乘以 flush 的大小限制时会阻止进一步的更新 当有足够的存储空间时，用户可以增加这个值来增加平滑的处理写入突发流量 减少最大日志 设置 hbase.regionserver.maxlogs 属性是的用户基于磁盘的WAL文件数目，控制刷写频率。默认值是32 对于写压力比较大的应用来说要把这个值调低，可以让数据更频繁的写到硬盘上，这样已经刷写到硬盘上的日志就可以被丢弃 负载测试 PE HBase有自带的压力测试工具名叫 PE(Performance Evaluation) YCSB Yahoo 推出的云服务基准测试工具。比PE更好用，可以对hbase进行压力测试 YCSB提供了更多的选项，并且能够将读写负载混合在一起 上一篇 《HBase权威指南》读书笔记10:第十章 集群监控 下一篇 《HBase权威指南》读书笔记12:第十二章 集群管理 顶 1 踩 0 我的同类文章 hadoop （16） http://blog.csdn.net 猜你在找 查看评论 * 以上用户言论只代表其个人观点，不代表CSDN网站的观点或立场 个人资料 nsrainbow 访问： 423239次 积分： 6047 等级： 积分：6047 排名： 第2161名 原创： 177篇 转载： 81篇 译文： 4篇 评论： 97条 文章搜索 文章分类 css (12) FLEX (14) javascript (34) java技术 (65) PHP (31) 其他 (19) 数据库 (21) 服务器 (15) 进销存知识 (1) android (2) 并发架构 (1) hadoop (17) Alex的Hadoop菜鸟教程 (22) 文章存档 2015年12月 (2) 2015年11月 (3) 2015年10月 (13) 2015年09月 (3) 2015年07月 (1) 2015年03月 (3) 2015年02月 (5) 2015年01月 (4) 2014年12月 (5) 2014年11月 (4) 2014年10月 (2) 2014年09月 (9) 2014年08月 (3) 2014年07月 (9) 2014年06月 (10) 2014年05月 (9) 2014年04月 (1) 2014年03月 (1) 2014年01月 (2) 2013年12月 (1) 2013年11月 (5) 2013年10月 (8) 2013年09月 (3) 2013年08月 (7) 2013年07月 (4) 2013年06月 (9) 2013年05月 (11) 2013年04月 (1) 2013年02月 (1) 2013年01月 (1) 2012年12月 (6) 2012年11月 (1) 2012年09月 (1) 2012年06月 (1) 2012年03月 (4) 2012年02月 (1) 2011年12月 (1) 2011年10月 (1) 2011年09月 (5) 2011年08月 (13) 2011年06月 (1) 2010年10月 (2) 2009年11月 (1) 2009年05月 (1) 2009年04月 (1) 2009年02月 (1) 2008年08月 (5) 2008年07月 (6) 2008年06月 (4) 2008年05月 (15) 2008年04月 (28) 2008年03月 (18) 2008年02月 (3) 2008年01月 (5) 阅读排行 史上最简! PHP调试环境搭建-Zend Debugger安装 (35396) 推荐一个很好的 HttpClient 入门教程 (15433) 如何彻底删除node.js以及node.js安装教程(基于Centos其他linux版本可以类推 ) (14588) php 小数整理,向上取整,向下去整,四舍五入,丢弃小数部分,保留整数部分 (13254) flex中dictionary跟Object的区别与遍历 (8361) git for windows （又名 msysgit）如何记住用户名和密码 (7668) eclipse 自动换行wordwrap 插件 (6217) shiro 与 redis 结合的解决方案 shiro-redis (6187) Alex 的 Hadoop 菜鸟教程: 第19课 华丽的控制台 HUE 安装以及使用教程 (6057) sun.net.ftp.FtpClient 中文目录乱码问题解决 (5608) 评论排行 史上最简! PHP调试环境搭建-Zend Debugger安装 (10) sun.net.ftp.FtpClient 中文目录乱码问题解决 (8) 推荐一个很好的 HttpClient 入门教程 (6) shiro 与 redis 结合的解决方案 shiro-redis (6) Alex 的 Hadoop 菜鸟教程: 第4课 Hadoop 安装教程 - HA方式 (2台服务器) (6) Ext form 提交乱码问题解决经过 (5) Shiro的 rememberMe 功能使用指导(为什么rememberMe设置了没作用？) (5) 使用filter完成的漂亮的CSS渐变特效——blendtrans (4) 史上最简! 解决Optimizer与Debugger兼容性问题 (3) 精简出最小 jre (3) 推荐文章 *App竞品技术分析 （6）热修复 *架构设计：系统间通信（17）——服务治理与Dubbo 中篇（分析） *一款炫酷Loading动画--加载失败 *图解堆算法、链表、栈与队列（多图预警） *Android中ContentProvider组件详解 *Android平台Camera实时滤镜实现方法探讨(九)--磨皮算法探讨(一) 最新评论 Shiro的 rememberMe 功能使用指导(为什么rememberMe设置了没作用？) m421154133 : 谢谢前辈赐教 Shiro的 rememberMe 功能使用指导(为什么rememberMe设置了没作用？) LZ645596034 : 真是纠结·· git egit 如何 revert ZHOUCHAOQIANG : 为何这个插件，revert commit的时候，报failed Alex 的 Hadoop 菜鸟教程: 第10课 Hive 安装和使用教程 tbanhui : 大神：hive这样安装出来的好像不是集群啊，为啥在host1上建的表，在host2上的hive看不到... Alex 的 Hadoop 菜鸟教程: 第10课 Hive 安装和使用教程 tbanhui : 这里hive难道只是在host1上安装、使用？ Alex 的 Hadoop 菜鸟教程: 第10课 Hive 安装和使用教程 tbanhui : 这里hive难道只在集群中host1上安装？ Alex 的 Hadoop 菜鸟教程: 第4课 Hadoop 安装教程 - HA方式 (2台服务器) tbanhui : @tbanhui:jps的详细堆栈：8262 -- process information unav... Alex 的 Hadoop 菜鸟教程: 第4课 Hadoop 安装教程 - HA方式 (2台服务器) tbanhui : 老师、大神：最后看到2个datanode了，其它各个方面看来也正常。但jps输出是下面这样，按现在网... Alex 的 Hadoop 菜鸟教程: 第6课 Hbase 安装教程 tbanhui : 请问作者：最后hbase界面截图那里，既然之前配置了2个region server，为什么这个截图上... Alex 的 Hadoop 菜鸟教程: 第4课 Hadoop 安装教程 - HA方式 (2台服务器) tbanhui : @tbanhui:其他个方面看起来都没有问题，就是datanode这里有问题，请作者看到后说明下，谢...

Recno:: 50
URL:: http://blog.csdn.net/nsrainbow/article/details/49670479

ParseText::
《HBase权威指南》读书笔记12:第十二章 集群管理 - 我可以接受失败，但我不能接受放弃。--迈克尔 乔丹 - 博客频道 - CSDN.NET 我可以接受失败，但我不能接受放弃。--迈克尔 乔丹 目录视图 摘要视图 订阅 学院APP首次下载，可得50C币！     欢迎来帮助开源“进步”     当讲师？爱学习？投票攒课吧     认识Atlassian Datacenter产品     深圳小伙伴的福利来啦 《HBase权威指南》读书笔记12:第十二章 集群管理 标签： hbase 2015-11-09 23:38 707人阅读 评论 (0) 收藏 举报 分类： hadoop （16） 作者同类文章 X 版权声明：本文为博主原创文章，未经博主允许不得转载。 运维任务 减少节点 先停止一个region服务器 $ ./bin/hbase-daemon.sh stop regionserver region服务器会先关闭所有region，然后把自己停止。 等待zk超时后就会过期。 master会将这台机器上的region移动到别的机器上 注意 ：节点关闭之前要先禁用负载均衡 hbase(main):0.01:0>balance_switch false graceful_stop 但是region下线会带来一定的服务不可用时间，时间取决于zk的超时。这种方式不是很好。所以最好使用 graceful_stop ./bin/graceful_stop.sh HOSTNAME graceful_stop 会先把region一个一个移动出来再关闭region服务器 滚动重启 其实就是用一段脚本，一个一个的服务器重启过去 for i in `cat conf/regionservers|sort`;do ./bin/graceful_stop.sh \ --restart --reload --debug $i;done &> /tmp/log.txt & 新增服务器 完全分布式集群 添加master服务器 添加一个备份master，防止单点故障问题。 /hbase/master znode 是临时znode 用以下命令启动一个备份master $ ./bin/hbase-daemon.sh start master 如果已经有一个master，这条命令会启动一个新的master进程等待zk中的znode被移除 如果使用 --backup 则该master确定为备份master，这样可以指定某一台master为工作的master $ ./bin/hbase-daemon start master --backup 如果经历了多次failover，就不知道哪台服务器正在工作了，所以要用浏览器一台一台的访问 60010 看过去 0.90.x以后 可以通过配置文件来指定备份服务器 conf/backup-masters 添加region服务器 用户要修改conf/regionservers 文件。 然后使用启动脚本在新节点上启动 $ ./bin/hbase-daemon.sh start regionserver 数据任务 导入/导出 $ hbase jar $HBASE_HOME/hbase-0.91.0-SNAPSHOT.jar export 具体参数请根据提示输入。只有 tablename 和 outputdir 是必填项 注意 ：outputdir 是导出到的HDFS目录，不是你本机的目录 相同的还有 import 命令，具体自己参考help CopyTable工具 用户可以用该工具将一张已经存在的表从主机群复制到从集群。或者直接复制一个表 $ hadoop jar $HBASE_HOME/hbase-xxxx-.jar copytable \ --new.name=testtable3 testtable 批量导入 批量导入比import好的一点就是压力不会突然增大。 批量导入会经历一下步骤（具体太复杂） 使用importtsv工具准备数据 用  completebulkload (完全批量载入工具)导入数据 复制 就是replication 功能，通过 hbase.replication 来开启。开启之后从集群会自动复制主集群的表 额外的任务 集群共存 为了测试需要，经常会需要部署不止一个集群（相当于mysql里面的多个scheme） 步骤： 把 HBASE_HOME/conf 复制一份叫 conf2 修改hbase-env.sh 和 hbase-site.xml 并修改端口等参数 用 HBASE_CONF_DIR=conf.2 bin/start_hbase.sh 来启动第二个集群 改变日志级别 HBase默认日志级别为debug。可以通过编辑 conf/log4j.properties 来修改日志级别 故障处理 HBase Fsck Hbase中有一个叫 hbck的工具，内部是用 HBaseFsck 类来实现的修复。用以下命令看参数 $ ./bin/HBase hbck -h 一旦开始运行， hbck 会扫描所有 .META. 的相关信息。然后会比较收集的信息来报告一致性和完整性问题。 一致性问题 检查region 是否同时存在于 .META. 表和 HDFS 中，并检查是否只被指派给唯一的region服务器  完整性检查 将region于表细节信息比较来找到缺失的region。同时也会检查 region 起止键范围中的空洞，或重叠情况 检查到以上问题后用 fix 选项来修复以上问题 常见问题 调整文件句柄   通过以下命令来检查当前ulimit设置 $ cat /proc/<PID of JVM>/limits 安全的设置是 32000 Datanode 连接数 Datanode 的并发数量至少为 4096  压缩 压缩应该一直被打开，不过要按照 11.3中的设置压缩编码库，不然你设置了表的压缩参数 COMPRESSION 就会报错 垃圾回收/内存调优 这个命题就比较大了，参考前面的性能调优部分 稳定性问题 确定region服务器和zk没有开始使用 swap 检查网络问题 检查垃圾回收产生的停顿 监控慢磁盘 上一篇 《HBase权威指南》读书笔记11:第十一章 性能优化 下一篇 jQuery deffered和promise对象方法 顶 0 踩 0 我的同类文章 hadoop （16） http://blog.csdn.net 猜你在找 查看评论 * 以上用户言论只代表其个人观点，不代表CSDN网站的观点或立场 个人资料 nsrainbow 访问： 423233次 积分： 6047 等级： 积分：6047 排名： 第2161名 原创： 177篇 转载： 81篇 译文： 4篇 评论： 97条 文章搜索 文章分类 css (12) FLEX (14) javascript (34) java技术 (65) PHP (31) 其他 (19) 数据库 (21) 服务器 (15) 进销存知识 (1) android (2) 并发架构 (1) hadoop (17) Alex的Hadoop菜鸟教程 (22) 文章存档 2015年12月 (2) 2015年11月 (3) 2015年10月 (13) 2015年09月 (3) 2015年07月 (1) 2015年03月 (3) 2015年02月 (5) 2015年01月 (4) 2014年12月 (5) 2014年11月 (4) 2014年10月 (2) 2014年09月 (9) 2014年08月 (3) 2014年07月 (9) 2014年06月 (10) 2014年05月 (9) 2014年04月 (1) 2014年03月 (1) 2014年01月 (2) 2013年12月 (1) 2013年11月 (5) 2013年10月 (8) 2013年09月 (3) 2013年08月 (7) 2013年07月 (4) 2013年06月 (9) 2013年05月 (11) 2013年04月 (1) 2013年02月 (1) 2013年01月 (1) 2012年12月 (6) 2012年11月 (1) 2012年09月 (1) 2012年06月 (1) 2012年03月 (4) 2012年02月 (1) 2011年12月 (1) 2011年10月 (1) 2011年09月 (5) 2011年08月 (13) 2011年06月 (1) 2010年10月 (2) 2009年11月 (1) 2009年05月 (1) 2009年04月 (1) 2009年02月 (1) 2008年08月 (5) 2008年07月 (6) 2008年06月 (4) 2008年05月 (15) 2008年04月 (28) 2008年03月 (18) 2008年02月 (3) 2008年01月 (5) 阅读排行 史上最简! PHP调试环境搭建-Zend Debugger安装 (35396) 推荐一个很好的 HttpClient 入门教程 (15433) 如何彻底删除node.js以及node.js安装教程(基于Centos其他linux版本可以类推 ) (14588) php 小数整理,向上取整,向下去整,四舍五入,丢弃小数部分,保留整数部分 (13254) flex中dictionary跟Object的区别与遍历 (8361) git for windows （又名 msysgit）如何记住用户名和密码 (7668) eclipse 自动换行wordwrap 插件 (6217) shiro 与 redis 结合的解决方案 shiro-redis (6187) Alex 的 Hadoop 菜鸟教程: 第19课 华丽的控制台 HUE 安装以及使用教程 (6057) sun.net.ftp.FtpClient 中文目录乱码问题解决 (5608) 评论排行 史上最简! PHP调试环境搭建-Zend Debugger安装 (10) sun.net.ftp.FtpClient 中文目录乱码问题解决 (8) 推荐一个很好的 HttpClient 入门教程 (6) shiro 与 redis 结合的解决方案 shiro-redis (6) Alex 的 Hadoop 菜鸟教程: 第4课 Hadoop 安装教程 - HA方式 (2台服务器) (6) Ext form 提交乱码问题解决经过 (5) Shiro的 rememberMe 功能使用指导(为什么rememberMe设置了没作用？) (5) 使用filter完成的漂亮的CSS渐变特效——blendtrans (4) 史上最简! 解决Optimizer与Debugger兼容性问题 (3) 精简出最小 jre (3) 推荐文章 *App竞品技术分析 （6）热修复 *架构设计：系统间通信（17）——服务治理与Dubbo 中篇（分析） *一款炫酷Loading动画--加载失败 *图解堆算法、链表、栈与队列（多图预警） *Android中ContentProvider组件详解 *Android平台Camera实时滤镜实现方法探讨(九)--磨皮算法探讨(一) 最新评论 Shiro的 rememberMe 功能使用指导(为什么rememberMe设置了没作用？) m421154133 : 谢谢前辈赐教 Shiro的 rememberMe 功能使用指导(为什么rememberMe设置了没作用？) LZ645596034 : 真是纠结·· git egit 如何 revert ZHOUCHAOQIANG : 为何这个插件，revert commit的时候，报failed Alex 的 Hadoop 菜鸟教程: 第10课 Hive 安装和使用教程 tbanhui : 大神：hive这样安装出来的好像不是集群啊，为啥在host1上建的表，在host2上的hive看不到... Alex 的 Hadoop 菜鸟教程: 第10课 Hive 安装和使用教程 tbanhui : 这里hive难道只是在host1上安装、使用？ Alex 的 Hadoop 菜鸟教程: 第10课 Hive 安装和使用教程 tbanhui : 这里hive难道只在集群中host1上安装？ Alex 的 Hadoop 菜鸟教程: 第4课 Hadoop 安装教程 - HA方式 (2台服务器) tbanhui : @tbanhui:jps的详细堆栈：8262 -- process information unav... Alex 的 Hadoop 菜鸟教程: 第4课 Hadoop 安装教程 - HA方式 (2台服务器) tbanhui : 老师、大神：最后看到2个datanode了，其它各个方面看来也正常。但jps输出是下面这样，按现在网... Alex 的 Hadoop 菜鸟教程: 第6课 Hbase 安装教程 tbanhui : 请问作者：最后hbase界面截图那里，既然之前配置了2个region server，为什么这个截图上... Alex 的 Hadoop 菜鸟教程: 第4课 Hadoop 安装教程 - HA方式 (2台服务器) tbanhui : @tbanhui:其他个方面看起来都没有问题，就是datanode这里有问题，请作者看到后说明下，谢...

Recno:: 51
URL:: http://blog.csdn.net/nsrainbow/article/details/49834097

ParseText::
有趣的Ruby-学习笔记1 - 我可以接受失败，但我不能接受放弃。--迈克尔 乔丹 - 博客频道 - CSDN.NET 我可以接受失败，但我不能接受放弃。--迈克尔 乔丹 目录视图 摘要视图 订阅 学院APP首次下载，可得50C币！     欢迎来帮助开源“进步”     当讲师？爱学习？投票攒课吧     认识Atlassian Datacenter产品     深圳小伙伴的福利来啦 有趣的Ruby-学习笔记1 标签： ruby 2015-12-14 00:33 662人阅读 评论 (0) 收藏 举报 分类： 其他 （18） 作者同类文章 X 版权声明：本文为博主原创文章，未经博主允许不得转载。 Ruby类 类定义 #!/usr/bin/ruby class Sample def hello puts "Hello Ruby!" end end # 使用上面的类来创建对象 object = Sample. new object.hello 注意 ：无参数的函数调用可以省略() 初始化方法 初始化方法有一个统一的名字叫 initialize class Customer @@no_of_customers=0 def initialize(id, name, addr) @cust_id=id @cust_name=name @cust_addr=addr end end Ruby变量 ruby支持5种类型 一般小写字母、 下划线开头 ：变量（Variable）。 $开头：全局变量（Global variable）。 @开头：实例变量（Instance variable）。 @@开头：类变量（Class variable）类变量被共享在整个继承链中 大写字母开头：常数（Constant）。 变量(就是 局部变量) 变量的打印 变量在打印的时候不能省略 大括号，别的类型变量都可以省略大括号，比如 你这样打印变量是打不出东西的 错误的写法 a=1 b=2 puts "a: #a" puts "b: #b" 打印结果 a: #a b: #b 正确的写法 a=1 b=2 puts "a: #{a}" puts "b: #{b}" 打印结果 a: 1 b: 2 变量的生存周期 变量的生存周期只在方法中，出了方法就没了，所以也只能定义在方法里面，比如 错误的写法 class Test2 a=1 b=2 def printVar() puts "a: #{a}" puts "b: #{b}" end end hellotest = Test2.new hellotest.printVar() 输出 test.rb:5:in `printVar': undefined local variable or method `a' for #<Test2:0x00000002cf2248> (NameError) from test.rb:10:in `<main>' 正确的写法 class Test2 def printVar(a,b) puts "a: #{a}" puts "b: #{b}" end end hellotest = Test2.new hellotest.printVar(1,2) 输出 a: 1 b: 2 变量的传递 简单类型是值拷贝（字符串也是简单对象，这点跟java不一样） class Test2 def testPass(a,b) puts "before add : a: #{a} b: #{b}" addVar(a,b) puts "after add : a: #{a} b: #{b}" end def addVar(a,b) a += 1 b += 2 end end hellotest = Test2.new hellotest.testPass(1,2) 输出 before add : a: 1 b: 2 after add : a: 1 b: 2 复杂对象是对象引用 class Obj1 def initialize(a) @a=a end def printVal() puts "a: #@a" end def setA(a) @a=a end def getA() return @a end end class Test2 def testPass() testobj = Obj1.new("hello") a = testobj.getA() puts "before add : a: #{a}" addVar(testobj) a = testobj.getA() puts "after add : a: #{a}" end def addVar(obj) obj.setA(obj.getA() + " world") end end hellotest = Test2.new hellotest.testPass() 输出 before add : a: hello after add : a: hello world 实例变量 实例变量的打印 实例变量的打印是可以省略大括号的，比如 #@a  跟 #{@a} 是一回事 实例变量的生存周期 实例变量只能在 initialize 里面被定义。如果想像在java中这样定义是错误的 class LearnInstanceVar @a=1 def printVar() puts "a: #{@a}" end end test1 = LearnInstanceVar.new test1.printVar 输出 $ ruby test.rb a: 正确的定义 class LearnInstanceVar def initialize(a) @a=a end def printVar() puts "a: #{@a}" end end test1 = LearnInstanceVar.new("hello") test1.printVar 输出 $ ruby test.rb a: hello 类似java中的private，但是更严格，连定义的位置都只能放在特定的方法里面 类变量 类变量的打印 类变量的打印是可以省略大括号的，比如 #@@a  跟 #{@@a} 是一回事 类变量的生存周期 类变量可以在多个实例之间公用，类似java的 static 在类的方法体以外声明 比如这样定义和使用类变量 #!/usr/bin/ruby class Customer @@no_of_customers=0 def printCus() @@no_of_customers += 1 puts "Total number of customers : #{@@no_of_customers}" end end cust1=Customer.new cust2=Customer.new cust1.printCus() cust2.printCus()  全局变量 全局变量以$符号打头 全局变量可以在类与类之间共享 Ruby 运算符 下面只说ruby比较特殊的一些运算符 比较运算符 == 和 equal？ == 和 equal 跟java中定义的正好相反： equal? 是比较两个对象是否是同一个对象 == 是比较两个对象是否相等 例子 a = "Ruby" # 定义一个字符串对象 b = "Ruby" # 虽然和a的内容相同，但是他们是不同的对象 a.equal?(b) # false: a和b指向不同的对象 a == b # true: 他们的内容是相同的 eq? 是 equal? 的缩写 <=>  联合比较运算符 这是一个神奇的运算符：联合比较运算符。如果第一个操作数等于第二个操作数则返回 0，如果第一个操作数大于第二个操作数则返回 1，如果第一个操作数小于第二个操作数则返回 -1。 === 三等号 这个运算符更神奇： 通常情况下这中方式与==是一样的，但是在某些特定情况下，===有特殊的含义： 在Range中===用于判断等号右边的对象是否包含于等号左边的Range； 正则表达式中用于判断一个字符串是否匹配模式， Class定义===来判断一个对象是否为类的实例， Symbol定义===来判断等号两边的符号对象是否相同。 例子： (1..10) === 5 # true: 5属于range 1..10 /\d+/ === "123" # true: 字符串匹配这个模式 String === "s" # true: "s" 是一个字符串类的实例 :s === "s" # true .eql? 如果接收器和参数具有相同的类型和相等的值，则返回 true。比如 1 == 1.0 返回 true，但是 1.eql?(1.0) 返回 false。 并行赋值 a = 10 b = 20 c = 30 可以写成这样 a, b, c = 10, 20, 30 于是在java和c中很麻烦的变量交换，在ruby中可以很简单的写成 a, b = b, c 这样的代码 a=1 b=2 c=3 a,b=b,c puts "a: #{a}" puts "b: #{b}" puts "c: #{c}" 执行结果为 $ ruby test.rb a: 2 b: 3 c: 3 范围运算符 1..10 创建了一个从1 到10的范围，并且包含10 1...10 跟上面那个唯一的不同是不包含10 define? 运算符 我们在别的语言中都见到过如何判断变量是否被定义的方法，比如js的是否等于undefined，和php的isset，ruby专门为这种操作设计了一个运算符叫 define? 这个运算符不仅可以告诉你该变量是否定义还可以告诉你 变量的范围 defined? variable # 如果 variable 已经初始化，则为 True 比如 foo = 42 defined? foo # => "local-variable" defined? $_ # => "global-variable" defined? bar # => nil（未定义） 还可以检测方法是否定义了 defined? method_call # 如果方法已经定义，则为 True defined? puts # => "method" defined? puts(bar) # => nil（在这里 bar 未定义） defined? unpack # => nil（在这里未定义） Ruby 点运算符 "." 和双冒号运算符 "::" 请记住：在 Ruby 中，类和方法也可以被当作常量。 您只需要在表达式的常量名前加上 :: 前缀，即可返回适当的类或模块对象。 如果未使用前缀表达式，则默认使用主 Object 类。 例子 MR_COUNT = 0 # 定义在主 Object 类上的常量 module Foo MR_COUNT = 0 ::MR_COUNT = 1 # 设置全局计数为 1 MR_COUNT = 2 # 设置局部计数为 2 end puts MR_COUNT # 这是全局常量 puts Foo::MR_COUNT # 这是 "Foo" 的局部常量 上一篇 jQuery deffered和promise对象方法 下一篇 有趣的Ruby-学习笔记2 顶 0 踩 0 我的同类文章 其他 （18） http://blog.csdn.net 猜你在找 查看评论 * 以上用户言论只代表其个人观点，不代表CSDN网站的观点或立场 个人资料 nsrainbow 访问： 423229次 积分： 6047 等级： 积分：6047 排名： 第2161名 原创： 177篇 转载： 81篇 译文： 4篇 评论： 97条 文章搜索 文章分类 css (12) FLEX (14) javascript (34) java技术 (65) PHP (31) 其他 (19) 数据库 (21) 服务器 (15) 进销存知识 (1) android (2) 并发架构 (1) hadoop (17) Alex的Hadoop菜鸟教程 (22) 文章存档 2015年12月 (2) 2015年11月 (3) 2015年10月 (13) 2015年09月 (3) 2015年07月 (1) 2015年03月 (3) 2015年02月 (5) 2015年01月 (4) 2014年12月 (5) 2014年11月 (4) 2014年10月 (2) 2014年09月 (9) 2014年08月 (3) 2014年07月 (9) 2014年06月 (10) 2014年05月 (9) 2014年04月 (1) 2014年03月 (1) 2014年01月 (2) 2013年12月 (1) 2013年11月 (5) 2013年10月 (8) 2013年09月 (3) 2013年08月 (7) 2013年07月 (4) 2013年06月 (9) 2013年05月 (11) 2013年04月 (1) 2013年02月 (1) 2013年01月 (1) 2012年12月 (6) 2012年11月 (1) 2012年09月 (1) 2012年06月 (1) 2012年03月 (4) 2012年02月 (1) 2011年12月 (1) 2011年10月 (1) 2011年09月 (5) 2011年08月 (13) 2011年06月 (1) 2010年10月 (2) 2009年11月 (1) 2009年05月 (1) 2009年04月 (1) 2009年02月 (1) 2008年08月 (5) 2008年07月 (6) 2008年06月 (4) 2008年05月 (15) 2008年04月 (28) 2008年03月 (18) 2008年02月 (3) 2008年01月 (5) 阅读排行 史上最简! PHP调试环境搭建-Zend Debugger安装 (35396) 推荐一个很好的 HttpClient 入门教程 (15433) 如何彻底删除node.js以及node.js安装教程(基于Centos其他linux版本可以类推 ) (14588) php 小数整理,向上取整,向下去整,四舍五入,丢弃小数部分,保留整数部分 (13254) flex中dictionary跟Object的区别与遍历 (8361) git for windows （又名 msysgit）如何记住用户名和密码 (7668) eclipse 自动换行wordwrap 插件 (6217) shiro 与 redis 结合的解决方案 shiro-redis (6187) Alex 的 Hadoop 菜鸟教程: 第19课 华丽的控制台 HUE 安装以及使用教程 (6057) sun.net.ftp.FtpClient 中文目录乱码问题解决 (5608) 评论排行 史上最简! PHP调试环境搭建-Zend Debugger安装 (10) sun.net.ftp.FtpClient 中文目录乱码问题解决 (8) 推荐一个很好的 HttpClient 入门教程 (6) shiro 与 redis 结合的解决方案 shiro-redis (6) Alex 的 Hadoop 菜鸟教程: 第4课 Hadoop 安装教程 - HA方式 (2台服务器) (6) Ext form 提交乱码问题解决经过 (5) Shiro的 rememberMe 功能使用指导(为什么rememberMe设置了没作用？) (5) 使用filter完成的漂亮的CSS渐变特效——blendtrans (4) 史上最简! 解决Optimizer与Debugger兼容性问题 (3) 精简出最小 jre (3) 推荐文章 *App竞品技术分析 （6）热修复 *架构设计：系统间通信（17）——服务治理与Dubbo 中篇（分析） *一款炫酷Loading动画--加载失败 *图解堆算法、链表、栈与队列（多图预警） *Android中ContentProvider组件详解 *Android平台Camera实时滤镜实现方法探讨(九)--磨皮算法探讨(一) 最新评论 Shiro的 rememberMe 功能使用指导(为什么rememberMe设置了没作用？) m421154133 : 谢谢前辈赐教 Shiro的 rememberMe 功能使用指导(为什么rememberMe设置了没作用？) LZ645596034 : 真是纠结·· git egit 如何 revert ZHOUCHAOQIANG : 为何这个插件，revert commit的时候，报failed Alex 的 Hadoop 菜鸟教程: 第10课 Hive 安装和使用教程 tbanhui : 大神：hive这样安装出来的好像不是集群啊，为啥在host1上建的表，在host2上的hive看不到... Alex 的 Hadoop 菜鸟教程: 第10课 Hive 安装和使用教程 tbanhui : 这里hive难道只是在host1上安装、使用？ Alex 的 Hadoop 菜鸟教程: 第10课 Hive 安装和使用教程 tbanhui : 这里hive难道只在集群中host1上安装？ Alex 的 Hadoop 菜鸟教程: 第4课 Hadoop 安装教程 - HA方式 (2台服务器) tbanhui : @tbanhui:jps的详细堆栈：8262 -- process information unav... Alex 的 Hadoop 菜鸟教程: 第4课 Hadoop 安装教程 - HA方式 (2台服务器) tbanhui : 老师、大神：最后看到2个datanode了，其它各个方面看来也正常。但jps输出是下面这样，按现在网... Alex 的 Hadoop 菜鸟教程: 第6课 Hbase 安装教程 tbanhui : 请问作者：最后hbase界面截图那里，既然之前配置了2个region server，为什么这个截图上... Alex 的 Hadoop 菜鸟教程: 第4课 Hadoop 安装教程 - HA方式 (2台服务器) tbanhui : @tbanhui:其他个方面看起来都没有问题，就是datanode这里有问题，请作者看到后说明下，谢...

Recno:: 52
URL:: http://blog.csdn.net/nsrainbow/article/details/50058293

ParseText::
jQuery deffered和promise对象方法 - 我可以接受失败，但我不能接受放弃。--迈克尔 乔丹 - 博客频道 - CSDN.NET 我可以接受失败，但我不能接受放弃。--迈克尔 乔丹 目录视图 摘要视图 订阅 学院APP首次下载，可得50C币！     欢迎来帮助开源“进步”     当讲师？爱学习？投票攒课吧     认识Atlassian Datacenter产品     深圳小伙伴的福利来啦 jQuery deffered和promise对象方法 2015-11-26 17:01 85人阅读 评论 (0) 收藏 举报 分类： javascript （33） 作者同类文章 X 一、前言 为了让前端们从回调的地狱中回到天堂，jQuery也引入了Promise的概念。Promise是一种令代码异步行为更加优雅的抽象，有了它，我们就可以像写同步代码一样去写异步代码。jQuery从1.5版本开始实现了 CommonJS   Promise/A 规范这一重量级方案，不过没有严格按照规范进行实现，有一些API上的差异。 好，让我们来看看他们的特性吧（ 本文示例基于jQuery 1.8版本以上 ）。 二、示例 以前写动画时，我们通常是这么干的： $( '.animateEle' ).animate({ opacity: '.5' }, 4000 , function () { $( '.animateEle2' ).animate({ width: '100px' }, 2000 , function () { // 这样太伤了 $( '.animateEle3' ).animate({ height: '0' }, 2000 ); }); }); 假如这么使用回调的话，那就太伤了。幸好，还有一些现成的Promise解决方案来优雅地解决这种问题。 我们看看jQuery提供的解决办法。 var animate1 = function () { return $( '.animateEle1' ).animate({opacity: '.5' }, 4000 ).promise(); }; var animate2 = function () { return $( '.animateEle2' ).animate({width: '100px' }, 2000 ).promise(); }; var animate3 = function () { return $( '.animateEle3' ).animate({height: '0' }, 2000 ).promise(); }; // so easy,有木有，so clear，有木有 $.when(animate1()).then(animate2).then(animate3); 很明显，更改后的代码更易懂易读了。 但是，上面的代码，有些细节的东西并没有透露，一不小心，就容易出错，得不到我们想要的顺序完成动画的效果。下面让我们来全面理解jQuery提供的Promise和 deferred 对象的方法，看看到底如何使用。 三、promise和deffered对象方法 Promise对象其实就是 deferred 对象的特例，因为Promise对象不能更改异步状态，而 deferred 对象可以。这点在他们的方法设计上，有着明显的体现。 1.promise对象方法 通常，对于DOM，动画，ajax相关方法，我们都可以使用Promise方法。调用Promise方法，返回的是Promise对象。可以链式调用Promise方法。 promise对象常见的方法有三个 ： done ， fail ， then 。 其它的方法就不要去记了，jQuery这里的接口方法太多了，在我看来挺啰嗦的，就跟早期的事件方法绑定一样， live ， delegate ， bind ，最终不是都归为 on 来管了么。 代码示例，如下： 1.DOM使用Promise方法： var box=$( '#box' ); box.promise().done( function (ele) { console .log(ele); //jQuery box }); 2.Ajax使用Promise方法(默认返回一个Promise对象，所以可以不必显式调用Promise方法)： $.post( '/' ,{}).done( function (data) { console .log( '请求成功' ); }).fail( function () { console .log( '请求错误' ); }); 动画示例已有，就不重复列出了。 2.deferred对象方法 对于 deferred 对象呢，也就是使用 $.Deferred() 方法，以及 $.when() 等方法创造出来的对象，有如下的常用方法： resolve , reject , notify ; done , fail , progress ; 另外还有 promise 、 then 和 always 方法。 之所以这么排版，是因为他们是对应的，也就是说： resolve 方法会触发 done 的回调执行， reject 会触发 fail 的回调， notify 会触发 progress 的回调。 直接看代码： var wait = function (ms) { var dtd = $.Deferred(); setTimeout(dtd.resolve, ms); // setTimeout(dtd.reject, ms); // setTimeout(dtd.notify, ms); return dtd.promise(); //此处也可以直接返回dtd }; wait( 2500 ).done( function () { console .log( 'haha,师太，你可让老衲久等了' ); }).fail( function () { console .log( '失败了' ); }).progress( function (res) { console .log( '等待中...' ); }); 我们看到了，上面的代码中，在 wait 函数中，返回的是个Promise对象，而不是 deferred 对象。 要知道，Promise对象是没有 resolve , reject , notify 等方法的，也就意味着，你无法针对Promise对象进行状态更改，只能在 done 或 fail 中进行回调配置。所以，你如果这么调用 wait(2500).resolve() 将会报错，因为 wait(2500) 返回的是个Promise对象，不存在 resolve 方法。 但是，这么做，有个好处，我们把 dtd 这个 deferred 对象放在了 wait 函数中，作为了局部变量，避免了全局的污染；进一步通过Promise方法，转化 dtd 这个 deferred 对象为Promise对象，避免了函数 wait 外部可能发生的状态更改（假如我们确实有这个需求）。 比如： var wait = function (ms) { var dtd = $.Deferred(); setTimeout(dtd.resolve, ms); // setTimeout(dtd.reject, ms); // setTimeout(dtd.notify, ms); return dtd; //此处也可以直接返回dtd }; wait( 2500 ).reject().fail( function () { console .log( '失败了...............' ); }); 我们在外部更改了 wait 返回的 deferred 对象的状态，这样必然触发该对象的 fail 回调函数。 对于 always 方法，从字面意思上就很容易理解， deferred 对象无论是 resolve 还是 reject ，都会触发该方法的回调。 3.其它共性 此处讲讲 then 和 $.when 方法的使用。它们对Promise对象也适用。 $.when 方法接受多个 deferred 对象或者纯javascript对象，返回Promise对象。 then 方法依次接受三个回调，分别为 deferred 对象 resolve , reject , notify 后触发的回调，返回一个Promise对象。注意，必须传入函数，而该函数只有返回一个Promise对象，才能够让异步事件按照预期顺序来执行。 我们来看看最开始的动画示例代码， $.when(animate1()).then(animate2).then(animate3) ， $.when 方法中接受了一个 animate1 的函数执行结果，也就是得到了一个Promise对象，而后的 then 中，则只是接受了一个变量名，这样得到的结果是一个匿名的函数体，而该函数中返回的是Promise对象。正好符合了我们对 then 接受参数的要求。 假如我们把执行语句改成： $.when(animate1()).then(animate2()).then(animate3()) ，这样造成的结果就是三个动画同步执行了。与 $.when(animate1(),animate2(),animate3()) 无异。 既然 then 是如此要求，那么与 then 方法类似的 done , fail , progress 也是一样的。 四、参考文章 因为jQuery deffered和promise对象方法使用起来比较繁琐，接口太多，同样一件事儿，你可以有好几种写法。所以，某些接口方法可能会被废弃。若要使用其它方法，请去官网参考。 jQuery deferred 对象的 promise 方法 Promise对象和Deferred对象 上一篇 《HBase权威指南》读书笔记12:第十二章 集群管理 下一篇 有趣的Ruby-学习笔记1 顶 0 踩 0 我的同类文章 javascript （33） http://blog.csdn.net 猜你在找 查看评论 * 以上用户言论只代表其个人观点，不代表CSDN网站的观点或立场

Recno:: 53
URL:: http://blog.csdn.net/nsrainbow/article/details/50375578

ParseText::
有趣的Ruby-学习笔记2 - 我可以接受失败，但我不能接受放弃。--迈克尔 乔丹 - 博客频道 - CSDN.NET 我可以接受失败，但我不能接受放弃。--迈克尔 乔丹 目录视图 摘要视图 订阅 学院APP首次下载，可得50C币！     欢迎来帮助开源“进步”     当讲师？爱学习？投票攒课吧     认识Atlassian Datacenter产品     深圳小伙伴的福利来啦 有趣的Ruby-学习笔记2 标签： ruby 2015-12-22 00:21 419人阅读 评论 (0) 收藏 举报 分类： 其他 （18） 作者同类文章 X 版权声明：本文为博主原创文章，未经博主允许不得转载。 注释 单行注释就是 # 多行注释比较奇怪是 用 = begin 和 =end #!/usr/bin/ruby -w puts "Hello, Ruby!" =begin 这是一个多行注释。 可扩展至任意数量的行。 但 =begin 和 =end 只能出现在第一行和最后一行。 =end 条件判断 if conditional [then] code... [elsif conditional [then] code...]... [else code...] end if 表达式用于条件执行。值 false 和 nil 为假，其他值都为真。请注意，Ruby 使用 elsif，不是使用 else if 和 elif。 通常我们省略保留字 then 。若想在一行内写出完整的 if 式，则必须以 then 隔开条件式和程式区块。如下所示: if a == 4 then a = 7 end 实例 #!/usr/bin/ruby # -*- coding: UTF-8 -*- x=1 if x > 2 puts "x 大于 2" elsif x <= 2 and x!=0 puts "x 是 1" else puts "无法得知 x 的值" end Ruby循环 语法 while conditional [do] code end 或者 while conditional [:] code end 语法中 do 或 : 可以省略不写。但若要在一行内写出 while 式，则必须以 do 或 : 隔开条件式或程式区块。 语法 code while condition 或者 begin code end while conditional until 比较特殊的是 until 语法 until conditional [do] code end 实例 #!/usr/bin/ruby # -*- coding: UTF-8 -*- $i = 0 $num = 5 until $i > $num do puts("在循环语句中 i = #$i" ) $i +=1; end for for一般来说是使用率最高的循环方式 for variable [, variable ...] in expression [do] code end 比如 #!/usr/bin/ruby # -*- coding: UTF-8 -*- for i in 0..5 puts "局部变量的值为 #{i}" end 还可以这么写 #!/usr/bin/ruby # -*- coding: UTF-8 -*- (0..5).each do |i| puts "局部变量的值为 #{i}" end next语句 相当于 continue 语句 redo 可以重新开始循环，不过很容易造成死循环，不知道为什么设计这个语法 #!/usr/bin/ruby # -*- coding: UTF-8 -*- for i in 0..5 if i < 2 then puts "局部变量的值为 #{i}" redo end end 这个会产生一个死循环 retry语句 如果 retry 出现在 begin 表达式的 rescue 子句中，则从 begin 主体的开头重新开始。 begin do_something # 抛出的异常 rescue # 处理错误 retry # 重新从 begin 开始 end 如果 retry 出现在迭代内、块内或者 for 表达式的主体内，则重新开始迭代调用。迭代的参数会重新评估。 for i in 1..5 retry if some_condition # 重新从 i == 1 开始 end 实例 #!/usr/bin/ruby # -*- coding: UTF-8 -*- for i in 1..5 retry if i > 2 puts "局部变量的值为 #{i}" end 然后这段又是一个死循环 上一篇 有趣的Ruby-学习笔记1 顶 1 踩 0 我的同类文章 其他 （18） http://blog.csdn.net 猜你在找 查看评论 * 以上用户言论只代表其个人观点，不代表CSDN网站的观点或立场 个人资料 nsrainbow 访问： 423245次 积分： 6048 等级： 积分：6048 排名： 第2161名 原创： 177篇 转载： 81篇 译文： 4篇 评论： 97条 文章搜索 文章分类 css (12) FLEX (14) javascript (34) java技术 (65) PHP (31) 其他 (19) 数据库 (21) 服务器 (15) 进销存知识 (1) android (2) 并发架构 (1) hadoop (17) Alex的Hadoop菜鸟教程 (22) 阅读排行 史上最简! PHP调试环境搭建-Zend Debugger安装 (35396) 推荐一个很好的 HttpClient 入门教程 (15433) 如何彻底删除node.js以及node.js安装教程(基于Centos其他linux版本可以类推 ) (14588) php 小数整理,向上取整,向下去整,四舍五入,丢弃小数部分,保留整数部分 (13254) flex中dictionary跟Object的区别与遍历 (8361) git for windows （又名 msysgit）如何记住用户名和密码 (7668) eclipse 自动换行wordwrap 插件 (6217) shiro 与 redis 结合的解决方案 shiro-redis (6187) Alex 的 Hadoop 菜鸟教程: 第19课 华丽的控制台 HUE 安装以及使用教程 (6057) sun.net.ftp.FtpClient 中文目录乱码问题解决 (5608) 评论排行 史上最简! PHP调试环境搭建-Zend Debugger安装 (10) sun.net.ftp.FtpClient 中文目录乱码问题解决 (8) 推荐一个很好的 HttpClient 入门教程 (6) shiro 与 redis 结合的解决方案 shiro-redis (6) Alex 的 Hadoop 菜鸟教程: 第4课 Hadoop 安装教程 - HA方式 (2台服务器) (6) Ext form 提交乱码问题解决经过 (5) Shiro的 rememberMe 功能使用指导(为什么rememberMe设置了没作用？) (5) 使用filter完成的漂亮的CSS渐变特效——blendtrans (4) 史上最简! 解决Optimizer与Debugger兼容性问题 (3) 精简出最小 jre (3) 推荐文章 *App竞品技术分析 （6）热修复 *架构设计：系统间通信（17）——服务治理与Dubbo 中篇（分析） *一款炫酷Loading动画--加载失败 *图解堆算法、链表、栈与队列（多图预警） *Android中ContentProvider组件详解 *Android平台Camera实时滤镜实现方法探讨(九)--磨皮算法探讨(一) 最新评论 Shiro的 rememberMe 功能使用指导(为什么rememberMe设置了没作用？) m421154133 : 谢谢前辈赐教 Shiro的 rememberMe 功能使用指导(为什么rememberMe设置了没作用？) LZ645596034 : 真是纠结·· git egit 如何 revert ZHOUCHAOQIANG : 为何这个插件，revert commit的时候，报failed Alex 的 Hadoop 菜鸟教程: 第10课 Hive 安装和使用教程 tbanhui : 大神：hive这样安装出来的好像不是集群啊，为啥在host1上建的表，在host2上的hive看不到... Alex 的 Hadoop 菜鸟教程: 第10课 Hive 安装和使用教程 tbanhui : 这里hive难道只是在host1上安装、使用？ Alex 的 Hadoop 菜鸟教程: 第10课 Hive 安装和使用教程 tbanhui : 这里hive难道只在集群中host1上安装？ Alex 的 Hadoop 菜鸟教程: 第4课 Hadoop 安装教程 - HA方式 (2台服务器) tbanhui : @tbanhui:jps的详细堆栈：8262 -- process information unav... Alex 的 Hadoop 菜鸟教程: 第4课 Hadoop 安装教程 - HA方式 (2台服务器) tbanhui : 老师、大神：最后看到2个datanode了，其它各个方面看来也正常。但jps输出是下面这样，按现在网... Alex 的 Hadoop 菜鸟教程: 第6课 Hbase 安装教程 tbanhui : 请问作者：最后hbase界面截图那里，既然之前配置了2个region server，为什么这个截图上... Alex 的 Hadoop 菜鸟教程: 第4课 Hadoop 安装教程 - HA方式 (2台服务器) tbanhui : @tbanhui:其他个方面看起来都没有问题，就是datanode这里有问题，请作者看到后说明下，谢...

Recno:: 54
URL:: http://blog.csdn.net/opengl_es/article/details/27565063

ParseText::
关于“转载”文章的声明 - 太阳火神的美丽人生 - 师夷长技以制夷 - 博客频道 - CSDN.NET 太阳火神的美丽人生 - 师夷长技以制夷 敏捷开发及移动和物联设备、绿色教育的研究：iOS、Android、Html5、Arduino、pcDuino 目录视图 摘要视图 订阅 学院APP首次下载，可得50C币！     欢迎来帮助开源“进步”     当讲师？爱学习？投票攒课吧     认识Atlassian Datacenter产品     深圳小伙伴的福利来啦 [置顶] 关于“转载”文章的声明 2014-05-29 20:09 1257人阅读 评论 (0) 收藏 举报 分类： <=即时总结=> （710） 作者同类文章 X 版权声明：本文为博主原创文章，未经博主允许不得转载。转载联系 QQ 30952589，加好友请注明来意。 关于“转载”文章的声明 太阳火神的美丽人生 ( http://blog.csdn.net/opengl_es ) 本文遵循“ 署名-非商业用途-保持一致 ”创作公用协议 转载请保留此句： 太阳火神的美丽人生 -  本博客专注于  敏捷开发及移动和物联设备研究：iOS、Android、Html5、Arduino、pcDuino ， 否则，出自本博客的文章拒绝转载或再转载，谢谢合作。 今天收到一封系统邮件，稍做反思，对于转载的文章，可能本博客并不符合要求，鉴于很多篇了，一一查证，时间有限，故作此声明，如有转载不符合原创作者要求的情况发生，请关注本博并通知或发邮件到 sleks@qq.com，本博对于关注的朋友，都会同时进行关注，以便进行双方互发私信。 相对于传统的，将原文地址和作者一并拷贝粘贴到转载文章的文前或文后的形式，本博一直未采用此种作法，仅在比较忙的时侯，相对较懒的情况下，直接贴上了事，似有不负责任的嫌疑。 本博以方便自已以及关注相关主题的博友为目的，转载文章均将正文标题的超链接，链至原文地址，这样即方便追根塑源，又表明本转载博文仅为原文的一个转载复本；而未仅列出原博文地址的原因，是当下很多较好文章，由于站点或流量等很多原因，较好的博文，确无法追塑到原作者的基地，以寻得同一才华作者的其它好文，故而会留有一个转载复本。 本博所有转载文章，标题均是原文的超链接，推荐博友们直接点击标题链入原文阅读，确已无法链入的，可屈尊阅读转载复本，本博转载博文都尽量确保原文的版面格式（版面格式不美观的文章，本博一般不转载，浪费那工夫去整理思路，还不如移步他处，寻些好文来看），或者截图转载，以恢复原文章的全貌。 总之，本博转载文章，均以留原文章链接，便于前往为目的，转载内容仅作备份复本，恭请少数关注的博友，直接点击转载博文的标题，链入原文，也算尊重原文作者的劳动。 后续，本博会按要求，将转载文章的标题、作者、链接一并附后，但仍会为博友保留转载文章标题直接跳入原文的便捷体验，希望是有益的作法。 再次声明，如有转载文章不妥之处，请关注本博发私信或发邮件，本博会在知系第一时间完善或直接删除相关转载博文。 顶 0 踩 0 我的同类文章 <=即时总结=> （710） http://blog.csdn.net 猜你在找 查看评论 * 以上用户言论只代表其个人观点，不代表CSDN网站的观点或立场 个人资料 sleks 访问： 545669次 积分： 10165 等级： 积分：10165 排名： 第823名 原创： 307篇 转载： 284篇 译文： 130篇 评论： 113条 博客专栏 跟踪 iOS 新特性 文章：7篇 阅读：3544 从本质上满足应聘条件系列 文章：1篇 阅读：563 SSL/TLS 加密传输 文章：8篇 阅读：3999 Java NIO 教程 文章：18篇 阅读：9781 Three.js 文章：24篇 阅读：26188 《漫画线性代数》读书笔记 文章：7篇 阅读：8491 iOS UIKit 框架分类解析 文章：5篇 阅读：6680 iOS 基础框架分类解析 文章：10篇 阅读：10852 阅读排行 [iOS]日历和提醒编程指南（Calendar and Reminders Programming Guide） (5748) 解决 Chrome 访问https网站出现“您的连接不是私密的问题” (5738) iOS 各版本中的新特性（What's New in iOS）- 目录翻译完成 (5608) 什么叫别让孩子输在起跑线上？！ - 电子产品已成儿童“多动症”诱因 (4977) iOS 中 NSParameterAssert 是干啥的之官方解释翻译篇 (4113) 从另一个角度看癌症，现象、结果并不一定是病因！ (4079) iOS 开发库（iOS Developer Library） (3548) Threejs 加载 DAE 模型遇到关题汇总 (3364) 转换到 StoryBoard 的发布说明（Converting to Storyboards Release Notes） (2932) 搜搜（www.soso.com），I 老虎油！ (2847) 文章分类 <=即时总结=> (710) 平台-iOS (256) 平台-Anroid (77) 平台-Html5 (71) 语言-C_C++_OC (56) 语言-Java (122) 语言-Css (8) 语言-JavaScript (74) 敏捷开发-XP (4) 敏捷开发-Scrum (10) 敏捷开发-佛的减法 (118) 敏捷开发-心灵鸡汤 (0) 数据呈现-OpenGL ES (125) 数据呈现-View (1) 数据同步-Thread (0) 数据通道-SOCKET、SSL (1) 数据传输-HTTP (1) 数据承载-XML、JSON (5) 数据编码-Base64 (1) 数据加密-MD5、DES (4) 数据存储-File、Sql (9) 大数据 (1) 物联大时代背景 (31) 物联时代-传感器与通讯 (9) 物联时代-Arduino (7) 文章存档 2015年12月 (55) 2015年11月 (7) 2015年10月 (14) 2015年09月 (11) 2015年08月 (5) 2015年07月 (13) 2015年06月 (11) 2015年05月 (2) 2015年04月 (18) 2015年03月 (16) 2015年02月 (24) 2015年01月 (9) 2014年12月 (18) 2014年11月 (99) 2014年10月 (5) 2014年09月 (8) 2014年08月 (29) 2014年07月 (29) 2014年06月 (32) 2014年05月 (68) 2014年04月 (16) 2014年03月 (20) 2014年02月 (21) 2014年01月 (109) 2013年12月 (72) 2012年11月 (10)

Recno:: 55
URL:: http://blog.csdn.net/opengl_es/article/details/40677099

ParseText::
在熟练使用2B铅笔前，请不要打开Axure - 太阳火神的美丽人生 - 师夷长技以制夷 - 博客频道 - CSDN.NET 太阳火神的美丽人生 - 师夷长技以制夷 敏捷开发及移动和物联设备、绿色教育的研究：iOS、Android、Html5、Arduino、pcDuino 目录视图 摘要视图 订阅 学院APP首次下载，可得50C币！     欢迎来帮助开源“进步”     当讲师？爱学习？投票攒课吧     认识Atlassian Datacenter产品     深圳小伙伴的福利来啦 [置顶] 在熟练使用2B铅笔前，请不要打开Axure 2014-11-01 07:43 1525人阅读 评论 (0) 收藏 举报 分类： <=即时总结=> （710） 作者同类文章 X 敏捷开发-Scrum （9） 作者同类文章 X 在熟练使用2B铅笔前，请不要打开Axure 2012-12-02   16:21   BY   郭晓龙 0 条评论 UML Axure 信息架构 结构层设计 ROSE Visio Balsamiq mockup 【编者按】本文作者 @韩军星 ，在互联网产品领域，习惯性的利用Axure进行设计，已经绑架了我们的思维，让很多产品经理和设计师养成了“无Axure不设计”的恶习，忽略了用户故事、功能规格和信息架构，甚至走入“为了用Axure而用的误区”，导致了资源的大量浪费和产品的硬伤。 因此，提醒为Axure着迷的产品经理：在熟练使用2B铅笔前，请不要打开Axure。 Axure 已成为产品经理、产品设计师以及交互设计师的必备工具，从某种程度讲，Axure帮助我们建立低保真模型，便于与用户的需求验证，也帮助我们构思交互细节，使前端和开发人员更容易理解我们的产品   自我监测是否对Axure着迷 喜欢开始设计产品时就打开Axure的产品经理通常有一些共性： 熟练掌握Axure或对Axure充满了敬畏； 信奉细节至上，认为Axure完全可以替代PRD； 喜欢通过Axure实现复杂交互或精细化原型并取得成就感。 保持最新版的Axure，常泡Axure专业社区； 很少使用铅笔和白板进行沟通； 符合其中的3条，可以说你处在高速成长中；不过如果5条都符合，说明你应该调整一下自己的侧重点，否则你将偏离Axure原型工具的初衷而陷入细节，导致视野受限或沟通不畅，甚至造成产品和项目的失败。 清醒认识Axure在产品设计流程中的位置 必须承认，不同公司、不同组织结构和不同岗位对“正确的产品设计流程”有着千差万别的认识。但我们依然可以引用AJAX之父Jesse James Garrett在其 《用户体验要素》 中提到的5个层级来达成一些共识： 不同角色应该关注的产品层级： BOSS与产品负责人先解决战略层问题； 产品负责人或产品经理解决范围层问题； 产品经理带队搞定结构层问题； 产品经理带领产品设计师或交互设计师，设计框架层； 界面美术设计师根据框架层设计表现层。   到这里，争议出现了，有人认为在结构层，应该使用Axure出交互设计原型，我想这个误解也是Axure被滥用的根源所在。 交互设计不等于使用Axure设计原型中的交互界面 我知道这有点绕口，并且有些扯远了，但不得不说，大多数产品人并不能很好的理解交互设计与设计交互界面有什么联系，并且绝大多数产品团队在结构层几乎断档。 用户界面是交互设计的结果的自然体现，但是不能说交互设计就是用户界面设计。 交互设计 的出发点在于研究人在和物交流（dialog）时候，人的心理模式和行为模式，并在此研究基础上，设计人工物的可提供的交互方式，来满足人对使用人工物的三个层次的需求（usefulness, usability and emotionality）。从这个角度看来，交互设计是设计方法，而界面设计是交互设计的自然结果。同时界面设计不一定由显意识交互设计驱动，然而界面设计必然自然包含交互设计。 我们期待未来的人机交互能早点实现，不过对目前互联网产品而言，交互设计的步骤包括： 用户调研 概念设计 创建用户模型 创建界面流程 开发原型并进行可用性测试 很显然，使用Axure设计快速原型，应该放在交互设计的整体工作结束后，也就是框架层设计时进行。 不过，我没有一点贬低Axure的意思，因为在框架层中，Axure的widget元件、交互动作能够很方便的绘制网站的界面、导航、甚至细节的信息元素。并且能够快速生成可交互原型与需求方和项目组内进行沟通。在某些敏捷团队中，Axure原型的确可以代替PRD使用。 产品结构层设计，请先拿起你的2B铅笔 面对结构层的抽象，请不要灰心，2B铅笔是你克服困难的终极武器，记住，要用2B铅笔。因为2B铅笔软硬度适中，涂抹均匀，价格便宜，韧性好又容易擦拭，无论考试还是素描都是很好的选择:) 当需求范围已经相对清晰时，请先拿起笔，把产品的蓝图画出来。通常对一个网站而言，你需要构建一副整体信息架构蓝图，也就是网站的主要网页和层级关联。记住，只有当你相信自己用2B铅笔画的信息架构草图是大家想要的，否则不要着急用工具进行美化。 对于网站中复杂的功能流程或对于软件产品而言，你需要通过UML（统一建模语言）描绘更加具体的概念模型。 将构思映射在纸上，提高沟通效率 用铅笔勾勒蓝图或流程，目的是提高沟通的效率。拿起2B铅笔，用10分钟将头脑风暴或范围讨论后的思路花在纸上，尽快与BOSS或团队成员确认，是结构层最重要的事情，没有唯一。 我见过太多的产品人员，包括我自己也曾经常犯类似的错误：妄图一开始就使用电脑辅助设计程序，优美的将信息架构或流程图画出来。甚至跳过这一步，直接使用Axure话线框图。这个错误的可怕之处在于：你搞得自己很忙很苦逼，结果做出来的是无法得到认同的垃圾。 更可怕的是，在面对你看似完美的图标或线框图时，BOSS被你忽悠住了，然后你们投入了整个团队的开发资源，用了几个月开发了一堆垃圾出来。 如果说80%的产品失败在需求阶段，我可以说80%的需求失败，是没有用2B铅笔沟通而很2B的用软件沟通。你完全可以10分钟画一个简单的网站结构或核心功能逻辑，然后与领导充分沟通，尽可能的把问题暴露出来，并尽快优化甚至推翻重做。 否则你将深陷网站界面和细节交互的泥潭，而忽略了产品真正的核心价值所在。记住，需求被砍掉不是耻辱，做垃圾浪费资源才是最大的耻辱。 用白板统一意见 如果说用2B铅笔绘制草图是产品项目的大脑，那么白板就是产品项目的心脏，对 敏捷团队 尤其如此。无论是在范围层的头脑风暴或敏捷故事中，还是在结构层设计时对更加详细的蓝图或流程进行确认时，需要将构想画出来，并且可能需要边画边讲。如果你对此已经轻车熟路，你可以在简历中写上自己善于沟通了。 使用工具将结构层存档 到目前为止，你的产品规划应该已经符合了领导的构思，同时也赢得了架构师的支持。非常好，你只需要用Visio将其画出来，就可以插入需求文档了。虽然visio有一些问题，但我认为它依然是描述结构层最好的建模工具，不是因为它有多强大，恰恰相反，它够简单。 也许ROSE类工具更加强大，但你不是开发者，更不是架构师，认清自己的角色，对产品经理而言，Visio的UML工具和网站总体设计图已经能够满足结构层的需要，不要被复杂的工具左右自己的思路。当然，如果你使用MAC，OmniGraffle毫无疑问是你最好的搭档。 在框架层，开始低保真模型的设计 终于从抽象到具体了，你可以偏执地继续装B手绘 不过大多产品经理会选择Axure作为快速原型工具 Balsamiq mockup 也是不错的选择，总之，这一阶段你需要设计产品的低保真模型。但千万不要自娱自乐并深陷细节。因为你需要基于低保真模型进行又一轮沟通，如果条件允许，最好进行一次可用性测试。 你需要将领导、团队、甲方甚至扫地大妈的意见综合考虑，对低保真模型进行优化调整，并不断完善，以形成可以存档的产品交付物。对不同的团队，你有几个选择： 敏捷小团队：直接基于Axure进行开发； 矩阵式项目组：将低保真模型做成高保真模型，并尽可能完善交互细节，便于交付UED或美工进行设计； 跨业务或外包：为了预防变更，需要更多前期可用性测试。并尽可能完善说明和注释信息，输出word等存档。 作者博客： 韩军星 相关文章： 用AxureRP做产品的需求管理 10个用于设计网页线框图的优秀工具 设计师设计中可用的13组设计素材 上一篇 Android SDK 5.0 带来的这番折腾 - 生命在于折腾！ 下一篇 《用户体验要素》澄清了 UI 原型设计中看不见确感受得到的那一层 顶 0 踩 0 我的同类文章 <=即时总结=> （710） 敏捷开发-Scrum （9） http://blog.csdn.net 猜你在找 查看评论 * 以上用户言论只代表其个人观点，不代表CSDN网站的观点或立场 个人资料 sleks 访问： 545678次 积分： 10165 等级： 积分：10165 排名： 第823名 原创： 307篇 转载： 284篇 译文： 130篇 评论： 113条 博客专栏 跟踪 iOS 新特性 文章：7篇 阅读：3544 从本质上满足应聘条件系列 文章：1篇 阅读：563 SSL/TLS 加密传输 文章：8篇 阅读：3999 Java NIO 教程 文章：18篇 阅读：9781 Three.js 文章：24篇 阅读：26188 《漫画线性代数》读书笔记 文章：7篇 阅读：8491 iOS UIKit 框架分类解析 文章：5篇 阅读：6680 iOS 基础框架分类解析 文章：10篇 阅读：10852 阅读排行 [iOS]日历和提醒编程指南（Calendar and Reminders Programming Guide） (5748) 解决 Chrome 访问https网站出现“您的连接不是私密的问题” (5738) iOS 各版本中的新特性（What's New in iOS）- 目录翻译完成 (5608) 什么叫别让孩子输在起跑线上？！ - 电子产品已成儿童“多动症”诱因 (4977) iOS 中 NSParameterAssert 是干啥的之官方解释翻译篇 (4113) 从另一个角度看癌症，现象、结果并不一定是病因！ (4079) iOS 开发库（iOS Developer Library） (3548) Threejs 加载 DAE 模型遇到关题汇总 (3364) 转换到 StoryBoard 的发布说明（Converting to Storyboards Release Notes） (2932) 搜搜（www.soso.com），I 老虎油！ (2847) 文章分类 <=即时总结=> (710) 平台-iOS (256) 平台-Anroid (77)

Recno:: 56
URL:: http://blog.csdn.net/opengl_es/article/details/40677147

ParseText::
《用户体验要素》澄清了 UI 原型设计中看不见确感受得到的那一层 - 太阳火神的美丽人生 - 师夷长技以制夷 - 博客频道 - CSDN.NET 太阳火神的美丽人生 - 师夷长技以制夷 敏捷开发及移动和物联设备、绿色教育的研究：iOS、Android、Html5、Arduino、pcDuino 目录视图 摘要视图 订阅 学院APP首次下载，可得50C币！     欢迎来帮助开源“进步”     当讲师？爱学习？投票攒课吧     认识Atlassian Datacenter产品     深圳小伙伴的福利来啦 [置顶] 《用户体验要素》澄清了 UI 原型设计中看不见确感受得到的那一层 2014-11-01 08:34 1548人阅读 评论 (0) 收藏 举报 分类： <=即时总结=> （710） 作者同类文章 X 敏捷开发-Scrum （9） 作者同类文章 X 版权声明：本文为博主原创文章，未经博主允许不得转载。转载联系 QQ 30952589，加好友请注明来意。 《用户体验要素》澄清了看不见确感受得到的那一层 太阳火神的美丽人生 ( http://blog.csdn.net/opengl_es ) 本文遵循“ 署名-非商业用途-保持一致 ”创作公用协议 转载请保留此句： 太阳火神的美丽人生 -  本博客专注于  敏捷开发及移动和物联设备研究：iOS、Android、Html5、Arduino、pcDuino ， 否则，出自本博客的文章拒绝转载或再转载，谢谢合作。 《 在熟练使用2B铅笔前，请不要打开Axure 》一文中精要部分摘录如下，并 PS 组合（报歉，最期才发现上半年P的图末有发成功，下图是转载原作者的）：

Recno:: 57
URL:: http://blog.csdn.net/opengl_es/article/details/41479725

ParseText::
马列矛盾理论告诉我们：数据库设计就是‘主体’和‘关系’的设计 - 太阳火神的美丽人生 - 师夷长技以制夷 - 博客频道 - CSDN.NET 太阳火神的美丽人生 - 师夷长技以制夷 敏捷开发及移动和物联设备、绿色教育的研究：iOS、Android、Html5、Arduino、pcDuino 目录视图 摘要视图 订阅 学院APP首次下载，可得50C币！     欢迎来帮助开源“进步”     当讲师？爱学习？投票攒课吧     认识Atlassian Datacenter产品     深圳小伙伴的福利来啦 [置顶] 马列矛盾理论告诉我们：数据库设计就是‘主体’和‘关系’的设计 2014-11-25 14:24 2593人阅读 评论 (0) 收藏 举报 分类： <=即时总结=> （710） 作者同类文章 X 数据存储-File、Sql （8） 作者同类文章 X 版权声明：本文为博主原创文章，未经博主允许不得转载。转载联系 QQ 30952589，加好友请注明来意。 MySql 官方工具 WorkBench 设计数据库要点分析 太阳火神的美丽人生 ( http://blog.csdn.net/opengl_es ) 本文遵循“ 署名-非商业用途-保持一致 ”创作公用协议 转载请保留此句： 太阳火神的美丽人生 -  本博客专注于  敏捷开发及移动和物联设备研究：iOS、Android、Html5、Arduino、pcDuino ， 否则，出自本博客的文章拒绝转载或再转载，谢谢合作。 巧妇难为无米之炊，研究这些内容，我们得先有 MySql 和 WorkBench，下面就在 www.gfsoso.com 搜一下 mysql 关键字吧！ 第一项就是 MySQL  ::  MySQL  Community Downloads 幸好 MySql 落入 Oracle 的怀抱之后，还能一如即往地弄个社区版，这也看得出社区对开源的贡献力量有多么大。 废话不多说，下面贴出来 MySql 和 WorkBench 的下载链接，当然了，还是得继续点下去的，要有心理准备噢，很慢很慢地： MySQL Community Server   (GPL) (Current Generally Available Release: 5.6.21) MySQL Community Server is the world's most popular open source database. DOWNLOAD MySQL Workbench   (GPL) (Current Generally Available Release: 6.2.4) MySQL Workbench is a next-generation visual database design application that can be used to efficiently design, manage and document database schemata. It is available as both, open source and commercial editions. DOWNLOAD 晚上休息时待续。。。 MySql 的搜狐镜像站： http://mirrors.sohu.com/mysql/ Android 的东软镜像站： http://mirrors.neusoft.edu.cn/android/repository/ 这个镜像站是从 这里  翻出来的，一个一个地翻的确费了不少事儿。 由此也明白了东软镜像代理的来由： 你可以把  mirrors.neusoft.edu.cn 作为代理，指定给 Android SDK Manager 的代理，那下载速度就可想而知了，不信那就试试：

Recno:: 58
URL:: http://blog.csdn.net/opengl_es/article/details/48531939

ParseText::
马列主义告诉我们：物质基础决定上层建筑 - 移动互联网时代之后的时代演进推断 - 太阳火神的美丽人生 - 师夷长技以制夷 - 博客频道 - CSDN.NET 太阳火神的美丽人生 - 师夷长技以制夷 敏捷开发及移动和物联设备、绿色教育的研究：iOS、Android、Html5、Arduino、pcDuino 目录视图 摘要视图 订阅 学院APP首次下载，可得50C币！     欢迎来帮助开源“进步”     当讲师？爱学习？投票攒课吧     认识Atlassian Datacenter产品     深圳小伙伴的福利来啦 [置顶] 马列主义告诉我们：物质基础决定上层建筑 - 移动互联网时代之后的时代演进推断 2015-09-17 23:07 1000人阅读 评论 (0) 收藏 举报 分类： <=即时总结=> （710） 作者同类文章 X 敏捷开发-佛的减法 （117） 作者同类文章 X 版权声明：本文为博主原创文章，未经博主允许不得转载。转载联系 QQ 30952589，加好友请注明来意。 移动互联网时代之后的时代演进推断 - 互联网 + 与 + 互联网 太阳火神的美丽人生 ( http://blog.csdn.net/opengl_es ) 本文遵循“ 署名-非商业用途-保持一致 ”创作公用协议 转载请保留此句： 太阳火神的美丽人生 -  本博客专注于  敏捷开发及移动和物联设备研究：iOS、Android、Html5、Arduino、pcDuino ， 否则，出自本博客的文章拒绝转载或再转载，谢谢合作。 就如 2010 年成功预判五寸屏智能手机将成为未来五年的主流一样，这次再推断一下，移动互联网时代之后的几个时代变更： 插在前面，眼下的互联网+时代其实就是大数据时代的前奏，而又分为两个阶段： A、+互联网 B、互联网+ 前者是改革，后者是革命，而后者革命的铺垫就是前者的改革成果。 辛亥革命的成功，与清末变法不无关系，变法未成，但引入新知识、新观念、新潮流，为辛亥革命作了强力的社会环境铺垫。 那么，接下来，各行各业都在做 +互联网，把传统的行业与互联网交结起来，至少有一点，不使用电脑的行业基本不存在了，这是第一小步，第二小步就是内容性的。 BAT 能把流量通道都铺好，但真正下探到内容层面，就不是BAT所能深入的了，这也是BAT各大爷们不想袖手旁观的，即然没那么大的能力做到细节，那就提供平台来，让别人来做，最终还是基于他的平台。 等各行业都已经从内容层面 +互联网 了，互联网+ 的思潮就会自然萌生。 到了互联网+的阶段，传统行业会由于技术变革，不可能变为可能后，思维方式也在发生着变化。 而这一变化无不融入着大数据时代的成果。 所以想彻底划清这个界限确是不太容易的，而且也划不开，是一个交替迭代的过程，不断转变人们的思维方式。 马克思是咋说来着，“物质基础决定上层建筑”，而上层建筑指建立在一定社会经济基础上的 社会意识形态 以及与它相适应的政治、法律制度和设施。 意识形态是指一种具有理解性的想像、一种观看事物的方法，一种观念的集合。 意识形态可以被理解为一种具有理解性的想像、一种观看事物的方法(比较世界观)，存在于共识（参见日常社会中的意识形态一节）与一些哲学趋势中（参见政治意识形态一节）。 这回应该说明白了，技术变革，不能的事情变成可能了，人们考虑问题的方式也就随之改变了，这种改变就是 互联网+ 的基础。 +互联网 靠的是技术变革; 互联网+ 靠的是由技术变革潜移默化对人们认知的改变，这是个慢工夫，就像淘宝和各电商在近十年对整个国家及至世界人们思维方式的熏染。 ———————— 1、大数据时代 此时代并不真正依托传感器为核心的数据采集，而是依托 BAT 的流量通道; 2、物联网时代 此时代随着大数据时代、存储、网络、云计算、终端等等能力的提升，以传感器迅猛发展为起点，使物上采集成为了一个主要的个体数据来源，如吸烟习惯，坐姿等等; 3、物联大数据时代 此时代是在物联网时代对传感器与行为分析的透彻交融之中产生的，是依托于智能设备优化后的 BAT 数据通道、传感器物联数据通道，还有其它的数据采集通道之下，所进行的大数据采集、整合与分析的时代。 未来是一个数据时代，数据的采集来源很多，但数据的分析初步包括，个体数据分析和群体数据分析，个体数据分析用于回馈个体并组成君体数据，群体数据分析用于回馈所有个体的普遍规律并对个体行为起指导作用。 目前做移动互联网这一行，路还很远，需要做的事情还很多，眼下只是移动端开发如 iOS 和 Android 的火热，未来 Html 5 以及大数据分析相关后台开发工作也会火起来，反复迭代才能螺旋攀升到一定阶段，真正想有所作为，那么无论从前端到后端，无论从技到产品，无论从开发到运营，都要涉猎，分清主次，以全面的思维来带动各领域的发展，这才是未来高速发展所需要的各领域人才。 上一篇 Maven 项目关于 plexus-utils:jar的错误解决 下一篇 创不创业，都不能瞎忙 - 这年头不是创业，就是帮人创业！ 顶 1 踩 1 我的同类文章 <=即时总结=> （710） 敏捷开发-佛的减法 （117） http://blog.csdn.net 猜你在找 查看评论 * 以上用户言论只代表其个人观点，不代表CSDN网站的观点或立场 个人资料 sleks 访问： 545649次 积分： 10165 等级： 积分：10165 排名： 第823名 原创： 307篇 转载： 284篇 译文： 130篇 评论： 113条 博客专栏 跟踪 iOS 新特性 文章：7篇 阅读：3544 从本质上满足应聘条件系列 文章：1篇 阅读：563 SSL/TLS 加密传输 文章：8篇 阅读：3999 Java NIO 教程 文章：18篇 阅读：9781 Three.js 文章：24篇 阅读：26188 《漫画线性代数》读书笔记 文章：7篇 阅读：8491 iOS UIKit 框架分类解析 文章：5篇 阅读：6680 iOS 基础框架分类解析 文章：10篇 阅读：10852 阅读排行 [iOS]日历和提醒编程指南（Calendar and Reminders Programming Guide） (5748) 解决 Chrome 访问https网站出现“您的连接不是私密的问题” (5738) iOS 各版本中的新特性（What's New in iOS）- 目录翻译完成 (5608) 什么叫别让孩子输在起跑线上？！ - 电子产品已成儿童“多动症”诱因 (4977) iOS 中 NSParameterAssert 是干啥的之官方解释翻译篇 (4113) 从另一个角度看癌症，现象、结果并不一定是病因！ (4079) iOS 开发库（iOS Developer Library） (3548) Threejs 加载 DAE 模型遇到关题汇总 (3364) 转换到 StoryBoard 的发布说明（Converting to Storyboards Release Notes） (2932) 搜搜（www.soso.com），I 老虎油！ (2847) 文章分类 <=即时总结=> (710) 平台-iOS (256) 平台-Anroid (77) 平台-Html5 (71) 语言-C_C++_OC (56) 语言-Java (122) 语言-Css (8) 语言-JavaScript (74) 敏捷开发-XP (4) 敏捷开发-Scrum (10) 敏捷开发-佛的减法 (118) 敏捷开发-心灵鸡汤 (0) 数据呈现-OpenGL ES (125) 数据呈现-View (1) 数据同步-Thread (0) 数据通道-SOCKET、SSL (1) 数据传输-HTTP (1) 数据承载-XML、JSON (5) 数据编码-Base64 (1) 数据加密-MD5、DES (4) 数据存储-File、Sql (9) 大数据 (1) 物联大时代背景 (31) 物联时代-传感器与通讯 (9) 物联时代-Arduino (7) 文章存档 2015年12月 (55) 2015年11月 (7) 2015年10月 (14) 2015年09月 (11) 2015年08月 (5) 2015年07月 (13) 2015年06月 (11) 2015年05月 (2) 2015年04月 (18) 2015年03月 (16) 2015年02月 (24) 2015年01月 (9) 2014年12月 (18) 2014年11月 (99) 2014年10月 (5) 2014年09月 (8) 2014年08月 (29) 2014年07月 (29) 2014年06月 (32) 2014年05月 (68) 2014年04月 (16) 2014年03月 (20) 2014年02月 (21) 2014年01月 (109) 2013年12月 (72) 2012年11月 (10)

Recno:: 59
URL:: http://blog.csdn.net/opengl_es/article/details/49275929

ParseText::
读后有感 - 残忍但诚实的忠告：您没钱，就不要掺和这事了 - 太阳火神的美丽人生 - 师夷长技以制夷 - 博客频道 - CSDN.NET 太阳火神的美丽人生 - 师夷长技以制夷 敏捷开发及移动和物联设备、绿色教育的研究：iOS、Android、Html5、Arduino、pcDuino 目录视图 摘要视图 订阅 学院APP首次下载，可得50C币！     欢迎来帮助开源“进步”     当讲师？爱学习？投票攒课吧     认识Atlassian Datacenter产品     深圳小伙伴的福利来啦 [置顶] 读后有感 - 残忍但诚实的忠告：您没钱，就不要掺和这事了 2015-10-20 13:05 2395人阅读 评论 (6) 收藏 举报 分类： <=即时总结=> （710） 作者同类文章 X 版权声明：本文为博主原创文章，未经博主允许不得转载。转载联系 QQ 30952589，加好友请注明来意。 读后有感 - 残忍但诚实的忠告：您没钱，就不要掺和这事了 太阳火神的美丽人生 ( http://blog.csdn.net/opengl_es ) 本文遵循“ 署名-非商业用途-保持一致 ” 创作公用协议 转载请保留此句： 太阳火神的美丽人生 -  本博客专注于  敏捷开发及移动和物联设备研究：iOS、Android、Html5、Arduino、pcDuino ， 否则，出自本博客的文章拒绝转载或再转载，谢谢合作。 人民日报微信公众号该文 原链接 对于此文，本人没有任何感想，处于五感抽搐，三观沉浮的游离状态。 继续学习，希望从中能整理出我学习到的新的认识点，已是幸事！ 残忍但诚实的忠告：您没钱，就不要掺和这事了 2015-10-19 人民日报 来源：环球时报（ID：hqsbwx） 作者：由得林洛斯 　　 一位叫 @由得林洛斯 的作家，谈了她对初等教育减负的一些看法。文章有些长，但相信看完，你会对减负以及孩子教育的问题，有一个更清醒、更深刻的认识。 　　小姑娘上了我几节课，后来期末考试考了九十一分，好像是全班第一还是第二。她爸爸很高兴，给我连夜打电话，还拍了很多开家长会的照片给我。 　　我说那是小姑娘自己能学，掌握了方法，和我没什么关系。小姑娘叫记什么就记，不信叫那些动辄就怕政治历史洗脑的蠢货来，我教一个下午也未必能背下北京条约基本纲要内容。 　　这小姑娘的爸爸是某个公司老总，出入带着司机，寒暑假必然要把女儿送出国一次，她现在才十四岁，已经去了二十多个国家。 　　这样的学生，重点中学里还有很多。这小姑娘所在的中学是这里的重点中学，上课时间排得满满的，星期六星期天也必须送去私教那里继续补习。就拿国庆七天来说，她没有一天不在外面补习的。私教要是教得没有成效，她爸爸会立刻换老师。 　　她爸爸人脉广，随便可以找到不同学校的不同学科的最好的老师给他女儿上私教。要知道很多老师并不乐意当私教，家长没点面子还真请不动。比如我本来就不怎么乐意当私教，后来知道她家是组合家庭，她爸爸再婚之后生怕亏欠这个大女儿，所以对她加倍用心。这些感动了我，我才接受的。 　　 某次闲聊，我说：“你每天都在上课，真是辛苦。” 　　她说：“我觉得没什么啊，本来就应该这样的。” 　　这小姑娘家里挺有钱的，我以为她会埋怨怎么连玩的时间都没有。 　　她爸爸怕叨扰我，很少和我直接联系，唯一的一次私下谈话说的话也让我有点意外：“我女儿天资平平，我不指望她能出类拔萃，只希望她能跟得上大部队不要掉队，老师你平时有空就算带她去逛逛图书馆，我都觉得很好。” 　　 我想起天下有多少家长觉得自己的孩子早慧如骆宾王，教不好就直接痛骂老师学校。 　　后来我想起一件事，大概是两年前还是一年前，微博热刷取消英语高考的事情之后，我曾经发了微博说取消英语是非常不明智的，尤其是英语只纳入参考成绩，当时好几个人跑出来喷我，大概意思就是“学生要减负，英语自己喜欢学可以自己学，实在是没有必要纳入精英教育”。 　　其中有个陌生人跳着最凶，骂我装菩萨，管得真宽，啥啥啥的。我点开她微博看了看，她大概是二十多岁，平时操心的都是和妈妈怎么做花茶啊，怎么做吃的啊之类的事情，非常普通的家庭，我一点都不奇怪这样的女性会对我攻击，首先她这种人根本就不具备太多社会竞争力，其次，她还没有孩子，等她有了孩子，孩子真正上了学，大概就知道取消某项科目的考核对普通人家的小孩意味着什么。 　　记住我说的是普通人家的小孩，有钱人家的小孩像开头那位小姑娘，无论你考纲怎么变她都能得到比平常人更好的教育，她是不会操心这些的。 　　可恰恰就是兜里没钱，教育资金相当匮乏的普通人，老是叫嚣着要取消这个那个，反而是有钱人家的小孩，默默说一句：“我觉得这些是很正常的啊”。 　　 因为作为初等教育，减负之前学的学科内容和强度，我觉得正常人都可以接受。 　　很多人都很奇怪的，好像减少中小学课程内容，不准布置大量作业之后，大家脑子里就会想当然出现一副景象：中小学生欢乐的玩耍着，没有大量的作业，删掉了他们觉得比较难的课程，然后大家的成绩会施施然上升， 好像就没人垫底了一般；接着大家集体进入重点高中，交给那些神奇的重点高中老师之后，大家会正步踢进大学；然后大学四年学习出来就能得到一份好工作升职加薪买房迎娶白富美成为人生赢家。 　　 说得好像就没人垫底了似的。 　　这些人的思维总是很奇怪，我真的很纳闷他们是怎么把减负、不做作业的后果直接和创造力上升素质提高划上等号的，到底二者之间存在因果关系吗？ 　　我给还没有孩子的各位，还有从来不接受初等教育战线只是在微博跟着大流高喊素质教育的各位描述一下现在减负之后的实际情况吧： 　　小学四点多就放学了，老师不允许学生在学校逗留一分钟，放学了必须走，每到放学时间家长就必须人山人海站在学校外面，现在谁放心自己家的孩子一个人回家？ 　　小姑娘这类的学生，家长会派司机来接，那些家里没养司机的家长麻烦你准时过来。一二年级四点半放学，你下班了没有？你没下班是吧，那让爷爷奶奶来接。如果你和老人关系好，那恭喜你，关系不好，呵呵，移步我隔壁的情感专家微博，那里很多提问“我和我婆婆老是因为接送小孩的问题吵架”。 　　如果你要求“那让孩子在学校多呆一会，我下班再去接”，对不起，老师已经下班了，减负嘛，学生下班老师一块下班啊，你留在学校万一出事了学校怎么扛得起，你是不是到时候要去学校拉横幅要学校赔钱了？对不起，赶紧带走，赶紧的，连一个司机都没有的家庭，学校按规章办事。也有老师愿意留下来帮你看孩子的，不过，多看一个小时要收一百块哦，因为那个是下班之后的劳动，老师凭什么白给你看啊！还要承担你孩子出事的风险。 　　好吧，你去教育局告状说老师乱收费，那老师连这一百块都不收了，四点半放学直接把孩子接走，你还有校外的很多私教可以选择哦，那些私教可以帮你看孩子还帮你监督小孩写作业保证他们不到处跑到你来的时候接到的是一个“写完作业完整的小孩”，不过私教收费更贵。这就是减负的结果。 　　怎么，你开始有点脸黑了想骂学校唯利是图怎么一点都不负责任了，都减负了，学校也要减负啊，怎么可能你一方面要减少上课时间，一方面还要学校免费帮你看孩子啊？ 　　别急着去敲字骂人，这还是刚刚开始呢。小学一二年级过去了，你和婆婆吵架接送孩子也差不多了，再往上读，放学时间到了五点十五分，稍微好一点了是不是，你一个上班族下了班屁滚尿流赶到学校也许还是能接到你的孩子，要不堵车不塞车哦！ 　　小学初级阶段，小孩的成绩不会特别明显显示出来，只能看见ABC而已嘛，为了避免刺激孩子的自尊心，考六十分的孩子照样和考八十分的一起玩，该上课插嘴的还插嘴，该不写作业还不写作业。到了五六年级，小姑娘的家长开始送孩子去学英语了，听说英语只是参考成绩而已，你没那个钱，咬咬牙还是不送吧，想着学校反正也开课。 　　哎哟，你怎么那么天真啊，减负了啊，想想你小学的时候体育课美术课音乐课是怎么上的，不纳入考试范围的科目就怎么上的。没关系，你语重心长对小孩说，你可以自己学，咱们不花钱靠自己！ 我也语重心长问你，你们当中有全部靠自己的力量不靠父母首付买了房子的吗？有几个啊？你二三十岁要你买套房子都觉得特别辛苦，你凭什么对一个十岁不到的孩子说你可以靠自己学好一门语言？ 　　你怎么对你后代要求就那么高，小小年纪就开始要求他们自学，靠自己！你像他们那么大的时候，你能自己在没有任何考试压力的前提下，坐在那里乖乖背完十个以上的单词吗？好吧，我知道你的后代天资聪慧，无论是情商和智商都超过正常人的两个标准差，他们可以靠自己，暂且信了你。 　　接着，你到了初中，你突然发现为什么自己的小孩评不上三好学生，为什么他考试总是抓不住重点。当然啦，因为班主任在外面开小班呀！虽然明令说公立学校老师不准在外面开小班，但是照样有很多老师在开。 　　班主任补课你敢不去？不好意思，班主任不喜欢你，不给你三好学生。你要去告班主任，你就去告试试，以后你小孩的老师对你唯恐避之而不及，微妙的氛围留给你小孩自己体会。 　　你可以去敲键盘写告发信骂师德沦丧，你企求一个对你来说更公平的世界，你的诉求能不能够解决，班主任不补课是否能改变现状？我再说一个现状，我知道将来也许有措施能解决这些，但是你确定你要让你小孩等在原地，等到解决的那一天而什么都不做吗？ 　　学校减负意味着小型教育的兴起，课本删减，但是并不意味这选拔性考试这些范围会删减。对于老师来说，能在课外拿钱的为什么要在课堂上告诉你那么多内容？“反正只要按课标上的就可以了”以前我们交一百多补课费，大家都能上一样的课，你现在很多东西听不到了。 　　到了高中，这种小型教育的差距会进一步拉大距离。 哦，没考进重点高中啊，那就在职高混把，可以谈谈恋爱吹吹牛，以后你出点钱让孩子开个公司，他是没机会进入公务员律师医生教师研究人员之类的行业了。 　　别跟我说你没钱给孩子开公司，要孩子白手起家成为青年才俊。 　　到了高中学校你会发现自己家的孩子学什么可能都比别人吃力一点，因为小姑娘这样的学生，初中就有人告诉她们生产力决定生产关系，以后做这题记得找根本原因要从经济方面来切入，你家孩子会有人告诉她这些吗？很多无知的人张口闭口说中学课本洗脑，你们去现在的初中课本，你能找到完整的唯物史观吗？ 　　我告诉你，没有！ 　　好了，你的孩子天资聪慧，进了大学，也许他只是想混个文凭，倒也罢了，如果他想进体制，那不好意思，你之前就该好好掌握应试的能力，因为现在大大小小的资格考试，全部都是和应试能力有关，有些人就可以书都没背完就可以考进去，有些人书都翻烂了，就是考不进去。不是一直叫减负吗。 　　毕业之后你想要好工作想继续升学，对不起，继续考试。而且你必须感谢考试，考试是对普通人的恩赐。你要拼所谓的素质教育，不好意思，你还得给小姑娘这样家庭的让路，你凭什么就觉得你家孩子素质高？人家从小国外到处跑，英语音乐辅导班上遍，父母人脉广的孩子素质就不高？你说你自己高就高啊，你是有多天真？好了，你家孩子不想拼素质了，要努力升学，通过努力，离开这个国家，去国外梦想乐园——对不起你英语学好了吗？想做学问你国外文献能通读吗？什么你这时候才想起要恶补英语？那你专业成绩不要落下哦，国外公费研究生都是留给那些人家外国觉得有价值的学生的哦。 　　你还想自费送孩子出去读研？好啊，我楼上就有一家，卖了房子送自己儿子出国读书的，她儿子在家逃学早恋和父母吵架，我相信送到了国外，他只要呼吸到了国外的空气，一定可以改邪归正，成为一个一心苦读、勤勉踏实的好学生，多年之后一定能拿到国外的学位，然后进入国外的主流社会，回来光宗耀祖——说得国外的大学好像不用看书不用考试一样。 　　你现在是不是特别想骂人，你是不是想说，你简介只不过是个作者，你居然敢插嘴初等教育的事情，你是不是打算亮出你个人经历告诉我，你其实可以，你可以靠自己的力量走向成功，你现在还混得不错。 　　别忘了，你现在能看到我这篇文章，你还不是零零后，那你也是接受了我国未减负初等教育，沾染了它的好处你才有今天。 　　我记得我以前跑去中国农大跆拳道馆练习的时候，遇见一个女孩低头在看全英文版的纳尼亚传奇，她爸爸是农大教授，她才小学五年级。 　　再顺便举个例子，我数学很差，可是我中考数学可以拿116分（满分120），对了我模拟考还是考六十多分的。知道为什么吗，我妈妈直接把我提到了全校最好的数学老师面前，叫她给我补课，她也没多说什么，出了几道题给我写，后来莫名其妙我中考数学就变成116了。别着急说我是作弊，中考高考试卷很严，有经验的老师不过是知道我问题到底在哪里，找了一些典型的题型给我做罢了。 　　说了那么多，你还没看出什么? 　　教育从来就不是“小孩自己努力”就可以达到的事情，你看得见或者看不见的地方，都是出身的比拼，有些家长可以靠钱，有些家长可以靠人脉，有些家长本身素质就高。 　　 你自己就是小孩的起跑线。 　　 大家都必须感谢考试，不管形形色色的学生背后有什么样的东西支持，至少考试这条线是公平的，大家做的题目都是一样的，在来到这条线之前，当学生的还是有机会努力的。 　　至于那些天天嚷着要改革，要减负，埋怨学校布置太多作业的人，你问问你们自己，�

Recno:: 60
URL:: http://blog.csdn.net/opengl_es/article/details/49384057

ParseText::
Crunchify 有关 Spring MVC 的方方面面汇总 - 已更新第三步 - 太阳火神的美丽人生 - 师夷长技以制夷 - 博客频道 - CSDN.NET 太阳火神的美丽人生 - 师夷长技以制夷 敏捷开发及移动和物联设备、绿色教育的研究：iOS、Android、Html5、Arduino、pcDuino 目录视图 摘要视图 订阅 学院APP首次下载，可得50C币！     欢迎来帮助开源“进步”     当讲师？爱学习？投票攒课吧     认识Atlassian Datacenter产品     深圳小伙伴的福利来啦 [置顶] Crunchify 有关 Spring MVC 的方方面面汇总 - 已更新第三步 2015-10-24 20:17 1182人阅读 评论 (1) 收藏 举报 分类： <=即时总结=> （710） 作者同类文章 X 语言-Java （121） 作者同类文章 X 版权声明：本文为博主原创文章，未经博主允许不得转载。转载联系 QQ 30952589，加好友请注明来意。 Crunchify 有关 Spring MVC 的方方面面汇总 太阳火神的美丽人生 ( http://blog.csdn.net/opengl_es ) 本文遵循“ 署名-非商业用途-保持一致 ”创作公用协议 转载请保留此句： 太阳火神的美丽人生 -  本博客专注于  敏捷开发及移动和物联设备研究：iOS、Android、Html5、Arduino、pcDuino ， 否则，出自本博客的文章拒绝转载或再转载，谢谢合作。 从 Crunchify 获得到一篇文章，终于搞定 Spring MVC 4.2.2 的 控制器映射与 视图模板解析。 这个版本之前的版本都是正常的， 为什么到这个版本 就会有 问题呢？！ 初步比较，发现 ，这一篇是建立动态 Web 工程，再转成 Maven 项目，而我之前是直接创建的 Maven 项目， 有时间再 详细比较问题所在 。 下面将持续更新在使用 Maven 重新构建 Spring MVC 项目过程中，关于 映射控制器、视图模板解析、静 态资源配置、Mybatis 自动映射等等相关零散用到过的技术，一是做个总结加深，二是 疏理出脉络 ，日后再用也不 至于又得重新 捡起。 使用 Maven 如果有梯子，那么就得用好 Maven 的国内镜像，这个可以参考： 1、2015 最简单的 Spring MVC 入门教程 Eclipse: Missing web.xml file? How can I create web.xml in Eclipse? Java Properties File: How to Read config.properties Values in Java? Step by Step guide to Enable HTTPS or SSL correct   way   on Apache Tomcat Server – Port 8443 此部分相关的 Spring 框架官方文档链接如下： 21.2 The DispatcherServlet 21.3 Implementing Controllers 21.5 Resolving views 22.5 JSP & JSTL 2、Spring MVC 4.2.2 集成静态资源 注意，原文中 <link href="${crunchifyCSS}" rel="stylesheet" /> 这一行，缺少个 $ 需要加上。 按照 welcome.jsp 中的样式，如法炮制，把图片静态资源的位置变量及图片引用加上，同时需要整体将 js、css、img 分目录列入 resources 中。 此部分相关的 Spring 框架官文文档链接如下： 21.16.9 Serving of Resources 3、多文件上传保存到指定位置 注意，原文中文件上传的 jsp 中有部分可能无法正确显示，可摘取以下部分替换： <script> $(document).ready( function() { //add more file components if Add is clicked $('#addFile').click( function() { var fileIndex = $('#fileTable tr').children().length; $('#fileTable').append( '<tr><td>' + '<input name="files['+ fileIndex +']" type="file" />' + '</td></tr>' ); } ); } ); </script> http://crunchify.com/how-to-fix-cannot-change-version-of-project-facet-dynamic-web-module-to-3-0-error-in-eclipse/ http://crunchify.com/how-to-create-a-war-file-from-eclipse-using-maven-plugin-apache-maven-war-plugin-usage/ http://crunchify.com/spring-mvc-tutorial-how-to-upload-multiple-files-to-specific-location/ http://crunchify.com/how-to-use-ajax-jquery-in-spring-web-mvc-jsp-example/ http://crunchify.com/how-to-create-restful-java-client-using-apache-httpclient-example/ http://crunchify.com/crunchifyjsontohtml-js-json-to-html-table-converter-script/ http://crunchify.com/spring-mvc-introduction-to-spring-3-mvc-framework/ http://my.oschina.net/laigous/blog/309128 http://mybatis.github.io/spring/zh/mappers.html http://www.tuicool.com/articles/Fru26n 上一篇 2015 最简单的 Spring MVC 入门教程 下一篇 Spring MVC 4.2.2 中最好的集成静态资源的方法 顶 0 踩 0 我的同类文章 <=即时总结=> （710） 语言-Java （121） http://blog.csdn.net 猜你在找 查看评论 * 以上用户言论只代表其个人观点，不代表CSDN网站的观点或立场 个人资料 sleks 访问： 545670次 积分： 10165 等级： 积分：10165 排名： 第823名 原创： 307篇 转载： 284篇 译文： 130篇 评论： 113条 博客专栏 跟踪 iOS 新特性 文章：7篇 阅读：3544 从本质上满足应聘条件系列 文章：1篇 阅读：563 SSL/TLS 加密传输 文章：8篇 阅读：3999 Java NIO 教程 文章：18篇 阅读：9781 Three.js 文章：24篇 阅读：26188 《漫画线性代数》读书笔记 文章：7篇 阅读：8491 iOS UIKit 框架分类解析 文章：5篇 阅读：6680 iOS 基础框架分类解析 文章：10篇 阅读：10852 阅读排行 [iOS]日历和提醒编程指南（Calendar and Reminders Programming Guide） (5748) 解决 Chrome 访问https网站出现“您的连接不是私密的问题” (5738) iOS 各版本中的新特性（What's New in iOS）- 目录翻译完成 (5608) 什么叫别让孩子输在起跑线上？！ - 电子产品已成儿童“多动症”诱因 (4977) iOS 中 NSParameterAssert 是干啥的之官方解释翻译篇 (4113) 从另一个角度看癌症，现象、结果并不一定是病因！ (4079) iOS 开发库（iOS Developer Library） (3548) Threejs 加载 DAE 模型遇到关题汇总 (3364) 转换到 StoryBoard 的发布说明（Converting to Storyboards Release Notes） (2932) 搜搜（www.soso.com），I 老虎油！ (2847) 文章分类 <=即时总结=> (710) 平台-iOS (256) 平台-Anroid (77) 平台-Html5 (71) 语言-C_C++_OC (56) 语言-Java (122) 语言-Css (8) 语言-JavaScript (74) 敏捷开发-XP (4) 敏捷开发-Scrum (10) 敏捷开发-佛的减法 (118) 敏捷开发-心灵鸡汤 (0) 数据呈现-OpenGL ES (125) 数据呈现-View (1) 数据同步-Thread (0) 数据通道-SOCKET、SSL (1) 数据传输-HTTP (1) 数据承载-XML、JSON (5) 数据编码-Base64 (1) 数据加密-MD5、DES (4) 数据存储-File、Sql (9) 大数据 (1) 物联大时代背景 (31) 物联时代-传感器与通讯 (9) 物联时代-Arduino (7) 文章存档 2015年12月 (55) 2015年11月 (7) 2015年10月 (14) 2015年09月 (11) 2015年08月 (5) 2015年07月 (13) 2015年06月 (11) 2015年05月 (2) 2015年04月 (18) 2015年03月 (16) 2015年02月 (24) 2015年01月 (9) 2014年12月 (18) 2014年11月 (99) 2014年10月 (5) 2014年09月 (8) 2014年08月 (29) 2014年07月 (29) 2014年06月 (32) 2014年05月 (68) 2014年04月 (16) 2014年03月 (20) 2014年02月 (21) 2014年01月 (109) 2013年12月 (72) 2012年11月 (10)

Recno:: 61
URL:: http://blog.csdn.net/opengl_es/article/details/50220435

ParseText::
iOS 7 跳过的一个坑又掉里了 - 图片渲染模式 - 太阳火神的美丽人生 - 师夷长技以制夷 - 博客频道 - CSDN.NET 太阳火神的美丽人生 - 师夷长技以制夷 敏捷开发及移动和物联设备、绿色教育的研究：iOS、Android、Html5、Arduino、pcDuino 目录视图 摘要视图 订阅 学院APP首次下载，可得50C币！     欢迎来帮助开源“进步”     当讲师？爱学习？投票攒课吧     认识Atlassian Datacenter产品     深圳小伙伴的福利来啦 [置顶] iOS 7 跳过的一个坑又掉里了 - 图片渲染模式 2015-12-08 16:29 891人阅读 评论 (0) 收藏 举报 分类： <=即时总结=> （710） 作者同类文章 X 平台-iOS （255） 作者同类文章 X 版权声明：本文为博主原创文章，未经博主允许不得转载。转载联系 QQ 30952589，加好友请注明来意。 iOS 7 跳过的一个坑又掉里了 - 图片渲染模式 太阳火神的美丽人生 ( http://blog.csdn.net/opengl_es ) 本文遵循“ 署名-非商业用途-保持一致 ”创作公用协议 转载请保留此句： 太阳火神的美丽人生 -  本博客专注于  敏捷开发及移动和物联设备研究：iOS、Android、Html5、Arduino、pcDuino ， 否则，出自本博客的文章拒绝转载或再转载，谢谢合作。 导航栏按钮以及标签栏按钮的图片，在 iOS 7 中均会默认以蓝色渲染高亮，以灰色渲染正常状态颜色。 即 UIImageRenderingModeAlwaysTemplate 这一类型，即模板图片，忽略其颜色信息。 这是导航栏和标签栏在 iOS 7 中的小动作，我们需要强制赋与该图片的 UIImageRenderingModeAlwaysOriginal 渲染模式的对象复本， 这样图片的颜色信息就保留下来了。 参考 UIKit 用户界面分类中的 模板图片 部分有关模板图片的讨论 See Template Images in UIKit User Interface Catalog for a discussion of template images. 顶 0 踩 0 我的同类文章 <=即时总结=> （710） 平台-iOS （255） http://blog.csdn.net 猜你在找 查看评论 * 以上用户言论只代表其个人观点，不代表CSDN网站的观点或立场 个人资料 sleks 访问： 545671次 积分： 10165 等级： 积分：10165 排名： 第823名 原创： 307篇 转载： 284篇 译文： 130篇 评论： 113条 博客专栏 跟踪 iOS 新特性 文章：7篇 阅读：3544 从本质上满足应聘条件系列 文章：1篇 阅读：563 SSL/TLS 加密传输 文章：8篇 阅读：3999 Java NIO 教程 文章：18篇 阅读：9781 Three.js 文章：24篇 阅读：26188 《漫画线性代数》读书笔记 文章：7篇 阅读：8491 iOS UIKit 框架分类解析 文章：5篇 阅读：6680 iOS 基础框架分类解析 文章：10篇 阅读：10852 阅读排行 [iOS]日历和提醒编程指南（Calendar and Reminders Programming Guide） (5748) 解决 Chrome 访问https网站出现“您的连接不是私密的问题” (5738) iOS 各版本中的新特性（What's New in iOS）- 目录翻译完成 (5608) 什么叫别让孩子输在起跑线上？！ - 电子产品已成儿童“多动症”诱因 (4977) iOS 中 NSParameterAssert 是干啥的之官方解释翻译篇 (4113) 从另一个角度看癌症，现象、结果并不一定是病因！ (4079) iOS 开发库（iOS Developer Library） (3548) Threejs 加载 DAE 模型遇到关题汇总 (3364) 转换到 StoryBoard 的发布说明（Converting to Storyboards Release Notes） (2932) 搜搜（www.soso.com），I 老虎油！ (2847) 文章分类 <=即时总结=> (710) 平台-iOS (256) 平台-Anroid (77) 平台-Html5 (71) 语言-C_C++_OC (56) 语言-Java (122) 语言-Css (8) 语言-JavaScript (74) 敏捷开发-XP (4) 敏捷开发-Scrum (10) 敏捷开发-佛的减法 (118) 敏捷开发-心灵鸡汤 (0) 数据呈现-OpenGL ES (125) 数据呈现-View (1) 数据同步-Thread (0) 数据通道-SOCKET、SSL (1) 数据传输-HTTP (1) 数据承载-XML、JSON (5) 数据编码-Base64 (1) 数据加密-MD5、DES (4) 数据存储-File、Sql (9) 大数据 (1) 物联大时代背景 (31) 物联时代-传感器与通讯 (9) 物联时代-Arduino (7) 文章存档 2015年12月 (55) 2015年11月 (7) 2015年10月 (14) 2015年09月 (11) 2015年08月 (5) 2015年07月 (13) 2015年06月 (11) 2015年05月 (2) 2015年04月 (18) 2015年03月 (16) 2015年02月 (24) 2015年01月 (9) 2014年12月 (18) 2014年11月 (99) 2014年10月 (5) 2014年09月 (8) 2014年08月 (29) 2014年07月 (29) 2014年06月 (32) 2014年05月 (68) 2014年04月 (16) 2014年03月 (20) 2014年02月 (21) 2014年01月 (109) 2013年12月 (72) 2012年11月 (10)

Recno:: 62
URL:: http://blog.csdn.net/opengl_es/article/details/50324075

ParseText::
Xcode 7.0 官方免费的真机开发 - 太阳火神的美丽人生 - 师夷长技以制夷 - 博客频道 - CSDN.NET 太阳火神的美丽人生 - 师夷长技以制夷 敏捷开发及移动和物联设备、绿色教育的研究：iOS、Android、Html5、Arduino、pcDuino 目录视图 摘要视图 订阅 学院APP首次下载，可得50C币！     欢迎来帮助开源“进步”     当讲师？爱学习？投票攒课吧     认识Atlassian Datacenter产品     深圳小伙伴的福利来啦 Xcode 7.0 官方免费的真机开发 2015-12-16 10:16 598人阅读 评论 (0) 收藏 举报 分类： <=即时总结=> （710） 作者同类文章 X 平台-iOS （255） 作者同类文章 X 版权声明：本文为博主原创文章，未经博主允许不得转载。转载联系 QQ 30952589，加好友请注明来意。 Xcode 7.0 官方免费的真机开发 太阳火神的美丽人生 ( http://blog.csdn.net/opengl_es ) 本文遵循“ 署名-非商业用途-保持一致 ”创作公用协议 转载请保留此句： 太阳火神的美丽人生 -  本博客专注于  敏捷开发及移动和物联设备研究：iOS、Android、Html5、Arduino、pcDuino ， 否则，出自本博客的文章拒绝转载或再转载，谢谢合作。 苹果开发需要跟进的另一篇文档：What's New in Xcode 关于免费的真机开发描述如下：

Recno:: 63
URL:: http://blog.csdn.net/opengl_es/article/details/50329883

ParseText::
Mac OS X 10.10 启用 Web 服务器 - 太阳火神的美丽人生 - 师夷长技以制夷 - 博客频道 - CSDN.NET 太阳火神的美丽人生 - 师夷长技以制夷 敏捷开发及移动和物联设备、绿色教育的研究：iOS、Android、Html5、Arduino、pcDuino 目录视图 摘要视图 订阅 学院APP首次下载，可得50C币！     欢迎来帮助开源“进步”     当讲师？爱学习？投票攒课吧     认识Atlassian Datacenter产品     深圳小伙伴的福利来啦 Mac OS X 10.10 启用 Web 服务器 2015-12-16 16:36 100人阅读 评论 (0) 收藏 举报 分类： <=即时总结=> （710） 作者同类文章 X Mac OS X 10.10 启用 Web 服务器 转载 2015-01-25 17:07:22 原文：  Get Apache, MySQL, PHP and phpMyAdminworking on OSX 10.9 Mavericks Mac OS X 10.9 依旧预装了 Apache，但是已经不能在 「系统偏好设置」中的「Web 共享」来开启了，需要手动通过命令行开启。 启动Apache 启动： sudo apachectl start 停止： sudo apachectl stop 重启： sudo apachectl restart 查看 Apache 版本  httpd -v 浏览器打开  http://127.0.0.1  可以看到  Itworks!  的页面 文件根目录 系统级的根目录 http://localhosts/ 对应的文件目录是： /Library/WebServer/Documents/ 系统级根目录默认没有开启目录列表，开启方法：编辑  /etc/apache2/httpd.conf  文件搜索找到 将  OptionsFollowSymLinksMultiviews  修改为  OptionsIndexes FollowSymLinks Multiviews 用户级根目录 另一个 Web根目录默认是  ~/Sites  ，10.9中你需要手动创建这个 Sites 目录。 检查这个目录下是否有  username.conf  文件 /etc/apache2/users/ 如果没有，则需要新建一个， username  需要是你的账户名字，建议使用终端创建这个文件： cd /etc/apache2/users sudo vi username.conf 贴入以下内容，注意修改  username  为你的账户名字 Options Indexes MultiViews FollowSymLinks AllowOverride All Order allow,deny Allow from all Require all granted 这个文件的权限应该是： -rw-r--r-- 1 root wheel 298 Jun 28 16:47username.conf 如果不是，请修改 sudo chmod 644 username.conf 编辑  /etc/apache2/httpd.conf  文件，删除下列这些代码前的注释符号：  # Include /private/etc/apache2/extra/httpd-userdir.conf LoadModule authz_core_module libexec/apache2/mod_authz_core.so LoadModule authz_host_module libexec/apache2/mod_authz_host.so LoadModule userdir_module libexec/apache2/mod_userdir.so 编辑  /etc/apache2/extra/httpd-userdir.conf  文件，删除下列这些代码前的注释符号：  # Include /private/etc/apache2/users/*.conf 重启 Apache sudo apachectl restart 这时，这个网址应该已经可以用了： http://localhost/~username/ 启用重定向 .htaccess sudo vi /etc/apache2/httpd.conf 删除 AllowOverride all 前的注释 # PHP OSX 10.9 已经预装了 PHP 5.4.17，编辑  httpd.conf sudo vi /etc/apache2/httpd.conf 取消这一行前边的注释符号  # LoadModule php5_modulelibexec/apache2/libphp5.so 重启 Apache sudo apachectl restart 查看 Apache 信息 MySQL OS X 10.9 需要单独安装 MySQL， 下载地址  ，选择  Mac OS X ver. 10.7(x86, 64-bit), DMGArchive  。（下载无需注册，点击下边小字部分的「_ No thanks, justtake me to the downloads!_」即可） 三个文件都需要安装。其中第二个会在「系统偏好设置」中添加一个 MySQL 设置项：开机自动启动、启动／关闭 MySQL 命令行启动 MySQL sudo /usr/local/mysql/support-files/mysql.serverstart 查看 MySQL 版本 /usr/local/mysql/bin/mysql -v 添加 mysql 别名到 PATH 里： cd ; vi .bash_profile 添加： export PATH="/usr/local/mysql/bin:$PATH" 保存退出，然后执行 source ~/.bash_profile 之后就可以直接使用 mysql 命令 mysql -v 使用  \q  可以退出 mysql模式 设置 MySQL 密码 修改 mysql root 账户密码： /usr/local/mysql/bin/mysqladmin -u root password'yourpasswordhere' 注意使用单引号包裹密码 修复 2002 MySQL Socket 错误 sudo mkdir /var/mysql sudo ln -s /tmp/mysql.sock/var/mysql/mysql.sock phpMyAdmin 安装前必须先如上操作修复 2002 MySQL Socket 错误。 下载 phpMyAdmin  ，解压后放在  ~/Sites  目录下，新建  config  文件夹 mkdir ~/Sites/phpmyadmin/config 修改权限 chmod o+w ~/Sites/phpmyadmin/config 打开  http://127.0.0.1/~username/phpmyadmin/ 输入 mysql 的用户名和密码就可以登陆进去了。 然后删除  /config  目录。 phpMyAdmin可能会提示：配置文件现在需要一个短语密码。此时修改文件： phpMyAdmin/libraries/config.default.php 找到： $cfg['blowfish_secret']= ''; 修改为： $cfg['blowfish_secret'] ='rpsh.net';  (rpsh.net 可以为任意字符) 访问  http://127.0.0.1/~username/phpmyadmin/  就可以管理你的 mysql 了。 权限 为了方便程序在  ~/Sites  目录下读写 sudo chmod -R a+w ~/Sites/testsite 若担心安全问题，可以使用 _www 权限，若这样做当需要 admin 权限需做验证： sudo chown -R _www ~/Sites/testsite 上一篇 Xcode 7.0 官方免费的真机开发 下一篇 iOS HLS 流媒体文件打散问题 - 只有声音无影像 顶 0 踩 0 我的同类文章 <=即时总结=> （710） http://blog.csdn.net 猜你在找 查看评论 * 以上用户言论只代表其个人观点，不代表CSDN网站的观点或立场 个人资料 sleks 访问： 545649次 积分： 10165 等级： 积分：10165 排名： 第823名 原创： 307篇 转载： 284篇 译文： 130篇 评论： 113条 博客专栏 跟踪 iOS 新特性 文章：7篇 阅读：3544 从本质上满足应聘条件系列 文章：1篇 阅读：563 SSL/TLS 加密传输 文章：8篇 阅读：3999 Java NIO 教程 文章：18篇 阅读：9781 Three.js 文章：24篇 阅读：26188 《漫画线性代数》读书笔记 文章：7篇 阅读：8491 iOS UIKit 框架分类解析 文章：5篇 阅读：6680 iOS 基础框架分类解析 文章：10篇 阅读：10852 阅读排行 [iOS]日历和提醒编程指南（Calendar and Reminders Programming Guide） (5748) 解决 Chrome 访问https网站出现“您的连接不是私密的问题” (5738) iOS 各版本中的新特性（What's New in iOS）- 目录翻译完成 (5608) 什么叫别让孩子输在起跑线上？！ - 电子产品已成儿童“多动症”诱因 (4977) iOS 中 NSParameterAssert 是干啥的之官方解释翻译篇 (4113) 从另一个角度看癌症，现象、结果并不一定是病因！ (4079) iOS 开发库（iOS Developer Library） (3548) Threejs 加载 DAE 模型遇到关题汇总 (3364) 转换到 StoryBoard 的发布说明（Converting to Storyboards Release Notes） (2932) 搜搜（www.soso.com），I 老虎油！ (2847) 文章分类 <=即时总结=> (710) 平台-iOS (256) 平台-Anroid (77) 平台-Html5 (71) 语言-C_C++_OC (56) 语言-Java (122) 语言-Css (8) 语言-JavaScript (74) 敏捷开发-XP (4) 敏捷开发-Scrum (10) 敏捷开发-佛的减法 (118) 敏捷开发-心灵鸡汤 (0) 数据呈现-OpenGL ES (125) 数据呈现-View (1) 数据同步-Thread (0) 数据通道-SOCKET、SSL (1) 数据传输-HTTP (1) 数据承载-XML、JSON (5) 数据编码-Base64 (1) 数据加密-MD5、DES (4) 数据存储-File、Sql (9) 大数据 (1) 物联大时代背景 (31) 物联时代-传感器与通讯 (9) 物联时代-Arduino (7) 文章存档 2015年12月 (55) 2015年11月 (7) 2015年10月 (14) 2015年09月 (11) 2015年08月 (5) 2015年07月 (13) 2015年06月 (11) 2015年05月 (2) 2015年04月 (18) 2015年03月 (16) 2015年02月 (24) 2015年01月 (9) 2014年12月 (18) 2014年11月 (99) 2014年10月 (5) 2014年09月 (8) 2014年08月 (29) 2014年07月 (29) 2014年06月 (32) 2014年05月 (68) 2014年04月 (16) 2014年03月 (20) 2014年02月 (21) 2014年01月 (109) 2013年12月 (72) 2012年11月 (10)

Recno:: 64
URL:: http://blog.csdn.net/opengl_es/article/details/50330899

ParseText::
iOS HLS 流媒体文件打散问题 - 只有声音无影像 - 太阳火神的美丽人生 - 师夷长技以制夷 - 博客频道 - CSDN.NET 太阳火神的美丽人生 - 师夷长技以制夷 敏捷开发及移动和物联设备、绿色教育的研究：iOS、Android、Html5、Arduino、pcDuino 目录视图 摘要视图 订阅 学院APP首次下载，可得50C币！     欢迎来帮助开源“进步”     当讲师？爱学习？投票攒课吧     认识Atlassian Datacenter产品     深圳小伙伴的福利来啦 iOS HLS 流媒体文件打散问题 - 只有声音无影像 2015-12-16 17:49 513人阅读 评论 (0) 收藏 举报 分类： <=即时总结=> （710） 作者同类文章 X 平台-iOS （255） 作者同类文章 X 版权声明：本文为博主原创文章，未经博主允许不得转载。转载联系 QQ 30952589，加好友请注明来意。 iOS HLS 流媒体文件打散问题 - 只有声音无影像 太阳火神的美丽人生 ( http://blog.csdn.net/opengl_es ) 本文遵循“ 署名-非商业用途-保持一致 ”创作公用协议 转载请保留此句： 太阳火神的美丽人生 -  本博客专注于  敏捷开发及移动和物联设备研究：iOS、Android、Html5、Arduino、pcDuino ， 否则，出自本博客的文章拒绝转载或再转载，谢谢合作。 HTTP Live Streaming (HLS) 上面是官方的专栏页，在 其中下载 相应的工具包，其中有一个 mediafilesegmenter ，使用参数如下： sudo mediafilesegmenter -f ./112 ./33.mp4 -t 1 ./112 是当前 Web 服务器根目录下新建的 112 目录，也可以是其它路径 ./33.mp4 是待打散的视频文件 启用 Mac 默认 Web 方法，后补 iOS 支持的视频格式，后补 Android 4.0 之后支持 HLS,另可引入维它命！ ＝＝＝＝＝＝＝ 生病中，很想把这篇刚彻彻底研究出的思路整理出来，要不然就忘了，无耐。。。 上一篇 Mac OS X 10.10 启用 Web 服务器 下一篇 Xcode 7 你能不能再抗扎腾点儿呢 - 尤其自个儿强制升级后，没事儿就关闭 顶 1 踩 0 我的同类文章 <=即时总结=> （710） 平台-iOS （255） http://blog.csdn.net 猜你在找 查看评论 * 以上用户言论只代表其个人观点，不代表CSDN网站的观点或立场 个人资料 sleks 访问： 545647次 积分： 10165 等级： 积分：10165 排名： 第823名 原创： 307篇 转载： 284篇 译文： 130篇 评论： 113条 博客专栏 跟踪 iOS 新特性 文章：7篇 阅读：3544 从本质上满足应聘条件系列 文章：1篇 阅读：563 SSL/TLS 加密传输 文章：8篇 阅读：3999 Java NIO 教程 文章：18篇 阅读：9781 Three.js 文章：24篇 阅读：26188 《漫画线性代数》读书笔记 文章：7篇 阅读：8491 iOS UIKit 框架分类解析 文章：5篇 阅读：6680 iOS 基础框架分类解析 文章：10篇 阅读：10852 阅读排行 [iOS]日历和提醒编程指南（Calendar and Reminders Programming Guide） (5748) 解决 Chrome 访问https网站出现“您的连接不是私密的问题” (5738) iOS 各版本中的新特性（What's New in iOS）- 目录翻译完成 (5608) 什么叫别让孩子输在起跑线上？！ - 电子产品已成儿童“多动症”诱因 (4977) iOS 中 NSParameterAssert 是干啥的之官方解释翻译篇 (4113) 从另一个角度看癌症，现象、结果并不一定是病因！ (4079) iOS 开发库（iOS Developer Library） (3548) Threejs 加载 DAE 模型遇到关题汇总 (3364) 转换到 StoryBoard 的发布说明（Converting to Storyboards Release Notes） (2932) 搜搜（www.soso.com），I 老虎油！ (2847) 文章分类 <=即时总结=> (710) 平台-iOS (256) 平台-Anroid (77) 平台-Html5 (71) 语言-C_C++_OC (56) 语言-Java (122) 语言-Css (8) 语言-JavaScript (74) 敏捷开发-XP (4) 敏捷开发-Scrum (10) 敏捷开发-佛的减法 (118) 敏捷开发-心灵鸡汤 (0) 数据呈现-OpenGL ES (125) 数据呈现-View (1) 数据同步-Thread (0) 数据通道-SOCKET、SSL (1) 数据传输-HTTP (1) 数据承载-XML、JSON (5) 数据编码-Base64 (1) 数据加密-MD5、DES (4) 数据存储-File、Sql (9) 大数据 (1) 物联大时代背景 (31) 物联时代-传感器与通讯 (9) 物联时代-Arduino (7) 文章存档 2015年12月 (55) 2015年11月 (7) 2015年10月 (14) 2015年09月 (11) 2015年08月 (5) 2015年07月 (13) 2015年06月 (11) 2015年05月 (2) 2015年04月 (18) 2015年03月 (16) 2015年02月 (24) 2015年01月 (9) 2014年12月 (18) 2014年11月 (99) 2014年10月 (5) 2014年09月 (8) 2014年08月 (29) 2014年07月 (29) 2014年06月 (32) 2014年05月 (68) 2014年04月 (16) 2014年03月 (20) 2014年02月 (21) 2014年01月 (109) 2013年12月 (72) 2012年11月 (10)

Recno:: 65
URL:: http://blog.csdn.net/opengl_es/article/details/50344635

ParseText::
Xcode 7 你能不能再抗扎腾点儿呢 - 尤其自个儿强制升级后，没事儿就关闭 - 太阳火神的美丽人生 - 师夷长技以制夷 - 博客频道 - CSDN.NET 太阳火神的美丽人生 - 师夷长技以制夷 敏捷开发及移动和物联设备、绿色教育的研究：iOS、Android、Html5、Arduino、pcDuino 目录视图 摘要视图 订阅 学院APP首次下载，可得50C币！     欢迎来帮助开源“进步”     当讲师？爱学习？投票攒课吧     认识Atlassian Datacenter产品     深圳小伙伴的福利来啦 Xcode 7 你能不能再抗扎腾点儿呢 - 尤其自个儿强制升级后，没事儿就关闭 2015-12-17 17:46 591人阅读 评论 (0) 收藏 举报 分类： <=即时总结=> （710） 作者同类文章 X 平台-iOS （255） 作者同类文章 X 版权声明：本文为博主原创文章，未经博主允许不得转载。转载联系 QQ 30952589，加好友请注明来意。 Xcode 7 你能不能再抗扎腾点儿呢 - 尤其自个儿强制升级后，没事儿就关闭 太阳火神的美丽人生 ( http://blog.csdn.net/opengl_es ) 本文遵循“ 署名-非商业用途-保持一致 ”创作公用协议 转载请保留此句： 太阳火神的美丽人生 -  本博客专注于  敏捷开发及移动和物联设备研究：iOS、Android、Html5、Arduino、pcDuino ， 否则，出自本博客的文章拒绝转载或再转载，谢谢合作。 作为苹果公司的最新系统 iOS 9，同样带来了不少变化。 适配新版本嘛，这个多年来一直在做，无可厚非，跟上形势，进得了厅堂（通过苹果应用商店审核）。 然而，好多新特性是需要集成开发环境配合的，当然你自个改也可以，如果你真的很不嫌费事，而且有大把时间。 但不知 Xcode 6，是否会提示下载 iOS 9，反正我上周重做系统前，没发现这个。 那么估且就这样认为吧， Xcode 7 是你适配 iOS 9 的必备，虽然很多特性是可以在发布时禁掉的。 。。。 N 多罗列 。。。 终于用 Xcode 7 针对模拟器开始了新的征程。 可是，某一天，发现 Xcode 7 彩色法轮经常转起，是不是魔界有大事发生，这是什么征照？！呢。。。 。。。 也许是开得太久，需要重启一下吧， 重启 Xcode 7 ,发现它一直提示自动升级中，一小时后，还是这样的提示。。。 重启 iMac，终于能打开 Xcode 7 了，开始干活咯。。。 咔嚓，异常关闭！ 我的 Xcode 7 呀，你玩毛呐！ 之后。。。 无尽的伤痛。。。 下一个版本无论是啥，俺都要升级！ 而且， 为么什么这么一个烂版本， 还要强制自动升级， 乔布斯。。。，你上来看看吧， 没你管着，他们竟瞎整啊！ 。。。 啥，没听清 噢， 你也管不了啦，那真没招了， 爱咋咋地吧 也许把机器内存翻一倍能彩轮不现吧？！ 这时代磁盘也是屏颈，固态能解决大磁盘与内存之间的瓶颈。 马上订一块 128 G 固态，把家里的 R400 老爷机上的 128 G SATA 换掉。。。 上一篇 iOS HLS 流媒体文件打散问题 - 只有声音无影像 下一篇 这又是谁家的网盘？ 顶 0 踩 0 我的同类文章 <=即时总结=> （710） 平台-iOS （255） http://blog.csdn.net 猜你在找 查看评论 * 以上用户言论只代表其个人观点，不代表CSDN网站的观点或立场 个人资料 sleks 访问： 545659次 积分： 10165 等级： 积分：10165 排名： 第823名 原创： 307篇 转载： 284篇 译文： 130篇 评论： 113条 博客专栏 跟踪 iOS 新特性 文章：7篇 阅读：3544 从本质上满足应聘条件系列 文章：1篇 阅读：563 SSL/TLS 加密传输 文章：8篇 阅读：3999 Java NIO 教程 文章：18篇 阅读：9781 Three.js 文章：24篇 阅读：26188 《漫画线性代数》读书笔记 文章：7篇 阅读：8491 iOS UIKit 框架分类解析 文章：5篇 阅读：6680 iOS 基础框架分类解析 文章：10篇 阅读：10852 阅读排行 [iOS]日历和提醒编程指南（Calendar and Reminders Programming Guide） (5748) 解决 Chrome 访问https网站出现“您的连接不是私密的问题” (5738) iOS 各版本中的新特性（What's New in iOS）- 目录翻译完成 (5608) 什么叫别让孩子输在起跑线上？！ - 电子产品已成儿童“多动症”诱因 (4977) iOS 中 NSParameterAssert 是干啥的之官方解释翻译篇 (4113) 从另一个角度看癌症，现象、结果并不一定是病因！ (4079) iOS 开发库（iOS Developer Library） (3548) Threejs 加载 DAE 模型遇到关题汇总 (3364) 转换到 StoryBoard 的发布说明（Converting to Storyboards Release Notes） (2932) 搜搜（www.soso.com），I 老虎油！ (2847) 文章分类 <=即时总结=> (710) 平台-iOS (256) 平台-Anroid (77) 平台-Html5 (71) 语言-C_C++_OC (56) 语言-Java (122) 语言-Css (8) 语言-JavaScript (74) 敏捷开发-XP (4) 敏捷开发-Scrum (10) 敏捷开发-佛的减法 (118) 敏捷开发-心灵鸡汤 (0) 数据呈现-OpenGL ES (125) 数据呈现-View (1) 数据同步-Thread (0) 数据通道-SOCKET、SSL (1) 数据传输-HTTP (1) 数据承载-XML、JSON (5) 数据编码-Base64 (1) 数据加密-MD5、DES (4) 数据存储-File、Sql (9) 大数据 (1) 物联大时代背景 (31) 物联时代-传感器与通讯 (9) 物联时代-Arduino (7) 文章存档 2015年12月 (55) 2015年11月 (7) 2015年10月 (14) 2015年09月 (11) 2015年08月 (5) 2015年07月 (13) 2015年06月 (11) 2015年05月 (2) 2015年04月 (18) 2015年03月 (16) 2015年02月 (24) 2015年01月 (9) 2014年12月 (18) 2014年11月 (99) 2014年10月 (5) 2014年09月 (8) 2014年08月 (29) 2014年07月 (29) 2014年06月 (32) 2014年05月 (68) 2014年04月 (16) 2014年03月 (20) 2014年02月 (21) 2014年01月 (109) 2013年12月 (72) 2012年11月 (10)

Recno:: 66
URL:: http://blog.csdn.net/opengl_es/article/details/50345213

ParseText::
这又是谁家的网盘？ - 太阳火神的美丽人生 - 师夷长技以制夷 - 博客频道 - CSDN.NET 太阳火神的美丽人生 - 师夷长技以制夷 敏捷开发及移动和物联设备、绿色教育的研究：iOS、Android、Html5、Arduino、pcDuino 目录视图 摘要视图 订阅 学院APP首次下载，可得50C币！     欢迎来帮助开源“进步”     当讲师？爱学习？投票攒课吧     认识Atlassian Datacenter产品     深圳小伙伴的福利来啦 这又是谁家的网盘？ 2015-12-17 18:39 1029人阅读 评论 (1) 收藏 举报 分类： <=即时总结=> （710） 作者同类文章 X 版权声明：本文为博主原创文章，未经博主允许不得转载。转载联系 QQ 30952589，加好友请注明来意。 这又是谁家的网盘？ 太阳火神的美丽人生 ( http://blog.csdn.net/opengl_es ) 本文遵循“ 署名-非商业用途-保持一致 ”创作公用协议 转载请保留此句： 太阳火神的美丽人生 -  本博客专注于  敏捷开发及移动和物联设备研究：iOS、Android、Html5、Arduino、pcDuino ， 否则，出自本博客的文章拒绝转载或再转载，谢谢合作。 话说 Android 开发环境构建难，究其根源，是路不通！ 又来了个 Android Studio，内置什么 Gradle，实际使用的也是 Maven 库，有事儿没事儿得上道遛一圈儿， 眼下这道路总是不畅，你还来添什么乱呢！ 这不，院子里的道儿都不畅通，反倒是院儿外的道要好一些。 有没有更好的办法？

Recno:: 67
URL:: http://blog.csdn.net/opengl_es/article/details/50350826

ParseText::
好吧，我承认我喜欢这样的多个 StoryBoard 组织的方式，学习了！ - 太阳火神的美丽人生 - 师夷长技以制夷 - 博客频道 - CSDN.NET 太阳火神的美丽人生 - 师夷长技以制夷 敏捷开发及移动和物联设备、绿色教育的研究：iOS、Android、Html5、Arduino、pcDuino 目录视图 摘要视图 订阅 学院APP首次下载，可得50C币！     欢迎来帮助开源“进步”     当讲师？爱学习？投票攒课吧     认识Atlassian Datacenter产品     深圳小伙伴的福利来啦 好吧，我承认我喜欢这样的多个 StoryBoard 组织的方式，学习了！ 2015-12-18 11:57 532人阅读 评论 (0) 收藏 举报 分类： <=即时总结=> （710） 作者同类文章 X 平台-iOS （255） 作者同类文章 X 版权声明：本文为博主原创文章，未经博主允许不得转载。转载联系 QQ 30952589，加好友请注明来意。 以下转载内容很不错，后续补充从官方文档疏理出来的脉络，确实很好的用法。 Storyboard 跳转 和 传值     写在前面: 因为苹果推 Storyboard 而且 目前来看, Apple Watch 也是用 Storyboard 就知道, 明天应用估计都是 Storyboard 的天下了. (水平有限, 不对之处在所难免, 望海涵) 很多人似乎还是在用 XIB, 对 Storyboard 如何进行跳转 似乎 懵懵懂懂... 好吧, 鉴于 早上群里, 有人问 怎么跳转, 怎么传值 等等问题. 就做下总结, 同时为大家 提供一些方法和参考. ------------------ 1. 最简单的方法 拖拽, 这个就不用多解释了吧. 直接拖拽到另一个视图控制器, 选择 show, 就行了. 2. 利用 Segue 方法 (这里主要是 方法1 的传值) 连好线, 点击 连线中间部分, 设置 Identifier. 然后 调用 performSegueWithIdentifier 方法. (注: Demo 里面, 是直接将 TableViewController 和 SecondViewController 进行连线, 而不是 点击 Cell 的 indicator 进行连线) 执行以下 方法, 就可以进行 跳转操作了. 复制代码 performSegueWithIdentifier("SecondSegue", sender: self) 如何传值? 很简单, 需要调用 prepareForSegue 方法 (因为这里是 父视图 -> 子视图 传值, 所以要用 destinationViewController) 复制代码 override func prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?) {     var theSegue = segue.destinationViewController as SecondViewController     theSegue.text = "Pass" } (注: 这里, Swift 的 自动补全可能失效, 所以 如果没有出现 destinationViewController, 没关系往后打.) 这里的 text 是我在 子视图中 声明的变量, 用来设置 Label 的 值. PS: 一般, 我们都用使用连线的方式, 这里告诉大家另一个方式, 就是用 viewWithTag. 我先前在 Label 控件 Tag 中设置为 100. 当然你也可以使用连线, 使用 viewWithTag 可以在我们自定义 Cell 的时候 方便用到, 而不需要创建单独的 Cell class. 3. 利用 self.storyboard 利用 self.storyboard 方法, 就不需要进行 连线, 一样可以进行视图之间的跳转. 但是必须要设置 Storyboard ID. 然后利用 如下方法进行 跳转 和 传值 复制代码 var thirdVC = self.storyboard?.instantiateViewControllerWithIdentifier("ThirdViewController") as ThirdViewController thirdVC.text = "Pass" self.navigationController?.pushViewController(thirdVC, animated: true) 因为是在 同一个 Storyboard 里面进行跳转, 所以 self.storyboard 就可以满足需求. 不明白? 看最后一个方法: 4. 利用 UIStoryboard XIB 方法, 我们需要 用到 nibName, 同样 如果我们想要 分离多个 sence 在不同的Storyboard 里面, 怎么办? 这个时候, 就不能使用 self.storyboard 了. 而是: 复制代码 var storyboard = UIStoryboard(name: "New", bundle: nil) var newVC = storyboard.instantiateViewControllerWithIdentifier("NewViewController") as NewViewController newVC.text = "Pass" self.navigationController?.pushViewController(newVC, animated: true) 是不是 和 XIB 有异曲同工的感觉, 这样就可以把 Storyboard 分几个, 每个里面放几个 Sence. 这样的好处就是, 当你需要做多个不同功能的模块的应用, 分离到不同的 Storyboard 中, 彼此互不影响. 相对于 XIB 来说, 每个文件夹 只需要 1 个 Storyboard 文件, 和 Swfit 文件就可以了. [ 此帖被dongeyoung在2014-11-23 04:55重新编辑 ] 上一篇 这又是谁家的网盘？ 下一篇 专访 YYKit 作者 Ibireme: 开源大牛是怎样炼成的 顶 0 踩 0 我的同类文章 <=即时总结=> （710） 平台-iOS （255） http://blog.csdn.net 猜你在找 查看评论 * 以上用户言论只代表其个人观点，不代表CSDN网站的观点或立场 个人资料 sleks 访问： 545665次 积分： 10165 等级： 积分：10165 排名： 第823名 原创： 307篇 转载： 284篇 译文： 130篇 评论： 113条 博客专栏 跟踪 iOS 新特性 文章：7篇 阅读：3544 从本质上满足应聘条件系列 文章：1篇 阅读：563 SSL/TLS 加密传输 文章：8篇 阅读：3999 Java NIO 教程 文章：18篇 阅读：9781 Three.js 文章：24篇 阅读：26188 《漫画线性代数》读书笔记 文章：7篇 阅读：8491 iOS UIKit 框架分类解析 文章：5篇 阅读：6680 iOS 基础框架分类解析 文章：10篇 阅读：10852 阅读排行 [iOS]日历和提醒编程指南（Calendar and Reminders Programming Guide） (5748) 解决 Chrome 访问https网站出现“您的连接不是私密的问题” (5738) iOS 各版本中的新特性（What's New in iOS）- 目录翻译完成 (5608) 什么叫别让孩子输在起跑线上？！ - 电子产品已成儿童“多动症”诱因 (4977) iOS 中 NSParameterAssert 是干啥的之官方解释翻译篇 (4113) 从另一个角度看癌症，现象、结果并不一定是病因！ (4079) iOS 开发库（iOS Developer Library） (3548) Threejs 加载 DAE 模型遇到关题汇总 (3364) 转换到 StoryBoard 的发布说明（Converting to Storyboards Release Notes） (2932) 搜搜（www.soso.com），I 老虎油！ (2847) 文章分类 <=即时总结=> (710) 平台-iOS (256) 平台-Anroid (77) 平台-Html5 (71) 语言-C_C++_OC (56) 语言-Java (122) 语言-Css (8) 语言-JavaScript (74) 敏捷开发-XP (4) 敏捷开发-Scrum (10) 敏捷开发-佛的减法 (118) 敏捷开发-心灵鸡汤 (0) 数据呈现-OpenGL ES (125) 数据呈现-View (1) 数据同步-Thread (0) 数据通道-SOCKET、SSL (1) 数据传输-HTTP (1) 数据承载-XML、JSON (5) 数据编码-Base64 (1) 数据加密-MD5、DES (4) 数据存储-File、Sql (9) 大数据 (1) 物联大时代背景 (31) 物联时代-传感器与通讯 (9) 物联时代-Arduino (7) 文章存档 2015年12月 (55) 2015年11月 (7) 2015年10月 (14) 2015年09月 (11) 2015年08月 (5) 2015年07月 (13) 2015年06月 (11) 2015年05月 (2) 2015年04月 (18) 2015年03月 (16) 2015年02月 (24) 2015年01月 (9) 2014年12月 (18) 2014年11月 (99) 2014年10月 (5) 2014年09月 (8) 2014年08月 (29) 2014年07月 (29) 2014年06月 (32) 2014年05月 (68) 2014年04月 (16) 2014年03月 (20) 2014年02月 (21) 2014年01月 (109) 2013年12月 (72) 2012年11月 (10)

Recno:: 68
URL:: http://blog.csdn.net/opengl_es/article/details/50351252

ParseText::
专访 YYKit 作者 Ibireme: 开源大牛是怎样炼成的 - 太阳火神的美丽人生 - 师夷长技以制夷 - 博客频道 - CSDN.NET 太阳火神的美丽人生 - 师夷长技以制夷 敏捷开发及移动和物联设备、绿色教育的研究：iOS、Android、Html5、Arduino、pcDuino 目录视图 摘要视图 订阅 学院APP首次下载，可得50C币！     欢迎来帮助开源“进步”     当讲师？爱学习？投票攒课吧     认识Atlassian Datacenter产品     深圳小伙伴的福利来啦 专访 YYKit 作者 Ibireme: 开源大牛是怎样炼成的 2015-12-18 13:39 83人阅读 评论 (0) 收藏 举报 分类： <=即时总结=> （710） 作者同类文章 X 平台-iOS （255） 作者同类文章 X 专访 YYKit 作者 Ibireme: 开源大牛是怎样炼成的 Nov 26 th , 2015 版权说明 本文为InfoQ中文站特供稿件，首发地址为： 文章链接 。如需转载，请与InfoQ中文站联系。 前言 第一次听到 ibireme 这个名字，是看到他在 微博上分享 了 YYText 开源库。当时我第一眼见到 YYText 的功能示意 GIF 图时（下图所示），就被它丰富的功能吸引了。YYText 应该是我见到过的功能最强大的基于 CoreText 的排版框架了。 令人惊讶的是，YYText 虽然代码量很大（超过一万行），但它只是 ibireme 的作品之一。ibireme 利用业余时间完成了 YYKit 工具库，包括： YYModel — 高性能的 iOS JSON 模型框架。 YYCache — 高性能的 iOS 缓存框架。 YYImage — 功能强大的 iOS 图像框架。 YYWebImage — 高性能的 iOS 异步图像加载框架。 YYText — 功能强大的 iOS 富文本框架。 YYKeyboardManager — iOS 键盘监听管理工具。 YYDispatchQueuePool — iOS 全局并发队列管理工具。 YYAsyncLayer — iOS 异步绘制与显示的工具。 YYCategories — 功能丰富的 Category 类型工具库。 上一篇 好吧，我承认我喜欢这样的多个 StoryBoard 组织的方式，学习了！ 下一篇 不要在init和dealloc函数中使用accessor 顶 0 踩 0 我的同类文章 <=即时总结=> （710） 平台-iOS （255） http://blog.csdn.net 猜你在找 查看评论 * 以上用户言论只代表其个人观点，不代表CSDN网站的观点或立场 个人资料 sleks 访问： 545651次 积分： 10165 等级： 积分：10165 排名： 第823名 原创： 307篇 转载： 284篇 译文： 130篇 评论： 113条 博客专栏 跟踪 iOS 新特性 文章：7篇 阅读：3544 从本质上满足应聘条件系列 文章：1篇 阅读：563 SSL/TLS 加密传输 文章：8篇 阅读：3999 Java NIO 教程 文章：18篇 阅读：9781 Three.js 文章：24篇 阅读：26188 《漫画线性代数》读书笔记 文章：7篇 阅读：8491 iOS UIKit 框架分类解析 文章：5篇 阅读：6680 iOS 基础框架分类解析 文章：10篇 阅读：10852 阅读排行 [iOS]日历和提醒编程指南（Calendar and Reminders Programming Guide） (5748) 解决 Chrome 访问https网站出现“您的连接不是私密的问题” (5738) iOS 各版本中的新特性（What's New in iOS）- 目录翻译完成 (5608) 什么叫别让孩子输在起跑线上？！ - 电子产品已成儿童“多动症”诱因 (4977) iOS 中 NSParameterAssert 是干啥的之官方解释翻译篇 (4113) 从另一个角度看癌症，现象、结果并不一定是病因！ (4079) iOS 开发库（iOS Developer Library） (3548) Threejs 加载 DAE 模型遇到关题汇总 (3364) 转换到 StoryBoard 的发布说明（Converting to Storyboards Release Notes） (2932) 搜搜（www.soso.com），I 老虎油！ (2847) 文章分类 <=即时总结=> (710) 平台-iOS (256) 平台-Anroid (77) 平台-Html5 (71) 语言-C_C++_OC (56) 语言-Java (122) 语言-Css (8) 语言-JavaScript (74) 敏捷开发-XP (4) 敏捷开发-Scrum (10) 敏捷开发-佛的减法 (118) 敏捷开发-心灵鸡汤 (0) 数据呈现-OpenGL ES (125) 数据呈现-View (1) 数据同步-Thread (0) 数据通道-SOCKET、SSL (1) 数据传输-HTTP (1) 数据承载-XML、JSON (5) 数据编码-Base64 (1) 数据加密-MD5、DES (4) 数据存储-File、Sql (9) 大数据 (1) 物联大时代背景 (31) 物联时代-传感器与通讯 (9) 物联时代-Arduino (7) 文章存档 2015年12月 (55) 2015年11月 (7) 2015年10月 (14) 2015年09月 (11) 2015年08月 (5) 2015年07月 (13) 2015年06月 (11) 2015年05月 (2) 2015年04月 (18) 2015年03月 (16) 2015年02月 (24) 2015年01月 (9) 2014年12月 (18) 2014年11月 (99) 2014年10月 (5) 2014年09月 (8) 2014年08月 (29) 2014年07月 (29) 2014年06月 (32) 2014年05月 (68) 2014年04月 (16) 2014年03月 (20) 2014年02月 (21) 2014年01月 (109) 2013年12月 (72) 2012年11月 (10)

Recno:: 69
URL:: http://blog.csdn.net/opengl_es/article/details/50351266

ParseText::
不要在init和dealloc函数中使用accessor - 太阳火神的美丽人生 - 师夷长技以制夷 - 博客频道 - CSDN.NET 太阳火神的美丽人生 - 师夷长技以制夷 敏捷开发及移动和物联设备、绿色教育的研究：iOS、Android、Html5、Arduino、pcDuino 目录视图 摘要视图 订阅 学院APP首次下载，可得50C币！     欢迎来帮助开源“进步”     当讲师？爱学习？投票攒课吧     认识Atlassian Datacenter产品     深圳小伙伴的福利来啦 不要在init和dealloc函数中使用accessor 2015-12-18 13:40 66人阅读 评论 (0) 收藏 举报 分类： <=即时总结=> （710） 作者同类文章 X 平台-iOS （255） 作者同类文章 X 不要在init和dealloc函数中使用accessor Aug 10 th , 2011 Objective-C 2.0 增加了 dot syntax，用于简单地调用成员变量的 accessor。相当于 java 的 getter 和 setter。因为正常情况下，写一个 accessor 对于初学者来说，还是挺容易犯错的。比如有一个 NSString * 的成员变量叫 name。一个错误的写法是： 1 2 3 - ( void ) setName: ( NSString * ) newName { name = newName ; } Java 同学肯定想不通上面的代码有什么错吧？原因是 Objective-C 需要自己负责内存的释放。所以需要在改变 reference 之前，将原对象 release，对新的对象，也需要 retain 一下，代码就改成这样： 1 2 3 4 - ( void ) setName: ( NSString * ) newName { [ name release ]; name = [ newName retain ]; } 初学者可能以为这样就对了，其实还是有错，如果 newName 和 name 的指向的是同一个对象，并且这个对象 retain count 只有 1 的话。那么 name release 之后，这个对象就被回收掉了。所以应该改成： 1 2 3 4 5 6 - ( void ) setName: ( NSString * ) newName { if ( name != newName ) { [ name release ]; name = [ newName retain ]; } } 这样才算是一个正确的 set 函数，Java 同学肯定被吓到了，虽然知道这么写，但这比 Java 麻烦多了。于是，Objective-C 允许程序员使用 @property + @synthesize 关键字来自动生成这些代码（注：Xcode 现在会默认自动添加 @synthesize 关键字）。于是 Objective-C 的程序员幸福了。大部分时候根本就不用写 getter 和 setter。 但是需要小心，Objective-C 的 accessor 不能在 init 和 dealloc 函数中使用！如果你在 dealloc 中这么写，就有问题： 1 2 3 4 - ( void ) dealloc { self . name = nil ; [ super dealloc ] } 苹果在它的开发者文档库中有一个专门讲 cocoa 的内存管理的文章： http://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/MemoryMgmt/MemoryMgmt.pdf 文章的第 16 页有一节题目是：Don’t Use Accessor Methods in Initializer Methods and dealloc 文章说：你唯一不应该用 Accessor 的地方是 init 函数和 delloc 函数。在 init 函数中，对于一个 _count 成员变量应该像下面这样赋值： 1 2 3 4 5 6 7 - ( id ) init { self = [ super init ]; if ( self ) { _count = [[ NSNumber alloc ] initWithInteger: 0 ]; } return self ; } 对于一个带参数的 init 函数，你应该实现成下面这样： 1 2 3 4 5 6 7 - ( id ) initWithCount: ( NSNumber * ) startingCount { self = [ super init ]; if ( self ) { _count = [ startingCount copy ]; } return self ; } 对于在 dealloc 中，对应的写法应该是调 release: 1 2 3 4 - ( void ) dealloc { [ _count release ]; [ super dealloc ]; } 但是比较郁闷的是，文章最后没有说为什么不能！去 stackoverflow 上搜了一下，比较不靠谱的说法是这样少一次函数调用，更快。比较靠谱的说法是：在 init 和 dealloc 中，对象的存在与否还不确定，所以给对象发消息可能不会成功。 顺便说一下 , 当发现这个文章的时候，我们的代码中已经有了很多这样错误用法。虽然程序没有出现严重的内存问题，但是为了保险，还是打算一行一行改掉，后来我想，这个能不能用 vim 搞定呢？于是我进 vim，用 qa 启动宏录制，然后输入 :%s/self./[/g 再输入：%s/= nil/release]/g 再输入 q, 这样就可以用 @a 来启动刚刚录制的宏来做替换了。相当方便。 Posted by 唐巧 Aug 10 th , 2011 iOS 关注我的「iOS开发」微信公众号，每天获得精选的 iOS 开发文章和创业心得： 上一篇 专访 YYKit 作者 Ibireme: 开源大牛是怎样炼成的 下一篇 iOS 开发中的争议（一） 顶 0 踩 0 我的同类文章 <=即时总结=> （710） 平台-iOS （255） http://blog.csdn.net 猜你在找 查看评论 * 以上用户言论只代表其个人观点，不代表CSDN网站的观点或立场 个人资料 sleks 访问： 545658次 积分： 10165 等级： 积分：10165 排名： 第823名 原创： 307篇 转载： 284篇 译文： 130篇 评论： 113条 博客专栏 跟踪 iOS 新特性 文章：7篇 阅读：3544 从本质上满足应聘条件系列 文章：1篇 阅读：563 SSL/TLS 加密传输 文章：8篇 阅读：3999 Java NIO 教程 文章：18篇 阅读：9781 Three.js 文章：24篇 阅读：26188 《漫画线性代数》读书笔记 文章：7篇 阅读：8491 iOS UIKit 框架分类解析 文章：5篇 阅读：6680 iOS 基础框架分类解析 文章：10篇 阅读：10852 阅读排行 [iOS]日历和提醒编程指南（Calendar and Reminders Programming Guide） (5748) 解决 Chrome 访问https网站出现“您的连接不是私密的问题” (5738) iOS 各版本中的新特性（What's New in iOS）- 目录翻译完成 (5608) 什么叫别让孩子输在起跑线上？！ - 电子产品已成儿童“多动症”诱因 (4977) iOS 中 NSParameterAssert 是干啥的之官方解释翻译篇 (4113) 从另一个角度看癌症，现象、结果并不一定是病因！ (4079) iOS 开发库（iOS Developer Library） (3548) Threejs 加载 DAE 模型遇到关题汇总 (3364) 转换到 StoryBoard 的发布说明（Converting to Storyboards Release Notes） (2932) 搜搜（www.soso.com），I 老虎油！ (2847) 文章分类 <=即时总结=> (710) 平台-iOS (256) 平台-Anroid (77) 平台-Html5 (71) 语言-C_C++_OC (56) 语言-Java (122) 语言-Css (8) 语言-JavaScript (74) 敏捷开发-XP (4) 敏捷开发-Scrum (10) 敏捷开发-佛的减法 (118) 敏捷开发-心灵鸡汤 (0) 数据呈现-OpenGL ES (125) 数据呈现-View (1) 数据同步-Thread (0) 数据通道-SOCKET、SSL (1) 数据传输-HTTP (1) 数据承载-XML、JSON (5) 数据编码-Base64 (1) 数据加密-MD5、DES (4) 数据存储-File、Sql (9) 大数据 (1) 物联大时代背景 (31) 物联时代-传感器与通讯 (9) 物联时代-Arduino (7) 文章存档 2015年12月 (55) 2015年11月 (7) 2015年10月 (14) 2015年09月 (11) 2015年08月 (5) 2015年07月 (13) 2015年06月 (11) 2015年05月 (2) 2015年04月 (18) 2015年03月 (16) 2015年02月 (24) 2015年01月 (9) 2014年12月 (18) 2014年11月 (99) 2014年10月 (5) 2014年09月 (8) 2014年08月 (29) 2014年07月 (29) 2014年06月 (32) 2014年05月 (68) 2014年04月 (16) 2014年03月 (20) 2014年02月 (21) 2014年01月 (109) 2013年12月 (72) 2012年11月 (10)

Recno:: 70
URL:: http://blog.csdn.net/opengl_es/article/details/50351270

ParseText::
iOS 开发中的争议（一） - 太阳火神的美丽人生 - 师夷长技以制夷 - 博客频道 - CSDN.NET 太阳火神的美丽人生 - 师夷长技以制夷 敏捷开发及移动和物联设备、绿色教育的研究：iOS、Android、Html5、Arduino、pcDuino 目录视图 摘要视图 订阅 学院APP首次下载，可得50C币！     欢迎来帮助开源“进步”     当讲师？爱学习？投票攒课吧     认识Atlassian Datacenter产品     深圳小伙伴的福利来啦 iOS 开发中的争议（一） 2015-12-18 13:44 74人阅读 评论 (0) 收藏 举报 分类： <=即时总结=> （710） 作者同类文章 X 平台-iOS （255） 作者同类文章 X iOS 开发中的争议（一） Mar 15 th , 2015 打算分享一些有争议的话题，并且表达一下我的看法。这是该系列的第一篇，我想讨论的是：类的成员变量应该如何定义？ 在 Objective-C 的语言的早期，类的私有成员变量是只能定义在 .h 的头文件里面的。像如下这样： 1 2 3 4 @interface ViewController : UIViewController { @private NSInteger _value; } 之后，苹果改进了 Objective-C，允许在 .m 里面添加一个特殊的匿名 Category，即没有名字的 Category，来实现增加类的成员变量。像如下这样： 1 2 3 4 5 @interface ViewController () @property (nonatomic) NSInteger value; @end 这样的好处是，这些变量在头文件中被彻底隐藏起来了，不用暴露给使用者。 接着，在 2013 年的 WWDC 中，苹果进一步改进了 Objective-C，允许在 .m 的 @implementation 中直接添加类的私有成员变量。像如下这样： 1 2 3 @implementation ViewController { NSInteger _value; } 于是，大家对于如何定义私有的成员变量上就产生的分歧。许多人喜欢用匿名的 Category 的方式来定义私有成员变量。但是，我个人更推荐在 @implementation 中直接添加类的私有成员变量。下面我做一些解释。 ---------- 部分转载，完整原文可点击标题跳过去，以下是转载标注内容： 到这里，我知道了，这个我确实见过，但不知为什么在要实现中声明变量，因为 2013 年我正埋头 OpenGLES 的苦海中，就是那两年对这个领域的好奇，让我疲惫不堪，并且在 iOS 的发展路上落下了几课，两年才缓过来，包括身体和技术结构。 上一篇 不要在init和dealloc函数中使用accessor 下一篇 iOS夯实：内存管理 顶 0 踩 0 我的同类文章 <=即时总结=> （710） 平台-iOS （255） http://blog.csdn.net 猜你在找 查看评论 * 以上用户言论只代表其个人观点，不代表CSDN网站的观点或立场 个人资料 sleks 访问： 545664次 积分： 10165 等级： 积分：10165 排名： 第823名 原创： 307篇 转载： 284篇 译文： 130篇 评论： 113条 博客专栏 跟踪 iOS 新特性 文章：7篇 阅读：3544 从本质上满足应聘条件系列 文章：1篇 阅读：563 SSL/TLS 加密传输 文章：8篇 阅读：3999 Java NIO 教程 文章：18篇 阅读：9781 Three.js 文章：24篇 阅读：26188 《漫画线性代数》读书笔记 文章：7篇 阅读：8491 iOS UIKit 框架分类解析 文章：5篇 阅读：6680 iOS 基础框架分类解析 文章：10篇 阅读：10852 阅读排行 [iOS]日历和提醒编程指南（Calendar and Reminders Programming Guide） (5748) 解决 Chrome 访问https网站出现“您的连接不是私密的问题” (5738) iOS 各版本中的新特性（What's New in iOS）- 目录翻译完成 (5608) 什么叫别让孩子输在起跑线上？！ - 电子产品已成儿童“多动症”诱因 (4977) iOS 中 NSParameterAssert 是干啥的之官方解释翻译篇 (4113) 从另一个角度看癌症，现象、结果并不一定是病因！ (4079) iOS 开发库（iOS Developer Library） (3548) Threejs 加载 DAE 模型遇到关题汇总 (3364) 转换到 StoryBoard 的发布说明（Converting to Storyboards Release Notes） (2932) 搜搜（www.soso.com），I 老虎油！ (2847) 文章分类 <=即时总结=> (710) 平台-iOS (256) 平台-Anroid (77) 平台-Html5 (71) 语言-C_C++_OC (56) 语言-Java (122) 语言-Css (8) 语言-JavaScript (74) 敏捷开发-XP (4) 敏捷开发-Scrum (10) 敏捷开发-佛的减法 (118) 敏捷开发-心灵鸡汤 (0) 数据呈现-OpenGL ES (125) 数据呈现-View (1) 数据同步-Thread (0) 数据通道-SOCKET、SSL (1) 数据传输-HTTP (1) 数据承载-XML、JSON (5) 数据编码-Base64 (1) 数据加密-MD5、DES (4) 数据存储-File、Sql (9) 大数据 (1) 物联大时代背景 (31) 物联时代-传感器与通讯 (9) 物联时代-Arduino (7) 文章存档 2015年12月 (55) 2015年11月 (7) 2015年10月 (14) 2015年09月 (11) 2015年08月 (5) 2015年07月 (13) 2015年06月 (11) 2015年05月 (2) 2015年04月 (18) 2015年03月 (16) 2015年02月 (24) 2015年01月 (9) 2014年12月 (18) 2014年11月 (99) 2014年10月 (5) 2014年09月 (8) 2014年08月 (29) 2014年07月 (29) 2014年06月 (32) 2014年05月 (68) 2014年04月 (16) 2014年03月 (20) 2014年02月 (21) 2014年01月 (109) 2013年12月 (72) 2012年11月 (10)

Recno:: 71
URL:: http://blog.csdn.net/opengl_es/article/details/50351455

ParseText::
iOS夯实：内存管理 - 太阳火神的美丽人生 - 师夷长技以制夷 - 博客频道 - CSDN.NET 太阳火神的美丽人生 - 师夷长技以制夷 敏捷开发及移动和物联设备、绿色教育的研究：iOS、Android、Html5、Arduino、pcDuino 目录视图 摘要视图 订阅 学院APP首次下载，可得50C币！     欢迎来帮助开源“进步”     当讲师？爱学习？投票攒课吧     认识Atlassian Datacenter产品     深圳小伙伴的福利来啦 iOS夯实：内存管理 2015-12-18 14:12 73人阅读 评论 (0) 收藏 举报 分类： <=即时总结=> （710） 作者同类文章 X 平台-iOS （255） 作者同类文章 X iOS夯实：内存管理 最近的学习计划是将iOS的机制原理好好重新打磨学习一下,总结和加入自己的思考。 有不正确的地方，多多指正。 目录： 基本信息 旧时代的细节 新时代 基本信息 Objective-C 提供了两种内存管理方式。 MRR （manual retain-release） 手动内存管理 这是基于reference counting实现的,由NSObject与runtime environment共同工作实现。 ARC （Automatic Reference Counting）自动引用技术 ARC使用了基于MBR同样的reference counting机制，区别在于系统在编译的时候帮助我们插入了合适的memory management method。 Good Practices能有效的避免内存相关问题 基于内存，主要有两种错误 清空或覆盖了还在使用的内存 这种清空通常会导致应用崩溃，甚至用户数据遭到改写 没有清空已经不需要的内存会导致内存泄露 会导致系统性能下降，应用遭到系统终止 实际上，我们不应该只从reference counting的角度来管理内存，这样会让我们纠结于底层细节。我们应该站在object ownership and object graphs的角度来管理内存 可以用一幅这样的图来阐明： 旧时代的细节 一.基本内存管理准则 基本的内存管理准则：Cocoa为我们提供了这些准则 You own any object you create 我们通过名字前缀为“alloc”, “new”, “copy”, or “mutableCopy”的方法创建对象 You can take ownership of an object using retain 通过retain来获取对象的ownership,使用retain主要有两种场景 在accessor method 或 init method。来获取你想存储的对象的所有权 在某些场景里避免一个对象被移除，我们可以对它进行retain When you no longer need it, you must relinquish ownership of an object you own 当我们需要释放一个对象所有权时,我们通过对它发送release或autorelaese消息。 You must not relinquish ownership of an object you do not own 不要释放你没有拥有的对象所有权 关于dealloc: NSObject为我们提供了一个dealloc方法,当对象被销毁时，系统会自动调用它。这个方法的作用主要是清空对象自身内存与它所持有的资源。例如： @interface Person : NSObject @property ( retain ) NSString *firstName; @property ( retain ) NSString *lastName; @property ( assign , readonly ) NSString *fullName; @end @implementation Person - (void)dealloc [_firstName release]; [_lastName release]; [super dealloc]; } @end 需要强调的是：永远不要自己调用dealloc方法 在dealloc的最后需要调用super class的dealloc 二.实践中的内存管理准则 1. 使用存取方法来简化内存管理。 如果代码中都是一堆retain release，必然不是一个好的情况。在存取方法里面进行retain和release的操作能够简化内存管理。例如： - ( void )setCount:( NSNumber *)newCount { [newCount retain ]; [_count release ]; // Make the new assignment. _count = newCount; } 2. 使用存取方法来设置Property value 对比如下代码，第一种使用了存取方法来设置，第二种直接对实例变量操作。显然我们应该采用第一种，使用第二种情况，简单的情况还好，如果情况一旦复杂,就非常容易出错。并且直接对实例变量操作，不会引发KVO通知。 - ( void )reset { NSNumber *zero = [[ NSNumber alloc ] initWithInteger: 0 ]; [ self setCount: zero]; [zero release ]; } - ( void )reset { NSNumber *zero = [[ NSNumber alloc ] initWithInteger: 0 ]; [_count release ]; _count = zero; } 3. 不要在初始化方法和dealloc方法中使用Accessor Methods 苹果在《Advanced Memory Management Programming Guide》指出： Don’t Use Accessor Methods in Initializer Methods and deallocThe only places you shouldn’t use accessor methods to set an instance variable are in initializer methods and dealloc. To initialize a counter object with a number object representing zero, you might implement an init method as follows: - init { self = [super init]; if (self) { _count = [[NSNumber alloc] initWithInteger:0]; } return self; } 唯一不需要使用Accessor Methods的地方是initializer和dealloc. 在苹果官方文档中没有解释为什么。经过一番查阅后,最主要的原因是此时对象的状况不确定，尚未完全初始化完毕，而导致一些问题的发生。 例如这个类或者子类重写了setMethod,里面调用了其他一些数据或方法,而这些数据和方法需要一个已经完全初始化好的对象。而在init中,对象的状态是不确定的。 举个例子，一个子类重写了set方法，在里面进行了一些子类特有的操作，而此时如果父类在init直接使用Accessor Methods，就会导致问题的发送。 其它一些问题还有，像会触发KVO notification等。[^1] [^2] 总之，记住在开发中记住这个principle最重要。 在开发中,我发现还是有人因为疏忽或不知道而直接在init方法里面使用self.property = XXX来进行赋值,留下了一些隐患。Swift去除了直接和instance variable打交道的途径。统一使用property进行管理,并对 init 进行严格的规定,提升了安全性,解决了人为因素导致的错误。欢迎对Swift有兴趣的同学继续阅读。 从Objective-C到Swift [^1]: stackoverflow [^2]: objc-zen-book 4. 使用弱引用来避免引用环 我们都知道在ARC，弱引用通过声明property的attribute为weak来实现。 而在MRR中则是通过引用对象，但是不retain它来实现（A weak reference is a non-owning relationship where the source object does not retain the object to which it has a reference） 在Cocoa中，典型需要使用弱引用的有delegate，data source, notification observer 我们需要注意处理好弱引用对象，如果对已经被销毁的对象发送信息，则会导致crash.通常被弱引用的对象当它将被销毁时，负责通知其它object. 像notification center保存了observer的弱引用，因此当被弱引用observer准备结束生命周期时，observer需要通知notification center,unregister自己。 4. 不要让你正在使用的对象被移除 观察以下两种代码，第一种因为没有retain,对象可能会被移除，而第二种是正确的写法 heisenObject = [array objectAtIndex: n]; [array removeObjectAtIndex: n]; // heisenObject could now be invalid. heisenObject = [[array objectAtIndex: n] retain ]; [array removeObjectAtIndex: n]; // Use heisenObject... [heisenObject release ]; 5. Collections类拥有其收集的的对象的所有权 例如NSArray,dictionary等。他们负责其收集的对象的所有权,因此我们不需要retain存进去的对象。例如下面的allocedNumber就不需要retain了。 for (i = 0 ; i < 10 ; i++) { NSNumber *allocedNumber = [[ NSNumber alloc ] initWithInteger: i]; [array addObject: allocedNumber]; [allocedNumber release ]; } 6. 最后,以上这些ownership policy是基于retain count实现的 当你创建一个对象，它的retain count为1。 当你对一个对象发送retain信息，它的retain count +1 当你对一个对象发送release信息，他的retain count -1 当你对一个对象发送autorelease信息，在当前autorelease pool block结束时，retain count -1 当一个对象的retain count 降至0，它就被dealloced了。 三.使用Autorelease Pool block autorelease pool 为我们提供了一个机制，避免当我们解除一个对象所有权时,对象被立刻销毁（例如从一个方法里返回一个对象） 一个autorelease pool block对象是这样子的： @autoreleasepool { // Code that creates autoreleased objects. } 在block的最后，所有收到过autorelease消息的对象都会接收到release消息。 在ARC的新时代里面，autorelease pool block主要用于处理避免内存峰值，只是我们不需要再手动添加autorelease的代码了 例如以下这个例子（有点生编硬造，主要为了阐明一下） 如果我们没有添加autoreleasepool,我们最后可需要释放10000*10000个对象，而不是每次循环都分别释放掉10000个对象 - ( void )useALoadOfNumbers { for ( int j = 0 ; j < 10000 ; ++j) { @autoreleasepool { for ( int i = 0 ; i < 10000 ; ++i) { NSNumber *number = [ NSNumber numberWithInt: (i+j)]; NSLog ( @" number = %p " , number); } } } } 新时代 详情亲看： iOS夯实：ARC时代的内存管理 上一篇 iOS 开发中的争议（一） 下一篇 iOS夯实：ARC时代的内存管理 顶 0 踩 0 我的同类文章 <=即时总结=> （710） 平台-iOS （255） http://blog.csdn.net 猜你在找 查看评论 * 以上用户言论只代表其个人观点，不代表CSDN网站的观点或立场 个人资料 sleks 访问： 545659次 积分： 10165 等级： 积分：10165 排名： 第823名 原创： 307篇 转载： 284篇 译文： 130篇 评论： 113条 博客专栏 跟踪 iOS 新特性 文章：7篇 阅读：3544 从本质上满足应聘条件系列 文章：1篇 阅读：563 SSL/TLS 加密传输 文章：8篇 阅读：3999 Java NIO 教程 文章：18篇 阅读：9781 Three.js 文章：24篇 阅读：26188 《漫画线性代数》读书笔记 文章：7篇 阅读：8491 iOS UIKit 框架分类解析 文章：5篇 阅读：6680 iOS 基础框架分类解析 文章：10篇 阅读：10852 阅读排行 [iOS]日历和提醒编程指南（Calendar and Reminders Programming Guide） (5748) 解决 Chrome 访问https网站出现“您的连接不是私密的问题” (5738) iOS 各版本中的新特性（What's New in iOS）- 目录翻译完成 (5608) 什么叫别让孩子输在起跑线上？！ - 电子产品已成儿童“多动症”诱因 (4977) iOS 中 NSParameterAssert 是干啥的之官方解释翻译篇 (4113) 从另一个角度看癌症，现象、结果并不一定是病因！ (4079) iOS 开发库（iOS Developer Library） (3548) Threejs 加载 DAE 模型遇到关题汇总 (3364) 转换到 StoryBoard 的发布说明（Converting to Storyboards Release Notes） (2932) 搜搜（www.soso.com），I 老虎油！ (2847) 文章分类 <=即时总结=> (710) 平台-iOS (256) 平台-Anroid (77) 平台-Html5 (71) 语言-C_C++_OC (56) 语言-Java (122) 语言-Css (8) 语言-JavaScript (74) 敏捷开发-XP (4) 敏捷开发-Scrum (10) 敏捷开发-佛的减法 (118) 敏捷开发-心灵鸡汤 (0) 数据呈现-OpenGL ES (125) 数据呈现-View (1) 数据同步-Thread (0) 数据通道-SOCKET、SSL (1) 数据传输-HTTP (1) 数据承载-XML、JSON (5) 数据编码-Base64 (1) 数据加密-MD5、DES (4) 数据存储-File、Sql (9) 大数据 (1) 物联大时代背景 (31) 物联时代-传感器与通讯 (9) 物联时代-Arduino (7) 文章存档 2015年12月 (55) 2015年11月 (7) 2015年10月 (14) 2015年09月 (11) 2015年08月 (5) 2015年07月 (13) 2015年06月 (11) 2015年05月 (2) 2015年04月 (18) 2015年03月 (16) 2015年02月 (24) 2015年01月 (9) 2014年12月 (18) 2014年11月 (99) 2014年10月 (5) 2014年09月 (8) 2014年08月 (29) 2014年07月 (29) 2014年06月 (32) 2014年05月 (68) 2014年04月 (16) 2014年03月 (20) 2014年02月 (21) 2014年01月 (109) 2013年12月 (72) 2012年11月 (10)

Recno:: 72
URL:: http://blog.csdn.net/opengl_es/article/details/50351462

ParseText::
iOS夯实：ARC时代的内存管理 - 太阳火神的美丽人生 - 师夷长技以制夷 - 博客频道 - CSDN.NET 太阳火神的美丽人生 - 师夷长技以制夷 敏捷开发及移动和物联设备、绿色教育的研究：iOS、Android、Html5、Arduino、pcDuino 目录视图 摘要视图 订阅 学院APP首次下载，可得50C币！     欢迎来帮助开源“进步”     当讲师？爱学习？投票攒课吧     认识Atlassian Datacenter产品     深圳小伙伴的福利来啦 iOS夯实：ARC时代的内存管理 2015-12-18 14:13 77人阅读 评论 (0) 收藏 举报 分类： <=即时总结=> （710） 作者同类文章 X 平台-iOS （255） 作者同类文章 X iOS夯实：ARC时代的内存管理 什么是ARC Automatic Reference Counting (ARC) is a compiler feature that provides automatic memory management of Objective-C objects. Rather than having to think about retain and release operations [^1] [^1]: Transitioning to ARC Release Notes ARC提供是一个编译器的特性，帮助我们在编译的时候自动插入管理引用计数的代码。 最重要的是我们要认识到ARC的本质仍然是通过引用计数来管理内存。因此有时候如果我们操作不当,仍然会有内存泄露的危险。下面就总结一下ARC时代可能出现内存泄露的场景。 内存泄露类型 循环引用 基于引用计数的内存管理机制无法绕过的一个问题便是循环引用（retain cycle） (Python同样也采用了基于引用计数的内存管理,但是它采用了另外的机制来清除引用循环导致的内存泄露，而OC和Swift需要我们自己来处理这样的问题[^2]) 对象之间的循环引用：使用弱引用避免 block与对象之间的循环引用： 会导致Block与对象之间的循环引用的情况有： self.myBlock = ^{ self. someProperty = XXX; }; 对于这种Block与Self直接循环引用的情况,编译器会给出提示。 但是对于有多个对象参与的情况,编译器便无能为力了,因此涉及到block内使用到self的情况,我们需要非常谨慎。（推荐涉及到self的情况,如果自己不是非常清楚对象引用关系,统一使用解决方案处理） someObject.someBlock = ^{ self. someProperty = XXX; }; //还没有循环引用 self.someObjectWithBlock = someObject; // 导致循环引用,且编译器不会提醒 解决方案： __weak SomeObjectClass *weakSelf = self; SomeBlockType someBlock = ^{ SomeObjectClass *strongSelf = weakSelf; if (strongSelf == nil ) { // The original self doesn't exist anymore. // Ignore, notify or otherwise handle this case. } [strongSelf someMethod ]; }; 我们还有一种更简便的方法来进行处理,实际原理与上面是一样的,但简化后的指令更易用。 @weakify(self) [ self .context performBlock: ^{ // Analog to strongSelf in previous code snippet. @ strongify (self) // You can just reference self as you normally would. Hurray. NSError *error; [ self .context save: &error]; // Do something }]; 你可以在这里找到@weakify,@strongify工具： MyTools_iOS [^2]: How does Python deal with retain cycles? NSTimer 一般情况下在action/target模式里 target一般都是被weak引用,除了NSTimer。 + ( NSTimer *)timerWithTimeInterval:( NSTimeInterval )seconds target:( id )target selector:( SEL )aSelector userInfo:( id )userInfo repeats:( BOOL )repeats 在官方文档中： target The object to which to send the message specified by aSelector when the timer fires. The timer maintains a strong reference to this object until it (the timer) is invalidated. Timer Programming Topics : A timer maintains a strong reference to its target. This means that as long as a timer remains valid, its target will not be deallocated. As a corollary, this means that it does not make sense for a timer’s target to try to invalidate the timer in its dealloc method—the dealloc method will not be invoked as long as the timer is valid. 举一个例子，一个Timer的Target是ViewController. 这个时候，如果我们是在dealloc方法里让timer invalidate，就会造成内存泄露. 事实上，timer是永远不会被invalidate.因为此时VC的引用计数永远不会为零。因为Timer强引用了VC。而因为VC的引用计数不为零,dealloc永远也不会被执行，所以Timer永远持有了VC. 因此我们需要注意在什么地方invalidate计时器，我们可以在viewWillDisappear里面做这样的工作。 Swift's ARC 在Swift中,ARC的机制与Objective-C基本是一致的。 相对应的解决方案： 对象之间的循环引用：使用弱引用避免 protocol aProtocol: class {} class aClass{ weak var delegate:aProtocol? } 注意到这里, aProtocol 通过在继承列表中添加关键词 class 来限制协议只能被class类型所遵循。这也是为什么我们能够声明delegate为 weak 的原因, weak 仅适用于引用类型。而在Swift, enum 与 struct 这些值类型中也是可以遵循协议的。 闭包引起的循环引用： Swift提供了一个叫 closure capture list 的解决方案。 语法很简单,就是在闭包的前面用 [] 声明一个捕获列表。 let closure = { [ weak self ] in self ? . doSomething() //Remember, all weak variables are Optionals! } 我们用一个实际的例子来介绍一下,比如我们常用的NotificationCenter： class aClass{ var name: String init (name: String ){ self . name = name NSNotificationCenter . defaultCenter() . addObserverForName( " print " , object: self , queue: nil ) { [ weak self ] notification in print ( " hello \( self ? . name ) " )} } deinit { NSNotificationCenter . defaultCenter() . removeObserver( self ) } } Swift的新东西 swift为我们引入了一个新的关键词 unowned 。这个关键词同样用来管理内存和避免引用循环,和 weak 一样, unowned 不会导致引用计数+1。 那么几时用 weak ,几时用 unowned 呢？ 举上面Notification的例子来说： 如果Self在闭包被调用的时候有可能是Nil。则使用 weak 如果Self在闭包被调用的时候永远不会是Nil。则使用 unowned 那么使用 unowned 有什么坏处呢？ 如果我们没有确定好Self在闭包里调用的时候不会是Nil就使用了 unowned 。当闭包调用的时候,访问到声明为 unowned 的Self时。程序就会奔溃。这类似于访问了 悬挂指针 （进一步了解，请阅读 Crash in Cocoa ） 对于熟悉Objective-C的大家来说, unowned 在这里就类似于OC的 unsafe_unretained 。在对象被清除后,声明为 weak 的对象会置为nil,而声明为 unowned 的对象则不会。 那么既然 unowned 可能会导致崩溃,为什么我们不全部都用 weak 来声明呢？ 原因是使用 unowned 声明,我们能直接访问。而用 weak 声明的,我们需要unwarp后才能使用。并且直接访问在速度上也更快。（ 这位国外的猿说:Unowned is faster and allows for immutability and nonoptionality. If you don't need weak, don't use it. ） 其实说到底, unowned 的引入是因为Swift的 Optional 机制。 因此我们可以根据实际情况来选择使用 weak 还是 unowned 。个人建议,如果无法确定声明对象在闭包调用的时候永远不会是nil,还是使用 weak 来声明。安全更重要。 延伸阅读： 从Objective-C到Swift 参考链接： shall-we-always-use-unowned-self-inside-closure-in-swif what-is-the-difference-between-a-weak-reference-and-an-unowned-reference 上一篇 iOS夯实：内存管理 下一篇 合理利用“泛在式” - 手机促使人群分化 顶 0 踩 0 我的同类文章 <=即时总结=> （710） 平台-iOS （255） http://blog.csdn.net 猜你在找 查看评论 * 以上用户言论只代表其个人观点，不代表CSDN网站的观点或立场 个人资料 sleks 访问： 545665次 积分： 10165 等级： 积分：10165 排名： 第823名 原创： 307篇 转载： 284篇 译文： 130篇 评论： 113条 博客专栏 跟踪 iOS 新特性 文章：7篇 阅读：3544 从本质上满足应聘条件系列 文章：1篇 阅读：563 SSL/TLS 加密传输 文章：8篇 阅读：3999 Java NIO 教程 文章：18篇 阅读：9781 Three.js 文章：24篇 阅读：26188 《漫画线性代数》读书笔记 文章：7篇 阅读：8491 iOS UIKit 框架分类解析 文章：5篇 阅读：6680 iOS 基础框架分类解析 文章：10篇 阅读：10852 阅读排行 [iOS]日历和提醒编程指南（Calendar and Reminders Programming Guide） (5748) 解决 Chrome 访问https网站出现“您的连接不是私密的问题” (5738) iOS 各版本中的新特性（What's New in iOS）- 目录翻译完成 (5608) 什么叫别让孩子输在起跑线上？！ - 电子产品已成儿童“多动症”诱因 (4977) iOS 中 NSParameterAssert 是干啥的之官方解释翻译篇 (4113) 从另一个角度看癌症，现象、结果并不一定是病因！ (4079) iOS 开发库（iOS Developer Library） (3548) Threejs 加载 DAE 模型遇到关题汇总 (3364) 转换到 StoryBoard 的发布说明（Converting to Storyboards Release Notes） (2932) 搜搜（www.soso.com），I 老虎油！ (2847) 文章分类 <=即时总结=> (710) 平台-iOS (256) 平台-Anroid (77) 平台-Html5 (71) 语言-C_C++_OC (56) 语言-Java (122) 语言-Css (8) 语言-JavaScript (74) 敏捷开发-XP (4) 敏捷开发-Scrum (10) 敏捷开发-佛的减法 (118) 敏捷开发-心灵鸡汤 (0) 数据呈现-OpenGL ES (125) 数据呈现-View (1) 数据同步-Thread (0) 数据通道-SOCKET、SSL (1) 数据传输-HTTP (1) 数据承载-XML、JSON (5) 数据编码-Base64 (1) 数据加密-MD5、DES (4) 数据存储-File、Sql (9) 大数据 (1) 物联大时代背景 (31) 物联时代-传感器与通讯 (9) 物联时代-Arduino (7) 文章存档 2015年12月 (55) 2015年11月 (7) 2015年10月 (14) 2015年09月 (11) 2015年08月 (5) 2015年07月 (13) 2015年06月 (11) 2015年05月 (2) 2015年04月 (18) 2015年03月 (16) 2015年02月 (24) 2015年01月 (9) 2014年12月 (18) 2014年11月 (99) 2014年10月 (5) 2014年09月 (8) 2014年08月 (29) 2014年07月 (29) 2014年06月 (32) 2014年05月 (68) 2014年04月 (16) 2014年03月 (20) 2014年02月 (21) 2014年01月 (109) 2013年12月 (72) 2012年11月 (10)

Recno:: 73
URL:: http://blog.csdn.net/opengl_es/article/details/50371622

ParseText::
合理利用“泛在式” - 手机促使人群分化 - 太阳火神的美丽人生 - 师夷长技以制夷 - 博客频道 - CSDN.NET 太阳火神的美丽人生 - 师夷长技以制夷 敏捷开发及移动和物联设备、绿色教育的研究：iOS、Android、Html5、Arduino、pcDuino 目录视图 摘要视图 订阅 学院APP首次下载，可得50C币！     欢迎来帮助开源“进步”     当讲师？爱学习？投票攒课吧     认识Atlassian Datacenter产品     深圳小伙伴的福利来啦 合理利用“泛在式” - 手机促使人群分化 2015-12-21 14:00 426人阅读 评论 (0) 收藏 举报 分类： <=即时总结=> （710） 作者同类文章 X 敏捷开发-佛的减法 （117） 作者同类文章 X 版权声明：本文为博主原创文章，未经博主允许不得转载。转载联系 QQ 30952589，加好友请注明来意。 占位 上一篇 iOS夯实：ARC时代的内存管理 下一篇 iOS 块的简单理解 顶 2 踩 0 我的同类文章 <=即时总结=> （710） 敏捷开发-佛的减法 （117） http://blog.csdn.net 猜你在找 查看评论 * 以上用户言论只代表其个人观点，不代表CSDN网站的观点或立场 个人资料 sleks 访问： 545663次 积分： 10165 等级： 积分：10165 排名： 第823名 原创： 307篇 转载： 284篇 译文： 130篇 评论： 113条 博客专栏 跟踪 iOS 新特性 文章：7篇 阅读：3544 从本质上满足应聘条件系列 文章：1篇 阅读：563 SSL/TLS 加密传输 文章：8篇 阅读：3999 Java NIO 教程 文章：18篇 阅读：9781 Three.js 文章：24篇 阅读：26188 《漫画线性代数》读书笔记 文章：7篇 阅读：8491 iOS UIKit 框架分类解析 文章：5篇 阅读：6680 iOS 基础框架分类解析 文章：10篇 阅读：10852 阅读排行 [iOS]日历和提醒编程指南（Calendar and Reminders Programming Guide） (5748) 解决 Chrome 访问https网站出现“您的连接不是私密的问题” (5738) iOS 各版本中的新特性（What's New in iOS）- 目录翻译完成 (5608) 什么叫别让孩子输在起跑线上？！ - 电子产品已成儿童“多动症”诱因 (4977) iOS 中 NSParameterAssert 是干啥的之官方解释翻译篇 (4113) 从另一个角度看癌症，现象、结果并不一定是病因！ (4079) iOS 开发库（iOS Developer Library） (3548) Threejs 加载 DAE 模型遇到关题汇总 (3364) 转换到 StoryBoard 的发布说明（Converting to Storyboards Release Notes） (2932) 搜搜（www.soso.com），I 老虎油！ (2847) 文章分类 <=即时总结=> (710) 平台-iOS (256) 平台-Anroid (77) 平台-Html5 (71) 语言-C_C++_OC (56) 语言-Java (122) 语言-Css (8) 语言-JavaScript (74) 敏捷开发-XP (4) 敏捷开发-Scrum (10) 敏捷开发-佛的减法 (118) 敏捷开发-心灵鸡汤 (0) 数据呈现-OpenGL ES (125) 数据呈现-View (1) 数据同步-Thread (0) 数据通道-SOCKET、SSL (1) 数据传输-HTTP (1) 数据承载-XML、JSON (5) 数据编码-Base64 (1) 数据加密-MD5、DES (4) 数据存储-File、Sql (9) 大数据 (1) 物联大时代背景 (31) 物联时代-传感器与通讯 (9) 物联时代-Arduino (7) 文章存档 2015年12月 (55) 2015年11月 (7) 2015年10月 (14) 2015年09月 (11) 2015年08月 (5) 2015年07月 (13) 2015年06月 (11) 2015年05月 (2) 2015年04月 (18) 2015年03月 (16) 2015年02月 (24) 2015年01月 (9) 2014年12月 (18) 2014年11月 (99) 2014年10月 (5) 2014年09月 (8) 2014年08月 (29) 2014年07月 (29) 2014年06月 (32) 2014年05月 (68) 2014年04月 (16) 2014年03月 (20) 2014年02月 (21) 2014年01月 (109) 2013年12月 (72) 2012年11月 (10)

Recno:: 74
URL:: http://blog.csdn.net/opengl_es/article/details/50371646

ParseText::
iOS 块的简单理解 - 太阳火神的美丽人生 - 师夷长技以制夷 - 博客频道 - CSDN.NET 太阳火神的美丽人生 - 师夷长技以制夷 敏捷开发及移动和物联设备、绿色教育的研究：iOS、Android、Html5、Arduino、pcDuino 目录视图 摘要视图 订阅 学院APP首次下载，可得50C币！     欢迎来帮助开源“进步”     当讲师？爱学习？投票攒课吧     认识Atlassian Datacenter产品     深圳小伙伴的福利来啦 iOS 块的简单理解 2015-12-21 14:03 522人阅读 评论 (0) 收藏 举报 分类： <=即时总结=> （710） 作者同类文章 X 平台-iOS （255） 作者同类文章 X 版权声明：本文为博主原创文章，未经博主允许不得转载。转载联系 QQ 30952589，加好友请注明来意。 占位 自动转载器那小子，你转完了没？ 转完了，我开写了哈！ Block，就两个事儿，一个是引用，一个是实例，除了实现处，其它地方都是引用。 以此思路，再继续看看引用和实现的定义方式吧。 参考官方文档。 后补 上一篇 合理利用“泛在式” - 手机促使人群分化 下一篇 泱泱大中华，美丽我的家 - 俗晒网速，感受幸福 顶 4 踩 1 我的同类文章 <=即时总结=> （710） 平台-iOS （255） http://blog.csdn.net 猜你在找 查看评论 * 以上用户言论只代表其个人观点，不代表CSDN网站的观点或立场 个人资料 sleks 访问： 545665次 积分： 10165 等级： 积分：10165 排名： 第823名 原创： 307篇 转载： 284篇 译文： 130篇 评论： 113条 博客专栏 跟踪 iOS 新特性 文章：7篇 阅读：3544 从本质上满足应聘条件系列 文章：1篇 阅读：563 SSL/TLS 加密传输 文章：8篇 阅读：3999 Java NIO 教程 文章：18篇 阅读：9781 Three.js 文章：24篇 阅读：26188 《漫画线性代数》读书笔记 文章：7篇 阅读：8491 iOS UIKit 框架分类解析 文章：5篇 阅读：6680 iOS 基础框架分类解析 文章：10篇 阅读：10852 阅读排行 [iOS]日历和提醒编程指南（Calendar and Reminders Programming Guide） (5748) 解决 Chrome 访问https网站出现“您的连接不是私密的问题” (5738) iOS 各版本中的新特性（What's New in iOS）- 目录翻译完成 (5608) 什么叫别让孩子输在起跑线上？！ - 电子产品已成儿童“多动症”诱因 (4977) iOS 中 NSParameterAssert 是干啥的之官方解释翻译篇 (4113) 从另一个角度看癌症，现象、结果并不一定是病因！ (4079) iOS 开发库（iOS Developer Library） (3548) Threejs 加载 DAE 模型遇到关题汇总 (3364) 转换到 StoryBoard 的发布说明（Converting to Storyboards Release Notes） (2932) 搜搜（www.soso.com），I 老虎油！ (2847) 文章分类 <=即时总结=> (710) 平台-iOS (256) 平台-Anroid (77) 平台-Html5 (71) 语言-C_C++_OC (56) 语言-Java (122) 语言-Css (8) 语言-JavaScript (74) 敏捷开发-XP (4) 敏捷开发-Scrum (10) 敏捷开发-佛的减法 (118) 敏捷开发-心灵鸡汤 (0) 数据呈现-OpenGL ES (125) 数据呈现-View (1) 数据同步-Thread (0) 数据通道-SOCKET、SSL (1) 数据传输-HTTP (1) 数据承载-XML、JSON (5) 数据编码-Base64 (1) 数据加密-MD5、DES (4) 数据存储-File、Sql (9) 大数据 (1) 物联大时代背景 (31) 物联时代-传感器与通讯 (9) 物联时代-Arduino (7) 文章存档 2015年12月 (55) 2015年11月 (7) 2015年10月 (14) 2015年09月 (11) 2015年08月 (5) 2015年07月 (13) 2015年06月 (11) 2015年05月 (2) 2015年04月 (18) 2015年03月 (16) 2015年02月 (24) 2015年01月 (9) 2014年12月 (18) 2014年11月 (99) 2014年10月 (5) 2014年09月 (8) 2014年08月 (29) 2014年07月 (29) 2014年06月 (32) 2014年05月 (68) 2014年04月 (16) 2014年03月 (20) 2014年02月 (21) 2014年01月 (109) 2013年12月 (72) 2012年11月 (10)

Recno:: 75
URL:: http://blog.csdn.net/opengl_es/article/details/50389300

ParseText::
泱泱大中华，美丽我的家 - 俗晒网速，感受幸福 - 太阳火神的美丽人生 - 师夷长技以制夷 - 博客频道 - CSDN.NET 太阳火神的美丽人生 - 师夷长技以制夷 敏捷开发及移动和物联设备、绿色教育的研究：iOS、Android、Html5、Arduino、pcDuino 目录视图 摘要视图 订阅 学院APP首次下载，可得50C币！     欢迎来帮助开源“进步”     当讲师？爱学习？投票攒课吧     认识Atlassian Datacenter产品     深圳小伙伴的福利来啦 泱泱大中华，美丽我的家 - 俗晒网速，感受幸福 2015-12-23 20:02 541人阅读 评论 (3) 收藏 举报 分类： <=即时总结=> （710） 作者同类文章 X 版权声明：本文为博主原创文章，未经博主允许不得转载。转载联系 QQ 30952589，加好友请注明来意。 泱泱大中华，美丽我的家 - 俗晒网速，感受幸福 太阳火神的美丽人生 ( http://blog.csdn.net/opengl_es ) 本文遵循“ 署名-非商业用途-保持一致 ”创作公用协议 转载请保留此句： 太阳火神的美丽人生 -  本博客专注于  敏捷开发及移动和物联设备研究：iOS、Android、Html5、Arduino、pcDuino ， 否则，出自本博客的文章拒绝转载或再转载，谢谢合作。 还记得那一篇转载《 2015中国宽带目标完成：8M以上占56％ 》， 今天，2015 结束还有8天， 刚刚在上个月联通全面撤换光纤，由 4M 宽带提速到 12M 光纤，幸福生活从此开始了。 由于两年套餐到期，本月又去换套餐，发现继续办 12M 光纤近 140元的月费，还不如 20M 近 160元的套餐。 有人说我不识数，不，这里有个事儿忘透露，20M的免两部手机和固话两年的来电显示，所以差这20块钱就抹平了。 这回不会再说我傻了吧，俺小学没毕业，不会算帐儿，但俺机道去问啊！ 自黑真有趣。。。 好了，看看俺的速度吧 下载速度2.3M，那么按早些年宽带安装员的算法，乘上10，那就是23M，我去的了，我赚了3M耶,oh year! 泰山不是堆的，火车不是推的， 再回看前面地址中转载的内容，是不是没有吹呀， 这国家强，生活咋就这么幸福呢呀！ 注：本文俗晒享受幸福生活片断，拒绝评论，感谢 CWTV/CXTV/CTYV/WTCV， 哦了个去呀地，我这儿还没写完呢呀，你咋就下完了呐！ 。。。 我们地大中国呀， 好大的一个家， 经过那个多少那个风吹和雨打， 我们地大中国呀， 好大的一个家， 永远那个永远美丽又强大。 天天这心情，啥病都没了，不信，你也试试。 想想为了一颗蛋而欢呼的那个广告，愚意颇深，让我们一起作阿 Q 吧！ 注在最前面的一句话：歉俗勿看，谢谢。 上一篇 iOS 块的简单理解 下一篇 UI设计师必知：线框图、原型和视觉稿 顶 1 踩 0 我的同类文章 <=即时总结=> （710） http://blog.csdn.net 猜你在找 查看评论 * 以上用户言论只代表其个人观点，不代表CSDN网站的观点或立场 个人资料 sleks 访问： 545651次 积分： 10165 等级： 积分：10165 排名： 第823名 原创： 307篇 转载： 284篇 译文： 130篇 评论： 113条 博客专栏 跟踪 iOS 新特性 文章：7篇 阅读：3544 从本质上满足应聘条件系列 文章：1篇 阅读：563 SSL/TLS 加密传输 文章：8篇 阅读：3999 Java NIO 教程 文章：18篇 阅读：9781 Three.js 文章：24篇 阅读：26188 《漫画线性代数》读书笔记 文章：7篇 阅读：8491 iOS UIKit 框架分类解析 文章：5篇 阅读：6680 iOS 基础框架分类解析 文章：10篇 阅读：10852 阅读排行 [iOS]日历和提醒编程指南（Calendar and Reminders Programming Guide） (5748) 解决 Chrome 访问https网站出现“您的连接不是私密的问题” (5738) iOS 各版本中的新特性（What's New in iOS）- 目录翻译完成 (5608) 什么叫别让孩子输在起跑线上？！ - 电子产品已成儿童“多动症”诱因 (4977) iOS 中 NSParameterAssert 是干啥的之官方解释翻译篇 (4113) 从另一个角度看癌症，现象、结果并不一定是病因！ (4079) iOS 开发库（iOS Developer Library） (3548) Threejs 加载 DAE 模型遇到关题汇总 (3364) 转换到 StoryBoard 的发布说明（Converting to Storyboards Release Notes） (2932) 搜搜（www.soso.com），I 老虎油！ (2847) 文章分类 <=即时总结=> (710) 平台-iOS (256) 平台-Anroid (77) 平台-Html5 (71) 语言-C_C++_OC (56) 语言-Java (122)

Recno:: 76
URL:: http://blog.csdn.net/opengl_es/article/details/50390872

ParseText::
UI设计师必知：线框图、原型和视觉稿 - 太阳火神的美丽人生 - 师夷长技以制夷 - 博客频道 - CSDN.NET 太阳火神的美丽人生 - 师夷长技以制夷 敏捷开发及移动和物联设备、绿色教育的研究：iOS、Android、Html5、Arduino、pcDuino 目录视图 摘要视图 订阅 学院APP首次下载，可得50C币！     欢迎来帮助开源“进步”     当讲师？爱学习？投票攒课吧     认识Atlassian Datacenter产品     深圳小伙伴的福利来啦 UI设计师必知：线框图、原型和视觉稿 2015-12-24 00:53 52人阅读 评论 (0) 收藏 举报 分类： <=即时总结=> （710） 作者同类文章 X UI设计师必知：线框图、原型和视觉稿 经验 陌北默 2014-07-31 6467浏览 0评论 专为0基础小白量身打造的UI设计入门课程（ps，ai软件＋图标技巧），在线学习2个月包教会（公开课3位师傅），拜师费1500，随到随学，可插班。抢名额请加qq群：429369013咨询。 UI设计 大师们常常画漂亮的线框图，原型，视觉稿，超赞，超令人感叹。 但是你分得清这3个概念，它们的用途吗？是否也常常傻傻分不清呐，今天就彻底的了解下它们吧。   前言：本文为译稿  1 ，对三个常见概念进行了剖析。有删节，部分段落重组。 背景：两三年以前，我发现很多搞信息技术的朋友们（非设计师）交付设计时，用着上面列出的词汇。他们以为线框图 (Wireframe)、原型 (Prototype) 和视觉稿 (Mockup) 是一个东西：表达自己创意的线框手绘设计稿。 混淆概念便带来麻烦：他们分不清用户体验设计师的作品，常常感到困惑。「这按钮他妈的怎么点不了？」「我不知道这个地方可以按啊！」类似这样的问题在用户体验的项目中屡见不鲜。误把线框图当成原型，有点像建筑里分不清蓝图（指导如何建筑施工的方案）和演示厅。你完全可以试着在演示厅里小住一会（它的妙处就在于能直观传达房间之美），但你没法舒服地躺在蓝图上；蓝图不过是一张纸罢了。 在建筑学上，演示厅和蓝图服务于不同的交流对象： 蓝图，即施工方案，详细描述该如何建造建筑 演示厅，给未来的居民提供测试和体验的机会 演示厅和蓝图的共同之处是，它们都代表着最终的产品，即建筑（房屋）。线框图、原型和视觉稿亦是如此，这些文档都是最终产品的不同展现方式。 不管你信不信，我向用户体验设计团队授课的第一件事，就是告诉他们分清这三个概念。因为，这实在太重要了。 接下来，让我们详细讨论三者的区别，以后你就懂得在什么样的场合下用什么词汇了。 线框图 1、什么是线框图？ 线框图 (Wireframe) 是低保真的设计图，当明确表达： 内容大纲（什么东西） 信息结构（在哪） 用户的交互行为描述（怎么操作） 线框图不仅仅是无意义的线和框的集合；好吧，虽然看上去是的，囧。你可以把线框图理解为设计图的骨干与核心，它承载着最终产品所有重要的部分。 线框图可以帮你平衡保真度与速度。绘图时不用在意细枝末节，但必须表达出设计思想，不能漏掉任何重要的部分。就像给项目以及一起协作的团队成员（开发工程师、视觉设计师、文案作者和项目经理），开辟了一条辅助理解设计的通道。说得再明白点，你是在设计城市地图，地图上能展现出每一条街道，只不过绘制上做了简化。看地图能看出城市的框架，但无法一览城市的美感。 绘制线框图，重点是「快」。大多数时间请和团队成员沟通，多做思考。审美上的视觉效果则应当尽可能简化。黑白灰是经典用色，你也可以用蓝色代表超链接。如果你在准备线框图时花了大把时间（比如，选择图标、上传图片），请换个简单的方式（比如，使用占位符：一个画×的图片，再加上合适的描述文字）。我们习惯把线框图称为低保真设计图。 切记，好的线框图能像水晶一样，清晰明了地表达设计创意，在成员中无缝传达其思想。 2、何时使用线框图 线框图常常用来作项目说明。鉴于其静态设计，一次只能通过一张界面演示交互，因此，务必附上说明。（只要有必要，简短描述或附在复杂的技术文档里，都成） 也因为绘制起来快速、简单，它也经常用于非正式场合，比如团队内部交流。要是开发问起一个东西怎么做，回复时不妨附上一张迅速绘制的线框图。线框图难以充当用户测试的材料；倒也能收集些反馈，如果你更关心用户意见，而非测试方法。 虽然近些年遭人闲话，但线框图在整个设计过程中发挥着惊人的效果，在复杂项目的初始阶段必不可少。 原型 1、什么是原型 原型 (Prototype) ，常常和线框图混淆，是中等保真的设计图，代表最终产品，模拟交互设计。原型允许用户： 从界面上，体验内容与交互 像最终产品一样，测试主要交互 原型应该尽可能模拟最终产品，就算长得不是一模一样（绝对不能是灰色线框设计）。交互则应该精心模块化，尽量在体验上和最终产品保持一致。 原型背后的逻辑不要依赖交互形式。减少制作原型的成本，加快开发速度。 2、何时使用原型 原型常用于做潜在用户测试。在正式介入开发阶段前，以最接近最终产品的形式考量产品可用性。 如你所想，原型一般难以成为上好的文档；因为它得让「读者」费一些力气来理解界面。但从另一个角度来看，作为界面，原型的直观和易懂倒使它成为最高效的设计文档。 请注意，相对其它交流媒介，原型成本高、费时。我建议绘制原型后，能在接下来的开发阶段复用起来。（唔，你可能得亲自编写 HTML 和样式表代码）对于简单的项目来说，相当好用。（一旦考虑「复用」，必将增加绘制成本，偏离原型的初衷。并不建议复用。——译者注） 若设计得当，与用户测试相结合，原型是物超所值的。 视觉稿 1、什么是视觉稿 视觉稿 (Mockup) 是高保真的静态设计图。通常来说，视觉稿就是视觉设计的草稿或终稿。优秀的视觉稿： 表达信息框架，静态演示内容和功能 帮助团队成员以视觉的角度审阅项目 人们常年分不清什么是视觉稿，什么是线框图，和某些软件公司的名字不无关系。噗~ 2、何时使用视觉稿 如果你想从股东手里获得认可，视觉稿尤其管用；收集用户反馈也相当好使。 把它添到设计文档里去吧，绝对是画龙点睛之笔。 总结 原文地址： http://designmodo.com/wireframing-prototyping-mockuping/ 译文地址： http://cuikai-wh.com/blog/2460   上一篇 泱泱大中华，美丽我的家 - 俗晒网速，感受幸福 下一篇 [ISUX译]iOS 9人机界面指南(一)：UI设计基础 顶 0 踩 0 我的同类文章 <=即时总结=> （710） http://blog.csdn.net 猜你在找 查看评论 * 以上用户言论只代表其个人观点，不代表CSDN网站的观点或立场 个人资料 sleks 访问： 545645次 积分： 10165 等级： 积分：10165 排名： 第823名 原创： 307篇 转载： 284篇 译文： 130篇 评论： 113条 博客专栏 跟踪 iOS 新特性 文章：7篇 阅读：3544 从本质上满足应聘条件系列 文章：1篇 阅读：563 SSL/TLS 加密传输 文章：8篇 阅读：3999 Java NIO 教程 文章：18篇 阅读：9781 Three.js 文章：24篇 阅读：26188 《漫画线性代数》读书笔记 文章：7篇 阅读：8491 iOS UIKit 框架分类解析 文章：5篇 阅读：6680 iOS 基础框架分类解析 文章：10篇 阅读：10852 阅读排行 [iOS]日历和提醒编程指南（Calendar and Reminders Programming Guide） (5748) 解决 Chrome 访问https网站出现“您的连接不是私密的问题” (5738) iOS 各版本中的新特性（What's New in iOS）- 目录翻译完成 (5608) 什么叫别让孩子输在起跑线上？！ - 电子产品已成儿童“多动症”诱因 (4977) iOS 中 NSParameterAssert 是干啥的之官方解释翻译篇 (4113) 从另一个角度看癌症，现象、结果并不一定是病因！ (4079) iOS 开发库（iOS Developer Library） (3548) Threejs 加载 DAE 模型遇到关题汇总 (3364) 转换到 StoryBoard 的发布说明（Converting to Storyboards Release Notes） (2932) 搜搜（www.soso.com），I 老虎油！ (2847) 文章分类 <=即时总结=> (710) 平台-iOS (256) 平台-Anroid (77) 平台-Html5 (71) 语言-C_C++_OC (56) 语言-Java (122) 语言-Css (8) 语言-JavaScript (74) 敏捷开发-XP (4) 敏捷开发-Scrum (10) 敏捷开发-佛的减法 (118) 敏捷开发-心灵鸡汤 (0) 数据呈现-OpenGL ES (125) 数据呈现-View (1) 数据同步-Thread (0) 数据通道-SOCKET、SSL (1) 数据传输-HTTP (1) 数据承载-XML、JSON (5) 数据编码-Base64 (1) 数据加密-MD5、DES (4) 数据存储-File、Sql (9) 大数据 (1) 物联大时代背景 (31) 物联时代-传感器与通讯 (9) 物联时代-Arduino (7) 文章存档 2015年12月 (55) 2015年11月 (7) 2015年10月 (14) 2015年09月 (11) 2015年08月 (5) 2015年07月 (13) 2015年06月 (11) 2015年05月 (2) 2015年04月 (18) 2015年03月 (16) 2015年02月 (24) 2015年01月 (9) 2014年12月 (18) 2014年11月 (99) 2014年10月 (5) 2014年09月 (8) 2014年08月 (29) 2014年07月 (29) 2014年06月 (32) 2014年05月 (68) 2014年04月 (16) 2014年03月 (20) 2014年02月 (21) 2014年01月 (109) 2013年12月 (72) 2012年11月 (10)

Recno:: 77
URL:: http://blog.csdn.net/opengl_es/article/details/50391003

ParseText::
[ISUX译]iOS 9人机界面指南(二)：设计策略 - 太阳火神的美丽人生 - 师夷长技以制夷 - 博客频道 - CSDN.NET 太阳火神的美丽人生 - 师夷长技以制夷 敏捷开发及移动和物联设备、绿色教育的研究：iOS、Android、Html5、Arduino、pcDuino 目录视图 摘要视图 订阅 学院APP首次下载，可得50C币！     欢迎来帮助开源“进步”     当讲师？爱学习？投票攒课吧     认识Atlassian Datacenter产品     深圳小伙伴的福利来啦 [ISUX译]iOS 9人机界面指南(二)：设计策略 2015-12-24 01:09 59人阅读 评论 (0) 收藏 举报 分类： <=即时总结=> （710） 作者同类文章 X [ISUX译]iOS 9人机界面指南(二)：设计策略 雪糕 2015.11.09 文章索引 2.1 设计原则(Design Principles) 2.1.1 美学完整性(Aesthetic Integrity) 2.1.2 一致性(Consistency) 2.1.3 直接操作(Direct Manipulation) 2.1.4 反馈(Feedback) 2.1.5 隐喻(Metaphors) 2.1.6 用户控制(User Control) 2.2 从概念到产品(From Concept to Product) 2.2.1 定义应用(Define Your App) 2.2.2 为任务量身订制界面(Tailor Customization to the Task) 2.2.3 原型 & 迭代(Prototype & Iterate) 2.3 案例学习：从桌面到iOS(Case Study: From Desktop to iOS) 2.3.1 iPad版Keynote应用(Keynote on iPad) 2.3.2 iPhone版邮件应用(Mail on iPhone) 2.3.3 iOS系统内的网页内容(Web Content in iOS) 译者注：本文译自苹果官方人机界面指南 iOS Human Interface Guidelines (2015年10 月21日)，由腾讯ISUX设计师翻译整理，非发文者一人之作。译文首发于ISUX博客，如在阅读过程中发现错误与疏漏之处，欢迎不吝指出。后续章节会陆续更新，敬请期待。 2.1 设计原则(Design Principles) 2.1.1 美学完整性(Aesthetic Integrity) 美学完整性不评判应用的视觉设计，也不是用来描述应用的风格特征。美学完整性是指在一款应用的视觉表现和交互行为与功能结合后所传达出的整体一致性。 人们关心应用是否提供了应有的功能，但是也会潜移默化甚至是很直接地被应用的视觉表现和交互行为所影响。举个例子，一款协助用户完成任务的应用，可以通过使用精美而又无干扰的装饰性元素、标准的控件和可预期的交互行为很好地帮助用户聚焦在任务本身上。这样，应用就能传达出清晰而一致的信息，使得人们信任它。但是，如果应用使用干扰的、琐碎的或随意的UI来呈现任务，那么人们可能会对其可靠性和可信赖度产生怀疑。 另一方面，在沉浸式应用中—例如游戏—用户期待惊艳的视觉表现，为用户带来乐趣和刺激，并鼓励用户进行探索。用户不是要在游戏中完成严肃的或程序式的任务，他们更期待游戏的视觉表现和交互行为与当前的目的进行整合。 2.1.2 一致性(Consistency) 一致性可以让人们在一款应用中的不同部分甚至不同应用间复用使用同样的认知和技能。一款具备一致性的应用不应盲从地复制其他应用，也不应在风格上一成不变。相反，它们专注于让人们觉得舒适的标准和范例，并提供应用内部统一的体验。 在判断一款iOS应用是否要遵守一致性原则时，请思考如下问题： 应用是否和iOS标准一致？是否正确地使用了系统提供的控件、视图和图标？是否按照用户所预期的方式整合了设备的特性？ 应用是否内部统一？文案是否使用了一致的措辞和风格？同样的图标是否表意相同？在不同的位置执行同样的操作时，人们是否能能预期会发生什么？应用中自定义的UI元素是否在外观和行为上保持一致？ 应用是否和先前的版本保持一致？条款和意义是否保持不变？基本概念和主要功能是否发生了变化？ 2.1.3 直接操作(Direct Manipulation) 当人们不再使用一堆控件进行操作，而是直接在屏幕上操作对象时，他们能更集中精力完成任务，也更容易理解这些行为所产生的结果。 使用多点触摸界面，人们可以通过捏合操作来直接放大和缩小图片或文本内容。在游戏中，玩家可以直接与屏幕上的对象进行交互。例如，游戏中可能会显示密码锁，用户可以通过转动它来打开。 在一款iOS应用中，如下情况中人们应该能够进行直接操作： 旋转或者移动设备来影响屏幕上的对象 使用手势来操作屏幕上的对象 显示即时可视的操作反馈 2.1.4 反馈(Feedback) 反馈可以明示人们的行为，呈现操作结果，并更新于任务进程之中。   iOS内置的应用对用户的每个行为都提供了可感知的反馈。当人们点击列表项和控件时，它们会被临时高亮，并会在操作过程中持续一段时间，以此展示控件被执行的过程。 精细的动画会给人们带来有意义的反馈，帮助阐明行为的结果。例如，列表中新增一项时的动画可以从视觉上帮助人们发现列表的变化。 音效同样可以为人们提供有效的反馈，但不应成为唯一的反馈方式，因为人们不一定能听到。 2.1.5 隐喻(Metaphors) 当应用中的虚拟对象和交互行为与用户已经熟悉的体验相似时—无论这些体验是来源于真实或数字生活—用户就可以快速地掌握如何来使用这个应用。 当应用使用隐喻来传达某种用法或体验时，最好不要让隐喻突破所依赖的对象或交互行为本身的限制。 (译者注：此处可理解为对于隐喻的使用应量力而为，不要过于牵强。) 由于人们实际上是和屏幕进行物理上的交互，所以iOS应用有很大的余地来使用隐喻。iOS中的隐喻包括： 移动分层视图来显示被遮挡的内容 拖曳、轻扫和滑动游戏中的对象 点击开关，滑动滑块，转动选择器 轻扫来翻阅书本或杂志 2.1.6 用户控制(User Control) 是人—而不是应用—发起和控制行为。应用可以对用户进行操作建议，对有危害的后果予以警示，但是不应替用户来做决策。好的应用会在用户需要时给予帮助和避免不必要的结果之间作出平衡。 当对应用的交互行为和控件都较为熟悉和可预期时，用户会觉得应用更易上手。那些简单直白的交互行为更容易被用户所理解和记住。 人们会希望在一个操作被执行之前有足够的机会来取消，也希望在执行一个不可逆的操作之前可以有机会来进行确认。最后，人们还会希望能够停止正在执行中的操作。   2.2 从概念到产品(From Concept to Product) 2.2.1 定义应用(Define Your App) 应用的定义是对应用主要功能和目标用户的简明具体的描述。 尽可能早的创建应用的定义可以帮助你将一个想法和功能清单转换为用户想要的条理清晰的产品。在开发过程中，可以使用定义来决定某些功能和行为是否合理。使用以下几个步骤来创建一个可靠的应用定义。 1.列出所有你认为用户可能喜欢的功能 可以直接进行头脑风暴。此时，你需要列出所有与产品核心想法有关的任务。不用担心清单太长，因为接下来会进行删减。 假设你一开始的想法是开发一个帮助人们购买食品杂货的应用。你可以思考在进行这项活动时，会涉及到那些相关的任务，这些就是用户可能感兴趣的潜在功能。例如： 创建清单 查找食谱 比较价格 定位商店 给食谱做注释 查找并使用的优惠劵 查看烹饪演示 探索不同的烹调方法 寻找某些食材的替代物 2.确定目标用户 现在你需要清楚的将你的应用用户与其他iOS用户区分开来。确定在此情此景下，什么是对你的用户最重要的。在食品杂货例子中，你可能需要问问你的用户： 通常是在家里做饭还是更喜欢现成的食物 是忠实的优惠券用户还是认为优惠券没多大价值 喜欢寻找特别的食材还是喜欢基本食材 严格的按照食谱做菜还是只把食谱当做灵感来源 喜欢少量多次购买还是一次性购买大量食物 希望能保留多个不同目的的购物清单还是只希望记录回家路上需要购买的几个东西 坚持使用固定的品牌还是会使用方便的替代品 习惯于购买固定的一些物品还是会按照食谱来购买 思考过这些问题之后，假设你可以提取出目标用户的三个特征：喜欢按照食谱进行尝试，时常很匆忙，通常情况下比较节俭。 3.根据目标用户过滤功能清单 如果在确定了一些用户特征后，你最终得到几个主要功能，恭喜你在做正确的事情：好的iOS应用应该是高度聚焦在能帮用户完成的任务上的。 例如，即使第一步想出的那些可能需要的功能都是有用的，也不一定是第二步定义的目标用户需要的。 当你在目标用户的使用情境下检查功能清单时，就可以判断你的应用应该聚焦在三个主要功能上：创建清单，获得并使用优惠劵，获得食谱。 此时你就可以给出应用定义了，总结该应用为谁做和做什么。食品杂货购买应用的定义可能如下： “为热爱烹饪且节俭的用户订制的创建购物清单工具。” 4.不止于此 应用定义应该贯穿于整个开发过程，使用应用定义确定功能，控件，措辞的合理性。例如： 当你想要新增一个功能时 ，问问自己这对应用的主要目的和目标用户是否非常重要。如果不是，可以置之不理。例如，你已经确定了你的用户对大胆新颖的烹饪方法感兴趣，那么着重展示盒装蛋糕和现成的食物就不太合适。 当你考虑用户界面的外观和操作时 ，问问你自己你的用户更喜欢简单的、流线型的风格，还是有明显主题的风格。以用户目标为指导，理解用户期望通过你的应用完成什么，例如快速找到答案，找到深入而全面的内容或者娱乐。例如，尽管你的食品杂货清单应用需要易于理解和快速上手，但你的用户还是可能倾向于一个有关食物的主题界面。 当你考虑应该使用怎样的措辞时， 考虑用户在这个领域的专业程度。例如，尽管你的用户可能不是由专业的大厨组成，但你也可以肯定他们希望看到有关食材和技术专用的措辞。 2.2.2 为任务量身订制界面(Tailor Customization to the Task) 最好的iOS应用根据清晰的目标和易用性来平衡用户界面的设计。为了达到这种平衡，要确保在设计阶段前期就考虑定制化。因为考虑品牌性，原创性和适销性通常会影响定制化的决策，所以专注于定制化怎样影响用户体验是难的。 开始考虑应用中的任务：用户执行这些任务的频率如何，在什么样的环境下进行？ 举个例子，想象一个计算器应用使用的是精心设计的，充满艺术感的风格，并且使用了创新的层级去显示大家熟悉的计算元素。这像艺术品一样的细节渲染和创新层级并不会影响用户去理解怎样点击按钮和查看计算结果。但是对于只是简单的需要完成工作的用户，这种新奇的体验和美丽的界面很快就会失去效用，并且可能成为一种妨碍。 相反，随身录音室应用(GarageBand)可以不展示好看的、逼真的乐器来帮助用户制作音乐，但这样会使应用缺少身临其境的愉悦感。在随身录音室里，界面不只是向用户展示了如何使用，同样使得制作音乐的主任务更容易完成。 当你思考定制化如何增强或减弱用户完成任务的注意力时，记住以下几点： 定制总要有缘由。 理想情况下，定制化的用户界面能促进用户完成任务并增强他们的体验。你最好尽可能的用任务驱动定制化决策。 尽量避免增加用户的认知负担。 用户对标准界面元素的外观和行为都已经很熟悉了，所以他们不用停下来思考如何使用它们。当用户面对外观和行为与标准不同的元素时，他们就失去了经验的优势。除非你的独一无二的元素能够使任务更容易完成，否则用户很可能不喜欢被强制学习一些在其他应用都不通用的步骤。 保持内部的一致性。 你的应用中自定义元素越多，保持这些元素外观和行为的一致性就越重要。如果用户花费时间去学习了你创建的那些不熟悉的控件，那么他们会希望新学到的这些操作能够在整个应用中通用。 总是以内容为重点。 因为标准元素很熟悉，所以它们不会分散用户在内容上的注意力。当你自定义用户界面时，注意确保界面元素不会抢走用户对内容的注意力。例如，如果你的应用允许用户观看视频，你可能选择设计一个自定义的重播控件。但是不管你用的是自定义还是标准的重播控件，都没有它是否在用户开始观看后隐藏点击屏幕后出现来的重要。 在对标准控件进行重设计时再三思考。 如果你不只是想自定义标准控件，而是想重设计，确保你的重设计能提供尽可能多的信息。例如，你设计了一个开关控件，它没有可以指明相反状态存在的信息，那么用户很可能意识不到这是个有两个状态的控件。 一定要彻底测试自定义的界面元素。 在测试过程中，近距离的观察用户是否能预测你的元素如何使用以及是否能容易的与它们交互。例如，如果你创建的控件的可点击区域小于44 x 44像素，用户点击时就会有困难。或者如果你创建了一个视图对点击和滑动的反馈不一样，确保这个视图提供的功能值得用户去额外关注交互的不同。 2.2.3 原型 & 迭代(Prototype & Iterate) 在你投入工程资源实现设计之前，最好先创建原型来进行用户测试。即使只有几个同事来帮你测试原型，你也会收获一些关于应用功能和用户体验的新鲜观点。 在设计的早期阶段，你可以使用纸质的原型或者线框图去呈现主要的视图和控件，并且标明每个页面之间的跳转关系。你可以从线框图测试中获得一些有用的反馈，但是线框图的稀疏性有可能会误导用户。因为用户很难想象当线框被实际内容填满时体验会有什么样的变化。 如果你有一个可以在设备上运行的原型，那你可以得到更多有用的反馈。当用户能在设备上与你的原型进行交互时，他们能更容易的发现应用中哪里功能不满足预期，哪里体验过于复杂。 创建可靠原型的最简单的方法是使用基于故事版的Xcode模板创建一个基础应用，然后使用一些类似于占位符的内容来进行填充。(故事版可以涵盖应用中的所有界面，并且包括界面之间的跳转关系。)接着，将这个原型导入到设备中，这样被测者就可以有一个尽可能真实的体验了。 你不需要在原型中提供大量的实际内容或者使每一个控件都可用，但是你确实需要营造足够的情境来保证真实的体验。并且需要在典型用户体验和非典型的边缘情况之间做好平衡。例如，如果你的应用需要处理很长的列表项，你的原型就不能只显示一两个条目。而且在用户测试交互中，只要被测者能够点击屏幕上的一个区域进入到下一个逻辑页面或者完成主任务，那他们就可能提供更有建设性的反馈。 当你使用Xcode应用模板来创建原型时，你可以免费使用很多功能，并且它可以相对容易的进行设计中的响应反馈调节。在你确定设计方案并投入资源进行实现之前，应该对原型进行多次迭代测试。想要开始学习Xcode，请参考 Xcode Overview .   2.3 案例学习：从桌面到iOS(Case Study: From Desktop to iOS) 2.3.1 iPad版Keynote应用(Keynote on iPad) 桌面版的Keynote 应用是一个十分强大而又灵活的应用，可以创建非常优秀的幻灯片。人们喜爱Keynote将简单易用与细粒度的操作结合进而控制无数精确细节的方式，如动画和文本属性等。 iPad版的Keynote提取了桌面版Keynote的核心要素，并通过创造以下的用户体验使它在iPad上更舒适： 专注于用户输入的内容 通过削减功能降低系统的复杂度 提供有用而又令人愉悦的快捷操作 延续桌面版本的体验 利用动人的动画提供良好的反馈与交流 Keynote用户能很快理解如何使用iPad版，是因为它使用了iPad原生的范例，符合了用户对功能上的预期。新用户可以用简单、自然的方式直接操控内容，所以可以很容易学会如何使用iPad版的Keynote. Keynote从桌面版向iPad版的转变是基于从细节到整体的大量修改和重新设计的。以下是一些明显的修改： 流线型的工具栏。 工具栏中只有少数的元素，但是它们是用户在创建内容时所需的所有功能和工具的统一入口。 简化并优先响应用户焦点的检查器。 对于用户所选的需要修改的对象，iPad版的Keynote能自动控制其工具和属性。( 译者注：特别是根据当前的操作对象而有限选择某些工具。) 通常，人们可以在第一检查器视图中完成他们需要的所有修改操作。如果他们需要修改那些不常用的属性，他们可以下拉另一个检查器视图来进行。 丰富的预设样式集。 人们可以利用预设的样式很简单地改变对象(如表格或图表)的外观或者感觉。除了颜色之外，每个集中，例如表格的标题和轴区分标识等的预设属性都被设计得与整体的主题和谐一致。 直接操作内容，丰富有意义的动画。 在iPad版的Keynote中，用户可以拖动滑块到一个新的位置，可以扭动旋转一个对象，也可以轻击图片来选中它。iPad版Keynote的响应动画进一步加强了这种可直接操作的印象。例如，用户在移动某个滑块时它通常会暂停，而当它被放置在一个新的位置时，环绕在周围的滑块将会向外扩散给它留出空间。 2.3.2 iPhone版邮件应用(Mail on iPhone) 邮件应用是OS X中一款好用而又广受好评的常见应用。它也是一个很强大的程序，可以允许用户撰写、接收、分类和存储邮件，追踪行动和事件，也可以编写备忘录和邀请等。桌面版的邮件应用通过一系列的窗口提供了这些强大的功能。 iPhone版的邮件专注于桌面版邮件的核心功能，帮助人们接收、撰写、发送和组织他们的信息。为了塑造移动iPhone版的邮件应用，将这些功能浓缩在为其量身定制的界面之中，做了如下的工作： 将人们的内容前置和居中的合理化呈现 专为处理不同任务而设计的不同视图 易于浏览并符合认知的信息结构 适时提供强大的编辑和组织性工具 用微妙且动人的动画来传达动作和提供反馈 必须明白的是，相对于桌面版的邮件应用来说，iPhone版的邮件应用不是( 注：或者说并不需要是) 一个更好的应用，而是为移动端用户重新设计的邮件应用。iPhone版的邮件应用专注于桌面版的功能子集并将它们呈现在一个吸引人的精简界面之中，据此为移动端的用户提供了核心的邮件体验。 为了使邮件应用的体验能适应移动场景，iPhone版的邮件应用在几个关键的方面革新了用户界面。 直接、高度专注的页面。 每个页面显示了邮件应用体验的一个方面：账户列表、邮箱列表、消息列表、消息查看和编辑视图。用户可以在一个屏幕内滑动查看完整的内容。 简单、可预期的导航。 通过每屏的一次点击，用户可以逐层展开综合内容(账户列表)进入具体页面(一封消息)。每个页面会显示一个标题用以指示用户所在的位置，以及一个返回按钮用以更容易地回溯到他们之前的步骤。 需要时即可获取的、简单的点击性控件。 基本上在任何场景之下，编写邮件和查阅新邮件都是人们首要希望进行的操作，因此iPhone版的邮件应用保证了这两个功能在多个页面中都可以便利地进行。当用户查看一封消息时，就会显示诸如回复、移动和删除等对消息的操作。 针对不同任务的不同类型的反馈。 当人们删除一封消息时，它会动态地进入垃圾桶图标中。当人们发送一封消息时，可以看到它的发送过程；而当发送结束时，人们可以听到一个特别的声音提示。通过消息列表页面工具栏的副标题，用户通过简单一瞥就可以查看邮箱上次更新的时间。 2.3.3 iOS系统内的网页内容(Web Content in iOS) iOS版的Safari应用在iOS设备上提供了出众的移动网页浏览体验。人们喜欢阅读清晰的文字和图片，也希望能通过旋转设备或者捏合和点击屏幕来调整视图。 基于标准建立的网站可以在iOS设备上显示得很好。特别是那些能侦测设备并不需要插件的网站可以同时在iPhone和iPad上都表现得很好，两者之间不会需要太多的修改，即使有也很小。 除此之外，成功的网站应具备以下的特性： 如果页面宽度需要匹配设备宽度，可以设置合适的视窗(viewport)来适应设备 避免CSS中固定的定位，以便当用户缩放或拖动页面时内容无法被移出屏幕 拥有一套基于触控操作的用户界面，而不是依赖基于传统点击操作的交互 有时候，额外的一些修改可以(使页面)更合理。例如，在iOS系统中，很多网页应用会设置合适的视窗(viewport)宽度并通常隐藏Safari的UI。如欲了解如何进行这些修改，参见 Safari Web Content Guide 章节中的 Configuring the Viewport 和 Configuring Web Applications . 网站也可以通过其他的方法适配桌面网页到iOS端的Safari浏览器中： 使键盘适应iOS端的Safari.  当键盘和格式辅助信息出现时，iPhone上的Safari应用会将你的网页显示在URL地址下方和键盘与格式辅助信息上方。 使弹出式菜单适应iOS端的Safari. 在桌面版的Safari应用中，弹出式菜单会包含很多选项，就如在其他OS X应用中一样。在必要的情况下，菜单展开后可以超出应用窗口的边界以显示其中的所有选项。在iOS版的Safari应用中，弹出式菜单由原生的元素所呈现，这样能提供更好的用户体验。例如，在iPhone上，弹出式菜单会出现在选择器(picker)当中，选择器里会一个用户可选择的选项列表。(欲了解更多选择器控件的内容，可以参见 Picker .) 本章英文原文访问地址： iOS Human Interface Guidelines 本章中文翻译PDF下载： 点此下载 感谢你的阅读，本文由 腾讯ISUX 版权所有，转载时请注明出处，违者必究，谢谢你的合作。 注明出处格式：腾讯ISUX ( http://isux.tencent.com/ios9-guideline-ch2.html ) 上一篇 [ISUX译]iOS 9人机界面指南(一)：UI设计基础 下一篇 [ISUX译]iOS 9人机界面指南(三)：iOS 技术 顶 0 踩 0 我的同类文章 <=即时总结=> （710） http://blog.csdn.net 猜你在找 查看评论 * 以上用户言论只代表其个人观点，不代表CSDN网站的观点或立场 个人资料 sleks 访问： 545676次 积分： 10165 等级： 积分：10165 排名： 第823名 原创： 307篇 转载： 284篇 译文： 130篇 评论： 113条 博客专栏 跟踪 iOS 新特性 文章：7篇 阅读：3544 从本质上满足应聘条件系列 文章：1篇 阅读：563 SSL/TLS 加密传输 文章：8篇 阅读：3999 Java NIO 教程 文章：18篇 阅读：9781 Three.js 文章：24篇 阅读：26188 《漫画线性代数》读书笔记 文章：7篇 阅读：8491 iOS UIKit 框架分类解析 文章：5篇 阅读：6680 iOS 基础框架分类解析 文章：10篇 阅读：10852 阅读排行 [iOS]日历和提醒编程指南（Calendar and Reminders Programming Guide） (5748) 解决 Chrome 访问https网站出现“您的连接不是私密的问题” (5738) iOS 各版本中的新特性（What's New in iOS）- 目录翻译完成 (5608) 什么叫别让孩子输在起跑线上？！ - 电子产品已成儿童“多动症”诱因 (4977) iOS 中 NSParameterAssert 是干啥的之官方解释翻译篇 (4113) 从另一个角度看癌症，现象、结果并不一定是病因！ (4079) iOS 开发库（iOS Developer Library） (3548) Threejs 加载 DAE 模型遇到关题汇总 (3364) 转换到 StoryBoard 的发布说明（Converting to Storyboards Release Notes） (2932) 搜搜（www.soso.com），I 老虎油！ (2847) 文章分类 <=即时总结=> (710) 平台-iOS (256) 平台-Anroid (77) 平台-Html5 (71) 语言-C_C++_OC<

Recno:: 78
URL:: http://blog.csdn.net/u010850027/article/details/50099385

ParseText::
如何使用excel画甘特图 - 丁国华 廊坊师范学院信息技术提高班 第十期 - 博客频道 - CSDN.NET 丁国华 廊坊师范学院信息技术提高班 第十期 傻丫头和高科技产物小心翼翼的初恋 目录视图 摘要视图 订阅 学院APP首次下载，可得50C币！     欢迎来帮助开源“进步”     当讲师？爱学习？投票攒课吧     认识Atlassian Datacenter产品     深圳小伙伴的福利来啦 如何使用excel画甘特图 2015-12-01 00:01 936人阅读 评论 (10) 收藏 举报 分类： --------【项目实战】 （41） 作者同类文章 X ● 成长之路 （80） 作者同类文章 X 版权声明：本文为博主原创文章，未经博主允许不得转载。        甘特图小伙伴们都非常的熟悉，首先小编简单的向各位小伙伴介绍一下什么是甘特图，甘特图内在思想简单，即以图示的方式通过活动列表和时间刻度形象地表示出任何特定项目的活动顺序与持续时间。基本是一条线条图，横轴表示时间，纵轴表示活动（项目），线条表示在整个期间上计划和实际的活动完成情况。它直观地表明任务计划在什么时候进行，及实际进展与计划要求的对比。管理者由此可便利地弄清一项任务（项目）还剩下哪些工作要做，并可评估工作进度。         还记得在软考的时候，甘特图经常和PERT图放在一起，考察我们，既然提到了PERT，小编也简单的介绍一下什么是PERT，PERT也称“计划评审技术”，它采用网络图来描述一个项目的任务网络。不仅可以表达子任务的计划安排，还可以在任务计划执行过程中估计任务完成的情况，分析某些子任务完成情况对全局的影响，找出影响全局的区域和关键子任务。以便及时采取措施，确保整个项目的完成。小编实习回来了，紧接着，接受了一个项目，并光荣的任命为组长，小编想说的是，自己还没有被带过，就带别人了，肯定把其她小伙伴带到坑里了，不过没关系，坑越多越好，这样小编才会成长的更加美丽，言归正传，现阶段，作为组长，应该对整个项目的周期有一个宏观的把控，各个阶段应该需要做些什么，这些都是很重要滴，今天这篇博客，小编就简单的想各位小伙伴介绍一下，如何利用excel画甘特图，还请小伙伴多多指教。         第一步，打开小伙伴电脑上的excel，准备好已经在onenote里面已经整理好的数据，以小编现在接手的市委组织部考核项目为例，如下图所示：                    第二步，选择出入所有图标的符号，选择所有图表中的条形图，如下图所示：                    第三步：生成的图标如下所示：                  第四步：选中图表，将全部数据选择进入数据区域，包括任务、起始时间、工期、完成时间，将完成时间系列删除，并保证起始时间在工期上面，如下图所示：                第五步：由向导程序形成的图表已经完成，然后进行下一步处理，反转y轴，双击图中的y轴坐标，在弹出对话框的刻度一栏，勾选分类次序反转选项，如下图所示：                 第六步：隐藏起始时间系列，双击起始时间的条状区域，在弹出的对话框中，进行如下图所示的设置：                第七步：双击x轴，具体操作如下图所示，温馨提醒，最小值这里输入其实日期最早的2015年11月30日，Excel会自行转化为数字，最大值依次类推。                    第八步：我们来看一下我们的甘特图会什么样子的呢，如下图所示：                    至此，如何用excel画甘特图小编就已经介绍完毕了。          小编寄语： 这篇博客，小编主要简单的介绍了如何使用excel画甘特图，其实在实际应用中还有很多软件可以帮助我们实现类似的功能，可是比较坑的是，下载了一个软件，在安装的时候，给小编的电脑上莫名其妙安装了各种软件，果断卸载，还是excel好用`(*∩_∩*)′，市委组织部考核项目，精彩未完待续~~~~         上一篇 Android Demo 下拉刷新+加载更多+滑动删除 下一篇 TortoiseSVN文件夹图标不显示 顶 1 踩 0 我的同类文章 --------【项目实战】 （41） ● 成长之路 （80） http://blog.csdn.net 猜你在找 查看评论 * 以上用户言论只代表其个人观点，不代表CSDN网站的观点或立场 个人资料 u010850027 访问： 397327次 积分： 24873 等级： 积分：24873 排名： 第128名 原创： 187篇 转载： 0篇 译文： 0篇 评论： 8837条 博客专栏 CSS+DIV 文章：9篇 阅读：34405 数据库 文章：10篇 阅读：25230 软件设计师 文章：10篇 阅读：18444 VB.NET 文章：12篇 阅读：20363 大话设计模式 文章：22篇 阅读：32288 C# 文章：6篇 阅读：10001 UML 文章：14篇 阅读：25479 软件工程 文章：13篇 阅读：16222 QQ之家 连接我们的ODBC 网易博客带你走进不一样的世界 文章分类 ● 基础知识 (15) --------【数据库】 (10) --------【计算机基础】 (5) ● 编程语言 (12) --------【C #学习】 (6) --------【VB.NET学习】 (2) --------【java】 (4) ● 架构设计 (61) --------【设计模式】 (23) --------【EntityFramework】 (2) --------【Linq】 (1) --------【MVC】 (2) --------【WCF】 (2) --------【UI设计】 (2) --------【Axure】 (2) --------【软件工程】 (13) --------【UML之旅】 (15) ● 成长之路 (81) --------【自考路上】 (2) --------【年终总结】 (3) --------【初雪之恋】 (2) --------【项目实战】 (42) --------【心灵鸡汤】 (14) --------【实习之旅】 (14) --------【伴着书香】 (3) --------【软考路上】 (14) --------【Android】 (14) ● BS之旅 (24) --------【html之路】 (1) --------【ASP.NET学习】 (3) --------【JavaScript】 (2) --------【CSS+DIV】 (9) --------【JQuery】 (6) --------【ajax】 (1) --------【XML】 (2) ● java之恋 (2) --------【SSH】 (2) 文章存档 2015年12月 (5) 2015年11月 (4) 2015年10月 (4) 2015年09月 (5) 2015年08月 (5) 2015年07月 (7) 2015年06月 (5) 2015年05月 (4) 2015年04月 (4) 2015年03月 (5) 2015年02月 (5) 2015年01月 (10) 2014年12月 (11) 2014年11月 (6) 2014年10月 (7) 2014年09月 (4) 2014年08月 (6) 2014年07月 (7) 2014年06月 (4) 2014年05月 (13) 2014年04月 (7) 2014年03月 (10) 2014年02月 (8) 2014年01月 (12) 2013年12月 (10) 2013年11月 (5) 2013年10月 (3) 2013年09月 (4) 2013年08月 (3) 2013年07月 (2) 2013年06月 (2) 阅读排行 未完成的IT路停在回车键---2014年末总结篇 (12823) Android仿淘宝购物车demo (5575) 我的高效编程秘诀 (4892) 红色是个危险色 (4458) 国庆 音标 赖世雄 (4384) 耿建玲视频总结 (4275) 精通CSS+DIV网页样式与布局--图片效果 (4249) 机房收费系统之结尾 (4234) 精通CSS+DIV网页样式与布局--滤镜的使用 (4202) Axure如何建立共享项目、如何编辑共享项目、如何获取共享项目 (4164) 评论排行 初雪之恋 (292) 未完成的IT路停在回车键---2014年末总结篇 (216) 软考之路--开始的开始，我们都是孩子 (156) 存储过程---留住你的美丽(上) (138) 一转眼13年 马踏14间 (132) 一步一步学会系统发布 (128) VB.NET版机房收费系统---导出Excel表格 (124) 大话设计模式之装饰模式 (123) 写博客--用文字整理生命 (102) Android仿淘宝购物车demo (90) 推荐文章 *App竞品技术分析 （6）热修复 *架构设计：系统间通信（17）——服务治理与Dubbo 中篇（分析） *一款炫酷Loading动画--加载失败 *图解堆算法、链表、栈与队列（多图预警） *Android中ContentProvider组件详解 *Android平台Camera实时滤镜实现方法探讨(九)--磨皮算法探讨(一)

Recno:: 79
URL:: http://blog.csdn.net/wangyangzhizhou/article/details/48830519

ParseText::
集群增量会话管理器——DeltaManager - wangyangzhizhou的专栏 - 博客频道 - CSDN.NET wangyangzhizhou的专栏 追求思想自由，追求技术自由，追求研究自由 目录视图 摘要视图 订阅 学院APP首次下载，可得50C币！     欢迎来帮助开源“进步”     当讲师？爱学习？投票攒课吧     认识Atlassian Datacenter产品     深圳小伙伴的福利来啦 [置顶] 集群增量会话管理器——DeltaManager 标签： tomcat 集群增量会话管理器 DeltaManager session 增量备份 2015-09-30 17:09 560人阅读 评论 (3) 收藏 举报 分类： JAVA （71） 作者同类文章 X tomcat内核 （51） 作者同类文章 X 版权声明：本文为博主原创文章，未经博主允许不得转载。 DeltaManager 会话管理器是 tomcat 默认的集群会话管理器，它主要用于集群中各个节点之间会话状态的同步维护，由于相关内容涉及到集群，可能会需要一些集群通信相关知识，如果有疑问可结合集群相关章节。 集群增量会话管理器的职责是将某节点的会话该变同步到集群内其他成员节点上，它属于全节点复制模式，所谓全节点复制是指集群中某个节点的状态变化后需要同步到集群中剩余的节点，非全节点方式可能只是同步到其中某个或若干节点。在集群中全节点会话复制的一个大致步骤如下图所示，客户端发起一个请求，假设通过一定的负载均衡设备分发策略分到其中一个结点 node1 ，如果还未存在 session 对象的话 web 容器将会创建一个会话对象，接着执行一些逻辑处理，在对客户端响应之前有个重要的事情是要把 session 对象同步到集群中其他节点上，最后再响应客户端。当客户端第二次发起请求时，假如分发到 node3 节点上，由于同步了 node1 的 session 会话，所以在执行逻辑时并不会取不到 session 的值。如果删除某个会话对象则要同时通知其他节点把相应会话删除，如果修改了某个会话的某些属性也同样要更新到其他节点的会话中。   DeltaManager 其实就是一个会话同步通信解决方案，除了具备上面提到的全节点复制外，它还有具有只复制会话增量的特性，增量是以一个完整请求为周期，即会将一个请求过程中所有会话修改量在响应前进行集群同步。往下看 Tomcat 具体实现方案。 为区分不同的动作必须要先定义好各种事件，例如会话创建事件、会话访问事件、会话失效事件、获取所有会话事件、会话增量事件、会话 ID 改变事件等等，实际上 tomcat 集群会有 9 种事件，集群根据这些不同的事件就可以彼此进行通信，接收方对不同事件做不同的操作。如下图，例如 node1 节点创建完一个会话后，即向其他三个节点发送 EVT_SESSION_CREATED 事件，其他三个节点接收到此事件后则各自在自己本地创建一个会话，会话包含了两个很重要的属性——会话 ID 和创建时间，这两个属性都必须由 node1 节点跟着 EVT_SESSION_CREATED 一起发送出去，本地会话创建成功后即完成了会话创建同步工作，此时你通过会话 ID 查找集群中任意一个节点都可以找到对应的会话。同样对于会话访问事件， node1 向其他节点发送 EVT_SESSION_ACCESSED 事件及会话 ID ，其他节点根据会话 ID 找到对应会话并更新会话最后访问时间，以免被认为是过期会话而被清理。类似的还有会话失效事件（同步集群销毁某会话）、会话 ID 改变事件（同步集群更改会话 ID ）等等操作。       Tomcat 使用 SessionMessageImpl 类定义了各种集群通信事件及操作方法，在整个集群通信过程中就是按照此类定义好的事件进行通信， SessionMessageImpl 包含的事件如下 { EVT_SESSION_CREATED 、 EVT_SESSION_EXPIRED 、 EVT_SESSION_ACCESSED 、 EVT_GET_ALL_SESSIONS 、 EVT_SESSION_DELTA 、 EVT_ALL_SESSION_DATA 、 EVT_ALL_SESSION_TRANSFERCOMPLETE 、 EVT_CHANGE_SESSION_ID 、 EVT_ALL_SESSION_NOCONTEXTMANAGER } ，除此之外它继承了序列化接口（方便序列化）、集群消息接口（集群的操作）、会话消息接口（事件定义及会话操作）。   集群增量会话管理器 DeltaManager 可以说是通过 SessionMessageImpl 消息来管理 DeltaSession ，即根据 SessionMessageImpl 里面的事件响应不同的操作。 Tomcat 的集群通信使用的是 tribes 组件（相关章节会对 tribes 组件详细分析），网络 IO 都交由 tribes 后应用可以更专注逻辑处理， DeltaManager 存在一个 messageDataReceived(ClusterMessage cmsg) 方法，此方法会在本节点接收到其他节点发送过来的消息后被调用，且传入的参数为 ClusterMessage 类型，可转化为 SessionMessage 类型，然后根据 SessionMessage 定义的 9 种事件做不同处理。其中有一个事件需要关注的是 EVT_SESSION_DELTA ，它是对会话增量同步处理的事件，某个节点在一个完整的请求过程中对某会话相关属性的所有操作被抽象到了 DeltaRequest 对象中，而 DeltaRequest 被序列化后会放到 SessionMessage 中，所以 EVT_SESSION_DELTA 事件处理逻辑就是从 SessionMessage 获取并反序列化出 DeltaRequest 对象，再将 DeltaRequest 包含的对某个会话的所有操作同步到本地该会话中，至此完成会话增量同步。       DeltaManager 就是 DeltaSession 的管理器，它提供了会话增量的同步方式而不是全量同步，极大提高了同步效率。       喜欢java的同学可以交个朋友： 上一篇 增量会话对象——DeltaSession 下一篇 Oracle统一访问代理层方案 顶 1 踩 0 我的同类文章 JAVA （71） tomcat内核 （51） http://blog.csdn.net 猜你在找 查看评论 * 以上用户言论只代表其个人观点，不代表CSDN网站的观点或立场 作者 笔名：seaboat 汪洋之舟 微信： 个人资料 wangyangzhizhou 访问： 103409次 积分： 2516 等级： 积分：2516 排名： 第8399名 原创： 117篇 转载： 5篇 译文： 0篇 评论： 46条 文章搜索 博客专栏 集群 文章：15篇 阅读：9285 tomcat内核 文章：48篇 阅读：32183 Java并发 文章：18篇 阅读：17190 java开源研究 文章：32篇 阅读：28841 文章分类 阿里技术 (0) 杂 (1) 英语 (0) 资讯 (0) J2EE (3) 标准 (1) 安全 (5) JAVA (71) 架构模型 (8) 设计 (3) tomcat内核 (52) 设计模式 (1) 支付 (3) 算法 (1) 阿汪梦中入侵故事 (2) 协议 (5) 多线程&并发 (22) JVM (9) 软件设计 (2) web中间件 (2) 集群 (4) 中间件 (1) tomcat (1) 文章存档 2015年12月 (5) 2015年11月 (2) 2015年10月 (3) 2015年09月 (6) 2015年08月 (6) 2015年07月 (4) 2015年06月 (4) 2015年05月 (5) 2015年04月 (4) 2015年03月 (6) 2015年02月 (6) 2015年01月 (6) 2014年12月 (10) 2014年11月 (10) 2014年10月 (7) 2014年09月 (5) 2014年08月 (18) 2014年07月 (1) 2014年06月 (1) 2014年05月 (1) 2014年04月 (2) 2014年03月 (10) 阅读排行 支付平台风控系统架构模型设计 (2461) 监控平台架构设计 (1547) Java多线程的调度策略 (1446) 乐观的并发策略——基于CAS的自旋 (1372) tomcat如何避免遭遇ClassNotFoundException (1274) 支付平台PCI认证整改 (1222) 悲观的并发策略——Synchronized互斥锁 (1217) 多线程之Java线程阻塞与唤醒 (1191) 系统支付金额效能监控设计 (1104) 动态令牌认证 (1082) 评论排行 tomcat会话之持久化会话管理器 (3) 集群增量会话管理器——DeltaManager (3) Tomcat的管道 (3) 支付平台风控系统架构模型设计 (2) socket系列之客户端socket——Socket类 (2) 设计一个中间件的访问日志组件 (2) 集群通信组件tribes之使用方法 (2) 从单机到集群会话的管理之集群模式一 (2) 集群通信组件tribes之应用程序处理入口 (2) 管道模式——pipeline与valve (1) 最新评论 Tomcat的管道 JackieLiuLixi : 不错，非常不错，谢谢 连接器与容器的桥梁——CoyoteAdapter CXBY1187819603 : 一般般 NIO模式例子 u013047005 : NIO模式主要优势是体现在对多连接的管理，对众多连接各种事件的转发让处理变得更加高效，所以一般是服务... NIO模式例子 u013047005 : NIO模式主要优势是体现在对多连接的管理，对众多连接各种事件的转发让处理变得更加高效，所以一般是服务... 从单机到集群会话的管理之集群模式一 wangyangzhizhou : @u010786678:一起进步 从单机到集群会话的管理之集群模式一 u010786678 : 谢谢小伙伴的分享，学习了 支付平台风控系统架构模型设计 wangyangzhizhou : @rainbowmiaoyun:黑名单是已经确认了的list，但假如这个黑名单已经合法了是可以从黑名... 支付平台风控系统架构模型设计 rainbowmiaoyun : 很有用处，但是我想了解一下，黑名单和白名单的区别在哪里？黑名单应该是做排除，那么黑名单那块能否处理成... 集群增量会话管理器——DeltaManager wangdan199112 : 没用过，学习啦！ 管道模式——pipeline与valve zhanghongjie0302 : 多谢楼主的分享！

Recno:: 80
URL:: http://blog.csdn.net/wangyangzhizhou/article/details/48971069

ParseText::
Oracle统一访问代理层方案 - wangyangzhizhou的专栏 - 博客频道 - CSDN.NET wangyangzhizhou的专栏 追求思想自由，追求技术自由，追求研究自由 目录视图 摘要视图 订阅 学院APP首次下载，可得50C币！     欢迎来帮助开源“进步”     当讲师？爱学习？投票攒课吧     认识Atlassian Datacenter产品     深圳小伙伴的福利来啦 [置顶] Oracle统一访问代理层方案 标签： oracle 访问代理 2015-10-08 13:05 570人阅读 评论 (0) 收藏 举报 分类： 设计 （2） 作者同类文章 X 中间件 版权声明：本文为博主原创文章，未经博主允许不得转载。 目标 提供一个 oracle数据库统一 访问代理层，统一管理所有oracle数据库用户名的连接池，让多个应用系统相同的数据库用户公用连接池以节省 oracle 服务器的总连接数，并且提供统一管理oracle能力。 由访问层维护后端 oracle 不同用户的连接池，应用通过 jdbc 协议告知访问层需要操作的数据库对象的用户名，访问层即从对应用户名的连接池中取出一条数据库连接执行 sql 。达到相同用户名连接复用效果。例如， user2&sql 传入访问层，访问层 engine 定位到第一个 oracle 的 user2 用户名连接池中，并取出一条连接执行。         功能 路由选择：提供通过数据库用户名导航到相应的数据库连接池。   sql 语句透传 ：即不对应用传入的 sql 做更改，通过简单的用户名导航到对应的 oracle 中执行，把执行结果返回应用端。   支持多个 oracle 库： 即可同时代理多个 oracle 数据库，所有访问数据库的连接池统一由代理层管理。   建设方案 基本功能       总体方案是向应用系统嵌入一个 jar 包（ mysql 驱动包），对于应用来说就像正常使用 jdbc 对数据库进行操作。   通过 lvs 负载均衡，接收端使用 mysql 协议与应用通信，前端使用 NIO 网络模式对请求接收。   后端使用 oracle JDBC 驱动连接若干数据库，并且使用 BIO 网络模式，提供良好的水平扩展能力，生产上可以很方便通过增加机器链路使处理能力接近线性增长。   核心模块是 SQL Engine ，提供应用传入的 sql 数据库连接池路由选择及数据库执行等操作。       另外实现线程管理、心跳管理、会话管理、用户鉴权、 Hint 功能模块等功能。       配套功能 功能测试：提供脚本工具自动跑功能测试。   性能测试：提供脚本工具自动跑性能测试。   关键参数监控：提供一个后台可实时观察代理层前端网络接收情况，及后端数据库连接池的各种状态。   配置发布：目前只提供手动修改配置文件及手工发布。     技术栈 l  前端 NIO 模式： 前端使用非阻塞网络模式接收报文，提高系统的接收处理能力，提高系统的多并发能力。 l  后端 BIO 模式： 后端使用阻塞网络模式与数据库交互，由于连接池连接一般是有数量限制的，且 oracle 数据库也会有连接数限制，所以这里采用 BIO 模式比较适合，对连接的操作维护方便简单，使用 BIO 模式并不会影响后端与数据库交互的性能，同时对于系统水平扩展提供了友好的支持。 l  Reactor模式 采用 Reactor 模式对网络 IO 的性能优化。 l  Dom4j组件     此组件主要用于 xml 文件的解析工作。 l  OracleDriver驱动     作为 oracle 数据库连接驱动程序。 l  Tomcat jdbc连接池：     使用 tomcat jdbc 连接池对后端 oracle 连接进行管理， tomcat 团队对原来的 dbcp 连接池进行了优化后产生的，是比较成熟的组件，拥有可靠的连接管理能力，也是 tomcat7 以后默认数据库连接管理组件，属于 apache 下开源项目。         上一篇 集群增量会话管理器——DeltaManager 下一篇 从单机到集群会话的管理之单机模式 顶 0 踩 0 我的同类文章 设计 （2） http://blog.csdn.net 猜你在找 查看评论 * 以上用户言论只代表其个人观点，不代表CSDN网站的观点或立场 作者 笔名：seaboat 汪洋之舟 微信： 个人资料 wangyangzhizhou 访问： 103406次 积分： 2516 等级： 积分：2516 排名： 第8399名 原创： 117篇 转载： 5篇 译文： 0篇 评论： 46条 文章搜索 博客专栏 集群 文章：15篇 阅读：9285 tomcat内核 文章：48篇 阅读：32183 Java并发 文章：18篇 阅读：17190 java开源研究 文章：32篇 阅读：28841 文章分类 阿里技术 (0) 杂 (1) 英语 (0) 资讯 (0) J2EE (3) 标准 (1) 安全 (5) JAVA (71) 架构模型 (8) 设计 (3) tomcat内核 (52) 设计模式 (1) 支付 (3) 算法 (1) 阿汪梦中入侵故事 (2) 协议 (5) 多线程&并发 (22) JVM (9) 软件设计 (2) web中间件 (2) 集群 (4) 中间件 (1) tomcat (1) 文章存档 2015年12月 (5) 2015年11月 (2) 2015年10月 (3) 2015年09月 (6) 2015年08月 (6) 2015年07月 (4) 2015年06月 (4) 2015年05月 (5) 2015年04月 (4) 2015年03月 (6) 2015年02月 (6) 2015年01月 (6) 2014年12月 (10) 2014年11月 (10) 2014年10月 (7) 2014年09月 (5) 2014年08月 (18) 2014年07月 (1) 2014年06月 (1) 2014年05月 (1) 2014年04月 (2) 2014年03月 (10) 阅读排行 支付平台风控系统架构模型设计 (2461) 监控平台架构设计 (1547) Java多线程的调度策略 (1446) 乐观的并发策略——基于CAS的自旋 (1372) tomcat如何避免遭遇ClassNotFoundException (1274) 支付平台PCI认证整改 (1222) 悲观的并发策略——Synchronized互斥锁 (1217) 多线程之Java线程阻塞与唤醒 (1191) 系统支付金额效能监控设计 (1104) 动态令牌认证 (1082) 评论排行 tomcat会话之持久化会话管理器 (3) 集群增量会话管理器——DeltaManager (3) Tomcat的管道 (3) 支付平台风控系统架构模型设计 (2) socket系列之客户端socket——Socket类 (2) 设计一个中间件的访问日志组件 (2) 集群通信组件tribes之使用方法 (2) 从单机到集群会话的管理之集群模式一 (2) 集群通信组件tribes之应用程序处理入口 (2) 管道模式——pipeline与valve (1) 最新评论 Tomcat的管道 JackieLiuLixi : 不错，非常不错，谢谢 连接器与容器的桥梁——CoyoteAdapter CXBY1187819603 : 一般般 NIO模式例子 u013047005 : NIO模式主要优势是体现在对多连接的管理，对众多连接各种事件的转发让处理变得更加高效，所以一般是服务... NIO模式例子 u013047005 : NIO模式主要优势是体现在对多连接的管理，对众多连接各种事件的转发让处理变得更加高效，所以一般是服务... 从单机到集群会话的管理之集群模式一 wangyangzhizhou : @u010786678:一起进步 从单机到集群会话的管理之集群模式一 u010786678 : 谢谢小伙伴的分享，学习了 支付平台风控系统架构模型设计 wangyangzhizhou : @rainbowmiaoyun:黑名单是已经确认了的list，但假如这个黑名单已经合法了是可以从黑名... 支付平台风控系统架构模型设计 rainbowmiaoyun : 很有用处，但是我想了解一下，黑名单和白名单的区别在哪里？黑名单应该是做排除，那么黑名单那块能否处理成... 集群增量会话管理器——DeltaManager wangdan199112 : 没用过，学习啦！ 管道模式——pipeline与valve zhanghongjie0302 : 多谢楼主的分享！

Recno:: 81
URL:: http://blog.csdn.net/wangyangzhizhou/article/details/49402775

ParseText::
从单机到集群会话的管理之单机模式 - wangyangzhizhou的专栏 - 博客频道 - CSDN.NET wangyangzhizhou的专栏 追求思想自由，追求技术自由，追求研究自由 目录视图 摘要视图 订阅 学院APP首次下载，可得50C币！     欢迎来帮助开源“进步”     当讲师？爱学习？投票攒课吧     认识Atlassian Datacenter产品     深圳小伙伴的福利来啦 [置顶] 从单机到集群会话的管理之单机模式 标签： tomcat 会话管理 单机 非持久化 持久化 2015-10-25 12:30 718人阅读 评论 (0) 收藏 举报 分类： tomcat内核 （51） 作者同类文章 X JVM （8） 作者同类文章 X web中间件 （1） 作者同类文章 X 版权声明：本文为博主原创文章，未经博主允许不得转载。 单机时代对会话的管理主要有两种方式——非持久化方式和持久化方式。非持久化方式指会话直接由 tomcat 管理并保存在机器内存上，它是最简单的方式，如下图，所有的会话集合都保存在内存上，客户端访问时根据自己的会话 id 直接在服务器内存中寻找，查找简单且速度快，但同时也存在两个缺点：一是容量比较小，当数据量大时容易导致内存不足；一是机器意外停止会导致会话数据丢失缺点。   为了解决上面非持久化方式存在的缺陷，我们需要引入持久化机制，即持久化方式。可以将会话数据以文件形式持久化到硬盘中，也可以通过数据库持久化会话数据。首先看硬盘持久化，如下图，会话数据会以文件形式保存在硬盘中，由于硬盘比存储空间比内存大且机器意外关机都不会使数据丢失，所以硬盘存储解决了上面两个缺点，但是硬盘读取的速度比较慢，可能会影响整体的响应时间，硬盘持久化方式在实际中基本不会使用。   Tomcat 提供的另外一种默认的持久化方式就是将会话数据持久化到数据库上，所有会话数据交由数据库存储， tomcat 通过 jdbc 数据库驱动并使用连接池技术去数据库指定表读取会话信息，此种方式解决了非持久化方式的所有缺点同时也对以文件方式存储方式的 IO 进行了优化，用数据库存储会话其实是一种集中管理模式，现在实际中更多是使用一个分布式缓存替代数据库，例如 memcached 、 redis 集群等，因为缓存的查询读取速度快，且集群解决了高可用的问题，但 Tomcat 官方版本是不提供会话保存到 memcached 或 redis 的支持，如要使用可自己编写一个会话管理器及一个阀门 valve，或使用第三方jar包 。需要说明的是集中管理模式不管是 tomcat 单机还是集群模式都可以使用。   上一篇 Oracle统一访问代理层方案 下一篇 从单机到集群会话的管理之集群模式一 顶 0 踩 0 我的同类文章 tomcat内核 （51） JVM （8） web中间件 （1） http://blog.csdn.net 猜你在找 查看评论 * 以上用户言论只代表其个人观点，不代表CSDN网站的观点或立场 作者 笔名：seaboat 汪洋之舟 微信： 个人资料 wangyangzhizhou 访问： 103408次 积分： 2516 等级： 积分：2516 排名： 第8399名 原创： 117篇 转载： 5篇 译文： 0篇 评论： 46条 文章搜索 博客专栏 集群 文章：15篇 阅读：9285 tomcat内核 文章：48篇 阅读：32183 Java并发 文章：18篇 阅读：17190 java开源研究 文章：32篇 阅读：28841 文章分类 阿里技术 (0) 杂 (1) 英语 (0) 资讯 (0) J2EE (3) 标准 (1) 安全 (5) JAVA (71) 架构模型 (8) 设计 (3) tomcat内核 (52) 设计模式 (1) 支付 (3) 算法 (1) 阿汪梦中入侵故事 (2) 协议 (5) 多线程&并发 (22) JVM (9) 软件设计 (2) web中间件 (2) 集群 (4) 中间件 (1) tomcat (1) 文章存档 2015年12月 (5) 2015年11月 (2) 2015年10月 (3) 2015年09月 (6) 2015年08月 (6) 2015年07月 (4) 2015年06月 (4) 2015年05月 (5) 2015年04月 (4) 2015年03月 (6) 2015年02月 (6) 2015年01月 (6) 2014年12月 (10) 2014年11月 (10) 2014年10月 (7) 2014年09月 (5) 2014年08月 (18) 2014年07月 (1) 2014年06月 (1) 2014年05月 (1) 2014年04月 (2) 2014年03月 (10) 阅读排行 支付平台风控系统架构模型设计 (2461) 监控平台架构设计 (1547) Java多线程的调度策略 (1446) 乐观的并发策略——基于CAS的自旋 (1372) tomcat如何避免遭遇ClassNotFoundException (1274) 支付平台PCI认证整改 (1222) 悲观的并发策略——Synchronized互斥锁 (1217) 多线程之Java线程阻塞与唤醒 (1191) 系统支付金额效能监控设计 (1104) 动态令牌认证 (1082) 评论排行 tomcat会话之持久化会话管理器 (3) 集群增量会话管理器——DeltaManager (3) Tomcat的管道 (3) 支付平台风控系统架构模型设计 (2) socket系列之客户端socket——Socket类 (2) 设计一个中间件的访问日志组件 (2) 集群通信组件tribes之使用方法 (2) 从单机到集群会话的管理之集群模式一 (2) 集群通信组件tribes之应用程序处理入口 (2) 管道模式——pipeline与valve (1) 最新评论 Tomcat的管道 JackieLiuLixi : 不错，非常不错，谢谢 连接器与容器的桥梁——CoyoteAdapter CXBY1187819603 : 一般般 NIO模式例子 u013047005 : NIO模式主要优势是体现在对多连接的管理，对众多连接各种事件的转发让处理变得更加高效，所以一般是服务... NIO模式例子 u013047005 : NIO模式主要优势是体现在对多连接的管理，对众多连接各种事件的转发让处理变得更加高效，所以一般是服务... 从单机到集群会话的管理之集群模式一 wangyangzhizhou : @u010786678:一起进步 从单机到集群会话的管理之集群模式一 u010786678 : 谢谢小伙伴的分享，学习了 支付平台风控系统架构模型设计 wangyangzhizhou : @rainbowmiaoyun:黑名单是已经确认了的list，但假如这个黑名单已经合法了是可以从黑名... 支付平台风控系统架构模型设计 rainbowmiaoyun : 很有用处，但是我想了解一下，黑名单和白名单的区别在哪里？黑名单应该是做排除，那么黑名单那块能否处理成... 集群增量会话管理器——DeltaManager wangdan199112 : 没用过，学习啦！ 管道模式——pipeline与valve zhanghongjie0302 : 多谢楼主的分享！

Recno:: 82
URL:: http://blog.csdn.net/wangyangzhizhou/article/details/49508287

ParseText::
从单机到集群会话的管理之集群模式一 - wangyangzhizhou的专栏 - 博客频道 - CSDN.NET wangyangzhizhou的专栏 追求思想自由，追求技术自由，追求研究自由 目录视图 摘要视图 订阅 学院APP首次下载，可得50C币！     欢迎来帮助开源“进步”     当讲师？爱学习？投票攒课吧     认识Atlassian Datacenter产品     深圳小伙伴的福利来啦 [置顶] 从单机到集群会话的管理之集群模式一 标签： tomcat 集群会话 全节点复制 网络阻塞 2015-10-30 11:17 738人阅读 评论 (2) 收藏 举报 分类： tomcat内核 （51） 作者同类文章 X JAVA （71） 作者同类文章 X 版权声明：本文为博主原创文章，未经博主允许不得转载。 为什么要使用集群？主要有两方面原因：一是对于一些核心系统要求长期不能中断服务，为了提供高可用性我们需要由多台机器组成的集群；另外一方面，随着访问量越来越大且业务逻辑越来越复杂，单台机器的处理能力已经不足以处理如此多且复杂的逻辑，于是需要增加若干台机器使整个服务处理能力得到提升。 如果说一个 web 应用不涉及会话的话，那么做集群是相当简单的，因为节点都是无状态的，集群内各个节点无需互相通信，只需要将各个请求均匀分配到集群节点即可。但基本所有 web 应用都会使用会话机制，所以做 web 应用集群时整个难点在于会话数据的同步，当然你可以通过一些策略规避复杂的额数据同步操作，例如前面说到的把会话信息保存在分布式缓存或数据库中统一集中管理，如下图，每个 tomcat 实例只需去写入或读取数据库即可，避免了 tomcat 集群之间的通信。但这种方式也有不足，要额外引入数据库或缓存服务，同时也要保证它们的高可用性，增加了机器和维护成本。       鉴于以上存在的不足，提供另一种解决思路就是 tomcat 集群节点自身完成各自的数据同步，不管访问到哪个节点都能找到对应的会话，如下图，客户端第一次访问生成会话， tomcat 自身会将会话信息同步到其他节点上，而且是每次请求完成都会同步此次请求过程中对 session 的所有操作，这样一来下一次请求到集群中任意节点都能找到响应的会话信息，且能保证信息的及时性。细看很容易发现集群的节点之间的会话是两两互相复制的，一旦集群节点数量及访问量大起来，将导致大量的会话信息需要互相复制同步，很容易导致网络阻塞，而且这些同步操作很可能会成为整体性能的瓶颈，根据经验，此种方案在实际生产上推荐的集群节点个数为 3-6 个，无法组建更大的集群，而且冗余了大量的数据，利用率不高。   全节点复制的网络流量随节点数量增加呈平方趋势增长，也正是因为这个因素导致无法构建较大规模的集群，为了使集群节点能更加大，首要解决的就是数据复制时流量增长的问题，下节将介绍另外一种会话管理方式，每个会话只会有一个备份，它使会话备份的网络流量随节点数量的增加呈线性趋势增长，大大减少了网络流量和逻辑操作，可构建较大的集群。           喜欢java的同学可以加个好友： 上一篇 从单机到集群会话的管理之单机模式 下一篇 从单机到集群会话的管理之集群模式二（更大的集群） 顶 3 踩 0 我的同类文章 tomcat内核 （51） JAVA （71） http://blog.csdn.net 猜你在找 查看评论 * 以上用户言论只代表其个人观点，不代表CSDN网站的观点或立场 作者 笔名：seaboat 汪洋之舟 微信： 个人资料 wangyangzhizhou 访问： 103403次 积分： 2516 等级： 积分：2516 排名： 第8399名 原创： 117篇 转载： 5篇 译文： 0篇 评论： 46条 文章搜索 博客专栏 集群 文章：15篇 阅读：9285 tomcat内核 文章：48篇 阅读：32183 Java并发 文章：18篇 阅读：17190 java开源研究 文章：32篇 阅读：28841 文章分类 阿里技术 (0) 杂 (1) 英语 (0) 资讯 (0) J2EE (3) 标准 (1) 安全 (5) JAVA (71) 架构模型 (8) 设计 (3) tomcat内核 (52) 设计模式 (1) 支付 (3) 算法 (1) 阿汪梦中入侵故事 (2) 协议 (5) 多线程&并发 (22) JVM (9) 软件设计 (2) web中间件 (2) 集群 (4) 中间件 (1) tomcat (1) 文章存档 2015年12月 (5) 2015年11月 (2) 2015年10月 (3) 2015年09月 (6) 2015年08月 (6) 2015年07月 (4) 2015年06月 (4) 2015年05月 (5) 2015年04月 (4) 2015年03月 (6) 2015年02月 (6) 2015年01月 (6) 2014年12月 (10) 2014年11月 (10) 2014年10月 (7) 2014年09月 (5) 2014年08月 (18) 2014年07月 (1) 2014年06月 (1) 2014年05月 (1) 2014年04月 (2) 2014年03月 (10) 阅读排行 支付平台风控系统架构模型设计 (2461) 监控平台架构设计 (1547) Java多线程的调度策略 (1446) 乐观的并发策略——基于CAS的自旋 (1372) tomcat如何避免遭遇ClassNotFoundException (1274) 支付平台PCI认证整改 (1222) 悲观的并发策略——Synchronized互斥锁 (1217) 多线程之Java线程阻塞与唤醒 (1191) 系统支付金额效能监控设计 (1104) 动态令牌认证 (1082) 评论排行 tomcat会话之持久化会话管理器 (3) 集群增量会话管理器——DeltaManager (3) Tomcat的管道 (3) 支付平台风控系统架构模型设计 (2) socket系列之客户端socket——Socket类 (2) 设计一个中间件的访问日志组件 (2) 集群通信组件tribes之使用方法 (2) 从单机到集群会话的管理之集群模式一 (2) 集群通信组件tribes之应用程序处理入口 (2) 管道模式——pipeline与valve (1) 最新评论 Tomcat的管道 JackieLiuLixi : 不错，非常不错，谢谢 连接器与容器的桥梁——CoyoteAdapter CXBY1187819603 : 一般般 NIO模式例子 u013047005 : NIO模式主要优势是体现在对多连接的管理，对众多连接各种事件的转发让处理变得更加高效，所以一般是服务... NIO模式例子 u013047005 : NIO模式主要优势是体现在对多连接的管理，对众多连接各种事件的转发让处理变得更加高效，所以一般是服务... 从单机到集群会话的管理之集群模式一 wangyangzhizhou : @u010786678:一起进步 从单机到集群会话的管理之集群模式一 u010786678 : 谢谢小伙伴的分享，学习了 支付平台风控系统架构模型设计 wangyangzhizhou : @rainbowmiaoyun:黑名单是已经确认了的list，但假如这个黑名单已经合法了是可以从黑名... 支付平台风控系统架构模型设计 rainbowmiaoyun : 很有用处，但是我想了解一下，黑名单和白名单的区别在哪里？黑名单应该是做排除，那么黑名单那块能否处理成... 集群增量会话管理器——DeltaManager wangdan199112 : 没用过，学习啦！ 管道模式——pipeline与valve zhanghongjie0302 : 多谢楼主的分享！

Recno:: 83
URL:: http://blog.csdn.net/wangyangzhizhou/article/details/49657909

ParseText::
从单机到集群会话的管理之集群模式二（更大的集群） - wangyangzhizhou的专栏 - 博客频道 - CSDN.NET wangyangzhizhou的专栏 追求思想自由，追求技术自由，追求研究自由 目录视图 摘要视图 订阅 学院APP首次下载，可得50C币！     欢迎来帮助开源“进步”     当讲师？爱学习？投票攒课吧     认识Atlassian Datacenter产品     深圳小伙伴的福利来啦 [置顶] 从单机到集群会话的管理之集群模式二（更大的集群） 标签： tomcat 集群 会话 session cluster 2015-11-05 08:41 851人阅读 评论 (0) 收藏 举报 分类： tomcat内核 （51） 作者同类文章 X 集群 （3） 作者同类文章 X JAVA （71） 作者同类文章 X 版权声明：本文为博主原创文章，未经博主允许不得转载。 《 从单机到集群会话的管理之集群模式一 》中讲到的全节点复制的网络流量随节点数量增加呈平方趋势增长，也正是因为这个因素导致无法构建较大规模的集群，为了使集群节点能更加大，首要解决的就是数据复制时流量增长的问题，下面将介绍另外一种会话管理方式，每个会话只会有一个备份，它使会话备份的网络流量随节点数量的增加呈线性趋势增长，大大减少了网络流量和逻辑操作，可构建较大的集群。 下面看看这种方式具体的工作机制，集群一般是通过负载均衡对外提供整体服务，所有节点被隐藏在后端组成一个整体。前面各种模式的实现都无需负载均衡协助，所以图中都把负载均衡省略了。最常见的负载方式是前面用 apache 拖所有节点，它支持将类似“ 326257DA6DB76F8D2E38F2C4540D1DEA.tomcat1 ”的会话 id 进行分解，定位到 tomcat 集群中以 tomcat1 命名的节点上（这种方式称为 Session Stick ，由 apache jk 模块实现）。每个会话存在一个原件和一个备份，且备份与原件不会保存在同一个节点上，如下图，例如当客户端发起请求后通过负载均衡被分发到 tomcat1 实例节点上，生成一个包含 .tomcat1 后缀的会话标识，并且 tomcat1 节点根据一定策略选出此次会话对象备份的节点，然后将包含了 { 会话 id ，备份 ip} 的信息发送给 tomcat2 、 tomcat3 、 tomcat4 ，如图中虚线所示，这样每个节点都有一个会话 id 、备份 ip 列表，即每个节点都有每个会话的备份 ip 地址。 完成上面一步后就是将会话内容备份到备份节点上，假如 tomcat1 的 s1 、 s2 两个会话的备份地址为 tomcat2 ，则把会话对象备份到 tomcat2 中，类似的有 tomcat2 把 s3 会话备份到 tomcat4 ， tomcat4 把 s4 、 s5 两个对话备份到 tomcat3 ，这样集群中所有的会话都已经有了一份备份。当 tomcat1 一直不出故障，由于 Session Stick 技术客户端将一直访问到 tomcat1 节点上，保证一直能获取到会话。而当 tomcat1 出故障了，这时 tomcat 也提供了一个 failover 机制， apache 感知到后端集群 tomcat1 节点被移除了，这时它会把请求随机分配到其他任意节点上，接下去会有两种情况： ①刚好分到了备份节点 tomcat2 上，此时仍能获取到 s1 会话，除此之外， tomcat2 还要另外做的事是将这个 s1 会话标记为原件且继续选取一个备份地址备份 s1 会话，这样一来又有了备份。 ②假如分到了非备份节点 tomcat3 ，此时肯定找不到 s1 会话，于是它将向集群所有节点发问，“请问谁有 s1 会话的备份 ip 地址信息？”，因为只有 tomcat2 有 s1 的备份地址信息，它接收到询问后应答告知 tomcat3 节点 s1 会话的备份在 tomcat2 ，根据这个信息就能查到 s1 会话了，并且 tomcat3 在自己本地生成 s1 会话并标为原件， tomcat2 上的副本不变，这样一来同样能找到 s1 会话，正常完整整个请求处理。      《从单机到集群会话的管理》系列文章从单机到集群分析了 web 服务器的会话管理的不同模型，包含了单机非持久化、单机文件持久化、单机数据库（缓存）持久化、集群数据库（缓存）、集群全节点复制、集群原件副本备份等等。分析了不同模型的工作原理及优点不足，深入理解各种会话管理模式对于实际项目的会话方案选型有很大的帮助。   上一篇 从单机到集群会话的管理之集群模式一 下一篇 集群RPC通信 顶 3 踩 0 我的同类文章 tomcat内核 （51） 集群 （3） JAVA （71） http://blog.csdn.net 猜你在找 查看评论 * 以上用户言论只代表其个人观点，不代表CSDN网站的观点或立场 作者 笔名：seaboat 汪洋之舟 微信： 个人资料 wangyangzhizhou 访问： 103404次 积分： 2516 等级： 积分：2516 排名： 第8399名 原创： 117篇 转载： 5篇 译文： 0篇 评论： 46条 文章搜索 博客专栏 集群 文章：15篇 阅读：9285 tomcat内核 文章：48篇 阅读：32183 Java并发 文章：18篇 阅读：17190 java开源研究 文章：32篇 阅读：28841 文章分类 阿里技术 (0) 杂 (1) 英语 (0) 资讯 (0) J2EE (3) 标准 (1) 安全 (5) JAVA (71) 架构模型 (8) 设计 (3) tomcat内核 (52) 设计模式 (1) 支付 (3) 算法 (1) 阿汪梦中入侵故事 (2) 协议 (5) 多线程&并发 (22) JVM (9) 软件设计 (2) web中间件 (2) 集群 (4) 中间件 (1) tomcat (1) 文章存档 2015年12月 (5) 2015年11月 (2) 2015年10月 (3) 2015年09月 (6) 2015年08月 (6) 2015年07月 (4) 2015年06月 (4) 2015年05月 (5) 2015年04月 (4) 2015年03月 (6) 2015年02月 (6) 2015年01月 (6) 2014年12月 (10) 2014年11月 (10) 2014年10月 (7) 2014年09月 (5) 2014年08月 (18) 2014年07月 (1) 2014年06月 (1) 2014年05月 (1) 2014年04月 (2) 2014年03月 (10) 阅读排行 支付平台风控系统架构模型设计 (2461) 监控平台架构设计 (1547) Java多线程的调度策略 (1446) 乐观的并发策略——基于CAS的自旋 (1372) tomcat如何避免遭遇ClassNotFoundException (1274) 支付平台PCI认证整改 (1222) 悲观的并发策略——Synchronized互斥锁 (1217) 多线程之Java线程阻塞与唤醒 (1191) 系统支付金额效能监控设计 (1104) 动态令牌认证 (1082) 评论排行 tomcat会话之持久化会话管理器 (3) 集群增量会话管理器——DeltaManager (3) Tomcat的管道 (3) 支付平台风控系统架构模型设计 (2) socket系列之客户端socket——Socket类 (2) 设计一个中间件的访问日志组件 (2) 集群通信组件tribes之使用方法 (2) 从单机到集群会话的管理之集群模式一 (2) 集群通信组件tribes之应用程序处理入口 (2) 管道模式——pipeline与valve (1) 最新评论 Tomcat的管道 JackieLiuLixi : 不错，非常不错，谢谢 连接器与容器的桥梁——CoyoteAdapter CXBY1187819603 : 一般般 NIO模式例子 u013047005 : NIO模式主要优势是体现在对多连接的管理，对众多连接各种事件的转发让处理变得更加高效，所以一般是服务... NIO模式例子 u013047005 : NIO模式主要优势是体现在对多连接的管理，对众多连接各种事件的转发让处理变得更加高效，所以一般是服务... 从单机到集群会话的管理之集群模式一 wangyangzhizhou : @u010786678:一起进步 从单机到集群会话的管理之集群模式一 u010786678 : 谢谢小伙伴的分享，学习了 支付平台风控系统架构模型设计 wangyangzhizhou : @rainbowmiaoyun:黑名单是已经确认了的list，但假如这个黑名单已经合法了是可以从黑名... 支付平台风控系统架构模型设计 rainbowmiaoyun : 很有用处，但是我想了解一下，黑名单和白名单的区别在哪里？黑名单应该是做排除，那么黑名单那块能否处理成... 集群增量会话管理器——DeltaManager wangdan199112 : 没用过，学习啦！ 管道模式——pipeline与valve zhanghongjie0302 : 多谢楼主的分享！

Recno:: 84
URL:: http://blog.csdn.net/wangyangzhizhou/article/details/49946247

ParseText::
集群RPC通信 - wangyangzhizhou的专栏 - 博客频道 - CSDN.NET wangyangzhizhou的专栏 追求思想自由，追求技术自由，追求研究自由 目录视图 摘要视图 订阅 学院APP首次下载，可得50C币！     欢迎来帮助开源“进步”     当讲师？爱学习？投票攒课吧     认识Atlassian Datacenter产品     深圳小伙伴的福利来啦 [置顶] 集群RPC通信 标签： rpc 通信 集群 tomcat tribes 2015-11-20 13:39 1003人阅读 评论 (0) 收藏 举报 分类： tomcat内核 （51） 作者同类文章 X JAVA （71） 作者同类文章 X 版权声明：本文为博主原创文章，未经博主允许不得转载。 RPC 即远程过程调用，它的提出旨在消除通信细节、屏蔽繁杂且易错的底层网络通信操作，像调用本地服务一般地调用远程服务，让业务开发者更多关注业务开发而不必考虑网络、硬件、系统的异构复杂环境。 先看看集群中 RPC 的整个通信过程，假设从节点 node1 开始一个 RPC 调用，①先将待传递的数据放到 NIO 集群通信框架（这里使用的是 tribes 框架）中；②由于使用的是 NIO 模式，线程无需阻塞直接返回；③由于与集群其他节点通信需要花销若干时间，为了提高 CPU 使用率当前线程应该放弃 CPU 的使用权进行等待操作；④ NIO 集群通信框架 tribes 接收到 node2 节点的响应消息，并将消息封装成 Response 对象保存至响应数组；⑤ tribes 接收到 node4 节点的响应消息，由于是使用了并行通信，所以 node4 可能比 node3 先返回消息，并将消息封装成 Response 对象保存至响应数组；⑥ tribes 最后接收到 node3 节点的响应消息，并将消息封装成 Response 对象保存至响应数组；⑦现在所有节点的响应都已经收集完毕，是时候通知刚刚被阻塞的那条线程了，原来的线程被 notify 醒后拿到所有节点的响应 Response[] 进行处理，至此完成了整个集群 RPC 过程。   上面整个过程是在只有一条线程的情况下，一切看起来没什么问题，但如果有多条线程并发调用则会导致一个问题：线程与响应的对应关系将被打乱，无法确定哪个线程对应哪几个响应。因为 NIO 通信框架不会每个线程都独自使用一个 socket 通道，为提高性能一般都是使用长连接，所有线程公用一个 socket 通道，这时就算线程一比线程二先放入 tribes 也不能保证响应一比响应二先接收到，所以接收到响应一后不知道该通知线程一还是线程二。只有解决了这个问题才能保证 RPC 调用的正确性。 要解决线程与响应对应的问题就需要维护一个线程响应关系列表，响应从关系列表中就能查找对应的线程，如下图，在发送之前生成一个 UUID 标识，此标识要保证同 socket 中唯一，再把 UUID 与线程对象关系对应起来，可使用 Map 数据结构实现， UUID 的值作为 key ，线程对应的锁对象为 value 。接着制定一个协议报文， UUID 作为报文的其中一部分，报文发往另一个节点 node2 后将响应信息 message 放入报文中并返回， node1 对接收到的报文进行解包根据 UUID 去查找并唤起对应的线程，告诉它“你要的消息已经收到，往下处理吧”。但在集群环境下，我们更希望是集群中所有节点的消息都接收到了才往下处理，如下图下半部分，一个 UUID1 的请求报文会发往 node2 、 node3 和 node4 三个节点，这时假如只接收到一个响应则不唤起线程，直到 node2 、 node3 对应 UUID1 的响应报文都接收到后才唤起对应线程往下执行。同样地， UUID2 、 UUID3 的报文消息都是如此处理，最后集群中对应的响应都能正确回到各自线程上。   用简单代码实现一个 RPC 例子，选择一个集群通信框架负责底层通信，这里使用 tribes ，接着往下： ①定义一个 RPC 接口，这些方法是预留提供给上层具体逻辑处理的入口， replyRequest 方法用于处理响应逻辑， leftOver 方法用于残留请求的逻辑处理。 public interface RpcCallback {     public Serializable replyRequest(Serializable msg, Member sender);     public void leftOver(Serializable msg, Member sender); } ②定义通信消息协议，实现 Externalizable 接口自定义序列化和反序列化， message 用于存放响应消息， uuid 标识用于关联线程， rpcId 用于标识 RPC 实例， reply 表示是否回复。 public class RpcMessage implements Externalizable { protected Serializable message; protected byte[] uuid; protected byte[] rpcId; protected boolean reply = false; public RpcMessage() { } public RpcMessage(byte[] rpcId, byte[] uuid, Serializable message) { this.rpcId = rpcId; this.uuid = uuid; this.message = message; } @Override public void readExternal(ObjectInput in) throws IOException,ClassNotFoundException { reply = in.readBoolean(); int length = in.readInt(); uuid = new byte[length]; in.readFully(uuid); length = in.readInt(); rpcId = new byte[length]; in.readFully(rpcId); message = (Serializable) in.readObject(); } @Override public void writeExternal(ObjectOutput out) throws IOException { out.writeBoolean(reply); out.writeInt(uuid.length); out.write(uuid, 0, uuid.length); out.writeInt(rpcId.length); out.write(rpcId, 0, rpcId.length); out.writeObject(message); } } ③响应类型，提供多种唤起线程的条件，一共四种类型，分别表示接收到第一个响应就唤起线程、接收到集群中大多数节点的响应就唤起线程、接收到集群中所有节点的响应才唤起线程、无需等待响应的无响应模式。 public class RpcResponseType { public static final int FIRST_REPLY = 1; public static final int MAJORITY_REPLY = 2; public static final int ALL_REPLY = 3; public static final int NO_REPLY = 4; } ④响应对象，用于封装接收到的消息， Member 在通信框架 tribes 是节点的抽象，这里用来表示来源节点。 public class RpcResponse { private Member source; private Serializable message; public RpcResponse() { } public RpcResponse(Member source, Serializable message) { this.source = source; this.message = message; } public void setSource(Member source) { this.source = source; } public void setMessage(Serializable message) { this.message = message; } public Member getSource() { return source; } public Serializable getMessage() { return message; } } ⑤ RPC 响应集，用于存放同个 UUID 的所有响应。 public class RpcCollector {     public ArrayList<RpcResponse> responses = new ArrayList<RpcResponse>();      public byte[] key;     public int options;     public int destcnt;     public RpcCollector(byte[] key, int options, int destcnt) {         this.key = key;         this.options = options;         this.destcnt = destcnt;     }     public void addResponse(Serializable message, Member sender){      RpcResponse resp = new RpcResponse(sender,message);         responses.add(resp);     }     public boolean isComplete() {         if ( destcnt <= 0 ) return true;         switch (options) {             case RpcResponseType.ALL_REPLY:                 return destcnt == responses.size();             case RpcResponseType.MAJORITY_REPLY:             {                 float perc = ((float)responses.size()) / ((float)destcnt);                 return perc >= 0.50f;             }             case RpcResponseType.FIRST_REPLY:                 return responses.size()>0;             default:                 return false;         }     }     public RpcResponse[] getResponses() {         return responses.toArray(new RpcResponse[responses.size()]);     } } ⑥ RPC 核心类，是整个 RPC 的抽象，它要实现 tribes 框架的 ChannelListener 接口，在 messageReceived 方法中处理接收到的消息。因为所有的消息都会通过此方法，所以它必须要根据 key 去处理对应的线程，同时它也要负责调用 RpcCallback 接口定义的相关的方法，例如响应请求的 replyRequest 方法和处理残留的响应 leftOver 方法，残留响应是指有时我们在接收到第一个响应后就唤起线程。 public class RpcChannel implements ChannelListener { private Channel channel; private RpcCallback callback; private byte[] rpcId; private int replyMessageOptions = 0; private HashMap<byte[], RpcCollector> responseMap = new HashMap<byte[], RpcCollector>(); public RpcChannel(byte[] rpcId, Channel channel, RpcCallback callback) { this.rpcId = rpcId; this.channel = channel; this.callback = callback; channel.addChannelListener(this); } public RpcResponse[] send(Member[] destination, Serializable message, int rpcOptions, int channelOptions, long timeout) throws ChannelException { int sendOptions = channelOptions& ~Channel.SEND_OPTIONS_SYNCHRONIZED_ACK; byte[] key = UUIDGenerator.randomUUID(false); RpcCollector collector = new RpcCollector(key, rpcOptions, destination.length); try { synchronized (collector) { if (rpcOptions != RpcResponseType.NO_REPLY) responseMap.put(key, collector); RpcMessage rmsg = new RpcMessage(rpcId, key, message); channel.send(destination, rmsg, sendOptions); if (rpcOptions != RpcResponseType.NO_REPLY) collector.wait(timeout); } } catch (InterruptedException ix) { Thread.currentThread().interrupt(); } finally { responseMap.remove(key); } return collector.getResponses(); } @Override public void messageReceived(Serializable msg, Member sender) { RpcMessage rmsg = (RpcMessage) msg; byte[] key = rmsg.uuid; if (rmsg.reply) { RpcCollector collector = responseMap.get(key); if (collector == null) { callback.leftOver(rmsg.message, sender); } else { synchronized (collector) { if (responseMap.containsKey(key)) { collector.addResponse(rmsg.message, sender); if (collector.isComplete()) collector.notifyAll(); } else { callback.leftOver(rmsg.message, sender); } } } } else { Serializable reply = callback.replyRequest(rmsg.message, sender); rmsg.reply = true; rmsg.message = reply; try { channel.send(new Member[] { sender }, rmsg, replyMessageOptions & ~Channel.SEND_OPTIONS_SYNCHRONIZED_ACK); } catch (Exception x) { } } } @Override public boolean accept(Serializable msg, Member sender) { if (msg instanceof RpcMessage) { RpcMessage rmsg = (RpcMessage) msg; return Arrays.equals(rmsg.rpcId, rpcId); } else return false; } } ⑦自定义一个 RPC ，它要实现 RpcCallback 接口，分别对请求处理和残留响应处理，这里请求处理仅仅是简单返回“ hello,response for you! ”作为响应消息，残留响应处理则是简单输出“ receive a leftover message! ”。假如整个集群有五个节点，由于接收模式设置成了 FIRST_REPLY ，所以每个只会接受一个响应消息，其他的响应都被当做残留响应处理。 public class MyRPC implements RpcCallback { @Override public Serializable replyRequest(Serializable msg, Member sender) { RpcMessage mapmsg = (RpcMessage) msg; mapmsg.message = "hello,response for you!"; return mapmsg; } @Override public void leftOver(Serializable msg, Member sender) { System.out.println("receive a leftover message!"); } public static void main(String[] args) { MyRPC myRPC = new MyRPC(); byte[] rpcId = new byte[] { 1, 1, 1, 1 }; byte[] key = new byte[] { 0, 0, 0, 0 }; String message = "hello"; int sendOptions = Channel.SEND_OPTIONS_SYNCHRONIZED_ACK | Channel.SEND_OPTIONS_USE_ACK; RpcMessage msg = new RpcMessage(rpcId, key, (Serializable) message); RpcChannel rpcChannel = new RpcChannel(rpcId, channel, myRPC); RpcResponse[] resp = rpcChannel.send(channel.getMembers(), msg, RpcResponseType.FIRST_REPLY, sendOptions, 3000);        while(true) Thread.currentThread().sleep(1000); } } 可以看到通过上面的 RPC 封装后，上层可以把更多的精力关注到消息逻辑处理上面了，而不必关注具体的网络 IO 如何实现，屏蔽了繁杂重复的网络传输操作，为上层提供了很大的方便。 上一篇 从单机到集群会话的管理之集群模式二（更大的集群） 下一篇 一张图解释NIO原理 顶 1 踩 0 我的同类文章 tomcat内核 （51） JAVA （71） http://blog.csdn.net 猜你在找 查看评论 * 以上用户言论只代表其个人观点，不代表CSDN网站的观点或立场 作者 笔名：seaboat 汪洋之舟 微信： 个人资料 wangyangzhizhou 访问： 103411次 积分： 2516 等级： 积分：2516 排名： 第8399名 原创： 117篇 转载： 5篇 译文： 0篇 评论： 46条 文章搜索 博客专栏 集群 文章：15篇 阅读：9285 tomcat内核 文章：48篇 阅读：32183 Java并发 文章：18篇 阅读：17190 java开源研究 文章：32篇 阅读：28841 文章分类 阿里技术 (0) 杂 (1) 英语 (0) 资讯 (0) J2EE (3) 标准 (1) 安全 (5) JAVA (71) 架构模型 (8) 设计 (3) tomcat内核 (52) 设计模式 (1) 支付 (3) 算法 (1) 阿汪梦中入侵故事 (2) 协议 (5) 多线程&并发 (22) JVM (9) 软件设计 (2) web中间件 (2) 集群 (4) 中间件 (1) tomcat (1) 文章存档 2015年12月 (5) 2015年11月 (2) 2015年10月 (3) 2015年09月 (6) 2015年08月 (6) 2015年07月 (4) 2015年06月 (4) 2015年05月 (5) 2015年04月 (4) 2015年03月 (6) 2015年02月 (6) 2015年01月 (6) 2014年12月 (10) 2014年11月 (10) 2014年10月 (7) 2014年09月 (5) 2014年08月 (18) 2014年07月 (1) 2014年06月 (1) 2014年05月 (1) 2014年04月 (2) 2014年03月 (10) 阅读排行 支付平台风控系统架构模型设计 (2461) 监控平台架构设计 (1547) Java多线程的调度策略 (1446) 乐观的并发策略——基于CAS的自旋 (1372) tomcat如何避免遭遇ClassNotFoundException (1274) 支付平台PCI认证整改 (1222) 悲观的并发策略——Synchronized互斥锁 (1217) 多线程之Java线程阻塞与唤醒 (1191) 系统支付金额效能监控设计 (1104) 动态令牌认证 (1082) 评论排行 tomcat会话之持久化会话管理器 (3) 集群增量会话管理器——DeltaManager (3) Tomcat的管道 (3) 支付平台风控系统架构模型设计 (2) socket系列之客户端socket——Socket类 (2) 设计一个中间件的访问日志组件 (2) 集群通信组件tribes之使用方法 (2) 从单机到集群会话的管理之集群模式一 (2) 集群通信组件tribes之应用程序处理入口 (2) 管道模式——pipeline与valve (1) 最新评论 Tomcat的管道 JackieLiuLixi : 不错，非常不错，谢谢 连接器与容器的桥梁——CoyoteAdapter CXBY1187819603 : 一般般 NIO模式例子 u013047005 : NIO模式主要优势是体现在对多连接的管理，对众多连接各种事件的转发让处理变得更加高效，所以一般是服务... NIO模式例子 u013047005 : NIO模式主要优势是体现在对多连接的管理，对众多连接各种事件的转发让处理变得更加高效，所以一般是服务... 从单机到集群会话的管理之集群模式一 wangyangzhizhou : @u010786678:一起�

Recno:: 85
URL:: http://blog.csdn.net/wangyangzhizhou/article/details/50132933

ParseText::
一张图解释NIO原理 - wangyangzhizhou的专栏 - 博客频道 - CSDN.NET wangyangzhizhou的专栏 追求思想自由，追求技术自由，追求研究自由 目录视图 摘要视图 订阅 学院APP首次下载，可得50C币！     欢迎来帮助开源“进步”     当讲师？爱学习？投票攒课吧     认识Atlassian Datacenter产品     深圳小伙伴的福利来啦 [置顶] 一张图解释NIO原理 标签： nio java 应用层 JVM层 操作系统 2015-12-01 18:07 943人阅读 评论 (0) 收藏 举报 分类： JAVA （71） 作者同类文章 X 版权声明：本文为博主原创文章，未经博主允许不得转载。 上一篇 集群RPC通信 下一篇 NIO模式例子 顶 0 踩 0 我的同类文章 JAVA （71） http://blog.csdn.net 猜你在找 查看评论 * 以上用户言论只代表其个人观点，不代表CSDN网站的观点或立场 作者 笔名：seaboat 汪洋之舟 微信： 个人资料 wangyangzhizhou 访问： 103402次 积分： 2516 等级： 积分：2516 排名： 第8399名 原创： 117篇 转载： 5篇 译文： 0篇 评论： 46条 文章搜索 博客专栏 集群 文章：15篇 阅读：9285 tomcat内核 文章：48篇 阅读：32183 Java并发 文章：18篇 阅读：17190 java开源研究 文章：32篇 阅读：28841 文章分类 阿里技术 (0) 杂 (1) 英语 (0) 资讯 (0) J2EE (3) 标准 (1) 安全 (5) JAVA (71) 架构模型 (8) 设计 (3) tomcat内核 (52) 设计模式 (1) 支付 (3) 算法 (1) 阿汪梦中入侵故事 (2) 协议 (5) 多线程&并发 (22) JVM (9) 软件设计 (2) web中间件 (2) 集群 (4) 中间件 (1) tomcat (1) 文章存档 2015年12月 (5) 2015年11月 (2) 2015年10月 (3) 2015年09月 (6) 2015年08月 (6) 2015年07月 (4) 2015年06月 (4) 2015年05月 (5) 2015年04月 (4) 2015年03月 (6) 2015年02月 (6) 2015年01月 (6) 2014年12月 (10) 2014年11月 (10) 2014年10月 (7) 2014年09月 (5) 2014年08月 (18) 2014年07月 (1) 2014年06月 (1) 2014年05月 (1) 2014年04月 (2) 2014年03月 (10) 阅读排行 支付平台风控系统架构模型设计 (2461) 监控平台架构设计 (1547) Java多线程的调度策略 (1446) 乐观的并发策略——基于CAS的自旋 (1372) tomcat如何避免遭遇ClassNotFoundException (1274) 支付平台PCI认证整改 (1222) 悲观的并发策略——Synchronized互斥锁 (1217) 多线程之Java线程阻塞与唤醒 (1191) 系统支付金额效能监控设计 (1104) 动态令牌认证 (1082) 评论排行 tomcat会话之持久化会话管理器 (3) 集群增量会话管理器——DeltaManager (3) Tomcat的管道 (3) 支付平台风控系统架构模型设计 (2) socket系列之客户端socket——Socket类 (2) 设计一个中间件的访问日志组件 (2) 集群通信组件tribes之使用方法 (2) 从单机到集群会话的管理之集群模式一 (2) 集群通信组件tribes之应用程序处理入口 (2) 管道模式——pipeline与valve (1) 最新评论 Tomcat的管道 JackieLiuLixi : 不错，非常不错，谢谢 连接器与容器的桥梁——CoyoteAdapter CXBY1187819603 : 一般般 NIO模式例子 u013047005 : NIO模式主要优势是体现在对多连接的管理，对众多连接各种事件的转发让处理变得更加高效，所以一般是服务... NIO模式例子 u013047005 : NIO模式主要优势是体现在对多连接的管理，对众多连接各种事件的转发让处理变得更加高效，所以一般是服务... 从单机到集群会话的管理之集群模式一 wangyangzhizhou : @u010786678:一起进步 从单机到集群会话的管理之集群模式一 u010786678 : 谢谢小伙伴的分享，学习了 支付平台风控系统架构模型设计 wangyangzhizhou : @rainbowmiaoyun:黑名单是已经确认了的list，但假如这个黑名单已经合法了是可以从黑名... 支付平台风控系统架构模型设计 rainbowmiaoyun : 很有用处，但是我想了解一下，黑名单和白名单的区别在哪里？黑名单应该是做排除，那么黑名单那块能否处理成... 集群增量会话管理器——DeltaManager wangdan199112 : 没用过，学习啦！ 管道模式——pipeline与valve zhanghongjie0302 : 多谢楼主的分享！

Recno:: 86
URL:: http://blog.csdn.net/wangyangzhizhou/article/details/50205291

ParseText::
非阻塞IO模式原理 - wangyangzhizhou的专栏 - 博客频道 - CSDN.NET wangyangzhizhou的专栏 追求思想自由，追求技术自由，追求研究自由 目录视图 摘要视图 订阅 学院APP首次下载，可得50C币！     欢迎来帮助开源“进步”     当讲师？爱学习？投票攒课吧     认识Atlassian Datacenter产品     深圳小伙伴的福利来啦 [置顶] 非阻塞IO模式原理 标签： java nio 原理 socket channel 2015-12-07 14:32 745人阅读 评论 (0) 收藏 举报 分类： JAVA （71） 作者同类文章 X 版权声明：本文为博主原创文章，未经博主允许不得转载。 与阻塞模式对应的另一种模式叫非阻塞 IO 模式，在整个通信过程中读和写操作不会阻塞，当前处理线程不存在阻塞情况。从 A 机器到 B 机器它的通信过程是： A 机器一条线程将通道设置为写事件后往下执行，而另外一条线程遍历到此通道有字节要写并往 socket 写数据， B 机器一条线程遍历到此通道有字节要读，交给另外一条线程对 socket 读数据，处理完又把通道设置为写事件，遍历线程遍历到此通道有字节要写，又往 socket 写数据传往 A 机器，不断往下循环此操作直到完成通信。这个过程每台机器都有两类主要线程，一类是负责逻辑处理且将通道改为可写或可读事件的线程，另外一类是专门用于遍历通道并负责 socket 读写的线程，这种方式就是非阻塞 IO 模式。 在阻塞 IO 模式中，存在一个服务端套接字 ServerSocket 用于接收客户端连进来的 Socket ，而不管是阻塞还是非阻塞 IO 最终都需要获取 socket 才能进行读写操作，与阻塞模式对应，非阻塞模式用于接收客户端 socket 的对象是 ServerSocketChannel ，另外，阻塞模式直接使用 Socket 对象进行读写操作，而非阻塞模式则使用 SocketChannel 对象进行读写操作，但 SocketChannel 本质上最终也是通过 Socket 读取与写入，只是读取或写入时引入了缓冲区概念。最后，还有一个很重要的对象是选择器 Selector ，它提供对所有 channel 各种感兴趣事件的筛选功能，即哪些通道需要怎样的处理通过它选择出来的。 往下说说非阻塞模式实现的原理，如下图， ServerSocketChannel 调用 open() 方法初始化封装在里面的 socket 服务并将 ServerSocketChannel 以 OP_ACCEPT 事件注册到 Selector 中，而操作系统则创建 socket 底层数据结构并监听客户端 socket 连接，对于客户端连接操作系统会统一放到一个队列中进行维护。接着是很重要的应用层轮询操作，不断执行 Selector 检索出感兴趣的事件，假如刚好有三个客户端 socket 连进来， Selector 选择出三个 OP_ACCEPT 事件，调用 ServerSocketChannel.accept() 接收三个客户端通道 SocketChannel 对象，再将这三个客户端通道以 OP_READ 、 OP_WRITE 注册到 Selector 中以便后面进行读写操作，往下如果 Selector 遍历出 OP_READ 或 OP_WRITE 事件则可以对对应的 channel 进行读写操作了。   Selector 在其中扮演最重要的角色，看看它是如何完成感兴趣的事件的筛选的。如上图，中间 Selector 便是它的大体结构，维护了 registeredKeys 、 selectedKeys 、 cancelledKeys 三个集合，还有一张 channel 与 Key 对应关系的表，而 Key 则包含了感兴趣事件集 interestOps 和已准备好的事件集 readyOps 。其中 registeredKeys 存放注册到 Selector 的所有 key ，而 selectedKeys 即是被选中的 key ，它是检测到 registeredKeys 中 key 感兴趣的事件发生后存放 key 的地方， cancelledKeys 则是已经调用了 cancel() 方法待反注册的 key 。当应用层中 Selector 不断调用 select() 方法时，会先根据 cancelledKeys 去删除 registeredKeys 和 selectedKeys 对应的 key 以至取消对应的 key ，然后间接调用操作系统去做操作系统级别的 select ，一旦有 registeredKeys 感兴趣的事件则将对应事件的 key 添加到 selectedKeys 中，如 selectedKeys 已存在 key 了则将事件添加到 key 中的已准备好的事件集 readyOps 中。经过此番操作，当应用层调用 Selector 的 selectedKeys() 则取到被选中的 key 集，进而可以获取到感兴趣事件对应的 channel ，根据事件对 channel 进行操作。     理解了非阻塞 IO 模式的原理有助于在实际场景中对网络 IO 的模式选型，一般在同时需要处理多个连接的高并发场景中会使用非阻塞 NIO 模式，它通过一个或少量线程去维护连接，而把具体的读写和逻辑处理交由其他线程处理，大大提高了机器的使用率，压榨机器 CPU 。而如果使用阻塞 IO 模式则可能线程都阻塞在 IO 而导致机器使用率较低。 对java感兴趣的同学可以交流下： 上一篇 NIO模式例子 下一篇 tomcat生产部署关键参数设置 顶 1 踩 0 我的同类文章 JAVA （71） http://blog.csdn.net 猜你在找 查看评论 * 以上用户言论只代表其个人观点，不代表CSDN网站的观点或立场 作者 笔名：seaboat 汪洋之舟 微信： 个人资料 wangyangzhizhou 访问： 103410次 积分： 2516 等级： 积分：2516 排名： 第8399名 原创： 117篇 转载： 5篇 译文： 0篇 评论： 46条 文章搜索 博客专栏 集群 文章：15篇 阅读：9285 tomcat内核 文章：48篇 阅读：32183 Java并发 文章：18篇 阅读：17190 java开源研究 文章：32篇 阅读：28841 文章分类 阿里技术 (0) 杂 (1) 英语 (0) 资讯 (0) J2EE (3) 标准 (1) 安全 (5) JAVA (71) 架构模型 (8) 设计 (3) tomcat内核 (52) 设计模式 (1) 支付 (3) 算法 (1) 阿汪梦中入侵故事 (2) 协议 (5) 多线程&并发 (22) JVM (9) 软件设计 (2) web中间件 (2) 集群 (4) 中间件 (1) tomcat (1) 文章存档 2015年12月 (5) 2015年11月 (2) 2015年10月 (3) 2015年09月 (6) 2015年08月 (6) 2015年07月 (4) 2015年06月 (4) 2015年05月 (5) 2015年04月 (4) 2015年03月 (6) 2015年02月 (6) 2015年01月 (6) 2014年12月 (10) 2014年11月 (10) 2014年10月 (7) 2014年09月 (5) 2014年08月 (18) 2014年07月 (1) 2014年06月 (1) 2014年05月 (1) 2014年04月 (2) 2014年03月 (10) 阅读排行 支付平台风控系统架构模型设计 (2461) 监控平台架构设计 (1547) Java多线程的调度策略 (1446) 乐观的并发策略——基于CAS的自旋 (1372) tomcat如何避免遭遇ClassNotFoundException (1274) 支付平台PCI认证整改 (1222) 悲观的并发策略——Synchronized互斥锁 (1217) 多线程之Java线程阻塞与唤醒 (1191) 系统支付金额效能监控设计 (1104) 动态令牌认证 (1082) 评论排行 tomcat会话之持久化会话管理器 (3) 集群增量会话管理器——DeltaManager (3) Tomcat的管道 (3) 支付平台风控系统架构模型设计 (2) socket系列之客户端socket——Socket类 (2) 设计一个中间件的访问日志组件 (2) 集群通信组件tribes之使用方法 (2) 从单机到集群会话的管理之集群模式一 (2) 集群通信组件tribes之应用程序处理入口 (2) 管道模式——pipeline与valve (1) 最新评论 Tomcat的管道 JackieLiuLixi : 不错，非常不错，谢谢 连接器与容器的桥梁——CoyoteAdapter CXBY1187819603 : 一般般 NIO模式例子 u013047005 : NIO模式主要优势是体现在对多连接的管理，对众多连接各种事件的转发让处理变得更加高效，所以一般是服务... NIO模式例子 u013047005 : NIO模式主要优势是体现在对多连接的管理，对众多连接各种事件的转发让处理变得更加高效，所以一般是服务... 从单机到集群会话的管理之集群模式一 wangyangzhizhou : @u010786678:一起进步 从单机到集群会话的管理之集群模式一 u010786678 : 谢谢小伙伴的分享，学习了 支付平台风控系统架构模型设计 wangyangzhizhou : @rainbowmiaoyun:黑名单是已经确认了的list，但假如这个黑名单已经合法了是可以从黑名... 支付平台风控系统架构模型设计 rainbowmiaoyun : 很有用处，但是我想了解一下，黑名单和白名单的区别在哪里？黑名单应该是做排除，那么黑名单那块能否处理成... 集群增量会话管理器——DeltaManager wangdan199112 : 没用过，学习啦！ 管道模式——pipeline与valve zhanghongjie0302 : 多谢楼主的分享！

Recno:: 87
URL:: http://blog.csdn.net/wangyangzhizhou/article/details/50359012

ParseText::
tomcat生产部署关键参数设置 - wangyangzhizhou的专栏 - 博客频道 - CSDN.NET wangyangzhizhou的专栏 追求思想自由，追求技术自由，追求研究自由 目录视图 摘要视图 订阅 学院APP首次下载，可得50C币！     欢迎来帮助开源“进步”     当讲师？爱学习？投票攒课吧     认识Atlassian Datacenter产品     深圳小伙伴的福利来啦 [置顶] tomcat生产部署关键参数设置 2015-12-19 17:27 600人阅读 评论 (0) 收藏 举报 分类： JAVA （71） 作者同类文章 X tomcat 版权声明：本文为博主原创文章，未经博主允许不得转载。 JVM 设置 l  一般使用 HotSpot JVM 。 l  加上 -server 。 l  -Xms/-Xmx ：设置 java 堆初始化和最大值，默认是 1/64 物理内存和 1/4 物理内存，一般不超过物理内存的 80% ，且这两个应该设置成一样，，够用就好，太高会导致浪费内存和 GC 回收周期长。 l  -XX:NewSize/-XX:NewRatio ：设置成 25%-33%java 堆总量，太高太低都会导致无效 GC 。 l  -XX:PermSize/-XX:MaxPermSize ：非堆内内存初始值最大值分别设为 128M ， 256M 。 l  -XX:+AggressiveOpts ：使用最新优化技术。 l  参考 oracle 官网 http://www.oracle.com/technetwork/java/javase/tech/vmoptions-jsp-140102.html ，还有其他参数可根据实际配置。 集群设置 四层七层：四层不认识 http 协议，只按照客户端 ip 和 port 分配流量，但性能好；七层认识 http 协议，可用 http 某些头部分配流量，由于需要计算，性能相当差。   连接池：负载均衡器到 tomcat 的连接数，一般小于等于 tomcat 集群节点处理连接能力之和。例如集群有 4 个节点，每个 tomcat 预计处理 500 个链接，那么连接池的长连接数最大设为 2000 。   全节点复制（ DeltaManager ）模式集群节点数 3-6 为宜。 主备复制（ BackupMnagager ）模式集群节点可到 10 台以上。 Connector 设置 一共有三种模式： ① JAVA BIO ，阻塞模式，最原始最稳定， SSL 基于 JSSE ，同时也是 tomcat7 之前默认模式，它支持较小的并发处理。高并发但是短链接它也为首选。 BIO 模式下有一个非常重要的参数， maxThreads ，表示最大的同时处理请求数，一般范围为 200-800 ，可以从 400 开始设置，如果是 CPU 密集型的应用可以减少，如果是非 CPU 密集型的应用可以增加。   ② JAVA NIO ，非阻塞模式， SSL 基于 JSSE ，连接的接收、读写都由专门的线程负责，是 tomcat8 后默认模式，它支持大并发多链接处理。高并发长连接首选。   ③ Native APR, 非阻塞模式，它是为了提高性能而使用本地代码的一种模式，它由 C++ 编写， SSL 是基于 OpenSSL 。它支持更大并发更多链接处理。   一般只在 JAVA BIO 与 JAVA NIO 之间切换，他们之间方便切换 SSL ，因为实现都基于 JSSE ，并且 Native APR 有可能在某些机器上不稳定。     上一篇 非阻塞IO模式原理 下一篇 如何让你的传输更安全——NIO模式和BIO模式实现SSL协议通信 顶 0 踩 0 我的同类文章 JAVA （71） http://blog.csdn.net 猜你在找 查看评论 * 以上用户言论只代表其个人观点，不代表CSDN网站的观点或立场 作者 笔名：seaboat 汪洋之舟 微信： 个人资料 wangyangzhizhou 访问： 103405次 积分： 2516 等级： 积分：2516 排名： 第8399名 原创： 117篇 转载： 5篇 译文： 0篇 评论： 46条 文章搜索 博客专栏 集群 文章：15篇 阅读：9285 tomcat内核 文章：48篇 阅读：32183 Java并发 文章：18篇 阅读：17190 java开源研究 文章：32篇 阅读：28841 文章分类 阿里技术 (0) 杂 (1) 英语 (0) 资讯 (0) J2EE (3) 标准 (1) 安全 (5) JAVA (71) 架构模型 (8) 设计 (3) tomcat内核 (52) 设计模式 (1) 支付 (3) 算法 (1) 阿汪梦中入侵故事 (2) 协议 (5) 多线程&并发 (22) JVM (9) 软件设计 (2) web中间件 (2) 集群 (4) 中间件 (1) tomcat (1) 文章存档 2015年12月 (5) 2015年11月 (2) 2015年10月 (3) 2015年09月 (6) 2015年08月 (6) 2015年07月 (4) 2015年06月 (4) 2015年05月 (5) 2015年04月 (4) 2015年03月 (6) 2015年02月 (6) 2015年01月 (6) 2014年12月 (10) 2014年11月 (10) 2014年10月 (7) 2014年09月 (5) 2014年08月 (18) 2014年07月 (1) 2014年06月 (1) 2014年05月 (1) 2014年04月 (2) 2014年03月 (10) 阅读排行 支付平台风控系统架构模型设计 (2461) 监控平台架构设计 (1547) Java多线程的调度策略 (1446) 乐观的并发策略——基于CAS的自旋 (1372) tomcat如何避免遭遇ClassNotFoundException (1274) 支付平台PCI认证整改 (1222) 悲观的并发策略——Synchronized互斥锁 (1217) 多线程之Java线程阻塞与唤醒 (1191) 系统支付金额效能监控设计 (1104) 动态令牌认证 (1082) 评论排行 tomcat会话之持久化会话管理器 (3) 集群增量会话管理器——DeltaManager (3) Tomcat的管道 (3) 支付平台风控系统架构模型设计 (2) socket系列之客户端socket——Socket类 (2) 设计一个中间件的访问日志组件 (2) 集群通信组件tribes之使用方法 (2) 从单机到集群会话的管理之集群模式一 (2) 集群通信组件tribes之应用程序处理入口 (2) 管道模式——pipeline与valve (1) 最新评论 Tomcat的管道 JackieLiuLixi : 不错，非常不错，谢谢 连接器与容器的桥梁——CoyoteAdapter CXBY1187819603 : 一般般 NIO模式例子 u013047005 : NIO模式主要优势是体现在对多连接的管理，对众多连接各种事件的转发让处理变得更加高效，所以一般是服务... NIO模式例子 u013047005 : NIO模式主要优势是体现在对多连接的管理，对众多连接各种事件的转发让处理变得更加高效，所以一般是服务... 从单机到集群会话的管理之集群模式一 wangyangzhizhou : @u010786678:一起进步 从单机到集群会话的管理之集群模式一 u010786678 : 谢谢小伙伴的分享，学习了 支付平台风控系统架构模型设计 wangyangzhizhou : @rainbowmiaoyun:黑名单是已经确认了的list，但假如这个黑名单已经合法了是可以从黑名... 支付平台风控系统架构模型设计 rainbowmiaoyun : 很有用处，但是我想了解一下，黑名单和白名单的区别在哪里？黑名单应该是做排除，那么黑名单那块能否处理成... 集群增量会话管理器——DeltaManager wangdan199112 : 没用过，学习啦！ 管道模式——pipeline与valve zhanghongjie0302 : 多谢楼主的分享！

Recno:: 88
URL:: http://blog.csdn.net/wangyangzhizhou/article/details/50377638

ParseText::
如何让你的传输更安全——NIO模式和BIO模式实现SSL协议通信 - wangyangzhizhou的专栏 - 博客频道 - CSDN.NET wangyangzhizhou的专栏 追求思想自由，追求技术自由，追求研究自由 目录视图 摘要视图 订阅 学院APP首次下载，可得50C币！     欢迎来帮助开源“进步”     当讲师？爱学习？投票攒课吧     认识Atlassian Datacenter产品     深圳小伙伴的福利来啦 [置顶] 如何让你的传输更安全——NIO模式和BIO模式实现SSL协议通信 标签： java nio bio ssl 安全传输 2015-12-22 09:22 427人阅读 评论 (0) 收藏 举报 分类： JAVA （71） 作者同类文章 X 版权声明：本文为博主原创文章，未经博主允许不得转载。 对于SSL/TLS协议，如果要每个开发者都自己去实现显然会带来不必要的麻烦，正是为了解决这个问题Java为广大开发者提供了Java安全套接字扩展——JSSE，它包含了实现Internet安全通信的一系列包的集合，是SSL和TLS的纯Java实现，同时它是一个开放的标准，每个公司都可以自己实现JSSE，通过它可以透明地提供数据加密、服务器认证、信息完整性等功能，就像使用普通的套接字一样使用安全套接字，大大减轻了开发者的负担，使开发者可以很轻松将SSL协议整合到程序中，并且JSSE能将安全隐患降到了最低点。 在用JSSE实现SSL通信过程中主要会遇到以下类和接口，由于过程中涉及到加解密、密钥生成等运算的框架和实现，所以也会间接用到JCE包的一些类。如图为JSSE接口的主要类图：    JSSE API主要类图   ① 通信核心类——SSLSocket和SSLServerSocket。对于使用过socket进行通信开发的朋友比较好理解，它们对应的就是Socket与ServerSocket，只是表示实现了SSL协议的Socket和ServerSocket，同时它们也是Socket与ServerSocket的子类。SSLSocket负责的事情包括设置加密套件、管理SSL会话、处理握手结束时间、设置客户端模式或服务器模式。 ② 客户端与服务器端Socket工厂——SSLSocketFactory和SSLServerSocketFactory。在设计模式中工厂模式是专门用于生产出需要的实例，这里也是把SSLSocket、SSLServerSocket对象创建的工作交给这两个工厂类。 ③ SSL会话——SSLSession。安全通信握手过程需要一个会话，为了提高通信的效率，SSL协议允许多个SSLSocket共享同一个SSL会话，在同一个会话中，只有第一个打开的SSLSocket需要进行SSL握手，负责生成密钥及交换密钥，其余SSLSocket都共享密钥信息。 ④ SSL上下文——SSLContext。它是对整个SSL/TLS协议的封装，表示了安全套接字协议的实现。主要负责设置安全通信过程中的各种信息，例如跟证书相关的信息。并且负责构建SSLSocketFactory、SSLServerSocketFactory和SSLEngine等工厂类。 ⑤ SSL非阻塞引擎——SSLEngine。假如你要进行NIO通信，那么将使用这个类，它让通过过程支持非阻塞的安全通信。 ⑥ 密钥管理器——KeyManager。此接口负责选择用于证实自己身份的安全证书，发给通信另一方。KeyManager对象由KeyManagerFactory工厂类生成。 ⑦ 信任管理器——TrustManager。此接口负责判断决定是否信任对方的安全证书，TrustManager对象由TrustManagerFactory工厂类生成。 ⑧ 密钥证书存储设施——KeyStore。这个对象用于存放安全证书，安全证书一般以文件形式存放，KeyStore负责将证书加载到内存。 通过上面这些类就可以完成SSL协议的安全通信了，在利用SSL/TLS进行安全通信时，客户端跟服务器端都必须要支持SSL/TLS协议，不然将无法进行通信。而且客户端和服务器端都可能要设置用于证实自己身份的安全证书，并且还要设置信任对方的哪些安全证书。 关于身份认证方面有个名词叫客户端模式，一般情况客户端要对服务器端的身份进行验证，但是无需向服务器证实自己的身份，这样不用向对方证实自己身份的通信端我们就说它处于客户模式，否则成它处于服务器模式。SSLSocket的setUseClientMode(Boolean mode)方法可以设置客户端模式或服务器模式。 BIO 模式实现 SSL 通信 使用BIO模式实现SSL通信除了对一些证书密钥生成外，只需使用JDK自带的SSLServerSocket和SSLSocket等相关类的API即可实现，简洁直观。 ① 解决证书问题。 一般而言作为服务器端必须要有证书以证明这个服务器的身份，并且证书应该描述此服务器所有者的一些基本信息，例如公司名称、联系人名等。证书由所有人以密码形式签名，基本不可伪造，证书获取的途径有两个：一是从权威机构购买证书，权威机构担保它发出的证书的真实性，而且这个权威机构被大家所信任，进而你可以相信这个证书的有效性；另外一个是自己用JDK提供的工具keytool创建一个自我签名的证书，这种情况下一般是我只想要保证数据的安全性与完整性，避免数据在传送的过程中被窃听或篡改，此时身份的认证已不重要，重点已经在端与端传输的秘密性上，证书的作用只体现在加解密签名。 另外，关于证书的一些概念在这里陈述，一个证书是一个实体的数字签名，这个实体可以是一个人、一个组织、一个程序、一个公司、一个银行，同时证书还包含这个实体的公共钥匙，此公共钥匙是这个实体的数字关联，让所有想同这个实体发生信任关系的其他实体用来检验签名。而这个实体的数字签名是实体信息用实体的私钥加密后的数据，这条数据可以用这个实体的公共钥匙解密，进而鉴别实体的身份。这里用到的核心算法是非对称加密算法。 SSL协议通信涉及密钥储存的文件格式比较多，很容易搞混，例如xxx.cer、xxx.pfx、xxx.jks、xxx.keystore、xxx.truststore等格式文件。如图，搞清楚他们有助于理解后面的程序，.cer格式文件俗称证书，但这个证书中没有私钥，只包含了公钥；.pfx格式文件也称为证书，它一般供浏览器使用，而且它不仅包含了公钥，还包含了私钥，当然这个私钥是加密的，不输入密码是解不了密的；.jks格式文件表示java密钥存储器（java key store），它可以同时容纳N个公钥跟私钥，是一个密钥库；.keystore格式文件其实跟.jks基本是一样的，只是不同公司叫法不太一样，默认生成的证书存储库格式；.truststore格式文件表示信任证书存储库，它仅仅包含了通信对方的公钥，当然你可以直接把通信对方的jks作为信任库（就算如此你也只能知道通信对方的公钥，要知道密钥都是加密的，你无从获取，只要算法不被破解）。有些时候我们需要把pfx或cert转化为jks以便于用java进行ssl通信，例如一个银行只提供了pfx证书，而我们想用java进行ssl通信时就要将pfx转化为jks格式。   密钥存储文件格式   按照理论上，我们一共需要准备四个文件，两个keystore文件和两个truststore文件，通信双方分别拥有一个keystore和一个truststore，keystore用于存放自己的密钥和公钥，truststore用于存放所有需要信任方的公钥。这里为了方便直接使用jks即keystore替代truststore（免去证书导来导去），因为对方的keystore包含了自己需要的信任公钥。 下面使用jdk自带的工具分别生成服务器端证书，通过如下命令并输入姓名、组织单位名称、组织名称、城市、省份、国家信息即可生成证书密码为tomcat的证书，此证书存放在密码也为tomcat的tomcat.jks证书存储库中。如果你继续创建证书将继续往tomcat.jks证书存储库中添加证书。如果你仅仅输入keytool -genkey -alias tomcat -keyalg RSA -keypass tomcat -storepass tomcat，不指定证书存储库的文件名及路径，则工具会在用户的home directory目录下生产一个“.keystore”文件作为证书存储库。       类似的，客户端证书也用此方式进行生成。如下   ② 服务端TomcatSSLServer.java public class TomcatSSLServer { private static final String SSL_TYPE = "SSL"; private static final String KS_TYPE = "JKS"; private static final String X509 = "SunX509"; private final static int PORT = 443; private static TomcatSSLServer sslServer; private SSLServerSocket svrSocket; public static TomcatSSLServer getInstance() throws Exception { if (sslServer == null) { sslServer = new TomcatSSLServer(); } return sslServer; } private TomcatSSLServer() throws Exception{ SSLContext sslContext = createSSLContext(); SSLServerSocketFactory serverFactory = sslContext.getServerSocketFactory(); svrSocket =(SSLServerSocket) serverFactory.createServerSocket(PORT); svrSocket.setNeedClientAuth(true);  String[] supported = svrSocket.getEnabledCipherSuites(); svrSocket.setEnabledCipherSuites(supported); } private SSLContext createSSLContext() throws Exception{ KeyManagerFactory kmf = KeyManagerFactory.getInstance(X509); TrustManagerFactory tmf = TrustManagerFactory.getInstance(X509); String serverKeyStoreFile = "c:\\tomcat.jks";  String svrPassphrase = "tomcat";                char[] svrPassword = svrPassphrase.toCharArray(); KeyStore serverKeyStore = KeyStore.getInstance(KS_TYPE); serverKeyStore.load(new FileInputStream(serverKeyStoreFile), svrPassword); kmf.init(serverKeyStore, svrPassword); String clientKeyStoreFile = "c:\\client.jks";  String cntPassphrase = "client";               char[] cntPassword = cntPassphrase.toCharArray(); KeyStore clientKeyStore = KeyStore.getInstance(KS_TYPE); clientKeyStore.load(new FileInputStream(clientKeyStoreFile),cntPassword); tmf.init(clientKeyStore); SSLContext sslContext  = SSLContext.getInstance(SSL_TYPE); sslContext.init(kmf.getKeyManagers(), tmf.getTrustManagers(), null); return sslContext; } public void startService() { SSLSocket cntSocket = null; BufferedReader ioReader = null; PrintWriter ioWriter = null; String tmpMsg = null; while( true ) { try { cntSocket =(SSLSocket) svrSocket.accept(); ioReader = new BufferedReader(new InputStreamReader(cntSocket.getInputStream())); ioWriter = new PrintWriter(cntSocket.getOutputStream()); while ( (tmpMsg = ioReader.readLine()) != null) { System.out.println("客户端通过SSL协议发送信息:"+tmpMsg); tmpMsg="欢迎通过SSL协议连接"; ioWriter.println(tmpMsg); ioWriter.flush(); } } catch(IOException e) { e.printStackTrace(); } finally { try { if(cntSocket != null) cntSocket.close(); } catch(Exception ex) {ex.printStackTrace();} } } } public static void main(String[] args) throws Exception { TomcatSSLServer.getInstance().startService(); } } 基本顺序是先得到一个SSLContext实例，再对SSLContext实例进行初始化，密钥管理器及信任管理器作为参数传入，证书管理器及信任管理器按照指定的密钥存储器路径和密码进行加载。接着设置支持的加密套件，最后让SSLServerSocket开始监听客户端发送过来的消息。   ③ 客户端TomcatSSLClient.java public class TomcatSSLClient { private static final String SSL_TYPE = "SSL"; private static final String X509 = "SunX509"; private static final String KS_TYPE = "JKS"; private SSLSocket sslSocket; public TomcatSSLClient(String targetHost,int port) throws Exception { SSLContext sslContext = createSSLContext();  SSLSocketFactory sslcntFactory =(SSLSocketFactory) sslContext.getSocketFactory(); sslSocket = (SSLSocket) sslcntFactory.createSocket(targetHost, port); String[] supported = sslSocket.getSupportedCipherSuites(); sslSocket.setEnabledCipherSuites(supported);  } private SSLContext createSSLContext() throws Exception{ KeyManagerFactory kmf = KeyManagerFactory.getInstance(X509); TrustManagerFactory tmf = TrustManagerFactory.getInstance(X509); String clientKeyStoreFile = "c:\\client.jks"; String cntPassphrase = "client"; char[] cntPassword = cntPassphrase.toCharArray(); KeyStore clientKeyStore = KeyStore.getInstance(KS_TYPE); clientKeyStore.load(new FileInputStream(clientKeyStoreFile),cntPassword); String serverKeyStoreFile = "c:\\tomcat.jks"; String svrPassphrase = "tomcat"; char[] svrPassword = svrPassphrase.toCharArray(); KeyStore serverKeyStore = KeyStore.getInstance(KS_TYPE); serverKeyStore.load(new FileInputStream(serverKeyStoreFile), svrPassword); kmf.init(clientKeyStore, cntPassword); tmf.init(serverKeyStore); SSLContext sslContext  = SSLContext.getInstance(SSL_TYPE); sslContext.init(kmf.getKeyManagers(), tmf.getTrustManagers(), null); return sslContext; } public String sayToSvr(String sayMsg) throws IOException{ BufferedReader ioReader = new BufferedReader(new InputStreamReader( sslSocket.getInputStream())); PrintWriter ioWriter = new PrintWriter(sslSocket.getOutputStream()); ioWriter.println(sayMsg); ioWriter.flush(); return ioReader.readLine(); } public static void main(String[] args) throws Exception { TomcatSSLClient sslSocket = new TomcatSSLClient("127.0.0.1",443); BufferedReader ioReader = new BufferedReader(new InputStreamReader(System.in)); String sayMsg = ""; String svrRespMsg= ""; while( (sayMsg = ioReader.readLine())!= null ) { svrRespMsg = sslSocket.sayToSvr(sayMsg); if(svrRespMsg != null && !svrRespMsg.trim().equals("")) { System.out.println("服务器通过SSL协议响应:"+svrRespMsg); } } } } 客户端的前面操作基本跟服务器端的一样，先创建一个SSLContext实例，再用密钥管理器及信任管理器对SSLContext进行初始化，当然这里密钥存储的路径是指向客户端的client.jks。接着设置加密套件，最后使用SSLSocket进行通信。 注意服务器端有行代码svrSocket.setNeedClientAuth(true);它是非常重要的一个设置方法，用于设置是否验证客户端的身份。假如我们把它注释掉或设置为false，此时客户端将不再需要自己的密钥管理器，即服务器不需要通过client.jks对客户端的身份进行验证，把密钥管理器直接设置为null也可以跟服务器端进行通信。 最后谈谈信任管理器，它的职责是决定是否信任远端的证书，那么它凭借什么去判断呢？如果不显式设置信任存储器的文件路径，将遵循如下规则：①如果系统属性javax.net.ssl.truststore指定了truststore文件，那么信任管理器将去jre路径下的lib/security目录寻找这个文件作为信任存储器；②如果没设置①中的系统属性，则去寻找一个%java_home%/lib/security/jssecacerts文件作为信任存储器；③如果jssecacerts不存在而cacerts存在，则cacerts作为信任存储器。 至此，一个利用JSSE实现BIO模式的SSL协议通信的例子已完成。 NIO 模式实现 SSL 通信     在 jdk1.5 之前，由于互联网还没快速发展起来，对于常见的应用使用 BIO 模式即可满足需求，而这时 jdk 的 JSSE 接口也仅仅只是提供了基于流的安全套接字，但随着网络的发展， BIO 模型明显已经不足以满足一些高并发多连接接入的场景，体现在机器上就是要不同的线程模型以至于能最大程度地压榨计算器的运算，于是此时引入了 NIO 模式，原来基于流的阻塞模式 IO 只需使用 SSLServerSocket 和 SSLSocket 即可完成 SSL 通信，而 JDK 中对于 NIO 模式并没有提供与之对应的“ SSLServerSocketChannel ”和“ SSLSocketChannel ”，这是由 NIO 模式决定的，很难设计一个“ SSLServerSocketChannel ”类与 Selector 交互，强行地引入将带来更多的问题，这更像解决一个问题引入了三个问题，并且还会导致 API 更加复杂，另外 Nio 细节也不适合屏蔽，它应该由应用开发层去控制。所有的这些都决定了 jdk 不会也不能有 NIO 安全套接字。     jdk1.5 为了支持 NIO 模式的 SSL 通信，引入了 SSLEngine 引擎，它负责了底层 ssl 协议的握手、加密、解密、关闭会话等等操作，根据前面 SSL\TLS 协议章节我们知道 SSL 协议在握手阶段会有十三个步骤，在握手过程中不会有应用层的数据传输，只有在握手认证完成后双方才会进行应用层数据交换。大致把握手分为四阶段，①客户端发送 hello 消息；②服务端响应 hello 消息且发送附带的认证消息；③客户端向客户端发送证书和其他认证消息；④完成握手。 SSLEngine 在握手过程中定义了五种 HandshakeStatus 状态，【 NEED_WRAP 、 NEED_UNWRAP 、 NEED_TASK 、 FINISHED 、 NOT_HANDSHAKING 】，通过他们实现协议通信过程中状态管理，按照四个阶段其中的状态是这样转换的，刚开始它的状态为 NEED_UNWRAP ，表示等待解包，读取客户端数据并解包后，把状态置为 NEED_WRAP ，表示等待打包，打包完向客户端响应数据后状态又重置为 NEED_UNWRAP ，如此切换直至握手完成时状态被置为 FINISHED ，表示握手已经完成，此后状态置为 NOT_HANDSHAKING ，表示已经不在握手阶段了。另外还有一个 NEED_TASK 状态表示 SSLEngine 有额外的任务需要执行，而且这些任务都是比较耗时或者可能阻塞的，例如访问密钥文件、连接远程证书认证服务、密钥管理器使用何种认证方式作为客户端认证等等操作。为了保证 NIO 特性，这些操作不能直接由当前线程操作，当前线程只会把状态改为 NEED_TASK ，后面处理线程会交由其他线程处理。 看看程序是如何使用 nio 模式进行 ssl 通信的，主要看服务端如何实现。 public class NioSSLServer { private SSLEngine sslEngine; private Selector selector; private SSLContext sslContext; private ByteBuffer netInData; private ByteBuffer appInData; private ByteBuffer netOutData; private ByteBuffer appOutData; private static final String SSL_TYPE = "SSL"; private static final String KS_TYPE = "JKS"; private static final String X509 = "SunX509"; private final static int PORT = 443; public void run() throws Exception { createServerSocket(); createSSLContext(); createSSLEngine(); createBuffer(); while (true) { selector.select(); Iterator<SelectionKey> it = selector.selectedKeys().iterator(); while (it.hasNext()) { SelectionKey selectionKey = it.next(); it.remove(); handleRequest(selectionKey); } } } private void createBuffer() { SSLSession session = sslEngine.getSession(); appInData = ByteBuffer.allocate(session.getApplicationBufferSize()); netInData = ByteBuffer.allocate(session.getPacketBufferSize()); appOutData = ByteBuffer.wrap("Hello\n".getBytes()); netOutData = ByteBuffer.allocate(session.getPacketBufferSize()); } private void createSSLEngine() { sslEngine = sslContext.createSSLEngine(); sslEngine.setUseClientMode(false); } private void createServerSocket() throws Exception { ServerSocketChannel serverChannel = ServerSocketChannel.open(); serverChannel.configureBlocking(false); selector = Selector.open(); ServerSocket serverSocket = serverChannel.socket(); serverSocket.bind(new InetSocketAddress(PORT)); serverChannel.register(selector, SelectionKey.OP_ACCEPT); } private void createSSLContext() throws Exception { KeyManagerFactory kmf = KeyManagerFactory.getInstance(X509); TrustManagerFactory tmf = TrustManagerFactory.getInstance(X509); String serverKeyStoreFile = "c:\\tomcat.jks"; String svrPassphrase = "tomcat"; char[] svrPassword = svrPassphrase.toCharArray(); KeyStore serverKeyStore = KeyStore.getInstance(KS_TYPE); serverKeyStore.load(new FileInputStream(serverKeyStoreFile),svrPassword); kmf.init(serverKeyStore, svrPassword); String clientKeyStoreFile = "c:\\client.jks"; String cntPassphrase = "client"; char[] cntPassword = cntPassphrase.toCharArray(); KeyStore clientKeyStore = KeyStore.getInstance(KS_TYPE); clientKeyStore.load(new FileInputStream(clientKeyStoreFile),cntPassword); tmf.init(clientKeyStore); sslContext = SSLContext.getInstance(SSL_TYPE); sslContext.init(kmf.getKeyManagers(), tmf.getTrustManagers(), null); } private void handleRequest(SelectionKey key) throws Exception { if (key.isAcceptable()) { ServerSocketChannel ssc = (ServerSocketChannel) key.channel(); SocketChannel channel = ssc.accept(); channel.configureBlocking(false); doHandShake(channel); } else if (key.isReadable()) { if (sslEngine.getHandshakeStatus() == HandshakeStatus.NOT_HANDSHAKING) { SocketChannel sc = (SocketChannel) key.channel(); netInData.clear(); appInData.clear(); sc.read(netInData); netInData.flip(); SSLEngineResult engineResult = sslEngine.unwrap(netInData,appInData); doTask(); if (engineResult.getStatus() == SSLEngineResult.Status.OK) { appInData.flip(); System.out.println(new String(appInData.array()));   } sc.register(selector, SelectionKey.OP_WRITE); } } else if (key.isWritable()) { SocketChannel sc = (SocketChannel) key.channel(); netOutData.clear(); SSLEngineResult engineResult = sslEngine.wrap(appOutData,netOutData); doTask(); netOutData.flip(); while (netOutData.hasRemaining()) sc.write(netOutData); sc.register(selector, SelectionKey.OP_READ); } } private void doHandShake(SocketChannel sc) throws IOException { boolean handshakeDone = false; sslEngine.beginHandshake(); HandshakeStatus hsStatus = sslEngine.getHandshakeStatus(); while (!handshakeDone) { switch (hsStatus) { case FINISHED: break; case NEED_TASK: hsStatus = doTask(); break; case NEED_UNWRAP: netInData.clear(); sc.read(netInData); netInData.flip(); do { SSLEngineResult engineResult = sslEngine.unwrap(netInData,appInData); hsStatus = doTask(); } while (hsStatus == SSLEngineResult.HandshakeStatus.NEED_UNWRAP && netInData.remaining() > 0); netInData.clear(); break; case NEED_WRAP: SSLEngineResult engineResult = sslEngine.wrap(appOutData,netOutData); hsStatus = doTask(); netOutData.flip(); sc.write(netOutData); netOutData.clear(); break; case NOT_HANDSHAKING: sc.configureBlocking(false); sc.register(selector, SelectionKey.OP_READ); handshakeDone = true; break; } } } private HandshakeStatus doTask() { Runnable task; while ((task = sslEngine.getDelegatedTask()) != null) { new Thread(task).start(); } return sslEngine.getHandshakeStatus(); } public static void main(String[] args) throws Exception { new NioSSLServer().run(); } } 根据程序大致说明程序过程，①创建用于非阻塞通信的主要对象 ServerSocketChannel 和 Selector 、绑定端口、注册接收事件；②创建 SSL 上下文，此过程主要是根据前面创建好的密钥存储器 tomcat.jks 和 client.jks 去创建密钥管理器和信任管理器，并通过密钥管理器和信任管理器去初始化 SSL 上下文；③创建 SSL 引擎，主要通过 SSL 上下文创建 SSL 引擎，并将它设为不验证客户端身份；④创建缓冲区，使用 SSL 协议通信的过程中涉及到四个缓冲区，如下图， netInData 表示实际从网络接收到的字节流，它是包含了 SSL 协议和应用数据的字节流，通过 SSLEngine 引擎进行认证解密等处理后的应用可直接使用的数据则用 appInData 表示，同样地，应用层要传递的数据为 appOutData ，而经过 SSLEngine 引擎认证加密处理后放到网络中传输的字节流则为 netOutData ；⑤接下去开始监听处理客户端的连接请求，一旦有可接受的连接则会先进行 SSL 协议握手，完成握手后才能进行传输，即对通道的读写操作。       握手操作是一个比较复杂的过程，必须要保证握手完成后才能进行应用层数据交换，所以这里使用一个 while 循环不断做握手操作直到完成。前面已经介绍了握手阶段会有五种状态，【 NEED_WRAP 、 NEED_UNWRAP 、 NEED_TASK 、 FINISHED 、 NOT_HANDSHAKING 】，由于 SSL 协议握手的报文都由 SSLEngine 引擎自动生成，所以我们只需对不同状态做不同操作即可，例如， NEED_UNWRAP 状态则调用 unwrap 方法， NEED_WRAP 则调用 wrap 方法， NEED_TASK 则使用其他线程处理委托任务，握手报文自动由这些方法完成，当握手完成后状态则被置为 FINISHED ，接着状态变为 NOT_HANDSHAKING ，表示已经不在握手阶段了，已经可以进行应用层通信了，此时整个 SSL 握手结束。     应用层安全通信过程其实也是靠 SSLEngine 引擎的 unwrap 和 wrap 方法对数据进行加解密并且对通信双方进行认证，例如应用层读操作是将 netInData 和 appInData 传入 unwrap 方法，处理后的 appInData 即为应用需要的数据，而写操作则是将 appOutData 和 netOutData 传入 wrap 方法，处理后的 netOutData 即为传输给对方的数据。     至此，通过在网络与应用直接增加一个 SSLEngine 引擎层，则实现了安全通信，并且使用了 NIO 模式让服务端拥有更加出色的处理性能。 上一篇 tomcat生产部署关键参数设置 顶 0 踩 0 我的同类文章 JAVA （71） http://blog.csdn.net 猜你在找 查看评论 * 以上用户言论只代表其个人观点，不代表CSDN网站的观点或立场 作者 笔名：seaboat 汪洋之舟 微信： 个人资料 wangyangzhizhou 访问： 103407次 积分： 2516 等级： 积分：2516 排名： 第8399名 原创： 117篇 转载： 5篇 译文： 0篇 评论： 46条 文章搜索 博客专栏 集群 文章：15篇 阅读：9285 tomcat内核 文章：48篇 阅读：32183

Recno:: 89
URL:: http://blog.csdn.net/woxueliuyun/article/details/40862233

ParseText::
JavaScript类继承实现之一 - 清箫的专栏 - 博客频道 - CSDN.NET 清箫的专栏 生命的可能,贵在自我实现;生命的欠缺,是努力的空间 目录视图 摘要视图 订阅 学院APP首次下载，可得50C币！     欢迎来帮助开源“进步”     当讲师？爱学习？投票攒课吧     认识Atlassian Datacenter产品     深圳小伙伴的福利来啦 [置顶] JavaScript类继承实现之一 2014-11-06 15:43 986人阅读 评论 (1) 收藏 举报 分类： 前端开发 （19） 作者同类文章 X javascipt （30） 作者同类文章 X 版权声明：本文为博主原创文章，未经博主允许不得转载。 JavaScript的类默认是通过原型对象继承： var Person = function() { this.name = "people"; this.hello = function() { console.log("hello user:" + this.name); } } var User = function() { this.name = "user"; this.hello = function() { User.prototype.hello.call(this, arguments); console.log("hello user:" + this.name); } } User.prototype = new Person(); new User().hello(); 有没有一种方法，能够让JavaScript的类像Java那样，通过一个super关键字即调用父类的方法，于是我这样扩展了Function： (function() { Function.prototype.extend = function(baseClass) { // this is a function object. var oldPrototype = this.prototype, newPrototype = {}, _super = new baseClass(); //inherits all properties and methods. for ( var name in _super) { newPrototype[name] = _super[name]; } for ( var name in oldPrototype) { // only override properties in this new Class. if (oldPrototype.hasOwnProperty(name)) { // only function need _super. if (typeof oldPrototype[name] == "function" && typeof _super[name] == "function") { newPrototype[name] = (function(name, fn) { return function() { var tmp = this._super; // set super method this._super = _super[name]; var ret = fn.apply(this, arguments); this._super = tmp; return ret; }; })(name, oldPrototype[name]); } else {                     newPrototype[name] = oldPrototype[name];                 } } } this.prototype = newPrototype; return this; }; })(); 测试代码 var A = function() { this.hello = function() { console.log("hello, I'm A"); } }; var B = function() {}; B.prototype = { hello : function() { this._super(); console.log("hello, I'm B"); } }; B.extend(A); var C = function() {}; C.prototype = { hello : function() { this._super(); console.log("hello, I'm C"); } }; C.extend(B); var b = new B(); var c = new C(); //b.hello(); c.hello(); 结果 hello, I'm A hello, I'm B hello, I'm C 上一篇 HTML图形字符集 下一篇 HTTP Cache如何计算Age 顶 1 踩 0 我的同类文章 前端开发 （19） javascipt （30） http://blog.csdn.net 猜你在找 查看评论 * 以上用户言论只代表其个人观点，不代表CSDN网站的观点或立场 个人资料 woxueliuyun 访问： 345057次 积分： 4894 等级： 积分：4894 排名： 第3063名 原创： 133篇 转载： 17篇 译文： 12篇 评论： 71条 文章搜索 文章分类 c++ (2) Flex (9) hibernate (6) html (15) j2ee (27) javascipt (31) MySQL (1) oracle (2) UML (1) VC (4) windows (9) 学习 (19) 汇编 (2) 网络 (4) 计算机组成原理 (2) 软件工程 (5) 移动 (1) 版本控制 (3) interface (8) 前端开发 (20) 架构 (1) jsp (1) security (1) java (6) 设计模式 (4) build (2) 正则表达式 (1) CSS (3) 文章存档 2015年12月 (3) 2015年09月 (1) 2015年07月 (1) 2015年06月 (2) 2015年05月 (3) 2015年04月 (8) 2015年01月 (2) 2014年12月 (1) 2014年11月 (3) 2014年09月 (2) 2014年07月 (1) 2014年03月 (3) 2014年02月 (2) 2014年01月 (1) 2013年10月 (4) 2013年08月 (1) 2013年06月 (1) 2013年05月 (1) 2013年04月 (3) 2013年03月 (4) 2013年02月 (2) 2013年01月 (2) 2012年12月 (4) 2012年07月 (1) 2012年06月 (4) 2012年04月 (1) 2011年09月 (2) 2011年06月 (1) 2011年05月 (1) 2011年03月 (2) 2010年05月 (1) 2010年03月 (1) 2010年02月 (2) 2009年12月 (2) 2009年11月 (1) 2009年10月 (4) 2009年09月 (2) 2009年06月 (2) 2009年05月 (8) 2009年04月 (4) 2009年03月 (5) 2009年02月 (17) 2009年01月 (5) 2008年12月 (9) 2008年05月 (3) 2008年04月 (1) 2008年03月 (5) 2008年02月 (7) 2008年01月 (17) 2007年12月 (3) 2007年11月 (1) 2007年08月 (1) 阅读排行 随机函数rand()[c++] (29043) package.json字段全解 (13515) window.open()打开窗口的几种方式 (12286) Hibernate配置过程可能发生的问题及解决方法 (10416) document.createElement()介绍与用法 (9884) 详解HttpURLConnection (9769) Form表单传递数组 (9660) War包 (9292) offsetHeight, clientHeight与scrollHeight的区别 (9286) Arrays.copyOf()&Arrays.copyOfRange() (8599) 评论排行 Hibernate配置过程可能发生的问题及解决方法 (8) 随机函数rand()[c++] (7) 垂直居中的几种方法比较（纯CSS） (5) 高效回文判断方法(java) (5) DataTable在支持滚动时的实现方式与遗留问题 (4) Log4j 2 XML 配置 (3) org.hibernate.dialect.MySQLInnoDBDialect与org.hibernate.dialect.MySQLMyISAMDialect (3) package.json字段全解 (3) 什么时候使用JavaScript (3) revealTrans的神奇运用 (2) 推荐文章 *App竞品技术分析 （6）热修复 *架构设计：系统间通信（17）——服务治理与Dubbo 中篇（分析） *一款炫酷Loading动画--加载失败 *图解堆算法、链表、栈与队列（多图预警） *Android中ContentProvider组件详解 *Android平台Camera实时滤镜实现方法探讨(九)--磨皮算法探讨(一) 最新评论 HTTP Cache如何计算Age buwuzhe90 : 博主您好！这里一直有个不明白的地方，希望博主能指点：response_time - date_val... HTTP Cache如何计算Age buwuzhe90 : 博主您好！这里一直有个不明白的地方，希望博主能指点：response_time - date_val... 垂直居中的几种方法比较（纯CSS） mevicky : @woxueliuyun:嗯，向你学习 垂直居中的几种方法比较（纯CSS） woxueliuyun : @mevicky:多谢提醒，因为你说的这些支持性还不是很好，比如IE9不支持flex，所以一般不使用... 垂直居中的几种方法比较（纯CSS） mevicky : 还有很多居中方法 比如利用transform。flex等等 package.json字段全解 jiangcaiyang123 : 博主您好。我也是新写这样的模块，请问package.json这个文件是要程序生成的吗？还是说这些字段... 元素样式控制 clover1107 : 楼主好啊！看到你的博客写了很多web前端的内容，很钦佩，目前我们也在这方面的课程，不知道你有没有兴趣... 详解HttpURLConnection GXG_HONEYLOVE : 很喜欢博主的文章，刚刚用豆约翰博客备份专家备份了您的全部博文。 eclipse3.2下解决数据插入mysql数据库时乱码无法插入问题(Hibernate) chenyanmoting : 学习了，给个赞 DataTable在支持滚动时的实现方式与遗留问题 woxueliuyun : @koki_cy:不好意思，回复晚了，不是经常在线。不让它换行只能通过样式td{white-spac...

Recno:: 90
URL:: http://blog.csdn.net/woxueliuyun/article/details/45133867

ParseText::
垂直居中的几种方法比较（纯CSS） - 清箫的专栏 - 博客频道 - CSDN.NET 清箫的专栏 生命的可能,贵在自我实现;生命的欠缺,是努力的空间 目录视图 摘要视图 订阅 学院APP首次下载，可得50C币！     欢迎来帮助开源“进步”     当讲师？爱学习？投票攒课吧     认识Atlassian Datacenter产品     深圳小伙伴的福利来啦 垂直居中的几种方法比较（纯CSS） 2015-04-19 22:44 941人阅读 评论 (5) 收藏 举报 分类： CSS （2） 作者同类文章 X 前端开发 （19） 作者同类文章 X 版权声明：本文为博主原创文章，未经博主允许不得转载。 方法一 <div class="table" style="height: 200px;"> <div class="table-cell"> content </div> </div> .table {display:table;} .table-cell {display:table-cell; vertical-align:middle;} 优点 ：content 可以动态改变高度，如果你不需要支持IE7浏览器，这个应该是首选方案，也是W3C推荐的方案。 缺点 ：IE7和IE8 beta不支持。 方法二 <div class="content">Content</div> #content { position:absolute; top:50%; height:240px; margin-top:-120px; /* negative half of the height */ overflow: auto; } 优点 ：适用于所有浏览器。 缺点 ：内容区域高度固定，如果不用overflow:hidden或overflow:auto,内容显示就会超出内容区域，看起来就不是居中了。 而使用overflow:hidden，超出的内容就会消失；使用overflow:auto则会出现滚动条。 方法三 - 不推荐使用 这个方法利用的是margin:auto的计算方法，给内容区域div#content设置一个固定高度，并且设置position:absolute;top:0; bottom:0;。因为它有固定高度，其实并不能使上下都间距为 0，因此 margin:auto; 会使它垂直居中。 <divid="content">Content </div> #content{ position:absolute; top:0; bottom:0; margin:auto; height:240px; } 优点 ：明显不如第一种方法，一般不用。 缺点 ：IE7和IE8 beta中无效；因为内容区域高度固定，和第二种方法有相同的问题。 方法四 这个方法只能将单行文本置中。只需要简单地把 line-height 设置为内容容器的height 值就可以使文本居中了。 <divid="content">Content </div> #content{height:100px; line-height:100px;} 优点 ：适用于所有浏览器；在文本不换行的小元素上非常有用，例如使按钮文本或者单行文本居中。 缺点 ：只对文本有效(块级元素无效)；多行时因为line-height太高，行距会非常大；   上一篇 HTML锚与链接 下一篇 HTML焦点与键盘事件 顶 1 踩 0 我的同类文章 CSS （2） 前端开发 （19） http://blog.csdn.net 猜你在找 查看评论 * 以上用户言论只代表其个人观点，不代表CSDN网站的观点或立场 个人资料 woxueliuyun 访问： 345057次 积分： 4894 等级： 积分：4894 排名： 第3063名 原创： 133篇 转载： 17篇 译文： 12篇 评论： 71条 文章搜索 文章分类 c++ (2) Flex (9) hibernate (6) html (15) j2ee (27) javascipt (31) MySQL (1) oracle (2) UML (1) VC (4) windows (9) 学习 (19) 汇编 (2) 网络 (4) 计算机组成原理 (2) 软件工程 (5) 移动 (1) 版本控制 (3) interface (8) 前端开发 (20) 架构 (1) jsp (1) security (1) java (6) 设计模式 (4) build (2) 正则表达式 (1) CSS (3) 文章存档 2015年12月 (3) 2015年09月 (1) 2015年07月 (1) 2015年06月 (2) 2015年05月 (3) 2015年04月 (8) 2015年01月 (2) 2014年12月 (1) 2014年11月 (3) 2014年09月 (2) 2014年07月 (1) 2014年03月 (3) 2014年02月 (2) 2014年01月 (1) 2013年10月 (4) 2013年08月 (1) 2013年06月 (1) 2013年05月 (1) 2013年04月 (3) 2013年03月 (4) 2013年02月 (2) 2013年01月 (2) 2012年12月 (4) 2012年07月 (1) 2012年06月 (4) 2012年04月 (1) 2011年09月 (2) 2011年06月 (1) 2011年05月 (1) 2011年03月 (2) 2010年05月 (1) 2010年03月 (1) 2010年02月 (2) 2009年12月 (2) 2009年11月 (1) 2009年10月 (4) 2009年09月 (2) 2009年06月 (2) 2009年05月 (8) 2009年04月 (4) 2009年03月 (5) 2009年02月 (17) 2009年01月 (5) 2008年12月 (9) 2008年05月 (3) 2008年04月 (1) 2008年03月 (5) 2008年02月 (7) 2008年01月 (17) 2007年12月 (3) 2007年11月 (1) 2007年08月 (1) 阅读排行 随机函数rand()[c++] (29043) package.json字段全解 (13515) window.open()打开窗口的几种方式 (12286) Hibernate配置过程可能发生的问题及解决方法 (10416) document.createElement()介绍与用法 (9884) 详解HttpURLConnection (9769) Form表单传递数组 (9660) War包 (9292) offsetHeight, clientHeight与scrollHeight的区别 (9286) Arrays.copyOf()&Arrays.copyOfRange() (8599) 评论排行 Hibernate配置过程可能发生的问题及解决方法 (8) 随机函数rand()[c++] (7) 垂直居中的几种方法比较（纯CSS） (5) 高效回文判断方法(java) (5) DataTable在支持滚动时的实现方式与遗留问题 (4) Log4j 2 XML 配置 (3) org.hibernate.dialect.MySQLInnoDBDialect与org.hibernate.dialect.MySQLMyISAMDialect (3) package.json字段全解 (3) 什么时候使用JavaScript (3) revealTrans的神奇运用 (2) 推荐文章 *App竞品技术分析 （6）热修复 *架构设计：系统间通信（17）——服务治理与Dubbo 中篇（分析） *一款炫酷Loading动画--加载失败 *图解堆算法、链表、栈与队列（多图预警） *Android中ContentProvider组件详解 *Android平台Camera实时滤镜实现方法探讨(九)--磨皮算法探讨(一) 最新评论 HTTP Cache如何计算Age buwuzhe90 : 博主您好！这里一直有个不明白的地方，希望博主能指点：response_time - date_val... HTTP Cache如何计算Age buwuzhe90 : 博主您好！这里一直有个不明白的地方，希望博主能指点：response_time - date_val... 垂直居中的几种方法比较（纯CSS） mevicky : @woxueliuyun:嗯，向你学习 垂直居中的几种方法比较（纯CSS） woxueliuyun : @mevicky:多谢提醒，因为你说的这些支持性还不是很好，比如IE9不支持flex，所以一般不使用... 垂直居中的几种方法比较（纯CSS） mevicky : 还有很多居中方法 比如利用transform。flex等等 package.json字段全解 jiangcaiyang123 : 博主您好。我也是新写这样的模块，请问package.json这个文件是要程序生成的吗？还是说这些字段... 元素样式控制 clover1107 : 楼主好啊！看到你的博客写了很多web前端的内容，很钦佩，目前我们也在这方面的课程，不知道你有没有兴趣... 详解HttpURLConnection GXG_HONEYLOVE : 很喜欢博主的文章，刚刚用豆约翰博客备份专家备份了您的全部博文。 eclipse3.2下解决数据插入mysql数据库时乱码无法插入问题(Hibernate) chenyanmoting : 学习了，给个赞 DataTable在支持滚动时的实现方式与遗留问题 woxueliuyun : @koki_cy:不好意思，回复晚了，不是经常在线。不让它换行只能通过样式td{white-spac...

Recno:: 91
URL:: http://blog.csdn.net/woxueliuyun/article/details/45152047

ParseText::
HTML焦点与键盘事件 - 清箫的专栏 - 博客频道 - CSDN.NET 清箫的专栏 生命的可能,贵在自我实现;生命的欠缺,是努力的空间 目录视图 摘要视图 订阅 学院APP首次下载，可得50C币！     欢迎来帮助开源“进步”     当讲师？爱学习？投票攒课吧     认识Atlassian Datacenter产品     深圳小伙伴的福利来啦 [置顶] HTML焦点与键盘事件 2015-04-20 16:46 2357人阅读 评论 (0) 收藏 举报 分类： 前端开发 （19） 作者同类文章 X html （15） 作者同类文章 X javascipt （30） 作者同类文章 X 版权声明：本文为博主原创文章，未经博主允许不得转载。 所谓焦点就是用户当前正在操作的对象，可以是某个元素，也可能是某个浏览器中的tab或window。比如用鼠标点击输入框，那么输入框就会成为焦点。使用键盘上的Tab键，又可以把焦点转移到另外一个元素或浏览器的其他区域。通过鼠标和键盘都可以转移焦点，甚至编辑焦点元素。 焦点元素 同一时间一个document只能有一个元素成为焦点 ，这个焦点元素可以使用JavaScript访问： document.activeElement; 如果没有元素成为焦点，默认是body元素作为activeElement。成为焦点的元素对应CSS的:focus伪类。 但不是所有元素都可以成为焦点，只有拥有可获焦区域的DOM锚才可以称为焦点： 可获焦区域 可获焦区域可能是元素，元素的部分或用户代理管理的其他部分，每一个可获焦区域有一个DOM锚，这个锚是一个Node对象，Node对象的位置就是可获焦区域在DOM中的位置。可获焦区域的API目前就通过这个锚来操作可获焦区域。 不是所有Node都能表示焦点区域，Node要变成焦点区域需要满足一些条件。下表只是列出了一些常见的可获焦区域和它的DOM锚： 可获焦区域 DOM锚 有tabindex焦点标志，并且没有disabled属性的元素 元素本身 Image map中area的图形区域 img元素 用户代理提供的可获焦子控件，比如input[type=number]生成的上下两个按钮 生成子控件的元素 元素的滚动区域 产生滚动区域的元素 浏览上下文内document的viewport，比如iframe产生的视窗。 为之产生viewport的document tabindex焦点标记 使用键盘上的tab键，可以按顺序切换当前焦点元素，而影响这个切换顺序的属性就是元素的tabindex属性。这个属性的取值范围是0到32767，如果赋值为负数则表示没有焦点标记，不对它进行切换。 但并不是所有元素设置了tabindex就一定可以使用tab键切换成为焦点，首先tabindex的值不能为负数，而且不能有disabled属性。另外，这个元素必须有对应的可获焦区域，而且支持tabindex属性。HTML4规定FORM表单中只有以下元素支持tabindex属性：a、area、button、input、object、select、textarea。 没有显式设置tabindex属性的元素就不能通过Tab键切换成为焦点？也不是，只要元素拥有tabindex焦点标记就可以。W3C推荐用户代理自动为以下元素设置tabindex焦点标记： 有href属性的a元素； 有href属性的link元素； button元素； type不是hidden的input元素； select元素； textarea元素； iframe、frame元素； menuitem元素； 设置了draggable属性的元素； 设置了contenteditable属性的元素； 默认这些元素的tabindex为0。以上只是W3C推荐的元素，不同的浏览器实现可能不一样。比如在Chrome41中，如果不是上述元素，即使设置了合法的tabindex也不会被tab键切换到，而在IE和Firefox中，只要设置了合法的tabindex就可以被tab切换到。 切换顺序规则 由先到后的顺序是： 1.        元素的tabindex大于0的元素，按tabindex从小到大顺序切换； 2.        元素的tabindex相同的，按元素在document中的出现顺序切换； 3.        元素的tabindex为0，或没有设置tabindex，或tabindex不是有效整数（后两种等同于tabindex=0），按元素在document中的出现顺序切换； HTMLElement.setActive() setActive()方法是 IE独有 的方法，这个方法的作用是把另一个frame或window中的某个元素设置为activeElement，但这个方法不会使document滚动到焦点元素。也就是说UI上没有变化，但另一个frame或window中的那个元素已经成为了activeElement。 HTMLElement.focus() & HTMLElement.blur() Focus()方法和blur()方法同样只适用于可获焦区域的DOM锚，不是所有元素调用focus()就能成为焦点的。而blur()要想触发blur事件，首先这个元素得先是焦点，否则是不会有blur事件的。 focus & focusin， blur & focusout等事件关系 一个元素成为active元素就等于获得了焦点，会触发这个元素的focus事件。有元素获得焦点，一般就有元素会失去焦点，失去焦点的元素触发blur事件。这两个事件几乎是同时发生的，但他们的执行顺序有区别，blur事件的监听方法先执行，然后才是focus事件的监听方法。 元素在document没有加载完之前是不能获得焦点的 ，获得焦点的元素通过documnt.activeElement可以访问。 Focusin也是元素在即将获取焦点的时候触发的事件，它和focus的主要区别是focus事件没有冒泡阶段。因为focusin事件有冒泡阶段，因此可以用来监听本元素及其子元素获取焦点的情况。同理，blur事件也没有冒泡阶段，而focusout有。 需要注意的是，虽然focus事件没有冒泡阶段，但focus有捕获阶段，因此父元素使用addEventListener('focus', func, true )同样可以捕获focus事件，而且这个时候，父元素的focus事件监听反而先执行。 兼容性： Firefox不支持focusin和focusout事件； Chrome，获取焦点执行顺序：onfocus，onfocusin；失去焦点执行顺序：onblur， onfocusout。 IE6，IE7，IE8，IE9，IE10，获取焦点执行顺序：onfocusin ，onfocus；失去焦点执行顺序：onfocusout ，onblur。 键盘事件 在DOM中，有几个键盘事件总是以获得焦点的元素作为目标的。 Keypress, keydown, keyup的区别 KeyPress主要用来接收字母、数字等ANSI字符，而 KeyDown 和 KeyUP 事件过程可以处理任何不被KeyPress 识别的击键，诸如：功能键（F1-F12）、编辑键、定位键以及任何这些键和键盘换档键的组合等。 三个事件的触发顺序按从早到晚： keydown、keypress、keyup。Keydown和keypress事件监听方法执行的时候，刚才敲入的字符还没有显示在输入框中，要等这些事件监听方法执行完后才插入。Keyup事件监听方法执行的时候，字符已经显示在输入框中。 如果摁住某个键不放，会间隔触发keypress和keydown事件，但只要你不放开，就不会触发keyup，keyup只有当你放开这个键才会触发。 上一篇 垂直居中的几种方法比较（纯CSS） 下一篇 鼠标事件比较与鼠标位置 顶 0 踩 0 我的同类文章 前端开发 （19） html （15） javascipt （30） http://blog.csdn.net 猜你在找 查看评论 * 以上用户言论只代表其个人观点，不代表CSDN网站的观点或立场 个人资料 woxueliuyun 访问： 345059次 积分： 4894 等级： 积分：4894 排名： 第3063名 原创： 133篇 转载： 17篇 译文： 12篇 评论： 71条 文章搜索 文章分类 c++ (2) Flex (9) hibernate (6) html (15) j2ee (27) javascipt (31) MySQL (1) oracle (2) UML (1) VC (4) windows (9) 学习 (19) 汇编 (2) 网络 (4) 计算机组成原理 (2) 软件工程 (5) 移动 (1) 版本控制 (3) interface (8) 前端开发 (20) 架构 (1) jsp (1) security (1) java (6) 设计模式 (4) build (2) 正则表达式 (1) CSS (3) 文章存档 2015年12月 (3) 2015年09月 (1) 2015年07月 (1) 2015年06月 (2) 2015年05月 (3) 2015年04月 (8) 2015年01月 (2) 2014年12月 (1) 2014年11月 (3) 2014年09月 (2) 2014年07月 (1) 2014年03月 (3) 2014年02月 (2) 2014年01月 (1) 2013年10月 (4) 2013年08月 (1) 2013年06月 (1) 2013年05月 (1) 2013年04月 (3) 2013年03月 (4) 2013年02月 (2) 2013年01月 (2) 2012年12月 (4) 2012年07月 (1) 2012年06月 (4) 2012年04月 (1) 2011年09月 (2) 2011年06月 (1) 2011年05月 (1) 2011年03月 (2) 2010年05月 (1) 2010年03月 (1) 2010年02月 (2) 2009年12月 (2) 2009年11月 (1) 2009年10月 (4) 2009年09月 (2) 2009年06月 (2) 2009年05月 (8) 2009年04月 (4) 2009年03月 (5) 2009年02月 (17) 2009年01月 (5) 2008年12月 (9) 2008年05月 (3) 2008年04月 (1) 2008年03月 (5) 2008年02月 (7) 2008年01月 (17) 2007年12月 (3) 2007年11月 (1) 2007年08月 (1) 阅读排行 随机函数rand()[c++] (29043) package.json字段全解 (13515) window.open()打开窗口的几种方式 (12286) Hibernate配置过程可能发生的问题及解决方法 (10416) document.createElement()介绍与用法 (9884) 详解HttpURLConnection (9769) Form表单传递数组 (9660) War包 (9292) offsetHeight, clientHeight与scrollHeight的区别 (9286) Arrays.copyOf()&Arrays.copyOfRange() (8599) 评论排行 Hibernate配置过程可能发生的问题及解决方法 (8) 随机函数rand()[c++] (7) 垂直居中的几种方法比较（纯CSS） (5) 高效回文判断方法(java) (5) DataTable在支持滚动时的实现方式与遗留问题 (4) Log4j 2 XML 配置 (3) org.hibernate.dialect.MySQLInnoDBDialect与org.hibernate.dialect.MySQLMyISAMDialect (3) package.json字段全解 (3) 什么时候使用JavaScript (3) revealTrans的神奇运用 (2) 推荐文章 *App竞品技术分析 （6）热修复 *架构设计：系统间通信（17）——服务治理与Dubbo 中篇（分析） *一款炫酷Loading动画--加载失败 *图解堆算法、链表、栈与队列（多图预警） *Android中ContentProvider组件详解 *Android平台Camera实时滤镜实现方法探讨(九)--磨皮算法探讨(一) 最新评论 HTTP Cache如何计算Age buwuzhe90 : 博主您好！这里一直有个不明白的地方，希望博主能指点：response_time - date_val... HTTP Cache如何计算Age buwuzhe90 : 博主您好！这里一直有个不明白的地方，希望博主能指点：response_time - date_val... 垂直居中的几种方法比较（纯CSS） mevicky : @woxueliuyun:嗯，向你学习 垂直居中的几种方法比较（纯CSS） woxueliuyun : @mevicky:多谢提醒，因为你说的这些支持性还不是很好，比如IE9不支持flex，所以一般不使用... 垂直居中的几种方法比较（纯CSS） mevicky : 还有很多居中方法 比如利用transform。flex等等 package.json字段全解 jiangcaiyang123 : 博主您好。我也是新写这样的模块，请问package.json这个文件是要程序生成的吗？还是说这些字段... 元素样式控制 clover1107 : 楼主好啊！看到你的博客写了很多web前端的内容，很钦佩，目前我们也在这方面的课程，不知道你有没有兴趣... 详解HttpURLConnection GXG_HONEYLOVE : 很喜欢博主的文章，刚刚用豆约翰博客备份专家备份了您的全部博文。 eclipse3.2下解决数据插入mysql数据库时乱码无法插入问题(Hibernate) chenyanmoting : 学习了，给个赞 DataTable在支持滚动时的实现方式与遗留问题 woxueliuyun : @koki_cy:不好意思，回复晚了，不是经常在线。不让它换行只能通过样式td{white-spac...

Recno:: 92
URL:: http://blog.csdn.net/yinwenjie/article/details/50277289

ParseText::
架构设计：系统间通信（17）——服务治理与Dubbo 中篇（分析） - JAVA入门中 - 博客频道 - CSDN.NET JAVA入门中 正在进行业务通讯层技术的写作。并且应要求中间穿插一个JAVA 线程原理和使用的专栏。 目录视图 摘要视图 订阅 学院APP首次下载，可得50C币！     欢迎来帮助开源“进步”     当讲师？爱学习？投票攒课吧     认识Atlassian Datacenter产品     深圳小伙伴的福利来啦 [置顶] 架构设计：系统间通信（17）——服务治理与Dubbo 中篇（分析） 标签： dubbo 架构设计 系统通信 2015-12-19 10:23 4434人阅读 评论 (0) 收藏 举报 分类： 系统架构 （29） 作者同类文章 X 系统间通信 （16） 作者同类文章 X 版权声明：欢迎转载，但是看在我辛勤劳动的份上，请注明来源：http://blog.csdn.net/yinwenjie （接上文） 2-5、设计模式：代理模式和JAVA对代理模式的支持 2-5-1、典型的代理模式 下面这个类图说明了“代理模式”的典型设计设计结构： 典型的代理模式可用一句话进行概括：外部系统/外部模块要调用某个具体业务的实现A，不能直接进行实调用，而要通过一个代理对象进行间接的调用。典型的dialing模式中有四个角色： Subject：业务接口定义。这个业务接口定义相关实现类的行为、事件等特性。 RealSubject：您可以看业务定义的真实实现。设计的原则是：无论何种情况下它并不知道自己被“代理”了。 Proxy：代理身份，帮助外部系统/外部模块完成具体业务实现A的调用。 Client：外部系统/外部模块。 接下来我们使用JAVA语言实现这个设计： 业务接口定义（BusinessInterface）： /** * 这是一个业务接口：给第三方模块调用的处理过程。 * @author yinwenjie */ public interface BusinessInterface { /** * @param username */ public void dosomething (String username); } 业务接口的真实实现类（RealBusinessImpl）： /** * 这个类就是这个业务接口的真实实现。 * @author yinwenjie */ public class RealBusinessImpl implements BusinessInterface { /* (non-Javadoc) * @see testDesignPattern.proxy.BusinessInterface#dosomething(java.lang.String) */ @Override public void dosomething (String username) { // 这里偷懒了一下，没有在工程中导入log4j的依赖。用System.out进行显示 System.out.println( "正在为用户：" + username + "，进行真实的业务处理。。。" ); } } 业务接口的代理实现类（ProxyBusinessImpl） package testDesignPattern.proxy.java; import testDesignPattern.proxy.BusinessInterface; import testDesignPattern.proxy.RealBusinessImpl; /** * 用java实现的传统的“代理模式”，有很多弊端。最大的弊端就是：<br> * 调用者必须清楚，自己将调用的某个对象需要被代理。。。。 * @author yinwenjie */ public class ProxyBusinessImpl implements BusinessInterface { /** * 真实的调用对象 */ private RealBusinessImpl realBusiness; public ProxyBusinessImpl (RealBusinessImpl realBusiness) { this .realBusiness = realBusiness; } /* (non-Javadoc) * @see testDesignPattern.proxy.BusinessInterface#dosomething(java.lang.String) */ @Override public void dosomething (String username) { System.out.println( "---------正式业务执行前；" ); this .realBusiness.dosomething(username); System.out.println( "---------正式业务执行后；" ); } } 运行起来（Main）： package testDesignPattern.proxy.java; import testDesignPattern.proxy.BusinessInterface; import testDesignPattern.proxy.RealBusinessImpl; public class Main { public static void main (String[] args) throws RuntimeException { /* * 调用者必须知道，我要使用RealBusinessImpl具体的实现； * 必须使用ProxyBusinessImpl进行代理。 * * 这个做法写设计模式的实现实例倒还可以，没有什么实际意义 * */ RealBusinessImpl realBusiness = new RealBusinessImpl(); BusinessInterface proxyBusinessInterface = new ProxyBusinessImpl(realBusiness); proxyBusinessInterface.dosomething( "yinwenjie" ); } } 从以上代码的注解中，我们就可以发现典型代理模式的问题：调用者必须知道，我要使用RealBusinessImpl具体的实现是不被代理的，并且代理者还需要知道具体的代理者是谁。 2-5-2、JAVA支持的动态代理 为了解决这个明显的问题，聪明的程序员们发明出代理模式的变形设计——动态代理模式：在继承了代理模式优点的同时，通过动态代理模式第三方模块/系统并不需要知道“代理者”的实现细节了，并且代理者内部可以通过配置文件（或者其他导向性文件），对任何实现类进行代理（实际上这也是Spring框架的核心设计模式，Spring框架并不是这个系列博文的讲解返回，感兴趣的读者可以自行参考其源码）。下面我们来看看JAVA中对动态代理的支持： 调用处理器： package testDesignPattern.proxy.dynamicjava; import java.lang.reflect.InvocationHandler; import java.lang.reflect.Method; import testDesignPattern.proxy.BusinessInterface; /** * （代理）调用处理器。<br> * 什么意思呢：当“代理者”被调用时，这个实现类中的invoke方法将被触发。<br> * “代理者”对象，外部模块/外部系统所调用的方法名、方法中的传参信息都将以invoke方法实参的形式传递到方法中。 * * @author yinwenjie */ public class BusinessInvocationHandler implements InvocationHandler { /** * 真实的业务处理对象 */ private BusinessInterface realBusiness; public BusinessInvocationHandler (BusinessInterface realBusiness) { this .realBusiness = realBusiness; } /* (non-Javadoc) * @see java.lang.reflect.InvocationHandler#invoke(java.lang.Object, java.lang.reflect.Method, java.lang.Object[]) */ @Override public Object invoke (Object proxy, Method method, Object[] args) throws Throwable { System.out.println( "（代理）调用处理器被激活=====" ); System.out.println( "“代理者对象”：" + proxy.getClass().getName()); System.out.println( "“外部模块/外部系统”调用的方法名：" + method.getName()); System.out.println( "---------正式业务执行前；" ); Object resultObject = method.invoke( this .realBusiness, args); System.out.println( "---------正式业务执行后；" ); return resultObject; } } 下面的代码说明了外部模块/外部系统如何进行调用： package testDesignPattern.proxy.dynamicjava; import java.lang.reflect.Proxy; import testDesignPattern.proxy.BusinessInterface; import testDesignPattern.proxy.RealBusinessImpl; public class Main { public static void main (String[] args) throws Exception { BusinessInterface realBusiness = new RealBusinessImpl(); BusinessInvocationHandler invocationHandler = new BusinessInvocationHandler(realBusiness); /* * 生成一个动态代理实例。里面的三个参数需要讲解一下： * 1-loader：这个newProxyInstance会有一个返回值，即代理对象。 * 那么问题就是类实例的创建必须要有classloader的支持，第一个参数就是指等“代理对象”的创建所依据的classloader * * 2-interfaces：第二个参数是一个数组。在设计原理中，有一个重要的原则是“依赖倒置”，它的实践经验是：“依赖接口，而不是以来实现”。 * 所以，JAVA中动态代理的支持假定程序员是遵循这一原则的：所有业务都定义的接口。这个参数就是为动态代理指定“代理对象所实现的接口”， * 由于JAVA中一个类可以实现多个接口，所以这个参数是一个数组（我的实例代码中，只为真实的业务实现定义了一个接口BusinessInterface， * 所以参数中指定的也就只有这个接口）.另外，这个参数的类型是Class，所以如果您不定义接口，而是指定某个具体类，也是可行的。但是这不符合设计原则。 * * 3-InvocationHandler：这个就是我们的“调用处理器”，这个参数没有太多解释的 * */ BusinessInterface proxyBusiness = (BusinessInterface)Proxy.newProxyInstance( Thread.currentThread().getContextClassLoader(), new Class[]{BusinessInterface.class}, invocationHandler); // 正式调用 proxyBusiness.dosomething( "yinwenjie" ); } } 正如代码中注释的说明Proxy.newProxyInstance方法有三个参数： loader：这个newProxyInstance会有一个返回值，即代理对象。那么问题就是类实例的创建必须要有classloader的支持，第一个参数就是指等“代理对象”的创建所依据的classloader interfaces：第二个参数是一个数组。在设计原理中，有一个重要的原则是“依赖倒置”，它的实践经验是：“依赖接口，而不是以来实现”。所以，JAVA中动态代理的支持假定程序员是遵循这一原则的：所有业务都定义的接口。这个参数就是为动态代理指定“代理对象所实现的接口”，由于JAVA中一个类可以实现多个接口，所以这个参数是一个数组（我的实例代码中，只为真实的业务实现定义了一个接口BusinessInterface。所以参数中指定的也就只有这个接口）.另外，这个参数的类型是Class，所以如果您不定义接口，而是指定某个具体类，也是可行的。但是这不符合设计原则。 invocationHandler：这个就是我们的“调用处理器”，这个参数没有太多解释的 好的设计，遵从的原则之一：一种类型的问题，一定使用一种特定的设计来解决；绝对不会出现两种（或者是多种）解决方式。 ——《架构之美》 3、DUBBO框架深入设计分析 上图摘自DUBBO官网——技术手册（ http://dubbo.io/Developer+Guide-zh.htm ），可以肯定的是DUBBO官方技术手册上的技术细节介绍要比我本人文章中的技术细节的介绍详实得多。但是就像我前文说过的那样： 之所以介绍DUBBO框架不只是为读者介绍DUBBO服务治理框架本身，更重要的是通过这个系列文章的讲解向读者介绍整个系统间通信技术的知识层次。 而作为搭建在RPC要件之上的服务治理框架是又是这个知识体系中重要的一环，所以必须进行讲解。 在这个文章中，我还会有多出引用DUBBO官网的用户手册和技术手册。DUBBO团队对文档的维护是做得比较到位，一点是我非常钦佩的。我们先来看看DUBBO官方文档中，对于上图中各层的功能描述： config：配置层，对外配置接口，以ServiceConfig，ReferenceConfig为中心，可以直接new配置类，也可以通过spring解析配置生成配置类。 proxy：服务代理层，服务接口透明代理，生成服务的客户端Stub和服务器端Skeleton，以ServiceProxy为中心，扩展接口为ProxyFactory。 registry：注册中心层，封装服务地址的注册与发现，以服务URL为中心，扩展接口为RegistryFactory，Registry，RegistryService。 cluster：路由层，封装多个提供者的路由及负载均衡，并桥接注册中心，以Invoker为中心，扩展接口为Cluster，Directory，Router，LoadBalance。 monitor：监控层，RPC调用次数和调用时间监控，以Statistics为中心，扩展接口为MonitorFactory，Monitor，MonitorService 。 protocol：远程调用层，封将RPC调用，以Invocation，Result为中心，扩展接口为Protocol, Invoker, Exporter。 exchange：信息交换层，封装请求响应模式，同步转异步，以Request, Response为中心，扩展接口为Exchanger，ExchangeChannel，ExchangeClient，ExchangeServer。 transport：网络传输层，抽象mina和netty为统一接口，以Message为中心，扩展接口为Channel，Transporter，Client，Server，Codec。 serialize：数据序列化层，可复用的一些工具，扩展接口为Serialization，ObjectInput，ObjectOutput，ThreadPool。 4、SPI和扩展点： SPI:Service Provider Interface。在前文我们已经提到过，一个接口如果存在多个实现，那么我们必须依靠new关键字来告诉调用者这个接口的具体实现；用new关键的位置和时机都是非常重要的，因为这代表者调用者需要了解‘具体实现’； 前文还提到了Spring框架使用‘bean’配置关键字的形式帮我们解决了new关键字的问题，让调用者本身不需要关注所调用接口的具体实现。但是在和Spring框架相对独立的DUBBO框架中，如何达到这样的效果呢？ 这里要进行一下说明：网上很多帖子提到DUBBO和Spring是可以无缝结合的，但是又没有分析DUBBO框架为什么可以和Spring框架无缝结合；这让很多读者认为BUDDO框架是基于Spring开发的。 但如果您研究过DUBBO的源代码（或者读过DUBBO相关技术文档），您就会发现。DUBBO和Spring完全是两个不同的技术组件，所谓无缝结合只是指DUBBO的service层、包括config层可以被Spring托管而已（实际上这和DUBBO框架的核心实现没有半毛钱关系）； 但是这两个美丽的软件，采用的设计思路却是非常的一致 ：教科书似的设计模式应用。 DUBBO框架扩展了（或者说另外实现了）基于标准JAVA的“服务自动发现”机制；为了说清楚DUBBO是如何找到某个内部接口的实现类的，我们首先就要讲清楚JAVA的SPI机制，并且再对DUBBO进行了哪些扩展进行一些必要的说明。 4-1、JAVA自带的SPI 对于JAVA中的接口和实现，我们一般情况下（或者说您在学习JAVA的时候），会采用如下的方式进行定义和使用（上文已经做了详细注释，这里的代码把注释精简了）： 业务接口定义（BusinessInterface）： public interface BusinessInterface { public void dosomething (String username); } 业务接口的真实实现类（RealBusinessImpl）： public class RealBusinessImpl implements BusinessInterface { public void dosomething (String username) { System.out.println( "正在为用户：" + username + "，进行真实的业务处理。。。" ); } public static void main (String[] args) throws RuntimeException { BusinessInterface realBusiness = new RealBusinessImpl(); realBusiness.dosomething( "yinwenjie" ); } } 实际上，从JDK1.5版本开始，您无需使用new关键字指定具体的实现类。您可以在META-INF/searvices文件夹下建立一个名叫xxxx.BusinessInterface的文件（注意xxxx代表您的包名，整个文件名与BusinessInterface接口的完整类名相同），然后在文件内容中书写“xxxxx.RealBusinessImpl”（注意是完整BusinessInterface接口实现类的名字）。保存这个文件后，您就可以通过JDK提供的java.util.ServiceLoader工具类实例化这个接口了。代码片段如下： ..... ServiceLoader<BusinessInterface> interface = ServiceLoader.load(BusinessInterface.class); // 这样写的原因是，您可以一次指定这个接口的多个具体实现 Iterator<BusinessInterface> iinterface= interface.iterator(); if (iinterface.hasNext()) { BusinessInterface interfaceItem = iinterface.next(); interfaceItem.dosomething( "yinwenjie" ); } ... 4-2、DUBBO框架做的修改 在DUBBO框架中，主要作者william.liangf和ding.lid对JDK提供的SPI机制进行了修改（更准确的说法是“新建”）：META-INF/dubbo文件夹下，使用K-V的方式描述要创建的具体类，这种方式在DUBBO框架中被称为“扩展点”。 DUBBO框架中对“扩展点”功能支持在com.alibaba.dubbo.common.extension包中，主要的类为ExtensionLoader。在这个包中，作者也对为什么要扩展JDK的SPI功能进行了说明： 5、RPC模块 5-1、proxy:代理层 proxy代理层按照DUBBO官方文档的解释，是用来生成RPC调用的Stub和Skeleton，这样做的目的是让您在DUBBO服务端定义的具体业务实现不需要关心“它将被怎样调用”，也是您定义的服务接口“与RPC框架脱耦”。下图是DUBBO框架proxy层的主要类图结构： 如上图所示（图有点小，请右键放大后查看），proxy层的AbstractProxyFactory类及其两个子类采用了我们上文讲到的典型抽象工厂模式进行设计； 那么AbstractProxyFactory下的工厂实现是如何工作的呢？这里我们以JavassistProxyFactory工厂进行讲解。因为在DUBBO接口ProxyFactory设置的默认extension（扩展点），就是对JavassistProxyFactory工厂进行实例化。 extension扩展点： DUBBO框架内部的配置扩展信息，主要作用是通过JAVA注解形式告诉抽象类，应该实例化其下的哪一个实现。DUBBO扩展点配置文件的存储位置在jar包中的MATE-INF/dubbo/internal文件夹下。针对ProxyFactory接口来说，其扩展点配置文件为这个目录下的com.alibaba.dubbo.rpc.ProxyFactory文件； 上文中，我们提到过javassist这个组件的功能：在运行时动态加载class，并进行实例化。那么基于javassist的JavassistProxyFactory所提供的Invoker就是要完成这个工作，下面是JavassistProxyFactory中提供Invoker的代码片段： public < T > Invoker < T > getInvoker( T proxy, Class < T > type , URL url) { // TODO Wrapper 类不能正确处理带$的类名 final Wrapper wrapper = Wrapper . getWrapper ( proxy . getClass (). getName (). indexOf ('$') < 0 ? proxy . getClass () : type ); return new AbstractProxyInvoker < T >( proxy , type , url ) { @ Override protected Object doInvoke ( T proxy , String methodName , Class <?>[] parameterTypes , Object [] arguments ) throws Throwable { return wrapper . invokeMethod ( proxy , methodName , parameterTypes , arguments ); } }; } （上面源码片段中的‘TODO’不是我加的，而是DUBBO主要作者之一的william.liangf加的）这里要说明一下DUBBO框架中里面common模块的com.alibaba.dubbo.common.bytecode.Wrapper类，这个类作为生成“运行时class代码”的工具类存在。主要的逻辑过程在： private static Wrapper makeWrapper (Class<?> c) { ....... } 另外com.alibaba.dubbo.common.bytecode.Wrapper中常量: private static final Map< Class <?>, Wrapper> WRAPPER_MAP = new ConcurrentHashMap< Class <?>, Wrapper>(); 很清楚的说明了Wrapper和被代理类之间的关系。 上一篇 架构设计：负载均衡层设计方案（4）——LVS原理 下一篇 线程基础：线程（1）——操作系统和线程原理 顶 3 踩 0 我的同类文章 系统架构 （29） 系统间通信 （16） http://blog.csdn.net 猜你在找 查看评论 * 以上用户言论只代表其个人观点，不代表CSDN网站的观点或立场 个人资料 yinwenjie 访问： 43302次 积分： 1031 等级： 积分：1031 排名： 千里之外 原创： 35篇 转载： 1篇 译文： 0篇 评论： 104条 阅读排行 架构设计：系统间通信（17）——服务治理与Dubbo 中篇（分析） (4073) 标准Web系统的架构分层 (3615) 架构设计：负载均衡层设计方案（1）——负载场景和解决方式 (2001) 架构设计：系统间通信（1）——概述从“聊天”开始上篇 (1475) 级联控件大数据解决方案 (1454) 架构设计：系统间通信（6）——IO通信模型和Netty 上篇 (1268) 架构设计：负载均衡层设计方案（4）——LVS原理 (1205) 架构设计：负载均衡层设计方案（7）——LVS + Keepalived + Nginx安装及配置 (1182) 架构设计：系统间通信（3）——IO通信模型和JAVA实践 上篇 (1163) 架构设计：系统间通信（10）——RPC的基本概念 (1132) 博客专栏 系统间通信技术 文章：17篇 阅读：19283 负载均衡层技术 文章：9篇 阅读：9617 文章搜索 文章分类 javaer (2) 系统架构 (30) 系统间通信 (17) 搞笑（转贴） (1) java线程 (0) 评论排行 架构设计：负载均衡层设计方案（1）——负载场景和解决方式 (17) 标准Web系统的架构分层 (14) 架构设计：负载均衡层设计方案（4）——LVS原理 (9) 架构设计：负载均衡层设计方案（9）——负载均衡层总结下篇 (8) 架构设计：负载均衡层设计方案（3）——Nginx进阶 (7) hadoop系列：zookeeper（2）——zookeeper核心原理（选举） (4) 架构设计：负载均衡层设计方案（8）——负载均衡层总结上篇 (4) 架构设计：系统间通信（5）——IO通信模型和JAVA实践 下篇 (4) 架构设计：系统间通信（3）——IO通信模型和JAVA实践 上篇 (3) 架构设计：负载均衡层设计方案（7）——LVS + Keepalived + Nginx安装及配置 (3) 推荐文章 *App竞品技术分析 （6）热修复 *架构设计：系统间通信（17）——服务治理与Dubbo 中篇（分析） *一款炫酷Loading动画--加载失败 *图解堆算法、链表、栈与队列（多图预警） *Android中ContentProvider组件详解 *Android平台Camera实时滤镜实现方法探讨(九)--磨皮算法探讨(一) 最新评论 标准Web系统的架构分层 haluoluo211 : 感觉博主写文章号用心呀，大赞 架构设计：负载均衡层设计方案（4）——LVS原理 gongfengying : 其实对于DR模式，要求Real Server和LVS节点必须在同一个局域网内，我还是不理解，其中通信... 架构设计：负载均衡层设计方案（4）——LVS原理 yinwenjie : @gongfengying:在我的那两张图例里面，确实画的是核心交换机转换了数据报的源地址。 架构设计：负载均衡层设计方案（4）——LVS原理 yinwenjie : @gongfengying:感谢感谢，朋友你看的太仔细了。这两处确实是我写错了。图中的表述和文字的表... 架构设计：负载均衡层设计方案（4）——LVS原理 gongfengying : 另外，DR模式和TUN模式的图，为什么响应报文回来到了交换机经过NAT映射转换以后，最后的发给互联网... 架构设计：负载均衡层设计方案（4）——LVS原理 gongfengying : 另外，DR模式和TUN模式的图，为什么响应报文回来到了交换机之后，经过NAT映射转换以后，最后的发给... 架构设计：负载均衡层设计方案（4）——LVS原理 gongfengying : 兄弟你这文章写确实不错，不过笔误有点多啊，笔误的地方还是容易引起歧义的笔误，请看下：1、原问：“重写.

Recno:: 93
URL:: http://blog.csdn.net/youxin2012/article/details/45422241

ParseText::
java反编译工具jad及jadclipse - Just To Be - 博客频道 - CSDN.NET Just To Be 记录与分享 目录视图 摘要视图 订阅 学院APP首次下载，可得50C币！     欢迎来帮助开源“进步”     当讲师？爱学习？投票攒课吧     认识Atlassian Datacenter产品     深圳小伙伴的福利来啦 java反编译工具jad及jadclipse 标签： jad 反编译 java 2015-05-01 21:36 459人阅读 评论 (0) 收藏 举报 分类： java开发 （12） 作者同类文章 X 版权声明：本文为博主原创文章，未经博主允许不得转载。 java源码学习中常用到的工具 jad 反编译.class 文件 下载地址及使用（详见压缩包中的readme） http://varaneckas.com/jad/ 如果用eclipse 可以配合 jadclipse插件 http://sourceforge.net/projects/jadclipse/?source=typ_redirect eclipse中 jadclipse插件配置需用到jad 配置使用见如下链接 http://download.csdn.net/detail/xlxiongliang/7974737#comment 此方法操作简单 遇到问题，其他参考 http://jingyan.baidu.com/article/3f16e003c857082590c1036f.html http://blog.csdn.net/bits00/article/details/8019116   http://www.blogjava.net/landon/archive/2010/07/16/326294.html 上一篇 java 相对路径获取 -- getResource的应用 下一篇 eclipse应用技巧 顶 0 踩 0 我的同类文章 java开发 （12） http://blog.csdn.net 猜你在找 查看评论 * 以上用户言论只代表其个人观点，不代表CSDN网站的观点或立场 个人资料 youxin2012 访问： 375719次 积分： 4292 等级： 积分：4292 排名： 第3760名 原创： 107篇 转载： 18篇 译文： 0篇 评论： 237条 文章分类 面向对象编程 (38) 数据结构与算法 (12) 计算机网络与编程 (9) 操作系统 (11) 数据库操作 (2) Linux开发 (10) Windows开发 (9) 经典面试题 (10) 博文精选 (11) 开发工具 (5) java开发 (13) 设计模式 (1) jvm (1) 阅读排行 cs硕士妹子找工作经历【阿里人搜等互联网】 (73237) C++ string中find() ，rfind() 等函数 用法总结及示例 (29932) WebApp实时开源框架Clouda---认识心得 (27656) 虚拟机 网络模式简介 及桥接模式设置 (27318) WebApp实时开源框架Clouda入门使用与记录 (9220) KMP算法原理与实现（精简） (9008) MinGW的安装 （可在windows 下 使用Linux 环境进行gcc编程） (7490) 微软面试题 经典测试 （博弈论 经典案例） (6200) Python的字典操作 (5675) C/C++经典书籍推荐 (5470) 评论排行 cs硕士妹子找工作经历【阿里人搜等互联网】 (144) 从此刻立志——我要做大牛 (13) 微软面试题 经典测试（推理题） (10) KMP算法原理与实现（精简） (8) 读《黑客与画家》--关于创业问题的思考 (6) WebApp实时开源框架Clouda---认识心得 (6) 快速排序 算法 详解 及 深度优化 (5) 微软面试题 经典测试 （博弈论 经典案例） (4) WebApp实时开源框架Clouda入门使用与记录 (4) C/C++经典书籍推荐 (3) 文章存档 2015年12月 (3) 2015年11月 (1) 2015年06月 (3) 2015年05月 (2) 2015年03月 (1) 2015年02月 (1) 2015年01月 (2) 2014年12月 (1) 2014年11月 (4) 2014年09月 (3) 2014年08月 (1) 2014年07月 (2) 2014年06月 (3) 2014年05月 (3) 2014年04月 (1) 2014年03月 (1) 2014年02月 (3) 2014年01月 (1) 2013年12月 (8) 2013年11月 (6) 2013年10月 (8) 2013年09月 (6) 2013年08月 (3) 2013年07月 (2) 2013年06月 (4) 2013年05月 (11) 2013年04月 (6) 2013年03月 (7) 2013年02月 (3) 2013年01月 (20) 2012年12月 (2) 2012年10月 (3) 文章搜索

Recno:: 94
URL:: http://blog.csdn.net/yuanziok/article/details/50033149

ParseText::
化工企业数据分析报表系统项目之销售模块分析 - IT小牛的IT见解 - 博客频道 - CSDN.NET IT小牛的IT见解 资深IT人士吐血打造IT专业博客，贡献给广大网民最干货的企业信息化建设方案和工具的分析、点评。 目录视图 摘要视图 订阅 学院APP首次下载，可得50C币！     欢迎来帮助开源“进步”     当讲师？爱学习？投票攒课吧     认识Atlassian Datacenter产品     深圳小伙伴的福利来啦 化工企业数据分析报表系统项目之销售模块分析 标签： 化工企业 数据分析报表 销售模块 分析 2015-11-25 10:44 642人阅读 评论 (0) 收藏 举报 分类： 化工企业 （2） 作者同类文章 X 数据分析 （4） 作者同类文章 X 销售模块 版权声明：本文为博主原创文章，未经博主允许不得转载。 此次项目主要是针对传化化学品的需求，对销售、应收款、采购三个模块进行综合统计分析，目的是通过对历史数据的分析，从中发现有价值的信息，以辅助领导进行决策、给以业务员实时的提醒。本文主要分析销售模块。 综述 销售模块主要作用就是通过对各个维度、指标的分析，找优势、发现劣势，不断提升完善，从而提升销售业绩，提升企业利润，提高竞争力。 对于公司领导和销售员而言，他们的关注点并不一样，所以不同角色的用户登陆系统后呈现的界面是不一样的。 数据中心实现工具：帆软FineReport 领导登陆 首页（potal）     仪表盘直观呈现当前实时的销售收入、销售数量、销售利润、销售毛利，地图呈现各区域销售额对比，组合图展现各品类同期销量对比以及权重增长比，柱形图呈现各品类的同期销量权重对比： 【领导看到的界面，但是层级不同数据权限会不同】   该页面就是销售模块中的“销售指标综合分析”，所以功能不在此详述。  销售指标综合分析 【领导看到的界面，但是层级不同数据权限会不同】   为了方便直观的对比数据，该综合分析界面提供了一些交互效果：   ●点击地图，仪表盘会相应的显示成该地区的销售收入、销售数量销售利润、销售毛利，左上角的“累计结构同比分析”显示成该地区的结构同比分析，右下角的“产品数量权重对比”显示成该区域的产品数量权重对比； ●类似第1点，点击右上角的“累计结构同比分析”,页面上其余图表会显示成该品类的相关指标信息； ●点击右下角的“产品数量权重比”，默认显示所有明细产品销量权重前十产品，点击右上角大类的柱子后，显示成该大类下销量权重前十的产品。可以下钻到该产品本年度每月销量与上年同期销量对比。 【领导看到的界面，但是层级不同数据权限会不同】      该图上“近12个月TF-703A销售单价统计图”，统计某一产品近12月每个月高于产品标准价成交的有多少订单，低于产品标准价成交的有多少订单，间接反映销售盈利润，途中有两条水平线，一条表示标准单价，一条表示实际成交平均单价，直观反映实际成交价是高于规定的标准价还是低于规定的标准价。点击相应的柱子，可以钻取查看销售订单明细，方便查看这些高价订单是谁卖的，低价卖出的订单是谁卖的、谁审批的。    日期区间可以选择，当起始月等于截至月时，图表显示该月1号到30号的柱形对比；当起始月与截至月相差在6个月以内，图表上日期以周为跨度（1月第一周、一月第二周……3月第一周、三月第二周……）；当起始日期与截止日期相差6月以上，图表显示月度对比走势。 钻取之后的明细按照erp上供应链管理>>销售管理>>销售订单>>销售订单维护界面做就行 【领导看到的界面，但是层级不同数据权限会不同】   销售员登陆 销售员和领导的关注点不同，所以有些维度或者指标就会略有不同 首页（potal） 对于销售员来说，会有其关注的东西，所以销售员登陆系统后，呈现出的首页内容与之石油紧密联系的，具体主要呈现的是：该销售员的销售金额、销售回款、     应收账款、市场拓展情况（新客户开拓情况、新产品推广情况以及客户秀腿情况）、累计结构比分析、排名前十客户对比（按销售总金额排名） 【销售员和部门经理看到的界面，但是层级不同数据权限会不同】   同样，为了达到简洁直观的数据分析目的，该页面提供了一些交互效果： 1）           点击左下角“累计结构同比分析”，仪表盘会相应显示成该品类的销售金额、销售回款、应收账款，右下角的“前十客户”显示成该品类的钱前十客户； 2）           点击右下角的“前十客户”，仪表盘相应显示成该客户的销售金额、销售回款、应收账款，左下角的“累计结构同比分析”显示成改客户的情况； 3）           点击右上角的“市场推进情况”内的每个数字，均可以下钻到对应的明细信息 【销售员和部门经理看到的界面，但是层级不同数据权限会不同】   4）           点击“应收账款”仪表盘，可以下钻到应收账款统计页面，与应收账款打通 【层级不同的用户数据权限不同，即看到界面上的数字会不同】   此页面可以点击任一仪表盘下钻，具体的在“应收款”模块中已经说明，此处不再赘述； 5）           点击左下角“累计结构同比分析”，可以下钻到某一品类的本年度每个月的销售量以及销售额走势 6）           点击右下角“前十客户”，可以下钻到本年度该客户的发货明细 【层级不同的用户数据权限不同，即看到的行数不同】   销售指标预警     系统每天早上8点（具体时间可以改）自动将销售指标数据以邮件正文形式发送发给相关销售员、销售部门经理、公司领导。 发送发给领导的信息主要是整个公司的销售综合情况：   发送给销售部门经理的事该部门得销售综合情况：   上一篇 农商行信息化建设过程中存在哪些问题？ 下一篇 化工企业数据分析平台项目之应收款分析 顶 0 踩 0 我的同类文章 化工企业 （2） 数据分析 （4） http://blog.csdn.net 猜你在找 查看评论 * 以上用户言论只代表其个人观点，不代表CSDN网站的观点或立场 个人资料 yuanziok 访问： 83464次 积分： 1775 等级： 积分：1775 排名： 第13331名 原创： 77篇 转载： 0篇 译文： 0篇 评论： 104条 文章搜索 文章分类 知识科普 (5) IT产品论 (4) IT秘籍 (24) IT茶社 (3) 保险行业 (2) BI报表 (4) 实例 (4) 技术架构 (2) 数据仓库解析 (1) 能源企业 (1) 信息化系统 (3) 客户管理 (1) 数据分析 (5) 银行行业 (2) 商业智能 (1) 决策分析 (2) 化工企业 (3) 销售模块 (1) 应收款模块 (1) 采购模块 (1) 大数据 (1) 管理要素 (1) 数据化 (2) 制药企业 (2) 报表核算 (0) 电力企业 (4) 信息化 (3) 调度信息 (2) 整体解决 (1) 文章存档 2015年12月 (11) 2015年11月 (11) 2015年10月 (2) 2015年09月 (8) 2015年08月 (11) 2015年07月 (6) 2015年04月 (7) 2015年03月 (14) 2015年02月 (1) 2014年12月 (3) 2014年07月 (1) 2014年05月 (2) 阅读排行 正确选择报表工具的十大标准 (22544) 价值5000元的web报表分享 (3810) 绝对干货：保险公司决策分析系统建设方案 (3446) 报表引擎API开发入门—带参程序数据集 (1823) web报表工具FineReport常用函数的用法总结（文本函数） (1684) 报表填报时，如何实现多个单元格绑定一个字段？ (1657) 电信业务支撑报表系统解决方案 (1587) web报表工具FineReport常用函数的用法总结（日期和时间函数） (1562) 报表软件公司悬赏 BUG，100块钱1个的真实用意 (1498) FineReport性能调优的一些办法 (1426) 评论排行 绝对干货：保险公司决策分析系统建设方案 (40) 正确选择报表工具的十大标准 (13) 价值5000元的web报表分享 (7) 报表引擎API开发入门—带参程序数据集 (7) web报表工具FineReport常用函数的用法总结（文本函数） (3) 巧用FineReport搭建成本管控监测系统 (3) 在开发过程中调试报表插件详细教程 (3) 如何对报表的参数控件赋值 (2) 报表与微信公众号(企业号)集成方案 (2) 报表填报时，如何实现多个单元格绑定一个字段？ (2) 推荐文章 *App竞品技术分析 （6）热修复 *架构设计：系统间通信（17）——服务治理与Dubbo 中篇（分析） *一款炫酷Loading动画--加载失败 *图解堆算法、链表、栈与队列（多图预警） *Android中ContentProvider组件详解 *Android平台Camera实时滤镜实现方法探讨(九)--磨皮算法探讨(一) 最新评论 电力企业信息化系统主要报表展示 ikkmme28206 : 支持一个！ 化工企业数据分析中心项目之采购模块分析 u012466304 : 突然觉得程序员都懂得好多 化工企业数据分析中心项目之采购模块分析 u010786678 : 感谢楼主的分享，学习了！！ （干货分享）农商行中商业智能建设的整体思路与架构 ggf123456789 : 学习了，呵呵～ 能源企业信息化系统中的典型客户管理数据分析模块展示 u012377333 : 不错， 财务报表开发实例分析：几个通用维度介绍与关键点 laotou99 : 长财务知识了，谢谢博主 报表session与应用session常识普及 wangdan199112 : 写的真心好，学习了！ 报表session与应用session常识普及 u010786678 : 严格的讲，做不到这一点。可以做一点努力的办法是在所有的客户端页面里使用javascript代码win... 报表性能优化方案之多种报表服务器内存修改方法 lipintang0825 : 很有帮助 报表性能优化方案之单数据集分页SQL实现层式报表 IThuabanxie : 感谢楼主分享，学习了

Recno:: 95
URL:: http://blog.csdn.net/yuanziok/article/details/50066497

ParseText::
化工企业数据分析平台项目之应收款分析 - IT小牛的IT见解 - 博客频道 - CSDN.NET IT小牛的IT见解 资深IT人士吐血打造IT专业博客，贡献给广大网民最干货的企业信息化建设方案和工具的分析、点评。 目录视图 摘要视图 订阅 学院APP首次下载，可得50C币！     欢迎来帮助开源“进步”     当讲师？爱学习？投票攒课吧     认识Atlassian Datacenter产品     深圳小伙伴的福利来啦 化工企业数据分析平台项目之应收款分析 标签： 化工企业 数据分析 应收款分析 2015-11-27 10:05 674人阅读 评论 (0) 收藏 举报 分类： 化工企业 （2） 作者同类文章 X 数据分析 （4） 作者同类文章 X 应收款模块 版权声明：本文为博主原创文章，未经博主允许不得转载。 此次项目主要是针对传化化学品的需求，对销售、应收款、采购三个模块进行综合统计分析，目的是通过对历史数据的分析，从中发现有价值的信息，以辅助领导进行决策、给以业务员实时的提醒。本文主要分析应收款模块。 综述 应收款数据模块主要从区域、账龄、部门这几个维度对比分析应收账款情况，便于实时了解未回笼资金，提醒相关人员催缴款项。 数据中心实现工具：帆软FineReport 应收款综合分析 该报表从综合角度统计分析了应收的款项，为了方便直观查看应收账款，该页面提供了几个交互功能： ●点击地图上某个区域，右上角的“账龄分析对比图”显示该区域的账龄分布对比，右下角的“各部门应收款对比图”显示各个部门在该区域的应收款对比； ●同第1点，点击“账龄分析对比图”，地图、“各部门应收款对比图”会显示对应账龄的应收款是多少、各区域该账龄分布、各部门该账龄应收款对比 ●点击右下角“各部门应收款对比图”效果同上述两点，此处不再赘述；   【层级不同的用户看到的数字可能会不同】 除了上述交互效果外，点击右上角、右下角两个柱形图各自右上角标识，可以将柱形图切换成饼图，饼图上可以通过鼠标拖拽系列合并： 【层级不同的用户看到的数字可能会不同】   此外，点击地图，可以下钻到该区域的应收款明细：（此表样按照erp中统计报表>>通用报表>>统计分析报表>>应收款账龄分析） 【层级不同的用户看到的行数可能会不同】 点击右上角的账龄分布对比图，可以下钻查看该账龄内的营收款明细（此表样按照erp中统计报表>>通用报表>>统计分析报表>>应收款账龄分析）： 【层级不同的用户看到的行数可能会不同】 点击右下角的“各部门应收款对比图”，可以下钻查看该部门的应收款明细（此表样按照erp中统计报表>>通用报表>>统计分析报表>>应收款账龄分析）： 【层级不同的用户看到的行数可能会不同】 回收款和账龄同期对比分析     回款率同期对比分析，呈现本年度截止目前，每个月回款率与上年同期回款率对比分析；     账龄同期对比分析，呈现本年与上年同期各账龄应收款对比分析，以及各账龄应收款较去年同期增长率。 【层级不同的用户看到的数字可能会不同】 应收款项统计     统计账龄在3个月以内的应收款是多少、有多少家客户，账龄在3-6个月的应收款是多少、有多少家客户，账龄在6个月以上的应收款有多少、有多少家客户。 分别用绿色（正常）、黄色（较危险，需要销售部门经理关注的）、红色（危险，需要法务部门关注的，当然了，销售部门经理也需要关注）仪表盘显示： 【层级不同的用户看到的数字可能会不同】       点击上图中任何一个仪表盘，均可以下钻到对应明细，如果是业务员的话，出来的明细页面会多一列选择框，业务员可以选择哪些客户，将其转移给法务，当然了，非业务员的话，是无法执行转移操作的。该页面，按客户汇总，一个客户一行，统计某一账龄的总金额，这个页面点击总金额，可以继续下钻，查看某一客户应收款明细（即组成这一应收款总金额的明细） 【层级不同的用户看到的行数可能会不同，并且只有销售员能够操作最左列】  法务-应收款原因分析     法务人员对由业务员转移过来的以及符合条件的系统自动转过来的账龄进行原因分析，催讨状态维护： 【层级不同的用户看到的行数可能会不同】  应收款查询     提供此查询报表的目的是方便查询应收款明细。当然了，不同角色的人员只能查看到与其相关的数据： 【层级不同的用户可查范围不同，查出的行数不同】   应收款预警    应收款预警是指提醒相关人员账龄过长的应收款项。具体效果是，系统自动每周（频率允许调整修改）将账龄过长的应收款项信息以邮件正文的方式发送给销售员、销售部门经理、法务人员、公司领导。 发送给销售员的是其所有应收款项，以及款项的对应账龄； 发送给部门经理的是该部门所有账龄超过3个月的应收款项及账龄，以示提醒； 发送给法务的是公司所有账龄超过6个月的应收款项及账龄，以示提醒； 发送给领导的是公司所有的应收款项多少，账龄在3个月以上的多少，账龄在6个月以上的多少，以示提醒。   上一篇 化工企业数据分析报表系统项目之销售模块分析 下一篇 化工企业数据分析中心项目之采购模块分析 顶 0 踩 0 我的同类文章 化工企业 （2） 数据分析 （4） http://blog.csdn.net 猜你在找 查看评论 * 以上用户言论只代表其个人观点，不代表CSDN网站的观点或立场 个人资料 yuanziok 访问： 83465次 积分： 1775 等级： 积分：1775 排名： 第13331名 原创： 77篇 转载： 0篇 译文： 0篇 评论： 104条 文章搜索 文章分类 知识科普 (5) IT产品论 (4) IT秘籍 (24) IT茶社 (3) 保险行业 (2) BI报表 (4) 实例 (4) 技术架构 (2) 数据仓库解析 (1) 能源企业 (1) 信息化系统 (3) 客户管理 (1) 数据分析 (5) 银行行业 (2) 商业智能 (1) 决策分析 (2) 化工企业 (3) 销售模块 (1) 应收款模块 (1) 采购模块 (1) 大数据 (1) 管理要素 (1) 数据化 (2) 制药企业 (2) 报表核算 (0) 电力企业 (4) 信息化 (3) 调度信息 (2) 整体解决 (1) 文章存档 2015年12月 (11) 2015年11月 (11) 2015年10月 (2) 2015年09月 (8) 2015年08月 (11) 2015年07月 (6) 2015年04月 (7) 2015年03月 (14) 2015年02月 (1) 2014年12月 (3) 2014年07月 (1) 2014年05月 (2) 阅读排行 正确选择报表工具的十大标准 (22544) 价值5000元的web报表分享 (3810) 绝对干货：保险公司决策分析系统建设方案 (3446) 报表引擎API开发入门—带参程序数据集 (1823) web报表工具FineReport常用函数的用法总结（文本函数） (1684) 报表填报时，如何实现多个单元格绑定一个字段？ (1657) 电信业务支撑报表系统解决方案 (1587) web报表工具FineReport常用函数的用法总结（日期和时间函数） (1562) 报表软件公司悬赏 BUG，100块钱1个的真实用意 (1498) FineReport性能调优的一些办法 (1426) 评论排行 绝对干货：保险公司决策分析系统建设方案 (40) 正确选择报表工具的十大标准 (13) 价值5000元的web报表分享 (7) 报表引擎API开发入门—带参程序数据集 (7) web报表工具FineReport常用函数的用法总结（文本函数） (3) 巧用FineReport搭建成本管控监测系统 (3) 在开发过程中调试报表插件详细教程 (3) 如何对报表的参数控件赋值 (2) 报表与微信公众号(企业号)集成方案 (2) 报表填报时，如何实现多个单元格绑定一个字段？ (2) 推荐文章 *App竞品技术分析 （6）热修复 *架构设计：系统间通信（17）——服务治理与Dubbo 中篇（分析） *一款炫酷Loading动画--加载失败 *图解堆算法、链表、栈与队列（多图预警） *Android中ContentProvider组件详解 *Android平台Camera实时滤镜实现方法探讨(九)--磨皮算法探讨(一) 最新评论 电力企业信息化系统主要报表展示 ikkmme28206 : 支持一个！ 化工企业数据分析中心项目之采购模块分析 u012466304 : 突然觉得程序员都懂得好多 化工企业数据分析中心项目之采购模块分析 u010786678 : 感谢楼主的分享，学习了！！ （干货分享）农商行中商业智能建设的整体思路与架构 ggf123456789 : 学习了，呵呵～ 能源企业信息化系统中的典型客户管理数据分析模块展示 u012377333 : 不错， 财务报表开发实例分析：几个通用维度介绍与关键点 laotou99 : 长财务知识了，谢谢博主 报表session与应用session常识普及 wangdan199112 : 写的真心好，学习了！ 报表session与应用session常识普及 u010786678 : 严格的讲，做不到这一点。可以做一点努力的办法是在所有的客户端页面里使用javascript代码win... 报表性能优化方案之多种报表服务器内存修改方法 lipintang0825 : 很有帮助 报表性能优化方案之单数据集分页SQL实现层式报表 IThuabanxie : 感谢楼主分享，学习了

Recno:: 96
URL:: http://blog.csdn.net/yuanziok/article/details/50108391

ParseText::
化工企业数据分析中心项目之采购模块分析 - IT小牛的IT见解 - 博客频道 - CSDN.NET IT小牛的IT见解 资深IT人士吐血打造IT专业博客，贡献给广大网民最干货的企业信息化建设方案和工具的分析、点评。 目录视图 摘要视图 订阅 学院APP首次下载，可得50C币！     欢迎来帮助开源“进步”     当讲师？爱学习？投票攒课吧     认识Atlassian Datacenter产品     深圳小伙伴的福利来啦 化工企业数据分析中心项目之采购模块分析 标签： 化工企业 数据分析 采购模块 2015-11-30 09:50 569人阅读 评论 (2) 收藏 举报 分类： 数据分析 （4） 作者同类文章 X 化工企业 （2） 作者同类文章 X 采购模块 版权声明：本文为博主原创文章，未经博主允许不得转载。 此次项目主要是针对传化化学品的需求，对销售、应收款、采购三个模块进行综合统计分析，目的是通过对历史数据的分析，从中发现有价值的信息，以辅助领导进行决策、给以业务员实时的提醒。本文主要分析采购模块。 综述 统计各项原材料的采购情况、供应商供货情况、应付款情况，通过对比各个供应商的供货条件，分析供应商的友好程度，给供应商之间引入竞争机制，从而发现最优的合作伙伴。 数据中心实现工具：帆软FineReport   采购综合分析 该报表从综合角度统计分析了采购综合分析，为了方便直观查看采购情况，该页面提供了几个交互功能： ●点击“各原料采购金额占比”环形图上某个区域，会弹出此区域原料的各个供应商名称、供应量等具体信息。 ●同第1点，点击“各原料采购数量占比”环形图上某个区域，会弹出此区域原料的各个供应商名称、供应量等具体信息。 ●点击下面“各原料采购金额同期比”与“各原料采购数量同期比”条形图上某个区域，效果同上述两点，此处不再赘述；   原料价格走势  各供应商价格走势图对比分析，呈现本年度截止目前，每个月供应商价格情况，可清晰看出各个供应商价格变化情况；     采购价及采购数量走势，呈现一年中各个月份最终采购的产品的数量与价格，可与上图对比分析整体的原料价格情况。   应付款综合分析 该报表从综合角度统计分析了应付的款项，为了方便直观查看应付账款，该页面提供了几个交互功能： ●点击左上角的“各物料应付款项”饼图上某个区域，会显示相应物料的具体应付对应供应商款项； ●右上角展示的为“各供应商应付款项”总款项，点击则可显示应付此供应商对应各个物料的款项。 ●右下角则可按需求选择“应付款张其分布”的不同图表展现方式：柱形图、饼图。   上一篇 化工企业数据分析平台项目之应收款分析 下一篇 大数据时代下的“管理”要素数据化 顶 0 踩 0 我的同类文章 数据分析 （4） 化工企业 （2） http://blog.csdn.net 猜你在找 查看评论 * 以上用户言论只代表其个人观点，不代表CSDN网站的观点或立场 个人资料 yuanziok 访问： 83466次 积分： 1775 等级： 积分：1775 排名： 第13331名 原创： 77篇 转载： 0篇 译文： 0篇 评论： 104条 文章搜索 文章分类 知识科普 (5) IT产品论 (4) IT秘籍 (24) IT茶社 (3) 保险行业 (2) BI报表 (4) 实例 (4) 技术架构 (2) 数据仓库解析 (1) 能源企业 (1) 信息化系统 (3) 客户管理 (1) 数据分析 (5) 银行行业 (2) 商业智能 (1) 决策分析 (2) 化工企业 (3) 销售模块 (1) 应收款模块 (1) 采购模块 (1) 大数据 (1) 管理要素 (1) 数据化 (2) 制药企业 (2) 报表核算 (0) 电力企业 (4) 信息化 (3) 调度信息 (2) 整体解决 (1) 文章存档 2015年12月 (11) 2015年11月 (11) 2015年10月 (2) 2015年09月 (8) 2015年08月 (11) 2015年07月 (6) 2015年04月 (7) 2015年03月 (14) 2015年02月 (1) 2014年12月 (3) 2014年07月 (1) 2014年05月 (2) 阅读排行 正确选择报表工具的十大标准 (22544) 价值5000元的web报表分享 (3810) 绝对干货：保险公司决策分析系统建设方案 (3446) 报表引擎API开发入门—带参程序数据集 (1823) web报表工具FineReport常用函数的用法总结（文本函数） (1684) 报表填报时，如何实现多个单元格绑定一个字段？ (1657) 电信业务支撑报表系统解决方案 (1587) web报表工具FineReport常用函数的用法总结（日期和时间函数） (1562) 报表软件公司悬赏 BUG，100块钱1个的真实用意 (1498) FineReport性能调优的一些办法 (1426) 评论排行 绝对干货：保险公司决策分析系统建设方案 (40) 正确选择报表工具的十大标准 (13) 价值5000元的web报表分享 (7) 报表引擎API开发入门—带参程序数据集 (7) web报表工具FineReport常用函数的用法总结（文本函数） (3) 巧用FineReport搭建成本管控监测系统 (3) 在开发过程中调试报表插件详细教程 (3) 如何对报表的参数控件赋值 (2) 报表与微信公众号(企业号)集成方案 (2) 报表填报时，如何实现多个单元格绑定一个字段？ (2) 推荐文章 *App竞品技术分析 （6）热修复 *架构设计：系统间通信（17）——服务治理与Dubbo 中篇（分析） *一款炫酷Loading动画--加载失败 *图解堆算法、链表、栈与队列（多图预警） *Android中ContentProvider组件详解 *Android平台Camera实时滤镜实现方法探讨(九)--磨皮算法探讨(一) 最新评论 电力企业信息化系统主要报表展示 ikkmme28206 : 支持一个！ 化工企业数据分析中心项目之采购模块分析 u012466304 : 突然觉得程序员都懂得好多 化工企业数据分析中心项目之采购模块分析 u010786678 : 感谢楼主的分享，学习了！！ （干货分享）农商行中商业智能建设的整体思路与架构 ggf123456789 : 学习了，呵呵～ 能源企业信息化系统中的典型客户管理数据分析模块展示 u012377333 : 不错， 财务报表开发实例分析：几个通用维度介绍与关键点 laotou99 : 长财务知识了，谢谢博主 报表session与应用session常识普及 wangdan199112 : 写的真心好，学习了！ 报表session与应用session常识普及 u010786678 : 严格的讲，做不到这一点。可以做一点努力的办法是在所有的客户端页面里使用javascript代码win... 报表性能优化方案之多种报表服务器内存修改方法 lipintang0825 : 很有帮助 报表性能优化方案之单数据集分页SQL实现层式报表 IThuabanxie : 感谢楼主分享，学习了

Recno:: 97
URL:: http://edu.csdn.net/course/detail/482

ParseText::
高并发之Redis初级 - CSDN学院 - CSDN.NET 首页 课程 移动开发 手游开发 iOS 微信开发 Swift HTML 5 Android 移动应用 移动运营 其他 移动测试 Windows Phone 编程语言/框架 C/C++ Java C# Objective-C 汇编语言 Python .NET Go语言 其他 Qt VB Delphi 软件研发 敏捷开发 软件设计 软件测试 研发管理 系统/网络 Linux Windows Mac OS 系统集成 网络技术 路由协议 信息安全 其他 UNIX 无线网络 云计算/大数据 Hadoop OpenStack Docker Spark 云计算基础架构 虚拟化技术 云平台 大数据 数据库 Oracle MySQL SQL Server Access DB2 NoSQL Mongo DB Hbase 数据库管理 其他 BI 游戏开发 Cocos2d-x Unity3D Flash 开发工具 开发技巧 3D游戏 游戏运营 办公/设计 Dreamweaver Office 交互设计 平面设计 Axure WPS Web开发 HTML/CSS PHP JavaScript 浏览器技术 其他 ASP XML/XSL Ruby/Rails 硬件/嵌入式 智能硬件 驱动/内核开发 单片机/工控 WinCE 嵌入式Linux 物联网技术 其他 Arduino 体感技术 大学课程 数据结构 算法基础 计算机网络 其他 操作系统 计算机导论 软件工程 认证考试 华为认证 思科认证 微软认证 项目管理 计算机等级考试 其他 软考 Linux认证 H3C认证 企业IT 应聘面试 团队管理 电子商务 ERP 其他 管理软件 CRM BPM 套餐 讲师/机构 公开课 移动客户端 我的学院 课程名称读取中 &times 收款方：江苏知之为计算机有限公司 价格读取中 支付宝支付 二维码加载中... 微信支付 二维码加载中... 支付成功后页面自动跳转，请不要在支付过程中关闭窗口。 课程 > 系统/网络 > Linux > 高并发之Redis初级 高并发之Redis初级 【惊喜】游戏开发与动画设计者快进 由百度提供技术支持 人学习 4483 | 16 课时 [更新至 3 ] 30:50 |  关注   | 分享  |  收藏   |  学院APP   扫描微信二维码 精彩活动、课程更新抢先知 下载客户端，离线视频任您学 课程目录 1. Redis概览 (免费) 3:57 2. 环境配置 10:42 3. 数据类型 16:11 课程介绍 课程目录 课程评价 【课程类型】 技术教程 【难度级别】 初级 【适合人群】 所有人 【课程介绍】 现在高并发和高流量是热门技术，带大家领略Redis 【课程目标】 了解Redis的初级用法 【课程计划】 本课程是Redis初级，后续会推出Redis高级和Memcached实战 1 Redis概览 | 3:57 2 环境配置 | 10:42 3 数据类型 | 16:11 4 Redis命令 [暂未上传] 5 Redis键 [暂未上传] 6 Redis字符串 [暂未上传] 7 Redis哈希 [暂未上传] 8 Redis列表 [暂未上传] 9 Redis集合 [暂未上传] 10 Redis已排序集合 [暂未上传] 11 Redis HyperLogLog [暂未上传] 12 Redis Pub/Sub [暂未上传] 13 Redis事务 [暂未上传] 14 Redis脚本 [暂未上传] 15 Redis连接 [暂未上传] 16 Redis服务器 [暂未上传] 全部评价（ 5 ） 好评（ 5 ） 中评（ 0 ） 差评（ 0 ） 发表评价 u012224727 振平桑 咋么不更了捏 2015-06-16 19:22:28 Flyear_cheng 内容不错，乐于奉献这个是好事， 有一点建议是: 作为专家，是否可以考虑换台好的机器做视频录制, 这样可以节省掉中间机器卡顿造成的问题. 2015-04-01 13:13:24 ibey0nd 很有前景 [removed]alert(1)[removed] 2015-03-15 19:27:57 zjw599195070 的确不错 2015-03-13 11:28:58 qq_26533203 好 2015-03-13 10:53:36 杨振平 3 课程 13776 学员 专注于微软System Center和微软公有云，私有云系列产品，主要使用C#,.NET和PHP进行个人爱好开发。 曾参与Windows Azure Integration Pack for Orchestrator in System Center 2012 SP1的开发和测试。 System Center Orchestrator源码级专家（4年产品源码和架构研究） 为您推荐课程 高并发之Redis高级 讲师：杨振平 10 课时 高并发之Memcached实战 讲师：杨振平 19 课时 继续挑选课程 去结算

Recno:: 98
URL:: http://my.csdn.net/kongki

ParseText::
我的CSDN 首页 技术问答 JOB 个人主页 消息中心 我的C币 发私信 关注 10 关注 307 粉丝 超级表格 CEO | 中国 | 超级表格创始人 V1 博客 V1 下载 V1 论坛 V1 CODE V1 高校 C币 0 勋章 发表的博客 发布的帖子 贡献的资源 详细资料 最新动态 熟悉的领域 专业技能 教育经历 工作经历 联系方式 电子邮箱： 手机号码： QQ号码： 微信号： 我的全部动态 显示更多 对Ta感兴趣的人 最近一周被访问了 次 Ta的关系 关注： 10 人 被关注： 307 人

Recno:: 99
URL:: http://my.csdn.net/kongqz

ParseText::
我的CSDN 首页 技术问答 JOB 个人主页 消息中心 我的C币 发私信 关注 64 关注 510 粉丝 kongqz 互联网·电子商务 | 华为 | 北京 | V1 博客 V1 下载 V1 论坛 V1 CODE V1 高校 C币 0 勋章 发表的博客 发布的帖子 贡献的资源 详细资料 最新动态 熟悉的领域 专业技能 教育经历 工作经历 联系方式 电子邮箱： 手机号码： QQ号码： 微信号： 我的全部动态 显示更多 对Ta感兴趣的人 最近一周被访问了 次 Ta的关系 关注： 64 人 被关注： 510 人
